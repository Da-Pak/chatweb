{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\SentenceView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from './MessageInput';\nimport Message from './Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from './FloatingActionButton';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst SentenceView = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 문장 스레드를 자동 선택\n      const firstSentenceThread = threads.find(t => t.thread_type === 'sentence');\n      if (firstSentenceThread && !selectedThread) {\n        setSelectedThread(firstSentenceThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n  const handleSendMessage = async message => {\n    if (!selectedThread) return false;\n    setIsLoading(true);\n    try {\n      const response = await chatApi.chatWithThread({\n        thread_id: selectedThread.id,\n        user_message: message\n      });\n      if (response.data && response.data.response) {\n        // 스레드 업데이트\n        const updatedThreads = localThreads.map(t => t.id === selectedThread.id ? {\n          ...t,\n          messages: [...t.messages, {\n            role: 'user',\n            content: message,\n            timestamp: new Date().toISOString()\n          }, response.data.response],\n          updated_at: new Date().toISOString()\n        } : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n\n        // 선택된 스레드 업데이트\n        const updatedThread = updatedThreads.find(t => t.id === selectedThread.id);\n        if (updatedThread) {\n          setSelectedThread(updatedThread);\n        }\n        setIsLoading(false);\n        return true;\n      } else {\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // TODO: 메시지 수정 기능 구현\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    setMemos(prev => ({\n      ...prev,\n      [sentenceId]: memo\n    }));\n  };\n  const handleDeleteMemo = async sentenceId => {\n    setMemos(prev => {\n      const newMemos = {\n        ...prev\n      };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n  const handlePersonAction = async () => {\n    if (onSwitchToMode) {\n      onSwitchToMode('proceed');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 새로운 문장 생성\n    if (!selectedThread || selectedThread.messages.length === 0) return;\n    setIsLoading(true);\n    try {\n      // 현재 스레드의 최신 assistant 메시지를 기반으로 새로운 문장 생성\n      const latestAssistantMessage = [...selectedThread.messages].reverse().find(msg => msg.role === 'assistant');\n      if (latestAssistantMessage) {\n        const response = await chatApi.generateSentence({\n          persona_id: personaId,\n          interpretation_content: latestAssistantMessage.content\n        });\n        if (response.data && response.data.sentence_content) {\n          showCopyToast('새로운 문장이 생성되었습니다');\n\n          // 스레드 목록 새로고침\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n\n              // 새로 생성된 문장 스레드 선택\n              const newSentenceThread = updatedThreads.filter(t => t.thread_type === 'sentence').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              if (newSentenceThread) {\n                setSelectedThread(newSentenceThread);\n              }\n            }\n          } catch (refreshError) {\n            console.error('스레드 새로고침 실패:', refreshError);\n          }\n        } else {\n          showCopyToast('문장 생성에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('문장 생성 오류:', error);\n      showCopyToast('문장 생성 중 오류가 발생했습니다');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    // TODO: 메뉴 액션 구현\n    showCopyToast(`${action} 기능이 실행되었습니다`);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 331,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCDD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 339,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 340,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 338,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#4caf50',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#4caf50\",\n          customMessage: \"\\uBB38\\uC7A5\\uC744 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 399,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 336,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading || !selectedThread,\n          placeholder: `${personaName}에게 문장에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 408,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 407,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: sentenceContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 330,\n    columnNumber: 5\n  }, this);\n};\n_s(SentenceView, \"EbCB/tyxI5Zm8f3niCoWh3LJrFc=\");\n_c7 = SentenceView;\nexport default SentenceView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"SentenceView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","SentenceView","personaId","personaName","sentenceContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","sentenceThreads","filter","thread","thread_type","firstSentenceThread","find","t","current","scrollTop","scrollHeight","messages","handleSendMessage","message","response","chatWithThread","thread_id","id","user_message","data","updatedThreads","map","role","content","timestamp","Date","toISOString","updated_at","updatedThread","error","console","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","handleDeleteMemo","newMemos","handleSunAction","handlePersonAction","handleDocumentAction","length","latestAssistantMessage","reverse","msg","generateSentence","persona_id","interpretation_content","sentence_content","threadsResponse","getPersonaThreads","newSentenceThread","sort","a","b","created_at","getTime","refreshError","handleMenuAction","action","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","undefined","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","onMenuAction","currentInterpretation","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/SentenceView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from './MessageInput';\nimport Message from './Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from './FloatingActionButton';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport { TrainingThread } from '../types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface SentenceViewProps {\n  personaId: string;\n  personaName: string;\n  sentenceContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst SentenceView: React.FC<SentenceViewProps> = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 문장 스레드를 자동 선택\n      const firstSentenceThread = threads.find(t => t.thread_type === 'sentence');\n      if (firstSentenceThread && !selectedThread) {\n        setSelectedThread(firstSentenceThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    if (!selectedThread) return false;\n\n    setIsLoading(true);\n    try {\n      const response = await chatApi.chatWithThread({\n        thread_id: selectedThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.response) {\n        // 스레드 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id \n            ? {\n                ...t,\n                messages: [...t.messages, \n                  {\n                    role: 'user' as const,\n                    content: message,\n                    timestamp: new Date().toISOString()\n                  },\n                  response.data!.response\n                ],\n                updated_at: new Date().toISOString()\n              }\n            : t\n        );\n        \n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        // 선택된 스레드 업데이트\n        const updatedThread = updatedThreads.find(t => t.id === selectedThread.id);\n        if (updatedThread) {\n          setSelectedThread(updatedThread);\n        }\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // TODO: 메시지 수정 기능 구현\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    setMemos(prev => ({ ...prev, [sentenceId]: memo }));\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    setMemos(prev => {\n      const newMemos = { ...prev };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n\n  const handlePersonAction = async () => {\n    if (onSwitchToMode) {\n      onSwitchToMode('proceed');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 새로운 문장 생성\n    if (!selectedThread || selectedThread.messages.length === 0) return;\n    \n    setIsLoading(true);\n    try {\n      // 현재 스레드의 최신 assistant 메시지를 기반으로 새로운 문장 생성\n      const latestAssistantMessage = [...selectedThread.messages]\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n      if (latestAssistantMessage) {\n        const response = await chatApi.generateSentence({\n          persona_id: personaId,\n          interpretation_content: latestAssistantMessage.content\n        });\n\n        if (response.data && response.data.sentence_content) {\n          showCopyToast('새로운 문장이 생성되었습니다');\n          \n          // 스레드 목록 새로고침\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 문장 스레드 선택\n              const newSentenceThread = updatedThreads\n                .filter(t => t.thread_type === 'sentence')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n              if (newSentenceThread) {\n                setSelectedThread(newSentenceThread);\n              }\n            }\n          } catch (refreshError) {\n            console.error('스레드 새로고침 실패:', refreshError);\n          }\n        } else {\n          showCopyToast('문장 생성에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('문장 생성 오류:', error);\n      showCopyToast('문장 생성 중 오류가 발생했습니다');\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\n    // TODO: 메뉴 액션 구현\n    showCopyToast(`${action} 기능이 실행되었습니다`);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>📝</div>\n              <div>문장에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#4caf50',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#4caf50\"\n              customMessage=\"문장을 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading || !selectedThread}\n            placeholder={`${personaName}에게 문장에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={sentenceContent}\n      />\n    </Container>\n  );\n};\n\nexport default SentenceView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}