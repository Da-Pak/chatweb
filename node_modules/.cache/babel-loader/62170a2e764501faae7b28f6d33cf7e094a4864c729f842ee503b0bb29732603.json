{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\InterpretationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst InterpretationSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\nconst InterpretationTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\nconst InterpretationContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\nconst NewInterpretationButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst InterpretationView = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n  selectedThread\n}) => {\n  _s();\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트) - 나아가기와 동일한 방식으로 수정\n  const loadThreadSentenceData = async () => {\n    // selectedThread가 있으면 해당 스레드 ID 사용, 없으면 기본 스레드 ID 사용\n    const threadId = (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id) || (personaId ? `interpretation_${personaId}` : null);\n    if (!threadId) {\n      console.warn('threadId가 없어서 데이터 로딩을 건너뜁니다');\n      return;\n    }\n    try {\n      console.log('=== 해석 스레드 데이터 로딩 시작 ===');\n      console.log('personaId:', personaId);\n      console.log('selectedThread:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n      console.log('사용할 스레드 ID:', threadId);\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('API 응답 데이터:', data);\n\n      // 메모 설정\n      if (data.memos && Object.keys(data.memos).length > 0) {\n        setMemos(data.memos);\n        console.log('해석 메모 설정됨:', Object.keys(data.memos).length, '개');\n        console.log('메모 상세:', data.memos);\n      } else {\n        setMemos({});\n        console.log('해석 메모 없음');\n      }\n\n      // 하이라이트 설정\n      if (data.highlights && data.highlights.length > 0) {\n        const highlightSet = new Set(data.highlights);\n        setHighlightedSentences(highlightSet);\n        console.log('해석 하이라이트 설정됨:', data.highlights.length, '개');\n        console.log('하이라이트 상세:', data.highlights);\n        console.log('생성된 Set:', Array.from(highlightSet));\n      } else {\n        setHighlightedSentences(new Set());\n        console.log('해석 하이라이트 없음');\n      }\n      console.log('=== 해석 스레드 데이터 로딩 완료 ===');\n      console.log('최종 메모 상태:', Object.keys(memos).length);\n      console.log('최종 하이라이트 상태:', highlightedSentences.size);\n    } catch (error) {\n      console.error('=== 해석 스레드 문장 데이터 로딩 실패 ===', error);\n      console.error('오류 세부사항:', {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined\n      });\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n  useEffect(() => {\n    loadThreadSentenceData();\n  }, [personaId, selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id]); // personaId나 selectedThread가 변경될 때마다 데이터 새로 로딩\n\n  // 컴포넌트가 다시 포커스될 때마다 데이터 리로딩 (해석 모드로 다시 돌아올 때)\n  useEffect(() => {\n    const handleFocus = () => {\n      const threadId = (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id) || (personaId ? `interpretation_${personaId}` : null);\n      if (threadId) {\n        console.log('해석 뷰 포커스 감지 - 데이터 리로딩');\n        loadThreadSentenceData();\n      }\n    };\n    window.addEventListener('focus', handleFocus);\n    document.addEventListener('visibilitychange', handleFocus);\n\n    // 컴포넌트 마운트 시에도 한번 실행\n    const threadId = (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id) || (personaId ? `interpretation_${personaId}` : null);\n    if (threadId) {\n      loadThreadSentenceData();\n    }\n    return () => {\n      window.removeEventListener('focus', handleFocus);\n      document.removeEventListener('visibilitychange', handleFocus);\n    };\n  }, [personaId, selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id]); // personaId나 selectedThread가 변경될 때만 이벤트 리스너 재설정\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 문장 텍스트 찾기\n      const [timestamp, messageIndex, sentenceIndex] = sentenceId.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      let sentenceText = '';\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceText = sentences[parseInt(sentenceIndex)] || '';\n      }\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지) - 저장고 자동 저장을 위한 추가 정보 포함\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo,\n        thread_id: `interpretation_${personaId}`,\n        thread_type: 'interpretation',\n        sentence_content: sentenceText,\n        source_message_id: `interpretation_${personaId}_${sentenceId}`\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          if (!personaId) {\n            showCopyToast('페르소나 ID를 찾을 수 없습니다');\n            return;\n          }\n\n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates = [];\n          const highlightColors = [];\n          const memoContents = [];\n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `interpretation_${personaId}`,\n            source_conversation_id: `interpretation_${personaId}`,\n            source_thread_id: `interpretation_${personaId}`,\n            source_thread_type: 'interpretation',\n            source_sentence_ids: selectedIds,\n            tags: ['interpretation', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n\n          // 백엔드에 하이라이트도 저장 (나아가기와 동일한 로직)\n          const threadId = `interpretation_${personaId}`;\n          for (const sentenceId of selectedIds) {\n            try {\n              await sentenceApi.createHighlight({\n                sentence_id: sentenceId,\n                thread_id: threadId,\n                thread_type: 'interpretation'\n              });\n            } catch (error) {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n            }\n          }\n\n          // 성공 시 로컬 상태 업데이트 (나아가기와 동일한 방식)\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n\n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [bottomSentenceId]: ''\n          }));\n\n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 메모 저장 (가장 아래 문장만) - 저장고 자동 저장을 위한 추가 정보 포함\n          const bottomSentenceText = selectedTexts[selectedIds.indexOf(bottomSentenceId)] || '';\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: '',\n            thread_id: `interpretation_${personaId}`,\n            thread_type: 'interpretation',\n            sentence_content: bottomSentenceText,\n            source_message_id: `interpretation_${personaId}_${bottomSentenceId}`\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n\n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          const threadId = `interpretation_${personaId}`;\n          selectedIds.forEach(id => {\n            sentenceApi.createHighlight({\n              sentence_id: id,\n              thread_id: threadId,\n              thread_type: 'interpretation'\n            }).catch(error => {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n            });\n          });\n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      case 'highlight':\n        if (selectedIds.length > 0 && personaId) {\n          try {\n            console.log('=== 해석 하이라이트 토글 시작 ===');\n            console.log('personaId:', personaId);\n            console.log('선택된 문장들:', selectedIds);\n\n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            const threadId = `interpretation_${personaId}`;\n            console.log('사용할 스레드 ID:', threadId);\n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n\n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n\n              // 백엔드에서 모든 하이라이트 삭제\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 삭제 중:', id);\n                  await sentenceApi.deleteHighlight(id);\n                  console.log('하이라이트 삭제 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', id, error);\n                }\n              }\n              console.log('모든 선택된 문장의 하이라이트 제거 완료');\n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n\n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n\n              // 백엔드에 모든 하이라이트 저장\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 저장 중:', id);\n                  const saveRequest = {\n                    sentence_id: id,\n                    thread_id: threadId,\n                    thread_type: 'interpretation'\n                  };\n                  console.log('하이라이트 저장 요청:', saveRequest);\n                  const response = await sentenceApi.createHighlight(saveRequest);\n                  console.log('하이라이트 저장 응답:', response);\n                  console.log('하이라이트 저장 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', id, error);\n                }\n              }\n              console.log('모든 선택된 문장에 하이라이트 추가 완료');\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n            console.log('=== 해석 하이라이트 토글 완료 ===');\n          } catch (error) {\n            console.error('=== 해석 하이라이트 토글 실패 ===', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        } else {\n          console.warn('선택된 문장이 없거나 personaId가 없습니다:', {\n            selectedIds,\n            personaId\n          });\n          showCopyToast('선택된 문장이 없습니다');\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async messageContent => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    console.log('messageContent:', messageContent.substring(0, 100) + '...');\n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    if (!messageContent) {\n      console.error('저장할 메시지 내용이 없습니다');\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: messageContent.length,\n        contentPreview: messageContent.substring(0, 100) + '...'\n      });\n\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      console.log('API 응답:', response);\n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    console.log('=== handleSunAction 완료 ===');\n  };\n  const handlePersonAction = async messageContent => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async messageContent => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 759,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCAC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 767,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 768,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 769,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 13\n        }, this) : messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 776,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#6c757d',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 792,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#6c757d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 827,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 764,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: onSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 해석에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: interpretation,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: messages,\n          onRefreshThreads: onRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 835,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 834,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 763,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: interpretation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 853,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 758,\n    columnNumber: 5\n  }, this);\n};\n_s(InterpretationView, \"syHWQLonOBhaiA6+sIMmsXwPWsY=\");\n_c7 = InterpretationView;\nexport default InterpretationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"InterpretationView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","InterpretationSection","InterpretationTitle","h2","InterpretationContent","NewInterpretationButton","button","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","InterpretationView","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","onRefreshThreads","selectedThread","_s","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","loadThreadSentenceData","threadId","id","console","warn","log","data","getThreadSentenceData","Object","keys","length","highlights","highlightSet","Array","from","size","error","message","Error","String","stack","undefined","handleFocus","window","addEventListener","document","removeEventListener","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","textArea","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","timestamp","sentenceIndex","split","find","m","sentenceText","sentences","content","map","s","trim","filter","parseInt","createOrUpdateMemo","sentence_id","thread_id","thread_type","sentence_content","source_message_id","catch","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","action","selectedIds","selectedTexts","formattedText","join","insertText","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","push","saveSentencesToVault","source_conversation_id","source_thread_id","source_thread_type","source_sentence_ids","tags","highlight_states","highlight_colors","memo_contents","createHighlight","sortedIds","sort","a","b","timestampA","sentenceIndexA","timestampB","sentenceIndexB","Date","getTime","bottomSentenceId","forEach","bottomSentenceText","indexOf","currentlyHighlighted","notHighlighted","deleteHighlight","saveRequest","response","handleToggleSentenceMode","handleSunAction","substring","contentLength","contentPreview","chatApi","saveCurrentAsInterpretation","persona_id","handlePersonAction","saveCurrentAsProceed","handleDocumentAction","saveCurrentAsSentence","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","fontSize","marginBottom","marginTop","index","role","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n  onRefreshThreads?: () => void;\n  selectedThread?: TrainingThread | null;  // 선택된 해석 스레드 추가\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst InterpretationSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\n\nconst InterpretationTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst InterpretationContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\n\nconst NewInterpretationButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n  selectedThread,\n}) => {\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트) - 나아가기와 동일한 방식으로 수정\n  const loadThreadSentenceData = async () => {\n    // selectedThread가 있으면 해당 스레드 ID 사용, 없으면 기본 스레드 ID 사용\n    const threadId = selectedThread?.id || (personaId ? `interpretation_${personaId}` : null);\n    \n    if (!threadId) {\n      console.warn('threadId가 없어서 데이터 로딩을 건너뜁니다');\n      return;\n    }\n    \n    try {\n      console.log('=== 해석 스레드 데이터 로딩 시작 ===');\n      console.log('personaId:', personaId);\n      console.log('selectedThread:', selectedThread?.id);\n      console.log('사용할 스레드 ID:', threadId);\n      \n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('API 응답 데이터:', data);\n      \n      // 메모 설정\n      if (data.memos && Object.keys(data.memos).length > 0) {\n        setMemos(data.memos);\n        console.log('해석 메모 설정됨:', Object.keys(data.memos).length, '개');\n        console.log('메모 상세:', data.memos);\n      } else {\n        setMemos({});\n        console.log('해석 메모 없음');\n      }\n      \n      // 하이라이트 설정\n      if (data.highlights && data.highlights.length > 0) {\n        const highlightSet = new Set(data.highlights);\n        setHighlightedSentences(highlightSet);\n        console.log('해석 하이라이트 설정됨:', data.highlights.length, '개');\n        console.log('하이라이트 상세:', data.highlights);\n        console.log('생성된 Set:', Array.from(highlightSet));\n      } else {\n        setHighlightedSentences(new Set());\n        console.log('해석 하이라이트 없음');\n      }\n      \n      console.log('=== 해석 스레드 데이터 로딩 완료 ===');\n      console.log('최종 메모 상태:', Object.keys(memos).length);\n      console.log('최종 하이라이트 상태:', highlightedSentences.size);\n      \n    } catch (error) {\n      console.error('=== 해석 스레드 문장 데이터 로딩 실패 ===', error);\n      console.error('오류 세부사항:', {\n        message: error instanceof Error ? error.message : String(error),\n        stack: error instanceof Error ? error.stack : undefined\n      });\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  useEffect(() => {\n    loadThreadSentenceData();\n  }, [personaId, selectedThread?.id]); // personaId나 selectedThread가 변경될 때마다 데이터 새로 로딩\n\n  // 컴포넌트가 다시 포커스될 때마다 데이터 리로딩 (해석 모드로 다시 돌아올 때)\n  useEffect(() => {\n    const handleFocus = () => {\n      const threadId = selectedThread?.id || (personaId ? `interpretation_${personaId}` : null);\n      if (threadId) {\n        console.log('해석 뷰 포커스 감지 - 데이터 리로딩');\n        loadThreadSentenceData();\n      }\n    };\n\n    window.addEventListener('focus', handleFocus);\n    document.addEventListener('visibilitychange', handleFocus);\n\n    // 컴포넌트 마운트 시에도 한번 실행\n    const threadId = selectedThread?.id || (personaId ? `interpretation_${personaId}` : null);\n    if (threadId) {\n      loadThreadSentenceData();\n    }\n\n    return () => {\n      window.removeEventListener('focus', handleFocus);\n      document.removeEventListener('visibilitychange', handleFocus);\n    };\n  }, [personaId, selectedThread?.id]); // personaId나 selectedThread가 변경될 때만 이벤트 리스너 재설정\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 문장 텍스트 찾기\n      const [timestamp, messageIndex, sentenceIndex] = sentenceId.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      let sentenceText = '';\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceText = sentences[parseInt(sentenceIndex)] || '';\n      }\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지) - 저장고 자동 저장을 위한 추가 정보 포함\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo,\n        thread_id: `interpretation_${personaId}`,\n        thread_type: 'interpretation',\n        sentence_content: sentenceText,\n        source_message_id: `interpretation_${personaId}_${sentenceId}`\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          if (!personaId) {\n            showCopyToast('페르소나 ID를 찾을 수 없습니다');\n            return;\n          }\n          \n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `interpretation_${personaId}`,\n            source_conversation_id: `interpretation_${personaId}`,\n            source_thread_id: `interpretation_${personaId}`,\n            source_thread_type: 'interpretation',\n            source_sentence_ids: selectedIds,\n            tags: ['interpretation', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          // 백엔드에 하이라이트도 저장 (나아가기와 동일한 로직)\n          const threadId = `interpretation_${personaId}`;\n          for (const sentenceId of selectedIds) {\n            try {\n              await sentenceApi.createHighlight({\n                sentence_id: sentenceId,\n                thread_id: threadId,\n                thread_type: 'interpretation'\n              });\n            } catch (error) {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n            }\n          }\n          \n          // 성공 시 로컬 상태 업데이트 (나아가기와 동일한 방식)\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          \n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만) - 저장고 자동 저장을 위한 추가 정보 포함\n          const bottomSentenceText = selectedTexts[selectedIds.indexOf(bottomSentenceId)] || '';\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: '',\n            thread_id: `interpretation_${personaId}`,\n            thread_type: 'interpretation',\n            sentence_content: bottomSentenceText,\n            source_message_id: `interpretation_${personaId}_${bottomSentenceId}`\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          const threadId = `interpretation_${personaId}`;\n          selectedIds.forEach(id => {\n            sentenceApi.createHighlight({\n              sentence_id: id,\n              thread_id: threadId,\n              thread_type: 'interpretation'\n            }).catch(error => {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n          });\n        });\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        if (selectedIds.length > 0 && personaId) {\n          try {\n            console.log('=== 해석 하이라이트 토글 시작 ===');\n            console.log('personaId:', personaId);\n            console.log('선택된 문장들:', selectedIds);\n            \n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            \n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            \n            const threadId = `interpretation_${personaId}`;\n            console.log('사용할 스레드 ID:', threadId);\n            \n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n              \n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n              \n              // 백엔드에서 모든 하이라이트 삭제\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 삭제 중:', id);\n                  await sentenceApi.deleteHighlight(id);\n                  console.log('하이라이트 삭제 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', id, error);\n                }\n              }\n              \n              console.log('모든 선택된 문장의 하이라이트 제거 완료');\n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n              \n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n              \n              // 백엔드에 모든 하이라이트 저장\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 저장 중:', id);\n                  const saveRequest = {\n                    sentence_id: id,\n                    thread_id: threadId,\n                    thread_type: 'interpretation'\n                  };\n                  console.log('하이라이트 저장 요청:', saveRequest);\n                  \n                  const response = await sentenceApi.createHighlight(saveRequest);\n                  console.log('하이라이트 저장 응답:', response);\n                  console.log('하이라이트 저장 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', id, error);\n                }\n              }\n              \n              console.log('모든 선택된 문장에 하이라이트 추가 완료');\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n            \n            console.log('=== 해석 하이라이트 토글 완료 ===');\n          } catch (error) {\n            console.error('=== 해석 하이라이트 토글 실패 ===', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        } else {\n          console.warn('선택된 문장이 없거나 personaId가 없습니다:', { selectedIds, personaId });\n          showCopyToast('선택된 문장이 없습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    console.log('messageContent:', messageContent.substring(0, 100) + '...');\n    \n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    \n    if (!messageContent) {\n      console.error('저장할 메시지 내용이 없습니다');\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: messageContent.length,\n        contentPreview: messageContent.substring(0, 100) + '...'\n      });\n      \n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      \n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      console.log('API 응답:', response);\n      \n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    console.log('=== handleSunAction 완료 ===');\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\n              <div>해석에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#6c757d',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#6c757d\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={onSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 해석에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={interpretation}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={messages}\n            onRefreshThreads={onRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={interpretation}\n      />\n    </Container>\n  );\n};\n\nexport default InterpretationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}