{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\core\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState(null);\n\n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n\n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState(null);\n\n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n\n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState(null);\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = itemId => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n\n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualItemId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = itemId => {\n    setSelectedConversationItem(itemId);\n\n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId !== null && itemId !== void 0 && itemId.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러\n  const handleNavigateToPersona = (personaId, mode) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n\n    // 해석 모드로 이동해야 하는지 확인\n    const shouldNavigateToInterpretation = sessionStorage.getItem('navigateToInterpretationMode');\n    if (shouldNavigateToInterpretation === 'true') {\n      sessionStorage.removeItem('navigateToInterpretationMode'); // 사용 후 제거\n      setSelectedConversationItem('interpretation');\n    } else if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId, mode, selectedSentence) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n\n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId, threadType) => {\n    console.log('=== 저장고에서 스레드로 이동 ===');\n    console.log('threadId:', threadId);\n    console.log('threadType:', threadType);\n\n    // 언어화 스레드인 경우\n    if (threadType === 'verbalization') {\n      console.log('언어화 스레드로 이동');\n      setSelectedPersonaItem('verbalization');\n      setIsConversationSidebarCollapsed(false);\n\n      // 해당 스레드를 찾아서 선택\n      const loadAndSelectThread = async () => {\n        try {\n          const response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            const targetThread = response.data.find(thread => thread.id === threadId);\n            if (targetThread) {\n              console.log('타겟 언어화 스레드 찾음:', targetThread.id);\n              setSelectedVerbalizationThread(targetThread);\n              setVerbalizationThreads(response.data);\n            } else {\n              console.warn('타겟 언어화 스레드를 찾을 수 없음:', threadId);\n              // 폴백: 첫 번째 스레드 선택\n              if (response.data.length > 0) {\n                setSelectedVerbalizationThread(response.data[0]);\n                setVerbalizationThreads(response.data);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('언어화 스레드 로딩 오류:', error);\n        }\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      };\n      loadAndSelectThread();\n      return;\n    }\n\n    // 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n    const isLegacyInterpretationId = threadId.startsWith('interpretation_') && !threadId.includes('-');\n    if (isLegacyInterpretationId) {\n      console.log('구형 해석 ID 감지:', threadId);\n\n      // 페르소나 ID 추출 (interpretation_ 이후 부분)\n      const personaId = threadId.replace('interpretation_', '');\n      console.log('추출된 페르소나 ID:', personaId);\n      const persona = personas[personaId];\n      if (persona) {\n        console.log('페르소나 찾음:', persona.name);\n\n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 페르소나 선택 및 기본 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        console.log('구형 해석 ID로 페르소나 모드 전환 완료');\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        return;\n      } else {\n        console.error('페르소나를 찾을 수 없음:', personaId);\n        alert('해당 페르소나를 찾을 수 없습니다.');\n        return;\n      }\n    }\n\n    // 해석 타입인 경우 특별 처리\n    if (threadType === 'interpretation') {\n      console.log('해석 타입 스레드 처리:', threadId);\n\n      // 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\n      const extractPersonaIdFromThreadId = id => {\n        // interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\n        const parts = id.split('_');\n        if (parts.length >= 2 && parts[0] === 'interpretation') {\n          return parts[1]; // 페르소나 ID 부분\n        }\n        return null;\n      };\n      const personaId = extractPersonaIdFromThreadId(threadId);\n      if (personaId && personas[personaId]) {\n        const persona = personas[personaId];\n        console.log('해석 스레드용 페르소나 찾음:', persona.name);\n\n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 페르소나 선택 및 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        console.log('해석 모드로 이동 완료');\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        return;\n      } else {\n        console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:', threadId);\n        // 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n      }\n    }\n\n    // 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\n    const loadAndNavigateToTrainingThread = async () => {\n      try {\n        console.log('훈습 스레드 정보 로딩 중...');\n\n        // 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\n        let foundThread = null;\n        let foundPersonaId = null;\n        for (const personaId of Object.keys(personas)) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const targetThread = threadsResponse.data.find(thread => thread.id === threadId);\n              if (targetThread) {\n                console.log('스레드를 찾음:', targetThread.id, 'in persona:', personaId);\n                foundThread = targetThread;\n                foundPersonaId = personaId;\n                break;\n              }\n            }\n          } catch (error) {\n            console.warn(`페르소나 ${personaId}의 스레드 로딩 실패:`, error);\n          }\n        }\n        if (!foundThread || !foundPersonaId) {\n          console.error('해당 스레드를 찾을 수 없음:', threadId);\n          alert('해당 스레드를 찾을 수 없습니다.');\n          return;\n        }\n        const persona = personas[foundPersonaId];\n        console.log('찾은 페르소나:', persona.name);\n\n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[foundPersonaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: foundPersonaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 페르소나 선택 및 해당 스레드로 이동\n        selectPersona(foundPersonaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n        console.log('훈습 스레드로 이동 완료:', `${threadType}-thread-${threadId}`);\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      } catch (error) {\n        console.error('훈습 스레드 로딩 오류:', error);\n        alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');\n      }\n    };\n    loadAndNavigateToTrainingThread();\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId, interpretation) => {\n    const persona = personas[personaId];\n\n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n\n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: (persona === null || persona === void 0 ? void 0 : persona.name) || '',\n      content: interpretation,\n      messages: [{\n        role: 'assistant',\n        content: interpretation,\n        timestamp: new Date().toISOString()\n      }]\n    });\n\n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async message => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택되었는지 확인\n    const isInterpretationThread = selectedConversationItem === null || selectedConversationItem === void 0 ? void 0 : selectedConversationItem.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant',\n            content: response.data.response.content,\n            timestamp: new Date().toISOString(),\n            persona_id: response.data.response.persona_id,\n            persona_name: response.data.response.persona_name\n          };\n\n          // 현재 해석 상태의 메시지에 추가하지 않고, \n          // ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\n          setIsInterpretationLoading(false);\n\n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅 (기존 로직)\n        console.log('기본 해석 기반 채팅');\n\n        // 사용자 메시지를 currentInterpretation에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage]\n        } : null);\n        const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, message);\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant',\n            content: response.data.response,\n            timestamp: response.data.timestamp\n          };\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, assistantMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n          return true;\n        } else {\n          // API 호출 실패 시 폴백\n          console.error('해석 기반 채팅 API 실패:', response.error);\n          const fallbackMessage = {\n            role: 'assistant',\n            content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n            timestamp: new Date().toISOString()\n          };\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, fallbackMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n\n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant',\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString()\n      };\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage]\n      } : null);\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = updatedInterpretation => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = updatedConversation => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = mode => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread, personaId) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n\n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || []\n        });\n\n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n\n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(thread => thread.id === selectedVerbalizationThread.id);\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread === null || selectedVerbalizationThread === void 0 ? void 0 : selectedVerbalizationThread.id;\n    await loadVerbalizationThreads();\n\n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find(thread => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n\n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async () => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n\n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n\n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data, ...prev]);\n\n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation || selectedPersonaItem === 'recent' || selectedPersonaItem === 'verbalization';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 867,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContainer, {\n      children: [/*#__PURE__*/_jsxDEV(PersonaSidebar, {\n        selectedItem: selectedPersonaItem,\n        onSelectItem: handleSelectPersonaItem,\n        isCollapsed: isPersonaSidebarCollapsed,\n        onToggle: shouldShowConversationSidebar ? undefined : togglePersonaSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 870,\n        columnNumber: 9\n      }, this), shouldShowConversationSidebar && /*#__PURE__*/_jsxDEV(ConversationSidebar, {\n        selectedItem: selectedConversationItem,\n        onSelectItem: handleSelectConversationItem,\n        isCollapsed: isConversationSidebarCollapsed,\n        onToggle: toggleConversationSidebar,\n        selectedPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName,\n        selectedPersonaId: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId,\n        refreshTrigger: conversationRefreshTrigger,\n        mode: selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona',\n        personas: selectedPersonaItem === 'recent' ? personas : undefined,\n        verbalizationThreads: selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined,\n        onSelectVerbalizationThread: selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined,\n        onRefreshTrigger: selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 11\n      }, this), selectedPersonaItem === 'vault' ? /*#__PURE__*/_jsxDEV(VaultView, {\n        personas: personas,\n        onNavigateToPersona: handleNavigateToPersona,\n        onNavigateToThread: handleNavigateToThread,\n        onNavigateToPersonaWithSentence: handleNavigateToPersonaWithSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 897,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatArea, {\n        selectedConversation: selectedConversation,\n        conversations: conversations,\n        personas: personas,\n        globalMessages: globalMessages,\n        isLoading: currentInterpretation ? isInterpretationLoading : isLoading,\n        error: error,\n        onSendInitialMessage: sendInitialMessage,\n        onContinueConversation: continueConversation,\n        onClearError: clearError,\n        selectedPersonaItem: selectedPersonaItem,\n        onSelectPersona: handlePersonaSelection,\n        onInterpretationComplete: handleInterpretationComplete,\n        selectedConversationItem: selectedConversationItem,\n        currentInterpretation: currentInterpretation,\n        onInterpretationMessage: handleInterpretationMessage,\n        onUpdateInterpretation: handleUpdateInterpretation,\n        onUpdateConversation: handleUpdateConversation,\n        onSwitchConversationMode: handleSwitchConversationMode,\n        onRefreshConversationSidebar: handleRefreshConversationSidebar,\n        recentInteractionsProps: {\n          personas,\n          onSelectPersona: handleRecentPersonaSelect,\n          onThreadSelect: handleRecentThreadSelect\n        },\n        verbalizationProps: {\n          selectedThread: selectedVerbalizationThread,\n          threads: verbalizationThreads,\n          onThreadUpdate: handleVerbalizationThreadUpdate,\n          onCreateNewThread: handleCreateNewVerbalizationThread\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 868,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"s/nMkTlVnWVLnO5s3c+NEbOhcTw=\", false, function () {\n  return [useChat];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useChat","ConversationSidebar","PersonaSidebar","VaultView","ChatArea","GlobalStyle","AppContainer","chatApi","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","isInterpretationLoading","setIsInterpretationLoading","interpretationStore","setInterpretationStore","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","console","log","handleNavigateToPersona","personaId","mode","persona","existingInterpretation","personaName","name","content","messages","role","timestamp","Date","toISOString","shouldNavigateToInterpretation","sessionStorage","getItem","removeItem","handleNavigateToPersonaWithSentence","selectedSentence","setItem","handleNavigateToThread","threadId","threadType","loadAndSelectThread","response","getVerbalizationThreads","data","targetThread","find","thread","id","warn","length","prev","isLegacyInterpretationId","startsWith","replace","alert","extractPersonaIdFromThreadId","parts","split","loadAndNavigateToTrainingThread","foundThread","foundPersonaId","Object","keys","threadsResponse","getPersonaThreads","handlePersonaSelection","handleInterpretationComplete","interpretation","handleInterpretationMessage","message","isInterpretationThread","selectedThreadId","userMessage","chatWithThread","thread_id","user_message","assistantMessage","persona_id","persona_name","chatWithInterpretation","fallbackMessage","errorMessage","handleUpdateInterpretation","updatedInterpretation","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","thread_type","interpretationContent","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","loadVerbalizationThreads","updatedSelectedThread","handleVerbalizationThreadUpdate","currentSelectedId","setTimeout","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","onNavigateToPersona","onNavigateToThread","onNavigateToPersonaWithSentence","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","onThreadSelect","verbalizationProps","selectedThread","threads","onThreadUpdate","onCreateNewThread","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport TrainingCategoryView from '../training/components/TrainingCategoryView';\nimport InterpretationView from '../training/components/InterpretationView';\nimport RecentInteractionsView from '../shared/components/RecentInteractionsView';\nimport VerbalizationView from '../verbalization/components/VerbalizationView';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null>(null);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n  \n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualItemId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러\n  const handleNavigateToPersona = (personaId: string, mode: 'sentence') => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 해석 모드로 이동해야 하는지 확인\n    const shouldNavigateToInterpretation = sessionStorage.getItem('navigateToInterpretationMode');\n    if (shouldNavigateToInterpretation === 'true') {\n      sessionStorage.removeItem('navigateToInterpretationMode'); // 사용 후 제거\n      setSelectedConversationItem('interpretation');\n    } else if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId: string, mode: 'sentence', selectedSentence: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId: string, threadType: string) => {\n    console.log('=== 저장고에서 스레드로 이동 ===');\n    console.log('threadId:', threadId);\n    console.log('threadType:', threadType);\n    \n    // 언어화 스레드인 경우\n    if (threadType === 'verbalization') {\n      console.log('언어화 스레드로 이동');\n      setSelectedPersonaItem('verbalization');\n      setIsConversationSidebarCollapsed(false);\n      \n      // 해당 스레드를 찾아서 선택\n      const loadAndSelectThread = async () => {\n        try {\n          const response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            const targetThread = response.data.find((thread: TrainingThread) => thread.id === threadId);\n            if (targetThread) {\n              console.log('타겟 언어화 스레드 찾음:', targetThread.id);\n              setSelectedVerbalizationThread(targetThread);\n              setVerbalizationThreads(response.data);\n            } else {\n              console.warn('타겟 언어화 스레드를 찾을 수 없음:', threadId);\n              // 폴백: 첫 번째 스레드 선택\n              if (response.data.length > 0) {\n                setSelectedVerbalizationThread(response.data[0]);\n                setVerbalizationThreads(response.data);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('언어화 스레드 로딩 오류:', error);\n        }\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      };\n      \n      loadAndSelectThread();\n      return;\n    }\n    \n    // 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n    const isLegacyInterpretationId = threadId.startsWith('interpretation_') && !threadId.includes('-');\n    \n    if (isLegacyInterpretationId) {\n      console.log('구형 해석 ID 감지:', threadId);\n      \n      // 페르소나 ID 추출 (interpretation_ 이후 부분)\n      const personaId = threadId.replace('interpretation_', '');\n      console.log('추출된 페르소나 ID:', personaId);\n      \n      const persona = personas[personaId];\n      if (persona) {\n        console.log('페르소나 찾음:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 기본 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        \n        console.log('구형 해석 ID로 페르소나 모드 전환 완료');\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        return;\n      } else {\n        console.error('페르소나를 찾을 수 없음:', personaId);\n        alert('해당 페르소나를 찾을 수 없습니다.');\n        return;\n      }\n    }\n    \n    // 해석 타입인 경우 특별 처리\n    if (threadType === 'interpretation') {\n      console.log('해석 타입 스레드 처리:', threadId);\n      \n      // 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\n      const extractPersonaIdFromThreadId = (id: string): string | null => {\n        // interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\n        const parts = id.split('_');\n        if (parts.length >= 2 && parts[0] === 'interpretation') {\n          return parts[1];  // 페르소나 ID 부분\n        }\n        return null;\n      };\n      \n      const personaId = extractPersonaIdFromThreadId(threadId);\n      if (personaId && personas[personaId]) {\n        const persona = personas[personaId];\n        console.log('해석 스레드용 페르소나 찾음:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        \n        console.log('해석 모드로 이동 완료');\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        return;\n      } else {\n        console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:', threadId);\n        // 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n      }\n    }\n    \n    // 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\n    const loadAndNavigateToTrainingThread = async () => {\n      try {\n        console.log('훈습 스레드 정보 로딩 중...');\n        \n        // 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\n        let foundThread = null;\n        let foundPersonaId = null;\n        \n        for (const personaId of Object.keys(personas)) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const targetThread = threadsResponse.data.find(thread => thread.id === threadId);\n              if (targetThread) {\n                console.log('스레드를 찾음:', targetThread.id, 'in persona:', personaId);\n                foundThread = targetThread;\n                foundPersonaId = personaId;\n                break;\n              }\n            }\n          } catch (error) {\n            console.warn(`페르소나 ${personaId}의 스레드 로딩 실패:`, error);\n          }\n        }\n        \n        if (!foundThread || !foundPersonaId) {\n          console.error('해당 스레드를 찾을 수 없음:', threadId);\n          alert('해당 스레드를 찾을 수 없습니다.');\n          return;\n        }\n        \n        const persona = personas[foundPersonaId];\n        console.log('찾은 페르소나:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[foundPersonaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: foundPersonaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해당 스레드로 이동\n        selectPersona(foundPersonaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n        \n        console.log('훈습 스레드로 이동 완료:', `${threadType}-thread-${threadId}`);\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n      } catch (error) {\n        console.error('훈습 스레드 로딩 오류:', error);\n        alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');\n      }\n    };\n    \n    loadAndNavigateToTrainingThread();\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n    \n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: persona?.name || '',\n      content: interpretation,\n      messages: [\n        {\n          role: 'assistant',\n          content: interpretation,\n          timestamp: new Date().toISOString(),\n        }\n      ],\n    });\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택되었는지 확인\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString(),\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        \n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant' as const,\n            content: response.data.response.content,\n            timestamp: new Date().toISOString(),\n            persona_id: response.data.response.persona_id,\n            persona_name: response.data.response.persona_name,\n          };\n\n          // 현재 해석 상태의 메시지에 추가하지 않고, \n          // ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\n          setIsInterpretationLoading(false);\n          \n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅 (기존 로직)\n        console.log('기본 해석 기반 채팅');\n        \n        // 사용자 메시지를 currentInterpretation에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n\n      const response = await chatApi.chatWithInterpretation(\n        currentInterpretation.personaId,\n        message\n      );\n\n      if (response.data) {\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response,\n          timestamp: response.data.timestamp,\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, assistantMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return true;\n      } else {\n        // API 호출 실패 시 폴백\n        console.error('해석 기반 채팅 API 실패:', response.error);\n        const fallbackMessage = {\n          role: 'assistant' as const,\n          content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n          timestamp: new Date().toISOString(),\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, fallbackMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      \n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant' as const,\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString(),\n      };\n\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n      } : null);\n\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    \n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      \n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || [],\n        });\n        \n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        \n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n        \n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(\n            thread => thread.id === selectedVerbalizationThread.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 영역 - 저장고 모드일 때는 저장고 뷰, 그 외에는 채팅 영역 */}\n        {selectedPersonaItem === 'vault' ? (\n          <VaultView\n            personas={personas}\n            onNavigateToPersona={handleNavigateToPersona}\n            onNavigateToThread={handleNavigateToThread}\n            onNavigateToPersonaWithSentence={handleNavigateToPersonaWithSentence}\n          />\n        ) : (\n        <ChatArea\n          selectedConversation={selectedConversation}\n          conversations={conversations}\n          personas={personas}\n          globalMessages={globalMessages}\n          isLoading={currentInterpretation ? isInterpretationLoading : isLoading}\n          error={error}\n          onSendInitialMessage={sendInitialMessage}\n          onContinueConversation={continueConversation}\n          onClearError={clearError}\n          selectedPersonaItem={selectedPersonaItem}\n          onSelectPersona={handlePersonaSelection}\n          onInterpretationComplete={handleInterpretationComplete}\n          selectedConversationItem={selectedConversationItem}\n          currentInterpretation={currentInterpretation}\n          onInterpretationMessage={handleInterpretationMessage}\n          onUpdateInterpretation={handleUpdateInterpretation}\n          onUpdateConversation={handleUpdateConversation}\n          onSwitchConversationMode={handleSwitchConversationMode}\n          onRefreshConversationSidebar={handleRefreshConversationSidebar}\n            recentInteractionsProps={{\n              personas,\n              onSelectPersona: handleRecentPersonaSelect,\n              onThreadSelect: handleRecentThreadSelect,\n            }}\n            verbalizationProps={{\n              selectedThread: selectedVerbalizationThread,\n              threads: verbalizationThreads,\n              onThreadUpdate: handleVerbalizationThreadUpdate,\n              onCreateNewThread: handleCreateNewVerbalizationThread,\n            }}\n        />\n        )}\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}