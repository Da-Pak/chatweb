{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState}from'react';import{useChat}from'../shared/hooks/useChat';import ConversationSidebar from'../shared/components/ConversationSidebar';import PersonaSidebar from'../shared/components/PersonaSidebar';import ChatArea from'../shared/components/ChatArea';import{GlobalStyle,AppContainer}from'../shared/styles/GlobalStyle';import{chatApi}from'../shared/api/chatApi';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{const[isPersonaSidebarCollapsed,setIsPersonaSidebarCollapsed]=useState(false);const[isConversationSidebarCollapsed,setIsConversationSidebarCollapsed]=useState(false);const[selectedPersonaItem,setSelectedPersonaItem]=useState(null);const[selectedConversationItem,setSelectedConversationItem]=useState(null);// ConversationSidebar 새로고침 트리거\nconst[conversationRefreshTrigger,setConversationRefreshTrigger]=useState(0);// 해석 관련 상태\nconst[currentInterpretation,setCurrentInterpretation]=useState(null);// 해석 모드 전용 로딩 상태\nconst[isInterpretationLoading,setIsInterpretationLoading]=useState(false);// 해석 저장소 (실제로는 백엔드에서 관리)\nconst[interpretationStore,setInterpretationStore]=useState({});const{// State\npersonas,globalMessages,conversations,selectedConversation,selectedPersona,isLoading,error,// Actions\nsendInitialMessage,continueConversation,updateConversation,selectConversation,selectPersona,clearError}=useChat();// 페르소나 메뉴 아이템 선택 핸들러\nconst handleSelectPersonaItem=itemId=>{// 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\nconst actualItemId=itemId===''?null:itemId;setSelectedPersonaItem(actualItemId);// 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\nif(actualItemId!=='training'&&actualItemId!=='admin'){setIsConversationSidebarCollapsed(false);}};// 대화 메뉴 아이템 선택 핸들러\nconst handleSelectConversationItem=itemId=>{setSelectedConversationItem(itemId);// 스레드 선택 시 해당 스레드 데이터 로드 처리\nif(itemId!==null&&itemId!==void 0&&itemId.includes('-thread-')){console.log('스레드 선택됨:',itemId);// 필요시 스레드별 추가 처리 로직\n}};// 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\nconst handlePersonaSelection=personaId=>{const persona=personas[personaId];if(!persona)return;// 해석이 이미 존재하는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){// 1) 해석이 있으면 바로 채팅 모드로\nsetCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');}else{// 2) 해석이 없으면 생성 과정 진행\n// 팝업은 TrainingCategoryView에서 처리\n}};// 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\nconst handleInterpretationComplete=async(personaId,interpretation)=>{const persona=personas[personaId];// 해석을 저장소에 저장\nsetInterpretationStore(prev=>_objectSpread(_objectSpread({},prev),{},{[personaId]:interpretation}));// 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\nsetCurrentInterpretation({personaId,personaName:(persona===null||persona===void 0?void 0:persona.name)||'',content:interpretation,messages:[{role:'assistant',content:interpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');// ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\nsetConversationRefreshTrigger(prev=>prev+1);};// 해석 채팅 메시지 전송 핸들러\nconst handleInterpretationMessage=async message=>{if(!currentInterpretation)return false;// 사용자 메시지 추가\nconst userMessage={role:'user',content:message,timestamp:new Date().toISOString()};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,userMessage]}):null);// 로딩 상태 시작\nsetIsInterpretationLoading(true);try{// 실제 백엔드 API 호출 - 해석 기반 채팅\nconst response=await chatApi.chatWithInterpretation(currentInterpretation.personaId,message);if(response.data){const assistantMessage={role:'assistant',content:response.data.response,timestamp:response.data.timestamp};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,assistantMessage]}):null);setIsInterpretationLoading(false);return true;}else{// API 호출 실패 시 폴백\nconsole.error('해석 기반 채팅 API 실패:',response.error);const fallbackMessage={role:'assistant',content:\"\\uC8C4\\uC1A1\\uD569\\uB2C8\\uB2E4. \\uC77C\\uC2DC\\uC801\\uC73C\\uB85C \\uC751\\uB2F5 \\uC0DD\\uC131\\uC5D0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uC7A0\\uC2DC \\uD6C4 \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD574\\uC8FC\\uC138\\uC694.\",timestamp:new Date().toISOString()};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,fallbackMessage]}):null);setIsInterpretationLoading(false);return false;}}catch(error){console.error('해석 채팅 오류:',error);// 에러 발생 시 폴백 메시지\nconst errorMessage={role:'assistant',content:\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uC5F0\\uACB0\\uC744 \\uD655\\uC778\\uD558\\uACE0 \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD574\\uC8FC\\uC138\\uC694.\",timestamp:new Date().toISOString()};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,errorMessage]}):null);setIsInterpretationLoading(false);return false;}};// 해석 업데이트 핸들러\nconst handleUpdateInterpretation=updatedInterpretation=>{setCurrentInterpretation(updatedInterpretation);};// 대화 업데이트 핸들러\nconst handleUpdateConversation=updatedConversation=>{if(selectedConversation){updateConversation(selectedConversation,updatedConversation);}};// 대화 모드 전환 핸들러\nconst handleSwitchConversationMode=mode=>{setSelectedConversationItem(mode);};// ConversationSidebar 새로고침 핸들러\nconst handleRefreshConversationSidebar=()=>{setConversationRefreshTrigger(prev=>prev+1);};// 페르소나 사이드바 토글 - 두 사이드바 모두 제어\nconst togglePersonaSidebar=()=>{const newCollapsedState=!isPersonaSidebarCollapsed;setIsPersonaSidebarCollapsed(newCollapsedState);// 페르소나 사이드바를 접을 때는 대화 목록 사이드바도 함께 접기\nif(newCollapsedState){setIsConversationSidebarCollapsed(true);}else{// 페르소나 사이드바를 펼칠 때는 대화 목록 사이드바도 함께 펼치기\nsetIsConversationSidebarCollapsed(false);}};// 대화 목록 사이드바 토글 - 자기 자신만 제어\nconst toggleConversationSidebar=()=>{setIsConversationSidebarCollapsed(!isConversationSidebarCollapsed);};return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GlobalStyle,{}),/*#__PURE__*/_jsxs(AppContainer,{children:[/*#__PURE__*/_jsx(PersonaSidebar,{selectedItem:selectedPersonaItem,onSelectItem:handleSelectPersonaItem,isCollapsed:isPersonaSidebarCollapsed,onToggle:togglePersonaSidebar}),selectedPersonaItem!=='training'&&selectedPersonaItem!=='admin'&&currentInterpretation&&/*#__PURE__*/_jsx(ConversationSidebar,{selectedItem:selectedConversationItem,onSelectItem:handleSelectConversationItem,isCollapsed:isConversationSidebarCollapsed,onToggle:toggleConversationSidebar,selectedPersonaName:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaName,selectedPersonaId:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaId,refreshTrigger:conversationRefreshTrigger}),/*#__PURE__*/_jsx(ChatArea,{selectedConversation:selectedConversation,conversations:conversations,personas:personas,globalMessages:globalMessages,isLoading:currentInterpretation?isInterpretationLoading:isLoading,error:error,onSendInitialMessage:sendInitialMessage,onContinueConversation:continueConversation,onClearError:clearError,selectedPersonaItem:selectedPersonaItem,onSelectPersona:handlePersonaSelection,onInterpretationComplete:handleInterpretationComplete,selectedConversationItem:selectedConversationItem,currentInterpretation:currentInterpretation,onInterpretationMessage:handleInterpretationMessage,onUpdateInterpretation:handleUpdateInterpretation,onUpdateConversation:handleUpdateConversation,onSwitchConversationMode:handleSwitchConversationMode,onRefreshConversationSidebar:handleRefreshConversationSidebar})]})]});};export default App;","map":{"version":3,"names":["React","useState","useChat","ConversationSidebar","PersonaSidebar","ChatArea","GlobalStyle","AppContainer","chatApi","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","isInterpretationLoading","setIsInterpretationLoading","interpretationStore","setInterpretationStore","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","console","log","handlePersonaSelection","personaId","persona","existingInterpretation","personaName","name","content","messages","role","timestamp","Date","toISOString","handleInterpretationComplete","interpretation","prev","_objectSpread","handleInterpretationMessage","message","userMessage","response","chatWithInterpretation","data","assistantMessage","fallbackMessage","errorMessage","handleUpdateInterpretation","updatedInterpretation","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","mode","handleRefreshConversationSidebar","togglePersonaSidebar","newCollapsedState","toggleConversationSidebar","children","selectedItem","onSelectItem","isCollapsed","onToggle","selectedPersonaName","selectedPersonaId","refreshTrigger","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport TrainingCategoryView from '../training/components/TrainingCategoryView';\nimport InterpretationView from '../training/components/InterpretationView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null>(null);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n  \n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n    \n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: persona?.name || '',\n      content: interpretation,\n      messages: [\n        {\n          role: 'assistant',\n          content: interpretation,\n          timestamp: new Date().toISOString(),\n        }\n      ],\n    });\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    // 사용자 메시지 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString(),\n    };\n\n    setCurrentInterpretation(prev => prev ? {\n      ...prev,\n      messages: [...prev.messages, userMessage],\n    } : null);\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      // 실제 백엔드 API 호출 - 해석 기반 채팅\n      const response = await chatApi.chatWithInterpretation(\n        currentInterpretation.personaId,\n        message\n      );\n\n      if (response.data) {\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response,\n          timestamp: response.data.timestamp,\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, assistantMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return true;\n      } else {\n        // API 호출 실패 시 폴백\n        console.error('해석 기반 채팅 API 실패:', response.error);\n        const fallbackMessage = {\n          role: 'assistant' as const,\n          content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n          timestamp: new Date().toISOString(),\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, fallbackMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      \n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant' as const,\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString(),\n      };\n\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n      } : null);\n\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 페르소나 사이드바 토글 - 두 사이드바 모두 제어\n  const togglePersonaSidebar = () => {\n    const newCollapsedState = !isPersonaSidebarCollapsed;\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n    \n    // 페르소나 사이드바를 접을 때는 대화 목록 사이드바도 함께 접기\n    if (newCollapsedState) {\n      setIsConversationSidebarCollapsed(true);\n    } else {\n      // 페르소나 사이드바를 펼칠 때는 대화 목록 사이드바도 함께 펼치기\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 자기 자신만 제어\n  const toggleConversationSidebar = () => {\n    setIsConversationSidebarCollapsed(!isConversationSidebarCollapsed);\n  };\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있을 때만 표시 */}\n        {selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && currentInterpretation && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n          />\n        )}\n\n        {/* 메인 채팅 영역 */}\n        <ChatArea\n          selectedConversation={selectedConversation}\n          conversations={conversations}\n          personas={personas}\n          globalMessages={globalMessages}\n          isLoading={currentInterpretation ? isInterpretationLoading : isLoading}\n          error={error}\n          onSendInitialMessage={sendInitialMessage}\n          onContinueConversation={continueConversation}\n          onClearError={clearError}\n          selectedPersonaItem={selectedPersonaItem}\n          onSelectPersona={handlePersonaSelection}\n          onInterpretationComplete={handleInterpretationComplete}\n          selectedConversationItem={selectedConversationItem}\n          currentInterpretation={currentInterpretation}\n          onInterpretationMessage={handleInterpretationMessage}\n          onUpdateInterpretation={handleUpdateInterpretation}\n          onUpdateConversation={handleUpdateConversation}\n          onSwitchConversationMode={handleSwitchConversationMode}\n          onRefreshConversationSidebar={handleRefreshConversationSidebar}\n        />\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}