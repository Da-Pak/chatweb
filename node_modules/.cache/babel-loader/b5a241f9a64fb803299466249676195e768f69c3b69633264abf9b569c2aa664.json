{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\verbalization\\\\components\\\\VerbalizationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n_c2 = HeaderSection;\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n_c3 = HeaderTitle;\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n_c4 = NewThreadButton;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c5 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c6 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c7 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n_c8 = EmptyChat;\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c9 = EmptyIcon;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c0 = Toast;\nconst VerbalizationView = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n\n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n\n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState([]);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('=== 언어화 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n\n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n\n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      console.log('=== 언어화 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\n  useEffect(() => {\n    if (selectedThread) {\n      setLocalMessages(selectedThread.messages || []);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    } else {\n      setLocalMessages([]);\n      // 스레드가 없으면 데이터 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  }, [selectedThread]);\n\n  // selectedThread가 변경될 때 해당 스레드의 메모/하이라이트 데이터 로딩\n  useEffect(() => {\n    if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n      console.log('언어화 스레드 변경됨:', selectedThread.id);\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id]);\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async message => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message.trim(),\n      timestamp: new Date().toISOString()\n    };\n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\n      const response = await chatApi.chatWithVerbalization(message, selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id // 스레드가 없으면 undefined 전달\n      );\n      console.log('API 응답 전체:', response);\n      console.log('응답 데이터:', response.data);\n      console.log('응답 에러:', response.error);\n      if (response.data) {\n        console.log('메시지 전송 성공');\n        console.log('응답 구조:', {\n          thread_id: response.data.thread_id,\n          user_message: response.data.user_message,\n          response: response.data.response,\n          thread_updated_at: response.data.thread_updated_at\n        });\n\n        // 3단계: AI 응답을 로컬 메시지에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_name: '언어화 도우미'\n        };\n        setLocalMessages(prev => [...prev, assistantMessage]);\n\n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n        // 스레드 목록과 선택된 스레드를 새로고침\n        await onThreadUpdate();\n\n        // 새로 생성된 스레드가 선택되도록 추가 처리\n        if (!selectedThread && response.data.thread_id) {\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\n          setTimeout(async () => {\n            await onThreadUpdate();\n          }, 100);\n        }\n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n\n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n\n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n\n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n\n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\n  const handleSunAction = () => {\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\n  };\n  const handlePersonAction = () => {\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\n  };\n  const handleDocumentAction = () => {\n    if (selectedThread && selectedThread.messages.length > 0) {\n      const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n      if (lastAssistantMessage) {\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\n      } else {\n        showCopyToast('복사할 응답이 없습니다');\n      }\n    }\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async action => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      case 'saveToVault':\n        // 언어화에서도 저장고 기능 제공\n        if (selectedText) {\n          try {\n            console.log('=== 언어화 텍스트 선택 저장고 저장 시작 ===');\n            console.log('선택된 텍스트:', selectedText);\n            console.log('선택된 스레드:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n            if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n              console.warn('선택된 스레드가 없습니다');\n              showCopyToast('저장할 스레드를 선택해주세요');\n              break;\n            }\n            const saveRequest = {\n              sentences: [selectedText],\n              source_message_id: 'verbalization_text_selection',\n              source_conversation_id: selectedThread.id,\n              source_thread_id: selectedThread.id,\n              source_thread_type: 'verbalization',\n              tags: ['verbalization', 'text_selection']\n            };\n            console.log('텍스트 선택 저장 요청:', saveRequest);\n            const response = await sentenceApi.saveSentencesToVault(saveRequest);\n            console.log('텍스트 선택 저장 응답:', response);\n            console.log('=== 언어화 텍스트 선택 저장고 저장 완료 ===');\n            showCopyToast('저장고에 저장되었습니다');\n          } catch (error) {\n            console.error('=== 언어화 텍스트 선택 저장고 저장 실패 ===', error);\n            console.error('오류 세부사항:', {\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined\n            });\n            showCopyToast(`저장고 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        } else {\n          console.warn('선택된 텍스트가 없습니다');\n          showCopyToast('저장할 텍스트를 선택해주세요');\n        }\n        break;\n      case 'addMemo':\n        // 언어화에서는 메모 기능 미제공\n        showCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');\n        break;\n      case 'highlight':\n        // 언어화에서는 하이라이트 기능 미제공\n        showCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');\n        break;\n    }\n\n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = event => {\n      const target = event.target;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      });\n\n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n\n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    console.log('=== 언어화 handleMenuAction 시작 ===');\n    console.log('액션:', action);\n    console.log('선택된 ID들:', selectedIds);\n    console.log('로컬 메시지 수:', localMessages.length);\n\n    // assistant 메시지에서만 선택된 문장들 필터링\n    const assistantSelectedTexts = [];\n    const assistantSelectedIds = [];\n    selectedIds.forEach(id => {\n      console.log('처리 중인 ID:', id);\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      console.log('파싱된 정보:', {\n        timestamp,\n        messageIndex,\n        sentenceIndex\n      });\n\n      // 우선 timestamp로 찾고, 없으면 messageIndex로 찾기\n      let message = localMessages.find(m => m.timestamp === timestamp);\n      if (!message) {\n        console.log('timestamp로 메시지를 찾을 수 없음, messageIndex로 시도:', messageIndex);\n        const index = parseInt(messageIndex);\n        if (!isNaN(index) && index >= 0 && index < localMessages.length) {\n          message = localMessages[index];\n          console.log('messageIndex로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 50)}...` : '없음');\n        }\n      }\n      console.log('최종 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 50)}...` : '없음');\n      console.log('localMessages 타임스탬프들:', localMessages.map(m => m.timestamp));\n      if (message && message.role === 'assistant') {\n        // assistant 메시지만 처리\n        // SelectableMessage와 동일한 문장 분할 로직 사용\n        const splitIntoSentences = text => {\n          return text.split(/[\\n\\.]+/).map(sentence => sentence.trim()).filter(sentence => sentence.length > 0);\n        };\n        const sentences = splitIntoSentences(message.content);\n        console.log('분할된 문장들:', sentences);\n        console.log('문장 인덱스:', sentenceIndex, '전체 문장 수:', sentences.length);\n        const text = sentences[parseInt(sentenceIndex)] || '';\n        console.log('선택된 문장 텍스트:', text);\n        if (text && text.length > 0) {\n          assistantSelectedTexts.push({\n            text,\n            id\n          });\n          assistantSelectedIds.push(id);\n          console.log('assistant 문장 추가됨:', text);\n        } else {\n          console.warn('빈 문장 또는 잘못된 인덱스:', {\n            text,\n            sentenceIndex,\n            sentencesLength: sentences.length\n          });\n        }\n      } else if (message) {\n        console.log('무시됨 - user 메시지:', message.content.substring(0, 50) + '...');\n      } else {\n        console.warn('메시지를 찾을 수 없음:', {\n          timestamp,\n          id\n        });\n      }\n    });\n    const selectedTexts = assistantSelectedTexts.map(item => item.text);\n    const filteredSelectedIds = assistantSelectedIds;\n    console.log('최종 선택된 텍스트들:', selectedTexts);\n    console.log('최종 필터링된 ID들:', filteredSelectedIds);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          console.log('=== 언어화 저장고 저장 시작 ===');\n          console.log('원본 선택된 ID들:', selectedIds);\n          console.log('선택된 문장들:', selectedTexts);\n          console.log('필터링된 ID들:', filteredSelectedIds);\n          console.log('선택된 스레드:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n          console.log('로컬 메시지들:', localMessages.map(m => ({\n            role: m.role,\n            timestamp: m.timestamp,\n            content: m.content.substring(0, 50) + '...'\n          })));\n          if (selectedTexts.length === 0) {\n            console.warn('저장할 문장이 없습니다');\n            console.warn('디버깅 정보:');\n            console.warn('- 원본 선택된 ID 개수:', selectedIds.length);\n            console.warn('- 필터링된 ID 개수:', filteredSelectedIds.length);\n            console.warn('- 최종 텍스트 개수:', selectedTexts.length);\n            if (selectedIds.length > 0 && filteredSelectedIds.length === 0) {\n              console.warn('모든 선택된 문장이 user 메시지여서 필터링되었습니다');\n              showCopyToast('assistant 메시지만 저장할 수 있습니다');\n            } else {\n              showCopyToast('저장할 문장을 선택해주세요');\n            }\n            break;\n          }\n          if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n            console.warn('선택된 스레드가 없습니다');\n            showCopyToast('저장할 스레드를 선택해주세요');\n            break;\n          }\n\n          // 선택된 문장들의 하이라이트/메모 상태 수집 (assistant 메시지만)\n          const highlightStates = [];\n          const highlightColors = [];\n          const memoContents = [];\n          for (const sentenceId of filteredSelectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n          const saveRequest = {\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread.id,\n            source_thread_id: selectedThread.id,\n            source_thread_type: 'verbalization',\n            source_sentence_ids: filteredSelectedIds,\n            tags: ['verbalization'],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          };\n          console.log('저장 요청 데이터:', saveRequest);\n          const saveResponse = await sentenceApi.saveSentencesToVault(saveRequest);\n          console.log('저장 응답:', saveResponse);\n\n          // 백엔드에 하이라이트도 저장 (기존 로직 유지)\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            console.log('하이라이트 저장 시작');\n            for (const sentenceId of filteredSelectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'verbalization'\n                });\n                console.log('하이라이트 저장 완료:', sentenceId);\n              } catch (highlightError) {\n                console.warn('하이라이트 저장 실패:', sentenceId, highlightError);\n              }\n            }\n          }\n\n          // 성공 시 로컬 상태 업데이트\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            filteredSelectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          console.log('=== 언어화 저장고 저장 완료 ===');\n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('=== 언어화 저장고 저장 실패 ===', error);\n          console.error('오류 세부사항:', {\n            message: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined\n          });\n          showCopyToast(`저장고 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n        }\n        break;\n      case 'addMemo':\n        if (filteredSelectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (assistant 메시지만)\n          const sortedIds = filteredSelectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          try {\n            // 백엔드에 메모 생성\n            await sentenceApi.createOrUpdateMemo({\n              sentence_id: bottomSentenceId,\n              content: ''\n            });\n\n            // 백엔드에 하이라이트 저장\n            if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n              for (const sentenceId of filteredSelectedIds) {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'verbalization'\n                });\n              }\n            }\n\n            // 성공 시 로컬 상태 업데이트\n            setMemos(prev => ({\n              ...prev,\n              [bottomSentenceId]: ''\n            }));\n            setHighlightedSentences(prev => {\n              const newSet = new Set(prev);\n              filteredSelectedIds.forEach(id => newSet.add(id));\n              return newSet;\n            });\n            showCopyToast('메모와 하이라이트가 추가되었습니다');\n          } catch (error) {\n            console.error('메모/하이라이트 추가 실패:', error);\n            showCopyToast('메모/하이라이트 추가에 실패했습니다');\n          }\n        }\n        break;\n      case 'highlight':\n        if (filteredSelectedIds.length > 0 && selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n          try {\n            console.log('하이라이트 토글 시작:', filteredSelectedIds);\n\n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교 (assistant 메시지만)\n            const currentlyHighlighted = filteredSelectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = filteredSelectedIds.filter(id => !highlightedSentences.has(id));\n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n\n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n\n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n\n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n\n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'verbalization'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderSection, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderTitle, {\n        children: \"\\uC5B8\\uC5B4\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 879,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewThreadButton, {\n        onClick: handleCreateNewThread,\n        children: \"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 880,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 878,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [localMessages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(EmptyIcon, {\n            children: \"\\uD83D\\uDCAD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 890,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 892,\n                columnNumber: 59\n              }, this), \"\\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 892,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 894,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 894,\n              columnNumber: 23\n            }, this), \"\\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 896,\n              columnNumber: 23\n            }, this), \"\\uC5B4\\uB5A4 \\uAC83\\uC774\\uB4E0 \\uC88B\\uC2B5\\uB2C8\\uB2E4. \\uC9C0\\uAE08 \\uB290\\uB07C\\uACE0 \\uC788\\uB294 \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uD3B8\\uC548\\uD558\\uAC8C \\uB9D0\\uC500\\uD574 \\uC8FC\\uC138\\uC694.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 891,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 889,\n          columnNumber: 13\n        }, this) : localMessages.map((message, index) => isSentenceModeActive ? /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: message,\n          messageIndex: index,\n          personas: {},\n          selectedSentences: selectedSentences,\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: handleToggleSelect,\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: message.role === 'assistant' // user 메시지는 선택 불가\n        }, `${message.role}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 903,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Message, {\n          message: message,\n          personas: {} // 언어화에서는 페르소나 정보 불필요\n          ,\n          showActionButtons: true,\n          showThreeActionButtons: false,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: message.role === 'user' ? () => handleStartEdit(index) : undefined,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit,\n          isEditing: editingMessageIndex === index\n        }, `${message.role}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 917,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"\\uC5B8\\uC5B4\\uD654 \\uB3C4\\uC6B0\\uBBF8\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 935,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 887,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: \"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368 \\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          onToggleSentenceMode: handleToggleSentenceMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 944,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 943,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 886,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 957,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive ? selectedSentences.size > 0 : showFAB,\n      onMenuAction: isSentenceModeActive ? handleMenuAction : handleFABMenuAction,\n      personaId: \"verbalization\",\n      currentInterpretation: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 962,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 876,\n    columnNumber: 5\n  }, this);\n};\n_s(VerbalizationView, \"UvNRWVdTFqW5p6KCsW5J2bCiV6c=\");\n_c1 = VerbalizationView;\nexport default VerbalizationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"HeaderSection\");\n$RefreshReg$(_c3, \"HeaderTitle\");\n$RefreshReg$(_c4, \"NewThreadButton\");\n$RefreshReg$(_c5, \"ChatSection\");\n$RefreshReg$(_c6, \"ChatMessages\");\n$RefreshReg$(_c7, \"ChatInputSection\");\n$RefreshReg$(_c8, \"EmptyChat\");\n$RefreshReg$(_c9, \"EmptyIcon\");\n$RefreshReg$(_c0, \"Toast\");\n$RefreshReg$(_c1, \"VerbalizationView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","chatApi","MessageInput","Message","SelectableMessage","LoadingMessage","FloatingActionButton","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","HeaderSection","_c2","HeaderTitle","h2","_c3","NewThreadButton","button","_c4","ChatSection","_c5","ChatMessages","_c6","ChatInputSection","_c7","EmptyChat","_c8","EmptyIcon","_c9","Toast","props","show","_c0","VerbalizationView","selectedThread","threads","onThreadUpdate","onCreateNewThread","_s","isLoading","setIsLoading","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","isSentenceModeActive","setIsSentenceModeActive","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","selectedText","setSelectedText","showFAB","setShowFAB","localMessages","setLocalMessages","loadThreadSentenceData","threadId","console","log","data","getThreadSentenceData","Object","keys","length","highlights","error","messages","id","current","scrollTop","scrollHeight","handleSendMessage","message","trim","userMessage","role","content","timestamp","Date","toISOString","prev","response","chatWithVerbalization","thread_id","user_message","thread_updated_at","assistantMessage","persona_name","setTimeout","slice","showCopyToast","handleCreateNewThread","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleSunAction","handlePersonAction","proceedPrompt","insertText","handleDocumentAction","lastAssistantMessage","reverse","find","msg","handleTextSelection","selection","window","getSelection","toString","handleClearSelection","_window$getSelection","removeAllRanges","handleFABMenuAction","action","warn","saveRequest","sentences","source_message_id","source_conversation_id","source_thread_id","source_thread_type","tags","saveSentencesToVault","Error","String","stack","undefined","chatElement","handleMouseUp","addEventListener","removeEventListener","handleClickOutside","event","target","contains","closest","document","handleToggleSelect","sentenceId","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","handleDeleteMemo","deleteMemo","newMemos","handleMenuAction","selectedIds","Array","from","assistantSelectedTexts","assistantSelectedIds","forEach","sentenceIndex","split","m","index","parseInt","isNaN","substring","map","splitIntoSentences","sentence","filter","push","sentencesLength","selectedTexts","item","filteredSelectedIds","formattedText","join","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","source_sentence_ids","highlight_states","highlight_colors","memo_contents","saveResponse","createHighlight","thread_type","highlightError","sortedIds","sort","a","b","timestampA","sentenceIndexA","timestampB","sentenceIndexB","getTime","bottomSentenceId","currentlyHighlighted","notHighlighted","deleteHighlight","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","personas","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","showActionButtons","showThreeActionButtons","onCopy","onEdit","onEditSave","onEditCancel","isEditing","personaName","personaColor","onSendMessage","disabled","placeholder","hasSelectedSentences","size","onToggleSentenceMode","onMenuAction","personaId","currentInterpretation","_c1","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/verbalization/components/VerbalizationView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\n\ninterface VerbalizationViewProps {\n  selectedThread: TrainingThread | null;\n  threads: TrainingThread[];\n  onThreadUpdate: () => void;\n  onCreateNewThread: () => Promise<void>;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst VerbalizationView: React.FC<VerbalizationViewProps> = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  \n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n  \n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState<Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n    persona_name?: string;\n  }>>([]);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('=== 언어화 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n      \n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n      \n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      \n      console.log('=== 언어화 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\n  useEffect(() => {\n    if (selectedThread) {\n      setLocalMessages(selectedThread.messages || []);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    } else {\n      setLocalMessages([]);\n      // 스레드가 없으면 데이터 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  }, [selectedThread]);\n\n  // selectedThread가 변경될 때 해당 스레드의 메모/하이라이트 데이터 로딩\n  useEffect(() => {\n    if (selectedThread?.id) {\n      console.log('언어화 스레드 변경됨:', selectedThread.id);\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [selectedThread?.id]);\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message.trim(),\n      timestamp: new Date().toISOString(),\n    };\n    \n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\n      const response = await chatApi.chatWithVerbalization(\n        message,\n        selectedThread?.id // 스레드가 없으면 undefined 전달\n      );\n\n      console.log('API 응답 전체:', response);\n      console.log('응답 데이터:', response.data);\n      console.log('응답 에러:', response.error);\n\n      if (response.data) {\n        console.log('메시지 전송 성공');\n        console.log('응답 구조:', {\n          thread_id: response.data.thread_id,\n          user_message: response.data.user_message,\n          response: response.data.response,\n          thread_updated_at: response.data.thread_updated_at\n        });\n        \n        // 3단계: AI 응답을 로컬 메시지에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_name: '언어화 도우미',\n        };\n        \n        setLocalMessages(prev => [...prev, assistantMessage]);\n        \n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n        // 스레드 목록과 선택된 스레드를 새로고침\n        await onThreadUpdate();\n        \n        // 새로 생성된 스레드가 선택되도록 추가 처리\n        if (!selectedThread && response.data.thread_id) {\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\n          setTimeout(async () => {\n            await onThreadUpdate();\n          }, 100);\n        }\n        \n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n      \n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n      \n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n      \n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n      \n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      \n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\n  const handleSunAction = () => {\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\n  };\n\n  const handlePersonAction = () => {\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\n  };\n\n  const handleDocumentAction = () => {\n    if (selectedThread && selectedThread.messages.length > 0) {\n      const lastAssistantMessage = selectedThread.messages\n        .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n      if (lastAssistantMessage) {\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\n      } else {\n        showCopyToast('복사할 응답이 없습니다');\n      }\n    }\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      window.getSelection()?.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      \n      case 'saveToVault':\n        // 언어화에서도 저장고 기능 제공\n        if (selectedText) {\n          try {\n            console.log('=== 언어화 텍스트 선택 저장고 저장 시작 ===');\n            console.log('선택된 텍스트:', selectedText);\n            console.log('선택된 스레드:', selectedThread?.id);\n            \n            if (!selectedThread?.id) {\n              console.warn('선택된 스레드가 없습니다');\n              showCopyToast('저장할 스레드를 선택해주세요');\n              break;\n            }\n            \n            const saveRequest = {\n              sentences: [selectedText],\n              source_message_id: 'verbalization_text_selection',\n              source_conversation_id: selectedThread.id,\n              source_thread_id: selectedThread.id,\n              source_thread_type: 'verbalization',\n              tags: ['verbalization', 'text_selection']\n            };\n            \n            console.log('텍스트 선택 저장 요청:', saveRequest);\n            \n            const response = await sentenceApi.saveSentencesToVault(saveRequest);\n            console.log('텍스트 선택 저장 응답:', response);\n            \n            console.log('=== 언어화 텍스트 선택 저장고 저장 완료 ===');\n            showCopyToast('저장고에 저장되었습니다');\n          } catch (error) {\n            console.error('=== 언어화 텍스트 선택 저장고 저장 실패 ===', error);\n            console.error('오류 세부사항:', {\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined\n            });\n            showCopyToast(`저장고 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        } else {\n          console.warn('선택된 텍스트가 없습니다');\n          showCopyToast('저장할 텍스트를 선택해주세요');\n        }\n        break;\n      \n      case 'addMemo':\n        // 언어화에서는 메모 기능 미제공\n        showCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');\n        break;\n      \n      case 'highlight':\n        // 언어화에서는 하이라이트 기능 미제공\n        showCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');\n        break;\n    }\n    \n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      });\n      \n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n      \n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      \n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    \n    console.log('=== 언어화 handleMenuAction 시작 ===');\n    console.log('액션:', action);\n    console.log('선택된 ID들:', selectedIds);\n    console.log('로컬 메시지 수:', localMessages.length);\n    \n    // assistant 메시지에서만 선택된 문장들 필터링\n    const assistantSelectedTexts: { text: string; id: string }[] = [];\n    const assistantSelectedIds: string[] = [];\n    \n    selectedIds.forEach(id => {\n      console.log('처리 중인 ID:', id);\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      console.log('파싱된 정보:', { timestamp, messageIndex, sentenceIndex });\n      \n      // 우선 timestamp로 찾고, 없으면 messageIndex로 찾기\n      let message = localMessages.find(m => m.timestamp === timestamp);\n      if (!message) {\n        console.log('timestamp로 메시지를 찾을 수 없음, messageIndex로 시도:', messageIndex);\n        const index = parseInt(messageIndex);\n        if (!isNaN(index) && index >= 0 && index < localMessages.length) {\n          message = localMessages[index];\n          console.log('messageIndex로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 50)}...` : '없음');\n        }\n      }\n      \n      console.log('최종 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 50)}...` : '없음');\n      console.log('localMessages 타임스탬프들:', localMessages.map(m => m.timestamp));\n      \n      if (message && message.role === 'assistant') { // assistant 메시지만 처리\n        // SelectableMessage와 동일한 문장 분할 로직 사용\n        const splitIntoSentences = (text: string): string[] => {\n          return text\n            .split(/[\\n\\.]+/)\n            .map(sentence => sentence.trim())\n            .filter(sentence => sentence.length > 0);\n        };\n        \n        const sentences = splitIntoSentences(message.content);\n        console.log('분할된 문장들:', sentences);\n        console.log('문장 인덱스:', sentenceIndex, '전체 문장 수:', sentences.length);\n        \n        const text = sentences[parseInt(sentenceIndex)] || '';\n        console.log('선택된 문장 텍스트:', text);\n        \n        if (text && text.length > 0) {\n          assistantSelectedTexts.push({ text, id });\n          assistantSelectedIds.push(id);\n          console.log('assistant 문장 추가됨:', text);\n        } else {\n          console.warn('빈 문장 또는 잘못된 인덱스:', { text, sentenceIndex, sentencesLength: sentences.length });\n        }\n      } else if (message) {\n        console.log('무시됨 - user 메시지:', message.content.substring(0, 50) + '...');\n      } else {\n        console.warn('메시지를 찾을 수 없음:', { timestamp, id });\n      }\n    });\n    \n    const selectedTexts = assistantSelectedTexts.map(item => item.text);\n    const filteredSelectedIds = assistantSelectedIds;\n    \n    console.log('최종 선택된 텍스트들:', selectedTexts);\n    console.log('최종 필터링된 ID들:', filteredSelectedIds);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          console.log('=== 언어화 저장고 저장 시작 ===');\n          console.log('원본 선택된 ID들:', selectedIds);\n          console.log('선택된 문장들:', selectedTexts);\n          console.log('필터링된 ID들:', filteredSelectedIds);\n          console.log('선택된 스레드:', selectedThread?.id);\n          console.log('로컬 메시지들:', localMessages.map(m => ({ role: m.role, timestamp: m.timestamp, content: m.content.substring(0, 50) + '...' })));\n          \n          if (selectedTexts.length === 0) {\n            console.warn('저장할 문장이 없습니다');\n            console.warn('디버깅 정보:');\n            console.warn('- 원본 선택된 ID 개수:', selectedIds.length);\n            console.warn('- 필터링된 ID 개수:', filteredSelectedIds.length); \n            console.warn('- 최종 텍스트 개수:', selectedTexts.length);\n            \n            if (selectedIds.length > 0 && filteredSelectedIds.length === 0) {\n              console.warn('모든 선택된 문장이 user 메시지여서 필터링되었습니다');\n              showCopyToast('assistant 메시지만 저장할 수 있습니다');\n            } else {\n              showCopyToast('저장할 문장을 선택해주세요');\n            }\n            break;\n          }\n          \n          if (!selectedThread?.id) {\n            console.warn('선택된 스레드가 없습니다');\n            showCopyToast('저장할 스레드를 선택해주세요');\n            break;\n          }\n          \n          // 선택된 문장들의 하이라이트/메모 상태 수집 (assistant 메시지만)\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of filteredSelectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n          \n          const saveRequest = {\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread.id,\n            source_thread_id: selectedThread.id,\n            source_thread_type: 'verbalization',\n            source_sentence_ids: filteredSelectedIds,\n            tags: ['verbalization'],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          };\n          \n          console.log('저장 요청 데이터:', saveRequest);\n\n          const saveResponse = await sentenceApi.saveSentencesToVault(saveRequest);\n          console.log('저장 응답:', saveResponse);\n          \n          // 백엔드에 하이라이트도 저장 (기존 로직 유지)\n          if (selectedThread?.id) {\n            console.log('하이라이트 저장 시작');\n            for (const sentenceId of filteredSelectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'verbalization'\n                });\n                console.log('하이라이트 저장 완료:', sentenceId);\n              } catch (highlightError) {\n                console.warn('하이라이트 저장 실패:', sentenceId, highlightError);\n              }\n            }\n          }\n          \n          // 성공 시 로컬 상태 업데이트\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            filteredSelectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          console.log('=== 언어화 저장고 저장 완료 ===');\n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('=== 언어화 저장고 저장 실패 ===', error);\n          console.error('오류 세부사항:', {\n            message: error instanceof Error ? error.message : String(error),\n            stack: error instanceof Error ? error.stack : undefined\n          });\n          showCopyToast(`저장고 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n        }\n        break;\n      \n      case 'addMemo':\n        if (filteredSelectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (assistant 메시지만)\n          const sortedIds = filteredSelectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          try {\n            // 백엔드에 메모 생성\n            await sentenceApi.createOrUpdateMemo({\n              sentence_id: bottomSentenceId,\n              content: ''\n            });\n            \n            // 백엔드에 하이라이트 저장\n            if (selectedThread?.id) {\n              for (const sentenceId of filteredSelectedIds) {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'verbalization'\n                });\n              }\n            }\n            \n            // 성공 시 로컬 상태 업데이트\n            setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n            setHighlightedSentences(prev => {\n              const newSet = new Set(prev);\n              filteredSelectedIds.forEach(id => newSet.add(id));\n              return newSet;\n            });\n            \n            showCopyToast('메모와 하이라이트가 추가되었습니다');\n          } catch (error) {\n            console.error('메모/하이라이트 추가 실패:', error);\n            showCopyToast('메모/하이라이트 추가에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'highlight':\n        if (filteredSelectedIds.length > 0 && selectedThread?.id) {\n          try {\n            console.log('하이라이트 토글 시작:', filteredSelectedIds);\n            \n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교 (assistant 메시지만)\n            const currentlyHighlighted = filteredSelectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = filteredSelectedIds.filter(id => !highlightedSentences.has(id));\n            \n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            \n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n              \n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n              \n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n              \n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n              \n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'verbalization'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      {/* 헤더 */}\n      <HeaderSection>\n        <HeaderTitle>언어화</HeaderTitle>\n        <NewThreadButton onClick={handleCreateNewThread}>\n          새 대화 시작\n        </NewThreadButton>\n      </HeaderSection>\n\n      {/* 채팅 영역 */}\n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {localMessages.length === 0 ? (\n            <EmptyChat>\n              <EmptyIcon>💭</EmptyIcon>\n              <div>\n                <strong>언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써<br />\n                그것을 인식하고 만들어 가는 것입니다.</strong>\n                <br /><br />\n                자유롭게 당신의 생각을 말로 내뱉으세요!\n                <br /><br />\n                어떤 것이든 좋습니다. 지금 느끼고 있는 감정이나 생각을 편안하게 말씀해 주세요.\n              </div>\n            </EmptyChat>\n          ) : (\n            localMessages.map((message, index) => (\n              isSentenceModeActive ? (\n                <SelectableMessage\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  messageIndex={index}\n                  personas={{}}\n                  selectedSentences={selectedSentences}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={handleToggleSelect}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={message.role === 'assistant'} // user 메시지는 선택 불가\n                />\n              ) : (\n                <Message\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  personas={{}} // 언어화에서는 페르소나 정보 불필요\n                  showActionButtons={true}\n                  showThreeActionButtons={false}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={message.role === 'user' ? () => handleStartEdit(index) : undefined}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                  isEditing={editingMessageIndex === index}\n                />\n              )\n            ))\n          )}\n          \n          {/* 로딩 메시지 */}\n          {isLoading && (\n            <LoadingMessage \n              personaName=\"언어화 도우미\"\n              personaColor=\"#666\"\n            />\n          )}\n        </ChatMessages>\n\n        {/* 입력창 */}\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder=\"언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써 그것을 인식하고 만들어 가는 것입니다. 자유롭게 당신의 생각을 말로 내뱉으세요!\"\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            onToggleSentenceMode={handleToggleSentenceMode}\n          />\n        </ChatInputSection>\n      </ChatSection>\n\n      {/* 토스트 메시지 */}\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n\n      {/* FloatingActionButton */}\n      <FloatingActionButton\n        show={isSentenceModeActive ? selectedSentences.size > 0 : showFAB}\n        onMenuAction={isSentenceModeActive ? handleMenuAction : handleFABMenuAction}\n        personaId=\"verbalization\"\n        currentInterpretation=\"\"\n      />\n    </Container>\n  );\n};\n\nexport default VerbalizationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}