{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useChat}from'../shared/hooks/useChat';import ConversationSidebar from'../shared/components/ConversationSidebar';import PersonaSidebar from'../shared/components/PersonaSidebar';import TrainingCategoryView from'../training/components/TrainingCategoryView';import InterpretationView from'../training/components/InterpretationView';import RecentInteractionsView from'../shared/components/RecentInteractionsView';import VerbalizationView from'../verbalization/components/VerbalizationView';import ProceedView from'../training/components/ProceedView';import SentenceView from'../training/components/SentenceView';import{GlobalStyle,AppContainer}from'../shared/styles/GlobalStyle';import{chatApi}from'../shared/api/chatApi';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{var _currentInterpretatio,_currentInterpretatio2;const[isPersonaSidebarCollapsed,setIsPersonaSidebarCollapsed]=useState(false);const[isConversationSidebarCollapsed,setIsConversationSidebarCollapsed]=useState(false);const[selectedPersonaItem,setSelectedPersonaItem]=useState(null);const[selectedConversationItem,setSelectedConversationItem]=useState(null);// ConversationSidebar 새로고침 트리거\nconst[conversationRefreshTrigger,setConversationRefreshTrigger]=useState(0);// 해석 관련 상태 - 실제 스레드 기반으로 변경\nconst[currentInterpretation,setCurrentInterpretation]=useState(null);// 해석 스레드들 상태\nconst[interpretationThreads,setInterpretationThreads]=useState([]);// 해석 모드 전용 로딩 상태\nconst[isInterpretationLoading,setIsInterpretationLoading]=useState(false);// 언어화 관련 상태\nconst[verbalizationThreads,setVerbalizationThreads]=useState([]);const[selectedVerbalizationThread,setSelectedVerbalizationThread]=useState(null);const{// State\npersonas,globalMessages,conversations,selectedConversation,selectedPersona,isLoading,error,// Actions\nsendInitialMessage,continueConversation,updateConversation,selectConversation,selectPersona,clearError}=useChat();// 페르소나 메뉴 아이템 선택 핸들러\nconst handleSelectPersonaItem=itemId=>{// 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\nconst actualItemId=itemId===''?null:itemId;setSelectedPersonaItem(actualItemId);// 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\nif(actualItemId!=='training'&&actualItemId!=='admin'){setIsConversationSidebarCollapsed(false);}};// 대화 메뉴 아이템 선택 핸들러\nconst handleSelectConversationItem=async itemId=>{setSelectedConversationItem(itemId);// 스레드 선택 시 해당 스레드 데이터 로드 처리\nif(itemId!==null&&itemId!==void 0&&itemId.includes('-thread-')){console.log('스레드 선택됨:',itemId);// 해석 스레드인 경우 특별 처리\nif(itemId.includes('interpretation-thread-')&&currentInterpretation){const threadId=itemId.split('interpretation-thread-')[1];console.log('해석 스레드 ID:',threadId);// 해석 스레드 목록에서 해당 스레드 찾기\nconst selectedThread=interpretationThreads.find(thread=>thread.id===threadId);if(selectedThread){console.log('해석 스레드 발견:',selectedThread.id);// 선택된 해석 스레드로 업데이트\nsetCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{selectedThread:selectedThread}):null);}else{console.log('해석 스레드를 찾을 수 없음, 다시 로드 시도');// 스레드를 찾을 수 없으면 다시 로드\ntry{const threadsResponse=await chatApi.getPersonaThreadsByType(currentInterpretation.personaId,'interpretation');if(threadsResponse.data){const foundThread=threadsResponse.data.find(thread=>thread.id===threadId);if(foundThread){setInterpretationThreads(threadsResponse.data);setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{selectedThread:foundThread}):null);console.log('해석 스레드 재로드 후 선택 완료');}}}catch(error){console.error('해석 스레드 재로드 실패:',error);}}}}};// 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\nconst handlePersonaSelection=async personaId=>{const persona=personas[personaId];if(!persona)return;try{// 해석 스레드들을 가져와서 확인\nconst threadsResponse=await chatApi.getPersonaThreadsByType(personaId,'interpretation');if(threadsResponse.data&&threadsResponse.data.length>0){// 1) 해석 스레드가 있으면 바로 해석 모드로\nconst latestThread=threadsResponse.data.sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime())[0];setCurrentInterpretation({personaId,personaName:persona.name,selectedThread:latestThread});setInterpretationThreads(threadsResponse.data);// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');}else{// 2) 해석 스레드가 없으면 생성 과정 진행\n// 팝업은 TrainingCategoryView에서 처리\n}}catch(error){console.error('해석 스레드 조회 실패:',error);// 해석이 없으면 생성 과정 진행\n}};// 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\nconst handleInterpretationComplete=async(personaId,interpretation)=>{const persona=personas[personaId];try{// 해석 스레드들을 다시 가져와서 최신 스레드 선택\nconst threadsResponse=await chatApi.getPersonaThreadsByType(personaId,'interpretation');if(threadsResponse.data&&threadsResponse.data.length>0){const latestThread=threadsResponse.data.sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime())[0];setCurrentInterpretation({personaId,personaName:(persona===null||persona===void 0?void 0:persona.name)||'',selectedThread:latestThread});setInterpretationThreads(threadsResponse.data);}}catch(error){console.error('해석 스레드 로드 실패:',error);}// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');// ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\nsetConversationRefreshTrigger(prev=>prev+1);};// 해석 채팅 메시지 전송 핸들러\nconst handleInterpretationMessage=async message=>{if(!currentInterpretation||!currentInterpretation.selectedThread)return false;// 로딩 상태 시작\nsetIsInterpretationLoading(true);try{// 스레드와 채팅 API 사용\nconst response=await chatApi.chatWithThread({persona_id:currentInterpretation.personaId,user_message:message,thread_id:currentInterpretation.selectedThread.id,thread_type:'interpretation'});if(response.data&&response.data.updated_thread){// 선택된 스레드 업데이트\nsetCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{selectedThread:response.data.updated_thread}):null);// 스레드 목록도 업데이트\nsetInterpretationThreads(prev=>prev.map(thread=>thread.id===response.data.updated_thread.id?response.data.updated_thread:thread));setIsInterpretationLoading(false);return true;}else{console.error('해석 스레드 채팅 API 실패:',response.error);setIsInterpretationLoading(false);return false;}}catch(error){console.error('해석 채팅 오류:',error);setIsInterpretationLoading(false);return false;}};// 해석 스레드 업데이트 핸들러\nconst handleInterpretationThreadUpdate=async threads=>{setInterpretationThreads(threads);// 현재 선택된 스레드가 업데이트된 목록에 있는지 확인\nif(currentInterpretation!==null&&currentInterpretation!==void 0&&currentInterpretation.selectedThread){const updatedSelectedThread=threads.find(thread=>thread.id===currentInterpretation.selectedThread.id);if(updatedSelectedThread){setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{selectedThread:updatedSelectedThread}):null);}else if(threads.length>0){// 현재 선택된 스레드가 삭제되었으면 첫 번째 스레드 선택\nconst latestThread=threads.sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime())[0];setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{selectedThread:latestThread}):null);}else{// 스레드가 모두 삭제되었으면 해석 모드 종료\nsetCurrentInterpretation(null);setSelectedConversationItem(null);}}};// 메시지 수정 핸들러\nconst handleEditInterpretationMessage=async(messageIndex,newContent)=>{if(!(currentInterpretation!==null&&currentInterpretation!==void 0&&currentInterpretation.selectedThread))return false;try{var _response$data;const response=await chatApi.editThreadMessage(currentInterpretation.selectedThread.id,messageIndex,newContent);if((_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.success&&response.data.updated_thread){// 선택된 스레드 업데이트\nsetCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{selectedThread:response.data.updated_thread}):null);// 스레드 목록도 업데이트\nsetInterpretationThreads(prev=>prev.map(thread=>thread.id===response.data.updated_thread.id?response.data.updated_thread:thread));return true;}return false;}catch(error){console.error('해석 메시지 수정 오류:',error);return false;}};// 대화 업데이트 핸들러\nconst handleUpdateConversation=updatedConversation=>{if(selectedConversation){updateConversation(selectedConversation,updatedConversation);}};// 대화 모드 전환 핸들러\nconst handleSwitchConversationMode=mode=>{setSelectedConversationItem(mode);};// ConversationSidebar 새로고침 핸들러\nconst handleRefreshConversationSidebar=()=>{setConversationRefreshTrigger(prev=>prev+1);};// 최근 상호작용에서 페르소나 선택 핸들러\nconst handleRecentPersonaSelect=async personaId=>{const persona=personas[personaId];if(!persona)return;try{// 해석 스레드들을 가져와서 확인\nconst threadsResponse=await chatApi.getPersonaThreadsByType(personaId,'interpretation');if(threadsResponse.data&&threadsResponse.data.length>0){// 해석 스레드가 있으면 바로 해석 모드로\nconst latestThread=threadsResponse.data.sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime())[0];setCurrentInterpretation({personaId,personaName:persona.name,selectedThread:latestThread});setInterpretationThreads(threadsResponse.data);// 페르소나 선택 및 해석 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');}else{// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}}catch(error){console.error('해석 스레드 조회 실패:',error);// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}};// 최근 상호작용에서 스레드 선택 핸들러\nconst handleRecentThreadSelect=async(thread,personaId)=>{console.log('=== 최근 상호작용 스레드 선택 ===');console.log('thread:',thread);console.log('personaId:',personaId);console.log('thread.thread_type:',thread.thread_type);// 언어화 스레드인 경우 언어화 모드로 전환\nif(personaId==='verbalization'||thread.thread_type==='verbalization'){console.log('언어화 스레드로 인식, 언어화 모드 전환');setSelectedPersonaItem('verbalization');setSelectedVerbalizationThread(thread);setIsConversationSidebarCollapsed(false);// ConversationSidebar가 업데이트되도록 트리거\nsetConversationRefreshTrigger(prev=>prev+1);return;}const persona=personas[personaId];if(!persona){console.error('페르소나를 찾을 수 없음:',personaId);return;}try{// 해석 스레드인 경우 해석 모드로\nif(thread.thread_type==='interpretation'){// 해석 스레드들을 가져와서 설정\nconst threadsResponse=await chatApi.getPersonaThreadsByType(personaId,'interpretation');if(threadsResponse.data){setCurrentInterpretation({personaId,personaName:persona.name,selectedThread:thread});setInterpretationThreads(threadsResponse.data);// 페르소나 선택 및 해석 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));}}else{// 다른 타입 스레드들은 기존 로직 유지\n// 해석 스레드들을 가져와서 확인\nconst threadsResponse=await chatApi.getPersonaThreadsByType(personaId,'interpretation');if(threadsResponse.data&&threadsResponse.data.length>0){// 해석이 있으면 바로 해석 모드로\nconst latestThread=threadsResponse.data.sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime())[0];setCurrentInterpretation({personaId,personaName:persona.name,selectedThread:latestThread});setInterpretationThreads(threadsResponse.data);// 페르소나 선택 및 해당 스레드 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));}else{// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}}}catch(error){console.error('스레드 조회 실패:',error);// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}};// 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\nconst toggleConversationSidebar=()=>{const newCollapsedState=!isConversationSidebarCollapsed;setIsConversationSidebarCollapsed(newCollapsedState);setIsPersonaSidebarCollapsed(newCollapsedState);};// 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\nconst togglePersonaSidebar=()=>{setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);};// 언어화 스레드 로드\nconst loadVerbalizationThreads=async()=>{try{console.log('=== 언어화 스레드 로드 시작 ===');const response=await chatApi.getVerbalizationThreads();console.log('스레드 로드 응답:',response);if(response.data){console.log('로드된 스레드 개수:',response.data.length);setVerbalizationThreads(response.data);// 현재 선택된 스레드가 있는지 확인하고 업데이트\nif(selectedVerbalizationThread){const updatedSelectedThread=response.data.find(thread=>thread.id===selectedVerbalizationThread.id);if(updatedSelectedThread){console.log('기존 선택된 스레드 업데이트:',updatedSelectedThread.id);setSelectedVerbalizationThread(updatedSelectedThread);}else{console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');setSelectedVerbalizationThread(response.data[0]||null);}}else if(response.data.length>0){// 선택된 스레드가 없으면 첫 번째 스레드를 선택\nconsole.log('새로운 첫 번째 스레드 선택:',response.data[0].id);setSelectedVerbalizationThread(response.data[0]);}}console.log('=== 언어화 스레드 로드 완료 ===');}catch(error){console.error('언어화 스레드 로드 오류:',error);}};// 언어화 모드일 때 스레드 로드\nuseEffect(()=>{if(selectedPersonaItem==='verbalization'){loadVerbalizationThreads();}},[selectedPersonaItem]);// 언어화 스레드 업데이트 핸들러\nconst handleVerbalizationThreadUpdate=async()=>{console.log('=== 언어화 스레드 업데이트 요청 ===');const currentSelectedId=selectedVerbalizationThread===null||selectedVerbalizationThread===void 0?void 0:selectedVerbalizationThread.id;await loadVerbalizationThreads();// 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\nif(currentSelectedId){// loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n// 비동기 로직을 위해 setTimeout 사용\nsetTimeout(()=>{const response=chatApi.getVerbalizationThreads();response.then(res=>{if(res.data){const stillExists=res.data.find(thread=>thread.id===currentSelectedId);if(!stillExists){// 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\nif(res.data.length>0){setSelectedVerbalizationThread(res.data[0]);}else{setSelectedVerbalizationThread(null);}console.log('삭제된 스레드 감지, 선택 변경됨');}}});},100);}// ConversationSidebar도 새로고침하여 최근 상호작용에 반영\nsetConversationRefreshTrigger(prev=>prev+1);};// 새 언어화 스레드 생성 핸들러\nconst handleCreateNewVerbalizationThread=async()=>{try{console.log('=== 새 언어화 스레드 생성 시작 ===');const response=await chatApi.createNewVerbalizationThread();if(response.data){console.log('새 스레드 생성됨:',response.data.id);// 1단계: 새로 생성된 스레드를 즉시 선택\nsetSelectedVerbalizationThread(response.data);// 2단계: 스레드 목록에도 추가 (최신 순서로)\nsetVerbalizationThreads(prev=>[response.data,...prev]);// 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\nsetConversationRefreshTrigger(prev=>prev+1);console.log('새 스레드 선택 완료:',response.data.id);}else{console.error('새 스레드 생성 실패:',response.error);}}catch(error){console.error('새 언어화 스레드 생성 오류:',error);}};// ConversationSidebar 표시 여부 확인\nconst shouldShowConversationSidebar=selectedPersonaItem!=='training'&&selectedPersonaItem!=='admin'&&selectedPersonaItem!=='verbalization'&&currentInterpretation||selectedPersonaItem==='recent'||selectedPersonaItem==='verbalization';return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GlobalStyle,{}),/*#__PURE__*/_jsxs(AppContainer,{children:[/*#__PURE__*/_jsx(PersonaSidebar,{selectedItem:selectedPersonaItem,onSelectItem:handleSelectPersonaItem,isCollapsed:isPersonaSidebarCollapsed,onToggle:shouldShowConversationSidebar?undefined:togglePersonaSidebar}),shouldShowConversationSidebar&&/*#__PURE__*/_jsx(ConversationSidebar,{selectedItem:selectedConversationItem,onSelectItem:handleSelectConversationItem,isCollapsed:isConversationSidebarCollapsed,onToggle:toggleConversationSidebar,selectedPersonaName:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaName,selectedPersonaId:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaId,refreshTrigger:conversationRefreshTrigger,mode:selectedPersonaItem==='recent'?'recent':selectedPersonaItem==='verbalization'?'verbalization':'persona',personas:selectedPersonaItem==='recent'?personas:undefined,verbalizationThreads:selectedPersonaItem==='verbalization'?verbalizationThreads:undefined,onSelectVerbalizationThread:selectedPersonaItem==='verbalization'?setSelectedVerbalizationThread:undefined,onRefreshTrigger:selectedPersonaItem==='verbalization'?handleVerbalizationThreadUpdate:undefined}),/*#__PURE__*/_jsxs(\"div\",{style:{flex:1,display:'flex',flexDirection:'column',overflow:'hidden'},children:[selectedPersonaItem==='training'&&/*#__PURE__*/_jsx(TrainingCategoryView,{personas:personas,onSelectPersona:handlePersonaSelection,onInterpretationComplete:handleInterpretationComplete}),selectedConversationItem==='interpretation'&&(currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.selectedThread)&&/*#__PURE__*/_jsx(InterpretationView,{interpretation:currentInterpretation.selectedThread.content,personaName:currentInterpretation.personaName,onSendMessage:handleInterpretationMessage,onEditMessage:handleEditInterpretationMessage,isLoading:isInterpretationLoading,messages:currentInterpretation.selectedThread.messages,onGenerateNewInterpretation:()=>setSelectedPersonaItem('training'),onSwitchToMode:mode=>setSelectedConversationItem(mode),personaId:currentInterpretation.personaId,onRefreshThreads:()=>setConversationRefreshTrigger(prev=>prev+1)}),(selectedConversationItem===null||selectedConversationItem===void 0?void 0:selectedConversationItem.includes('proceed'))&&currentInterpretation&&/*#__PURE__*/_jsx(ProceedView,{personaId:currentInterpretation.personaId,personaName:currentInterpretation.personaName,proceedContent:((_currentInterpretatio=currentInterpretation.selectedThread)===null||_currentInterpretatio===void 0?void 0:_currentInterpretatio.content)||'',threads:interpretationThreads.filter(t=>t.thread_type==='proceed'),onThreadUpdate:handleInterpretationThreadUpdate,selectedThread:selectedConversationItem.includes('-thread-')?interpretationThreads.find(t=>t.id===selectedConversationItem.split('-thread-')[1]):interpretationThreads.filter(t=>t.thread_type==='proceed').sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime())[0],onRefreshThreads:()=>setConversationRefreshTrigger(prev=>prev+1)}),(selectedConversationItem===null||selectedConversationItem===void 0?void 0:selectedConversationItem.includes('sentence'))&&currentInterpretation&&/*#__PURE__*/_jsx(SentenceView,{personaId:currentInterpretation.personaId,personaName:currentInterpretation.personaName,sentenceContent:((_currentInterpretatio2=currentInterpretation.selectedThread)===null||_currentInterpretatio2===void 0?void 0:_currentInterpretatio2.content)||'',threads:interpretationThreads.filter(t=>t.thread_type==='sentence'),onThreadUpdate:handleInterpretationThreadUpdate,selectedThread:selectedConversationItem.includes('-thread-')?interpretationThreads.find(t=>t.id===selectedConversationItem.split('-thread-')[1]):interpretationThreads.filter(t=>t.thread_type==='sentence').sort((a,b)=>new Date(b.updated_at).getTime()-new Date(a.updated_at).getTime())[0],onRefreshThreads:()=>setConversationRefreshTrigger(prev=>prev+1)}),selectedPersonaItem==='recent'&&/*#__PURE__*/_jsx(RecentInteractionsView,{personas:personas,onSelectPersona:handleRecentPersonaSelect,onThreadSelect:handleRecentThreadSelect}),selectedPersonaItem==='verbalization'&&/*#__PURE__*/_jsx(VerbalizationView,{selectedThread:selectedVerbalizationThread,threads:verbalizationThreads,onThreadUpdate:handleVerbalizationThreadUpdate,onCreateNewThread:handleCreateNewVerbalizationThread})]})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useChat","ConversationSidebar","PersonaSidebar","TrainingCategoryView","InterpretationView","RecentInteractionsView","VerbalizationView","ProceedView","SentenceView","GlobalStyle","AppContainer","chatApi","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","_currentInterpretatio","_currentInterpretatio2","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","interpretationThreads","setInterpretationThreads","isInterpretationLoading","setIsInterpretationLoading","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","console","log","threadId","split","selectedThread","find","thread","id","prev","_objectSpread","threadsResponse","getPersonaThreadsByType","personaId","data","foundThread","handlePersonaSelection","persona","length","latestThread","sort","a","b","Date","updated_at","getTime","personaName","name","handleInterpretationComplete","interpretation","handleInterpretationMessage","message","response","chatWithThread","persona_id","user_message","thread_id","thread_type","updated_thread","map","handleInterpretationThreadUpdate","threads","updatedSelectedThread","handleEditInterpretationMessage","messageIndex","newContent","_response$data","editThreadMessage","success","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","mode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","concat","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","loadVerbalizationThreads","getVerbalizationThreads","handleVerbalizationThreadUpdate","currentSelectedId","setTimeout","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","children","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","style","flex","display","flexDirection","overflow","onSelectPersona","onInterpretationComplete","content","onSendMessage","onEditMessage","messages","onGenerateNewInterpretation","onSwitchToMode","onRefreshThreads","proceedContent","filter","t","onThreadUpdate","sentenceContent","onThreadSelect","onCreateNewThread"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport TrainingCategoryView from '../training/components/TrainingCategoryView';\nimport InterpretationView from '../training/components/InterpretationView';\nimport RecentInteractionsView from '../shared/components/RecentInteractionsView';\nimport VerbalizationView from '../verbalization/components/VerbalizationView';\nimport ProceedView from '../training/components/ProceedView';\nimport SentenceView from '../training/components/SentenceView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태 - 실제 스레드 기반으로 변경\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    selectedThread: TrainingThread | null;\n  } | null>(null);\n  \n  // 해석 스레드들 상태\n  const [interpretationThreads, setInterpretationThreads] = useState<TrainingThread[]>([]);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = async (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      \n      // 해석 스레드인 경우 특별 처리\n      if (itemId.includes('interpretation-thread-') && currentInterpretation) {\n        const threadId = itemId.split('interpretation-thread-')[1];\n        console.log('해석 스레드 ID:', threadId);\n        \n        // 해석 스레드 목록에서 해당 스레드 찾기\n        const selectedThread = interpretationThreads.find(thread => thread.id === threadId);\n        \n        if (selectedThread) {\n          console.log('해석 스레드 발견:', selectedThread.id);\n          // 선택된 해석 스레드로 업데이트\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            selectedThread: selectedThread,\n          } : null);\n        } else {\n          console.log('해석 스레드를 찾을 수 없음, 다시 로드 시도');\n          // 스레드를 찾을 수 없으면 다시 로드\n          try {\n            const threadsResponse = await chatApi.getPersonaThreadsByType(currentInterpretation.personaId, 'interpretation');\n            if (threadsResponse.data) {\n              const foundThread = threadsResponse.data.find((thread: TrainingThread) => thread.id === threadId);\n              if (foundThread) {\n                setInterpretationThreads(threadsResponse.data);\n                setCurrentInterpretation(prev => prev ? {\n                  ...prev,\n                  selectedThread: foundThread,\n                } : null);\n                console.log('해석 스레드 재로드 후 선택 완료');\n              }\n            }\n          } catch (error) {\n            console.error('해석 스레드 재로드 실패:', error);\n          }\n        }\n      }\n    }\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = async (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    try {\n      // 해석 스레드들을 가져와서 확인\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      \n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        // 1) 해석 스레드가 있으면 바로 해석 모드로\n        const latestThread = threadsResponse.data.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          selectedThread: latestThread,\n        });\n        \n        setInterpretationThreads(threadsResponse.data);\n        \n        // 페르소나 선택 및 일반 채팅 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 훈습 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n      } else {\n        // 2) 해석 스레드가 없으면 생성 과정 진행\n        // 팝업은 TrainingCategoryView에서 처리\n      }\n    } catch (error) {\n      console.error('해석 스레드 조회 실패:', error);\n      // 해석이 없으면 생성 과정 진행\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    try {\n      // 해석 스레드들을 다시 가져와서 최신 스레드 선택\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      \n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        const latestThread = threadsResponse.data.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona?.name || '',\n          selectedThread: latestThread,\n        });\n        \n        setInterpretationThreads(threadsResponse.data);\n      }\n    } catch (error) {\n      console.error('해석 스레드 로드 실패:', error);\n    }\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation || !currentInterpretation.selectedThread) return false;\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      // 스레드와 채팅 API 사용\n      const response = await chatApi.chatWithThread({\n        persona_id: currentInterpretation.personaId,\n        user_message: message,\n        thread_id: currentInterpretation.selectedThread.id,\n        thread_type: 'interpretation'\n      });\n\n      if (response.data && response.data.updated_thread) {\n        // 선택된 스레드 업데이트\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: response.data!.updated_thread!,\n        } : null);\n        \n        // 스레드 목록도 업데이트\n        setInterpretationThreads(prev => prev.map(thread =>\n          thread.id === response.data!.updated_thread!.id \n            ? response.data!.updated_thread! \n            : thread\n        ));\n\n        setIsInterpretationLoading(false);\n        return true;\n      } else {\n        console.error('해석 스레드 채팅 API 실패:', response.error);\n        setIsInterpretationLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 스레드 업데이트 핸들러\n  const handleInterpretationThreadUpdate = async (threads: TrainingThread[]) => {\n    setInterpretationThreads(threads);\n    \n    // 현재 선택된 스레드가 업데이트된 목록에 있는지 확인\n    if (currentInterpretation?.selectedThread) {\n      const updatedSelectedThread = threads.find(\n        thread => thread.id === currentInterpretation.selectedThread!.id\n      );\n      \n      if (updatedSelectedThread) {\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: updatedSelectedThread,\n        } : null);\n      } else if (threads.length > 0) {\n        // 현재 선택된 스레드가 삭제되었으면 첫 번째 스레드 선택\n        const latestThread = threads.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: latestThread,\n        } : null);\n      } else {\n        // 스레드가 모두 삭제되었으면 해석 모드 종료\n        setCurrentInterpretation(null);\n        setSelectedConversationItem(null);\n      }\n    }\n  };\n\n  // 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!currentInterpretation?.selectedThread) return false;\n\n    try {\n      const response = await chatApi.editThreadMessage(\n        currentInterpretation.selectedThread.id,\n        messageIndex,\n        newContent\n      );\n\n      if (response.data?.success && response.data.updated_thread) {\n        // 선택된 스레드 업데이트\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: response.data!.updated_thread!,\n        } : null);\n        \n        // 스레드 목록도 업데이트\n        setInterpretationThreads(prev => prev.map(thread =>\n          thread.id === response.data!.updated_thread!.id \n            ? response.data!.updated_thread! \n            : thread\n        ));\n\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 오류:', error);\n      return false;\n    }\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = async (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    try {\n      // 해석 스레드들을 가져와서 확인\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      \n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        // 해석 스레드가 있으면 바로 해석 모드로\n        const latestThread = threadsResponse.data.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          selectedThread: latestThread,\n        });\n        \n        setInterpretationThreads(threadsResponse.data);\n        \n        // 페르소나 선택 및 해석 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n      } else {\n        // 해석이 없으면 훈습 모드로 전환\n        setSelectedPersonaItem('training');\n      }\n    } catch (error) {\n      console.error('해석 스레드 조회 실패:', error);\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    try {\n      // 해석 스레드인 경우 해석 모드로\n      if (thread.thread_type === 'interpretation') {\n        // 해석 스레드들을 가져와서 설정\n        const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n        \n        if (threadsResponse.data) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            selectedThread: thread,\n          });\n          \n          setInterpretationThreads(threadsResponse.data);\n          \n          // 페르소나 선택 및 해석 모드로 전환\n          selectPersona(personaId);\n          setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n          setIsConversationSidebarCollapsed(false);\n          setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        }\n      } else {\n        // 다른 타입 스레드들은 기존 로직 유지\n        // 해석 스레드들을 가져와서 확인\n        const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n        \n        if (threadsResponse.data && threadsResponse.data.length > 0) {\n          // 해석이 있으면 바로 해석 모드로\n          const latestThread = threadsResponse.data.sort((a, b) => \n            new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n          )[0];\n          \n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            selectedThread: latestThread,\n          });\n          \n          setInterpretationThreads(threadsResponse.data);\n          \n          // 페르소나 선택 및 해당 스레드 모드로 전환\n          selectPersona(personaId);\n          setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n          setIsConversationSidebarCollapsed(false);\n          setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        } else {\n          // 해석이 없으면 훈습 모드로 전환\n          setSelectedPersonaItem('training');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 조회 실패:', error);\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(\n            thread => thread.id === selectedVerbalizationThread.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 콘텐츠 영역 */}\n        <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n          {/* 훈습 모드 */}\n          {selectedPersonaItem === 'training' && (\n            <TrainingCategoryView\n              personas={personas}\n              onSelectPersona={handlePersonaSelection}\n              onInterpretationComplete={handleInterpretationComplete}\n            />\n          )}\n\n          {/* 해석 모드 */}\n          {selectedConversationItem === 'interpretation' && currentInterpretation?.selectedThread && (\n            <InterpretationView\n              interpretation={currentInterpretation.selectedThread.content}\n              personaName={currentInterpretation.personaName}\n              onSendMessage={handleInterpretationMessage}\n              onEditMessage={handleEditInterpretationMessage}\n              isLoading={isInterpretationLoading}\n              messages={currentInterpretation.selectedThread.messages}\n              onGenerateNewInterpretation={() => setSelectedPersonaItem('training')}\n              onSwitchToMode={(mode) => setSelectedConversationItem(mode)}\n              personaId={currentInterpretation.personaId}\n              onRefreshThreads={() => setConversationRefreshTrigger(prev => prev + 1)}\n            />\n          )}\n\n          {/* 나아가기/문장 모드 - ProceedView/SentenceView 직접 렌더링 */}\n          {selectedConversationItem?.includes('proceed') && currentInterpretation && (\n            <ProceedView\n              personaId={currentInterpretation.personaId}\n              personaName={currentInterpretation.personaName}\n              proceedContent={currentInterpretation.selectedThread?.content || ''}\n              threads={interpretationThreads.filter(t => t.thread_type === 'proceed')}\n              onThreadUpdate={handleInterpretationThreadUpdate}\n              selectedThread={\n                selectedConversationItem.includes('-thread-') \n                  ? interpretationThreads.find(t => t.id === selectedConversationItem.split('-thread-')[1])\n                  : interpretationThreads.filter(t => t.thread_type === 'proceed').sort((a, b) => \n                      new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n                    )[0]\n              }\n              onRefreshThreads={() => setConversationRefreshTrigger(prev => prev + 1)}\n            />\n          )}\n\n          {selectedConversationItem?.includes('sentence') && currentInterpretation && (\n            <SentenceView\n              personaId={currentInterpretation.personaId}\n              personaName={currentInterpretation.personaName}\n              sentenceContent={currentInterpretation.selectedThread?.content || ''}\n              threads={interpretationThreads.filter(t => t.thread_type === 'sentence')}\n              onThreadUpdate={handleInterpretationThreadUpdate}\n              selectedThread={\n                selectedConversationItem.includes('-thread-') \n                  ? interpretationThreads.find(t => t.id === selectedConversationItem.split('-thread-')[1])\n                  : interpretationThreads.filter(t => t.thread_type === 'sentence').sort((a, b) => \n                      new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n                    )[0]\n              }\n              onRefreshThreads={() => setConversationRefreshTrigger(prev => prev + 1)}\n            />\n          )}\n\n          {/* 최근 상호작용 모드 */}\n          {selectedPersonaItem === 'recent' && (\n            <RecentInteractionsView\n              personas={personas}\n              onSelectPersona={handleRecentPersonaSelect}\n              onThreadSelect={handleRecentThreadSelect}\n            />\n          )}\n\n          {/* 언어화 모드 */}\n          {selectedPersonaItem === 'verbalization' && (\n            <VerbalizationView\n              selectedThread={selectedVerbalizationThread}\n              threads={verbalizationThreads}\n              onThreadUpdate={handleVerbalizationThreadUpdate}\n              onCreateNewThread={handleCreateNewVerbalizationThread}\n            />\n          )}\n        </div>\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}