{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const adminApi = {\n  // 페르소나 정보 조회\n  async getPersonaInfo() {\n    try {\n      const response = await api.get('/admin/personas/info');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || '페르소나 정보 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 페르소나 재로딩\n  async reloadPersonas() {\n    try {\n      const response = await api.post('/admin/personas/reload');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || '페르소나 재로딩에 실패했습니다.'\n      };\n    }\n  },\n  // CSV 다운로드 URL 생성\n  getDownloadUrl() {\n    return `${API_BASE_URL}/admin/personas/csv`;\n  },\n  // CSV 업로드\n  async uploadPersonasCSV(file) {\n    try {\n      const formData = new FormData();\n      formData.append('file', file);\n      const response = await api.post('/admin/personas/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || 'CSV 업로드에 실패했습니다.'\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","adminApi","getPersonaInfo","response","get","data","error","_error$response","_error$response$data","detail","reloadPersonas","post","_error$response2","_error$response2$data","getDownloadUrl","uploadPersonasCSV","file","formData","FormData","append","_error$response3","_error$response3$data"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/admin/api/adminApi.ts"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport const adminApi = {\r\n  // 페르소나 정보 조회\r\n  async getPersonaInfo() {\r\n    try {\r\n      const response = await api.get('/admin/personas/info');\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '페르소나 정보 조회에 실패했습니다.' };\r\n    }\r\n  },\r\n\r\n  // 페르소나 재로딩\r\n  async reloadPersonas() {\r\n    try {\r\n      const response = await api.post('/admin/personas/reload');\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '페르소나 재로딩에 실패했습니다.' };\r\n    }\r\n  },\r\n\r\n  // CSV 다운로드 URL 생성\r\n  getDownloadUrl() {\r\n    return `${API_BASE_URL}/admin/personas/csv`;\r\n  },\r\n\r\n  // CSV 업로드\r\n  async uploadPersonasCSV(file: File) {\r\n    try {\r\n      const formData = new FormData();\r\n      formData.append('file', file);\r\n      \r\n      const response = await api.post('/admin/personas/upload', formData, {\r\n        headers: {\r\n          'Content-Type': 'multipart/form-data',\r\n        },\r\n      });\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || 'CSV 업로드에 실패했습니다.' };\r\n    }\r\n  },\r\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAEF,OAAO,MAAMC,QAAQ,GAAG;EACtB;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,sBAAsB,CAAC;MACtD,OAAO;QAAEC,IAAI,EAAEF,QAAQ,CAACE;MAAK,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAC,eAAA,EAAAC,oBAAA;MACnB,OAAO;QAAEF,KAAK,EAAE,EAAAC,eAAA,GAAAD,KAAK,CAACH,QAAQ,cAAAI,eAAA,wBAAAC,oBAAA,GAAdD,eAAA,CAAgBF,IAAI,cAAAG,oBAAA,uBAApBA,oBAAA,CAAsBC,MAAM,KAAI;MAAsB,CAAC;IACzE;EACF,CAAC;EAED;EACA,MAAMC,cAAcA,CAAA,EAAG;IACrB,IAAI;MACF,MAAMP,QAAQ,GAAG,MAAMN,GAAG,CAACc,IAAI,CAAC,wBAAwB,CAAC;MACzD,OAAO;QAAEN,IAAI,EAAEF,QAAQ,CAACE;MAAK,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAM,gBAAA,EAAAC,qBAAA;MACnB,OAAO;QAAEP,KAAK,EAAE,EAAAM,gBAAA,GAAAN,KAAK,CAACH,QAAQ,cAAAS,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBP,IAAI,cAAAQ,qBAAA,uBAApBA,qBAAA,CAAsBJ,MAAM,KAAI;MAAoB,CAAC;IACvE;EACF,CAAC;EAED;EACAK,cAAcA,CAAA,EAAG;IACf,OAAO,GAAGrB,YAAY,qBAAqB;EAC7C,CAAC;EAED;EACA,MAAMsB,iBAAiBA,CAACC,IAAU,EAAE;IAClC,IAAI;MACF,MAAMC,QAAQ,GAAG,IAAIC,QAAQ,CAAC,CAAC;MAC/BD,QAAQ,CAACE,MAAM,CAAC,MAAM,EAAEH,IAAI,CAAC;MAE7B,MAAMb,QAAQ,GAAG,MAAMN,GAAG,CAACc,IAAI,CAAC,wBAAwB,EAAEM,QAAQ,EAAE;QAClEjB,OAAO,EAAE;UACP,cAAc,EAAE;QAClB;MACF,CAAC,CAAC;MACF,OAAO;QAAEK,IAAI,EAAEF,QAAQ,CAACE;MAAK,CAAC;IAChC,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAc,gBAAA,EAAAC,qBAAA;MACnB,OAAO;QAAEf,KAAK,EAAE,EAAAc,gBAAA,GAAAd,KAAK,CAACH,QAAQ,cAAAiB,gBAAA,wBAAAC,qBAAA,GAAdD,gBAAA,CAAgBf,IAAI,cAAAgB,qBAAA,uBAApBA,qBAAA,CAAsBZ,MAAM,KAAI;MAAmB,CAAC;IACtE;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}