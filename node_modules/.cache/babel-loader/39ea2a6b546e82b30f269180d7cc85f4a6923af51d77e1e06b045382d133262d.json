{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject0;import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import{chatApi}from'../../shared/api/chatApi';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import SelectableMessage from'../../training/components/SelectableMessage';import LoadingMessage from'../../shared/components/LoadingMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import{sentenceApi}from'../../training/api/sentenceApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const HeaderSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 20px;\\n  border-bottom: 1px solid #e0e0e0;\\n  background: #f8f9fa;\\n\"])));const HeaderTitle=styled.h2(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  font-size: 24px;\\n  font-weight: 700;\\n  color: #343a40;\\n  margin: 0;\\n\"])));const NewThreadButton=styled.button(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\\n  color: white;\\n  border: none;\\n  border-radius: 8px;\\n  padding: 10px 20px;\\n  font-size: 14px;\\n  font-weight: 600;\\n  cursor: pointer;\\n  transition: all 0.2s ease;\\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\\n\\n  &:hover {\\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\\n    transform: translateY(-1px);\\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\\n  }\\n\\n  &:active {\\n    transform: translateY(0);\\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\\n  }\\n\"])));const ChatSection=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n  line-height: 1.6;\\n\"])));const EmptyIcon=styled.div(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  font-size: 48px;\\n  margin-bottom: 16px;\\n\"])));// 토스트 스타일 컴포넌트 추가\nconst Toast=styled.div(_templateObject0||(_templateObject0=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const VerbalizationView=_ref=>{let{selectedThread,threads,onThreadUpdate,onCreateNewThread}=_ref;const[isLoading,setIsLoading]=useState(false);const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 문장선택 관련 상태 추가\nconst[isSentenceModeActive,setIsSentenceModeActive]=useState(false);const[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});// 텍스트 선택 관련 상태\nconst[selectedText,setSelectedText]=useState('');const[showFAB,setShowFAB]=useState(false);// 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\nconst[localMessages,setLocalMessages]=useState([]);// selectedThread가 변경될 때 localMessages 동기화\nuseEffect(()=>{if(selectedThread){setLocalMessages(selectedThread.messages||[]);}else{setLocalMessages([]);}},[selectedThread]);// 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\nuseEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[localMessages,isLoading]);// 메시지 전송 처리\nconst handleSendMessage=async message=>{if(!message.trim()||isLoading)return false;// 1단계: 사용자 메시지를 즉시 UI에 추가\nconst userMessage={role:'user',content:message.trim(),timestamp:new Date().toISOString()};setLocalMessages(prev=>[...prev,userMessage]);setIsLoading(true);try{console.log('=== 언어화 메시지 전송 ===');console.log('selectedThread:',selectedThread);console.log('message:',message);// 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\nconst response=await chatApi.chatWithVerbalization(message,selectedThread===null||selectedThread===void 0?void 0:selectedThread.id// 스레드가 없으면 undefined 전달\n);console.log('API 응답 전체:',response);console.log('응답 데이터:',response.data);console.log('응답 에러:',response.error);if(response.data){console.log('메시지 전송 성공');console.log('응답 구조:',{thread_id:response.data.thread_id,user_message:response.data.user_message,response:response.data.response,thread_updated_at:response.data.thread_updated_at});// 3단계: AI 응답을 로컬 메시지에 추가\nconst assistantMessage={role:'assistant',content:response.data.response.content,timestamp:response.data.response.timestamp,persona_name:'언어화 도우미'};setLocalMessages(prev=>[...prev,assistantMessage]);// 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n// 스레드 목록과 선택된 스레드를 새로고침\nawait onThreadUpdate();// 새로 생성된 스레드가 선택되도록 추가 처리\nif(!selectedThread&&response.data.thread_id){console.log('새 스레드 생성됨, 선택 업데이트 필요:',response.data.thread_id);// 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\nsetTimeout(async()=>{await onThreadUpdate();},100);}return true;}else{// 실패 시 사용자 메시지 제거\nsetLocalMessages(prev=>prev.slice(0,-1));console.error('메시지 전송 실패:',response.error);showCopyToast(\"\\uC5B8\\uC5B4\\uD654 \\uCC44\\uD305 \\uC2E4\\uD328: \".concat(response.error));return false;}}catch(error){// 오류 시 사용자 메시지 제거\nsetLocalMessages(prev=>prev.slice(0,-1));console.error('메시지 전송 오류:',error);showCopyToast(\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC624\\uB958: \".concat(error));return false;}finally{setIsLoading(false);}};// 새 스레드 생성 처리\nconst handleCreateNewThread=async()=>{try{console.log('=== 새 스레드 생성 시작 ===');// 1단계: 로컬 메시지 초기화 (새 대화 준비)\nsetLocalMessages([]);// 2단계: 새 스레드 생성\nconsole.log('새 스레드 생성 중...');// 3단계: 상위 컴포넌트에 새 스레드 생성 요청\nawait onCreateNewThread();// 4단계: 성공 메시지 표시\nshowCopyToast('새 대화가 시작되었습니다!');console.log('새 스레드 생성 및 선택 완료');}catch(error){console.error('새 스레드 생성 오류:',error);showCopyToast('새 대화 생성에 실패했습니다.');}};// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);showCopyToast('복사 실패');}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 관련 함수들\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};const handleEditMessage=async(messageIndex,newContent)=>{// 언어화에서는 메시지 수정 기능을 제공하지 않음\n// 필요시 추후 구현\nreturn false;};const handleCancelEdit=()=>{setEditingMessageIndex(null);};// 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\nconst handleSunAction=()=>{showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');};const handlePersonAction=()=>{const proceedPrompt=\"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";if(messageInputRef.current){messageInputRef.current.insertText(proceedPrompt);}showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');};const handleDocumentAction=()=>{if(selectedThread&&selectedThread.messages.length>0){const lastAssistantMessage=selectedThread.messages.slice().reverse().find(msg=>msg.role==='assistant');if(lastAssistantMessage){copyToClipboard(lastAssistantMessage.content,'마지막 응답이 복사되었습니다');}else{showCopyToast('복사할 응답이 없습니다');}}};// 텍스트 선택 핸들러\nconst handleTextSelection=()=>{const selection=window.getSelection();if(selection&&selection.toString().trim()){const selectedText=selection.toString().trim();setSelectedText(selectedText);setShowFAB(true);}else{setSelectedText('');setShowFAB(false);}};// 선택 해제 핸들러\nconst handleClearSelection=()=>{setSelectedText('');setShowFAB(false);if(window.getSelection){var _window$getSelection;(_window$getSelection=window.getSelection())===null||_window$getSelection===void 0?void 0:_window$getSelection.removeAllRanges();}};// FloatingActionButton 메뉴 액션 핸들러\nconst handleFABMenuAction=async action=>{switch(action){case'sendToInput':if(messageInputRef.current&&selectedText){messageInputRef.current.insertText(selectedText);showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');}break;case'copy':if(selectedText){await copyToClipboard(selectedText,'선택한 텍스트가 복사되었습니다');}break;case'saveToVault':// 언어화에서는 저장고 기능 미제공\nshowCopyToast('언어화에서는 저장고 기능을 제공하지 않습니다');break;case'addMemo':// 언어화에서는 메모 기능 미제공\nshowCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');break;case'highlight':// 언어화에서는 하이라이트 기능 미제공\nshowCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');break;}// 액션 실행 후 선택 해제\nhandleClearSelection();};// 채팅 메시지 영역에 이벤트 리스너 등록\nuseEffect(()=>{const chatElement=chatMessagesRef.current;if(chatElement){const handleMouseUp=()=>{setTimeout(handleTextSelection,10);// 약간의 지연을 주어 selection이 완료된 후 처리\n};chatElement.addEventListener('mouseup',handleMouseUp);chatElement.addEventListener('touchend',handleMouseUp);return()=>{chatElement.removeEventListener('mouseup',handleMouseUp);chatElement.removeEventListener('touchend',handleMouseUp);};}},[]);// 다른 곳 클릭 시 선택 해제\nuseEffect(()=>{const handleClickOutside=event=>{const target=event.target;// FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\nif(chatMessagesRef.current&&!chatMessagesRef.current.contains(target)&&!target.closest('[data-fab]')){handleClearSelection();}};document.addEventListener('mousedown',handleClickOutside);return()=>{document.removeEventListener('mousedown',handleClickOutside);};},[]);// 문장 선택 관련 핸들러들\nconst handleToggleSelect=sentenceId=>{setSelectedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(sentenceId)){newSet.delete(sentenceId);}else{newSet.add(sentenceId);}return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{try{// 로컬 상태에서 메모 업데이트 (즉시 반영)\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));// 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\nsentenceApi.createOrUpdateMemo({sentence_id:sentenceId,content:memo}).catch(error=>{console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):',error);});}catch(error){console.error('메모 저장 실패:',error);showCopyToast('메모 저장에 실패했습니다');}};const handleDeleteMemo=async sentenceId=>{try{// 로컬 상태에서 메모 삭제\nsetMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});setHighlightedSentences(prev=>{const newSet=new Set(prev);newSet.delete(sentenceId);return newSet;});// 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\nsentenceApi.deleteMemo(sentenceId).catch(error=>{console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):',error);});showCopyToast('메모가 삭제되었습니다');}catch(error){console.error('메모 삭제 실패:',error);showCopyToast('메모 삭제에 실패했습니다');}};// FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\nconst handleMenuAction=async action=>{const selectedIds=Array.from(selectedSentences);const selectedTexts=selectedIds.map(id=>{// sentenceId에서 실제 문장 텍스트를 찾아내는 로직\nconst[timestamp,messageIndex,sentenceIndex]=id.split('_');const message=localMessages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n\\.]+/).map(s=>s.trim()).filter(s=>s.length>0);return sentences[parseInt(sentenceIndex)]||'';}return'';}).filter(text=>text.length>0);switch(action){case'sendToInput':if(messageInputRef.current&&selectedTexts.length>0){const formattedText=selectedTexts.map(text=>\"\\\"\".concat(text,\"\\\"\")).join(', ');messageInputRef.current.insertText(formattedText);}break;case'saveToVault':try{await sentenceApi.saveSentencesToVault({sentences:selectedTexts,source_message_id:'verbalization_chat',source_conversation_id:selectedThread===null||selectedThread===void 0?void 0:selectedThread.id,tags:['verbalization']});selectedIds.forEach(id=>{setHighlightedSentences(prev=>new Set(prev).add(id));});showCopyToast('저장고에 저장되었습니다');}catch(error){console.error('저장고 저장 실패:',error);showCopyToast('저장고 저장에 실패했습니다');}break;case'addMemo':if(selectedIds.length>0){// 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\nconst sortedIds=selectedIds.sort((a,b)=>{const[timestampA,,sentenceIndexA]=a.split('_');const[timestampB,,sentenceIndexB]=b.split('_');if(timestampA!==timestampB){return new Date(timestampA).getTime()-new Date(timestampB).getTime();}return parseInt(sentenceIndexA)-parseInt(sentenceIndexB);});const bottomSentenceId=sortedIds[sortedIds.length-1];// 가장 아래 문장에만 메모 생성 (즉시 반영)\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[bottomSentenceId]:''}));// 모든 선택된 문장에 하이라이트 추가\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.add(id));return newSet;});// 백엔드에 메모 저장 (가장 아래 문장만)\nsentenceApi.createOrUpdateMemo({sentence_id:bottomSentenceId,content:''}).catch(error=>{console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):',error);});// 백엔드에 모든 선택된 문장의 하이라이트 저장\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){selectedIds.forEach(id=>{sentenceApi.createHighlight({sentence_id:id,thread_id:selectedThread.id,thread_type:'verbalization'}).catch(error=>{console.warn('백엔드 하이라이트 저장 실패:',error);});});}console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');}break;case'highlight':// 모든 선택된 문장에 하이라이트 적용/제거\nconsole.log('선택된 문장들:',selectedIds);// 현재 하이라이트된 문장들과 선택된 문장들을 비교\nconst currentlyHighlighted=selectedIds.filter(id=>highlightedSentences.has(id));const notHighlighted=selectedIds.filter(id=>!highlightedSentences.has(id));console.log('현재 하이라이트된 문장들:',currentlyHighlighted);console.log('아직 하이라이트되지 않은 문장들:',notHighlighted);// 하이라이트 상태를 한 번에 업데이트\nif(currentlyHighlighted.length>0){// 일부가 하이라이트되어 있으면 모두 제거\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.delete(id));return newSet;});// 백엔드에서 모든 하이라이트 삭제\nselectedIds.forEach(id=>{sentenceApi.deleteHighlight(id).catch(error=>{console.warn('백엔드 하이라이트 삭제 실패:',error);});});console.log('모든 선택된 문장의 하이라이트 제거');}else{// 모두 하이라이트되지 않았으면 모두 추가\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.add(id));return newSet;});// 백엔드에 모든 하이라이트 저장\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){selectedIds.forEach(id=>{sentenceApi.createHighlight({sentence_id:id,thread_id:selectedThread.id,thread_type:'verbalization'}).catch(error=>{console.warn('백엔드 하이라이트 저장 실패:',error);});});}console.log('모든 선택된 문장에 하이라이트 추가');}break;case'copy':if(selectedTexts.length>0){await copyToClipboard(selectedTexts.join(' '),'선택된 문장이 복사되었습니다');}break;}// 모든 선택 해제\nsetSelectedSentences(new Set());};// 문장선택 모드 토글\nconst handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(HeaderSection,{children:[/*#__PURE__*/_jsx(HeaderTitle,{children:\"\\uC5B8\\uC5B4\\uD654\"}),/*#__PURE__*/_jsx(NewThreadButton,{onClick:handleCreateNewThread,children:\"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\"})]}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[localMessages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(EmptyIcon,{children:\"\\uD83D\\uDCAD\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368\",/*#__PURE__*/_jsx(\"br\",{}),\"\\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"\\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"\\uC5B4\\uB5A4 \\uAC83\\uC774\\uB4E0 \\uC88B\\uC2B5\\uB2C8\\uB2E4. \\uC9C0\\uAE08 \\uB290\\uB07C\\uACE0 \\uC788\\uB294 \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uD3B8\\uC548\\uD558\\uAC8C \\uB9D0\\uC500\\uD574 \\uC8FC\\uC138\\uC694.\"]})]}):localMessages.map((message,index)=>isSentenceModeActive?/*#__PURE__*/_jsx(SelectableMessage,{message:message,messageIndex:index,personas:{},selectedSentences:selectedSentences,highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:handleToggleSelect,onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo},\"\".concat(message.role,\"-\").concat(index)):/*#__PURE__*/_jsx(Message,{message:message,personas:{}// 언어화에서는 페르소나 정보 불필요\n,showActionButtons:true,showThreeActionButtons:false,onCopy:()=>handleCopyMessage(message.content),onEdit:message.role==='user'?()=>handleStartEdit(index):undefined,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit,isEditing:editingMessageIndex===index},\"\".concat(message.role,\"-\").concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:\"\\uC5B8\\uC5B4\\uD654 \\uB3C4\\uC6B0\\uBBF8\",personaColor:\"#666\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:handleSendMessage,disabled:isLoading,placeholder:\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368 \\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,onToggleSentenceMode:handleToggleSentenceMode})})]}),/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsx(FloatingActionButton,{show:isSentenceModeActive?selectedSentences.size>0:showFAB,onMenuAction:isSentenceModeActive?handleMenuAction:handleFABMenuAction,personaId:\"verbalization\",currentInterpretation:\"\"})]});};export default VerbalizationView;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","chatApi","MessageInput","Message","SelectableMessage","LoadingMessage","FloatingActionButton","sentenceApi","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","HeaderSection","_templateObject2","HeaderTitle","h2","_templateObject3","NewThreadButton","button","_templateObject4","ChatSection","_templateObject5","ChatMessages","_templateObject6","ChatInputSection","_templateObject7","EmptyChat","_templateObject8","EmptyIcon","_templateObject9","Toast","_templateObject0","props","show","VerbalizationView","_ref","selectedThread","threads","onThreadUpdate","onCreateNewThread","isLoading","setIsLoading","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","isSentenceModeActive","setIsSentenceModeActive","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","selectedText","setSelectedText","showFAB","setShowFAB","localMessages","setLocalMessages","messages","current","scrollTop","scrollHeight","handleSendMessage","message","trim","userMessage","role","content","timestamp","Date","toISOString","prev","console","log","response","chatWithVerbalization","id","data","error","thread_id","user_message","thread_updated_at","assistantMessage","persona_name","setTimeout","slice","showCopyToast","concat","handleCreateNewThread","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleSunAction","handlePersonAction","proceedPrompt","insertText","handleDocumentAction","length","lastAssistantMessage","reverse","find","msg","handleTextSelection","selection","window","getSelection","toString","handleClearSelection","_window$getSelection","removeAllRanges","handleFABMenuAction","action","chatElement","handleMouseUp","addEventListener","removeEventListener","handleClickOutside","event","target","contains","closest","document","handleToggleSelect","sentenceId","newSet","has","delete","add","handleMemoChange","memo","_objectSpread","createOrUpdateMemo","sentence_id","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","selectedIds","Array","from","selectedTexts","map","sentenceIndex","split","m","sentences","s","filter","parseInt","formattedText","join","saveSentencesToVault","source_message_id","source_conversation_id","tags","forEach","sortedIds","sort","a","b","timestampA","sentenceIndexA","timestampB","sentenceIndexB","getTime","bottomSentenceId","createHighlight","thread_type","currentlyHighlighted","notHighlighted","deleteHighlight","handleToggleSentenceMode","children","onClick","ref","index","personas","onToggleSelect","onMemoChange","onDeleteMemo","showActionButtons","showThreeActionButtons","onCopy","onEdit","undefined","onEditSave","onEditCancel","isEditing","personaName","personaColor","onSendMessage","disabled","placeholder","hasSelectedSentences","size","onToggleSentenceMode","onMenuAction","personaId","currentInterpretation"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/verbalization/components/VerbalizationView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\n\ninterface VerbalizationViewProps {\n  selectedThread: TrainingThread | null;\n  threads: TrainingThread[];\n  onThreadUpdate: () => void;\n  onCreateNewThread: () => Promise<void>;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst VerbalizationView: React.FC<VerbalizationViewProps> = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  \n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n  \n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState<Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n    persona_name?: string;\n  }>>([]);\n\n  // selectedThread가 변경될 때 localMessages 동기화\n  useEffect(() => {\n    if (selectedThread) {\n      setLocalMessages(selectedThread.messages || []);\n    } else {\n      setLocalMessages([]);\n    }\n  }, [selectedThread]);\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message.trim(),\n      timestamp: new Date().toISOString(),\n    };\n    \n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\n      const response = await chatApi.chatWithVerbalization(\n        message,\n        selectedThread?.id // 스레드가 없으면 undefined 전달\n      );\n\n      console.log('API 응답 전체:', response);\n      console.log('응답 데이터:', response.data);\n      console.log('응답 에러:', response.error);\n\n      if (response.data) {\n        console.log('메시지 전송 성공');\n        console.log('응답 구조:', {\n          thread_id: response.data.thread_id,\n          user_message: response.data.user_message,\n          response: response.data.response,\n          thread_updated_at: response.data.thread_updated_at\n        });\n        \n        // 3단계: AI 응답을 로컬 메시지에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_name: '언어화 도우미',\n        };\n        \n        setLocalMessages(prev => [...prev, assistantMessage]);\n        \n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n        // 스레드 목록과 선택된 스레드를 새로고침\n        await onThreadUpdate();\n        \n        // 새로 생성된 스레드가 선택되도록 추가 처리\n        if (!selectedThread && response.data.thread_id) {\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\n          setTimeout(async () => {\n            await onThreadUpdate();\n          }, 100);\n        }\n        \n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n      \n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n      \n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n      \n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n      \n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      \n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\n  const handleSunAction = () => {\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\n  };\n\n  const handlePersonAction = () => {\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\n  };\n\n  const handleDocumentAction = () => {\n    if (selectedThread && selectedThread.messages.length > 0) {\n      const lastAssistantMessage = selectedThread.messages\n        .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n      if (lastAssistantMessage) {\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\n      } else {\n        showCopyToast('복사할 응답이 없습니다');\n      }\n    }\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      window.getSelection()?.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      \n      case 'saveToVault':\n        // 언어화에서는 저장고 기능 미제공\n        showCopyToast('언어화에서는 저장고 기능을 제공하지 않습니다');\n        break;\n      \n      case 'addMemo':\n        // 언어화에서는 메모 기능 미제공\n        showCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');\n        break;\n      \n      case 'highlight':\n        // 언어화에서는 하이라이트 기능 미제공\n        showCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');\n        break;\n    }\n    \n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = localMessages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread?.id,\n            tags: ['verbalization']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'verbalization'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          \n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'verbalization'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      {/* 헤더 */}\n      <HeaderSection>\n        <HeaderTitle>언어화</HeaderTitle>\n        <NewThreadButton onClick={handleCreateNewThread}>\n          새 대화 시작\n        </NewThreadButton>\n      </HeaderSection>\n\n      {/* 채팅 영역 */}\n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {localMessages.length === 0 ? (\n            <EmptyChat>\n              <EmptyIcon>💭</EmptyIcon>\n              <div>\n                <strong>언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써<br />\n                그것을 인식하고 만들어 가는 것입니다.</strong>\n                <br /><br />\n                자유롭게 당신의 생각을 말로 내뱉으세요!\n                <br /><br />\n                어떤 것이든 좋습니다. 지금 느끼고 있는 감정이나 생각을 편안하게 말씀해 주세요.\n              </div>\n            </EmptyChat>\n          ) : (\n            localMessages.map((message, index) => (\n              isSentenceModeActive ? (\n                <SelectableMessage\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  messageIndex={index}\n                  personas={{}}\n                  selectedSentences={selectedSentences}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={handleToggleSelect}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                />\n              ) : (\n                <Message\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  personas={{}} // 언어화에서는 페르소나 정보 불필요\n                  showActionButtons={true}\n                  showThreeActionButtons={false}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={message.role === 'user' ? () => handleStartEdit(index) : undefined}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                  isEditing={editingMessageIndex === index}\n                />\n              )\n            ))\n          )}\n          \n          {/* 로딩 메시지 */}\n          {isLoading && (\n            <LoadingMessage \n              personaName=\"언어화 도우미\"\n              personaColor=\"#666\"\n            />\n          )}\n        </ChatMessages>\n\n        {/* 입력창 */}\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder=\"언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써 그것을 인식하고 만들어 가는 것입니다. 자유롭게 당신의 생각을 말로 내뱉으세요!\"\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            onToggleSentenceMode={handleToggleSentenceMode}\n          />\n        </ChatInputSection>\n      </ChatSection>\n\n      {/* 토스트 메시지 */}\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n\n      {/* FloatingActionButton */}\n      <FloatingActionButton\n        show={isSentenceModeActive ? selectedSentences.size > 0 : showFAB}\n        onMenuAction={isSentenceModeActive ? handleMenuAction : handleFABMenuAction}\n        personaId=\"verbalization\"\n        currentInterpretation=\"\"\n      />\n    </Container>\n  );\n};\n\nexport default VerbalizationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}