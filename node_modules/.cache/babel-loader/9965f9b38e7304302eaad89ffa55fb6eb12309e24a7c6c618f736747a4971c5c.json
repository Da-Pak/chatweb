{"ast":null,"code":"import { API_BASE_URL } from '../api/chatApi';\n/**\r\n * 공통 API 클라이언트 - fetch 패턴 통합\r\n */\nexport async function apiRequest(endpoint, options = {}) {\n  const {\n    method = 'GET',\n    body,\n    headers = {},\n    timeout = getTimeoutForEndpoint(endpoint)\n  } = options;\n\n  // 기본 헤더 설정\n  const defaultHeaders = {\n    'Content-Type': 'application/json',\n    ...headers\n  };\n  try {\n    // 타임아웃 설정\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method,\n      headers: defaultHeaders,\n      body: body ? JSON.stringify(body) : undefined,\n      signal: controller.signal\n    });\n    clearTimeout(timeoutId);\n\n    // 응답 처리\n    if (response.ok) {\n      const data = await response.json();\n      return {\n        data\n      };\n    } else {\n      const errorData = await response.json().catch(() => null);\n      const errorMessage = (errorData === null || errorData === void 0 ? void 0 : errorData.detail) || `서버 오류 (${response.status})`;\n      return {\n        error: errorMessage\n      };\n    }\n  } catch (error) {\n    var _error$message;\n    if (error.name === 'AbortError') {\n      return {\n        error: `요청 시간 초과: 서버 응답이 너무 늦습니다. (${timeout / 1000}초 초과)`\n      };\n    } else if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('fetch')) {\n      return {\n        error: '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.'\n      };\n    } else {\n      return {\n        error: `네트워크 오류: ${error.message || error}`\n      };\n    }\n  }\n}\n\n/**\r\n * 엔드포인트에 따른 타임아웃 설정\r\n */\nfunction getTimeoutForEndpoint(endpoint) {\n  // 해석 생성 관련 API는 더 긴 타임아웃 설정\n  if (endpoint.includes('/interpretations/generate') || endpoint.includes('/interpretations/generate-all') || endpoint.includes('/interpretations/generate-with-extras')) {\n    return 60000; // 60초\n  }\n\n  // 채팅 관련 API도 더 긴 타임아웃\n  if (endpoint.includes('/chat/') || endpoint.includes('/threads/chat') || endpoint.includes('/verbalization/chat')) {\n    return 30000; // 30초\n  }\n\n  // 기본 타임아웃\n  return 15000; // 15초 (기본값을 10초에서 15초로 증가)\n}\n\n/**\r\n * 공통 GET 요청\r\n */\nexport async function apiGet(endpoint) {\n  return apiRequest(endpoint, {\n    method: 'GET'\n  });\n}\n\n/**\r\n * 공통 POST 요청\r\n */\nexport async function apiPost(endpoint, body) {\n  return apiRequest(endpoint, {\n    method: 'POST',\n    body\n  });\n}\n\n/**\r\n * 공통 PUT 요청\r\n */\nexport async function apiPut(endpoint, body) {\n  return apiRequest(endpoint, {\n    method: 'PUT',\n    body\n  });\n}\n\n/**\r\n * 공통 DELETE 요청\r\n */\nexport async function apiDelete(endpoint) {\n  return apiRequest(endpoint, {\n    method: 'DELETE'\n  });\n}\n\n/**\r\n * 에러 처리 유틸리티\r\n */\nexport function handleApiError(error, defaultMessage = '작업에 실패했습니다') {\n  var _error$response, _error$response$data;\n  if (error !== null && error !== void 0 && (_error$response = error.response) !== null && _error$response !== void 0 && (_error$response$data = _error$response.data) !== null && _error$response$data !== void 0 && _error$response$data.detail) {\n    return error.response.data.detail;\n  }\n  if (error !== null && error !== void 0 && error.message) {\n    return error.message;\n  }\n  return defaultMessage;\n}\n\n/**\r\n * 저장고 관리를 위한 제네릭 클래스\r\n */\nexport class VaultManager {\n  constructor(baseEndpoint) {\n    this.baseEndpoint = baseEndpoint;\n  }\n  async getAll() {\n    return apiGet(this.baseEndpoint);\n  }\n  async create(request) {\n    return apiPost(this.baseEndpoint, request);\n  }\n  async delete(id) {\n    return apiDelete(`${this.baseEndpoint}/${id}`);\n  }\n  async update(id, request) {\n    return apiPut(`${this.baseEndpoint}/${id}`, request);\n  }\n  async interact(id, request = {}) {\n    return apiPost(`${this.baseEndpoint}/${id}/interact`, request);\n  }\n}\n\n/**\r\n * 통합 채팅 함수\r\n */\n\nexport async function universalChat(request) {\n  const {\n    personaId,\n    message,\n    contextType,\n    contextContent,\n    threadId,\n    conversationId\n  } = request;\n\n  // 채팅 타입에 따른 엔드포인트 결정\n  if (contextType === 'verbalization') {\n    return apiPost('/verbalization/chat', {\n      user_message: message,\n      thread_id: threadId\n    });\n  } else if (threadId) {\n    return apiPost('/threads/chat', {\n      thread_id: threadId,\n      user_message: message\n    });\n  } else if (contextType && contextContent) {\n    return apiPost('/chat/with-context', {\n      persona_id: personaId,\n      user_message: message,\n      context_type: contextType,\n      context_content: contextContent,\n      thread_id: threadId\n    });\n  } else if (conversationId) {\n    return apiPost('/chat/continue', {\n      persona_id: personaId,\n      user_message: message,\n      conversation_id: conversationId\n    });\n  } else {\n    return apiPost('/chat/initial', {\n      content: message\n    });\n  }\n}","map":{"version":3,"names":["API_BASE_URL","apiRequest","endpoint","options","method","body","headers","timeout","getTimeoutForEndpoint","defaultHeaders","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","JSON","stringify","undefined","signal","clearTimeout","ok","data","json","errorData","catch","errorMessage","detail","status","error","_error$message","name","message","includes","apiGet","apiPost","apiPut","apiDelete","handleApiError","defaultMessage","_error$response","_error$response$data","VaultManager","constructor","baseEndpoint","getAll","create","request","delete","id","update","interact","universalChat","personaId","contextType","contextContent","threadId","conversationId","user_message","thread_id","persona_id","context_type","context_content","conversation_id","content"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/shared/utils/apiUtils.ts"],"sourcesContent":["import { API_BASE_URL } from '../api/chatApi';\r\n\r\nexport interface ApiRequestOptions {\r\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\r\n  body?: any;\r\n  headers?: Record<string, string>;\r\n  timeout?: number;\r\n}\r\n\r\nexport interface ApiResponse<T> {\r\n  data?: T;\r\n  error?: string;\r\n}\r\n\r\n/**\r\n * 공통 API 클라이언트 - fetch 패턴 통합\r\n */\r\nexport async function apiRequest<T>(\r\n  endpoint: string, \r\n  options: ApiRequestOptions = {}\r\n): Promise<ApiResponse<T>> {\r\n  const {\r\n    method = 'GET',\r\n    body,\r\n    headers = {},\r\n    timeout = getTimeoutForEndpoint(endpoint)\r\n  } = options;\r\n\r\n  // 기본 헤더 설정\r\n  const defaultHeaders: Record<string, string> = {\r\n    'Content-Type': 'application/json',\r\n    ...headers\r\n  };\r\n\r\n  try {\r\n    // 타임아웃 설정\r\n    const controller = new AbortController();\r\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\r\n\r\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\r\n      method,\r\n      headers: defaultHeaders,\r\n      body: body ? JSON.stringify(body) : undefined,\r\n      signal: controller.signal,\r\n    });\r\n\r\n    clearTimeout(timeoutId);\r\n\r\n    // 응답 처리\r\n    if (response.ok) {\r\n      const data = await response.json();\r\n      return { data };\r\n    } else {\r\n      const errorData = await response.json().catch(() => null);\r\n      const errorMessage = errorData?.detail || `서버 오류 (${response.status})`;\r\n      return { error: errorMessage };\r\n    }\r\n\r\n  } catch (error: any) {\r\n    if (error.name === 'AbortError') {\r\n      return { error: `요청 시간 초과: 서버 응답이 너무 늦습니다. (${timeout/1000}초 초과)` };\r\n    } else if (error.message?.includes('fetch')) {\r\n      return { error: '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.' };\r\n    } else {\r\n      return { error: `네트워크 오류: ${error.message || error}` };\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * 엔드포인트에 따른 타임아웃 설정\r\n */\r\nfunction getTimeoutForEndpoint(endpoint: string): number {\r\n  // 해석 생성 관련 API는 더 긴 타임아웃 설정\r\n  if (endpoint.includes('/interpretations/generate') || \r\n      endpoint.includes('/interpretations/generate-all') ||\r\n      endpoint.includes('/interpretations/generate-with-extras')) {\r\n    return 60000; // 60초\r\n  }\r\n  \r\n  // 채팅 관련 API도 더 긴 타임아웃\r\n  if (endpoint.includes('/chat/') || \r\n      endpoint.includes('/threads/chat') ||\r\n      endpoint.includes('/verbalization/chat')) {\r\n    return 30000; // 30초\r\n  }\r\n  \r\n  // 기본 타임아웃\r\n  return 15000; // 15초 (기본값을 10초에서 15초로 증가)\r\n}\r\n\r\n/**\r\n * 공통 GET 요청\r\n */\r\nexport async function apiGet<T>(endpoint: string): Promise<ApiResponse<T>> {\r\n  return apiRequest<T>(endpoint, { method: 'GET' });\r\n}\r\n\r\n/**\r\n * 공통 POST 요청\r\n */\r\nexport async function apiPost<T>(endpoint: string, body?: any): Promise<ApiResponse<T>> {\r\n  return apiRequest<T>(endpoint, { method: 'POST', body });\r\n}\r\n\r\n/**\r\n * 공통 PUT 요청\r\n */\r\nexport async function apiPut<T>(endpoint: string, body?: any): Promise<ApiResponse<T>> {\r\n  return apiRequest<T>(endpoint, { method: 'PUT', body });\r\n}\r\n\r\n/**\r\n * 공통 DELETE 요청\r\n */\r\nexport async function apiDelete<T>(endpoint: string): Promise<ApiResponse<T>> {\r\n  return apiRequest<T>(endpoint, { method: 'DELETE' });\r\n}\r\n\r\n/**\r\n * 에러 처리 유틸리티\r\n */\r\nexport function handleApiError(error: any, defaultMessage: string = '작업에 실패했습니다'): string {\r\n  if (error?.response?.data?.detail) {\r\n    return error.response.data.detail;\r\n  }\r\n  if (error?.message) {\r\n    return error.message;\r\n  }\r\n  return defaultMessage;\r\n}\r\n\r\n/**\r\n * 저장고 관리를 위한 제네릭 클래스\r\n */\r\nexport class VaultManager<T, CreateRequest, UpdateRequest = Partial<CreateRequest>> {\r\n  constructor(private baseEndpoint: string) {}\r\n\r\n  async getAll(): Promise<ApiResponse<T[]>> {\r\n    return apiGet<T[]>(this.baseEndpoint);\r\n  }\r\n\r\n  async create(request: CreateRequest): Promise<ApiResponse<{ success: boolean; message: string; saved_item?: T }>> {\r\n    return apiPost(this.baseEndpoint, request);\r\n  }\r\n\r\n  async delete(id: string): Promise<ApiResponse<{ success: boolean; message: string }>> {\r\n    return apiDelete(`${this.baseEndpoint}/${id}`);\r\n  }\r\n\r\n  async update(id: string, request: UpdateRequest): Promise<ApiResponse<{ success: boolean; message: string; updated_item?: T }>> {\r\n    return apiPut(`${this.baseEndpoint}/${id}`, request);\r\n  }\r\n\r\n  async interact(id: string, request: any = {}): Promise<ApiResponse<any>> {\r\n    return apiPost(`${this.baseEndpoint}/${id}/interact`, request);\r\n  }\r\n}\r\n\r\n/**\r\n * 통합 채팅 함수\r\n */\r\nexport interface ChatRequest {\r\n  personaId: string;\r\n  message: string;\r\n  contextType?: 'interpretation' | 'proceed' | 'sentence' | 'verbalization';\r\n  contextContent?: string;\r\n  threadId?: string;\r\n  conversationId?: string;\r\n}\r\n\r\nexport async function universalChat(request: ChatRequest): Promise<ApiResponse<any>> {\r\n  const { personaId, message, contextType, contextContent, threadId, conversationId } = request;\r\n\r\n  // 채팅 타입에 따른 엔드포인트 결정\r\n  if (contextType === 'verbalization') {\r\n    return apiPost('/verbalization/chat', {\r\n      user_message: message,\r\n      thread_id: threadId\r\n    });\r\n  } else if (threadId) {\r\n    return apiPost('/threads/chat', {\r\n      thread_id: threadId,\r\n      user_message: message\r\n    });\r\n  } else if (contextType && contextContent) {\r\n    return apiPost('/chat/with-context', {\r\n      persona_id: personaId,\r\n      user_message: message,\r\n      context_type: contextType,\r\n      context_content: contextContent,\r\n      thread_id: threadId\r\n    });\r\n  } else if (conversationId) {\r\n    return apiPost('/chat/continue', {\r\n      persona_id: personaId,\r\n      user_message: message,\r\n      conversation_id: conversationId\r\n    });\r\n  } else {\r\n    return apiPost('/chat/initial', { content: message });\r\n  }\r\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}