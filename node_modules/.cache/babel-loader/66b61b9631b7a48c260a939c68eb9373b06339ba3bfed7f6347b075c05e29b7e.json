{"ast":null,"code":"import { API_BASE_URL } from '../../shared/api/chatApi';\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request) {\n    try {\n      console.log('=== 저장고 저장 시작 (하이라이트/메모 통합) ===');\n      console.log('요청 데이터:', JSON.stringify(request, null, 2));\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          const errorText = await response.text();\n          console.error('JSON 파싱 실패, 원시 오류 응답:', errorText);\n          throw new Error(`서버 오류 (${response.status}): ${errorText}`);\n        }\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || `서버 오류 (${response.status})`);\n      }\n      const result = await response.json();\n      console.log('성공 응답:', JSON.stringify(result, null, 2));\n      console.log('=== 저장고 저장 완료 ===');\n      return result;\n    } catch (error) {\n      console.error('저장고 저장 오류:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');\n      }\n      throw error;\n    }\n  }\n  async getVaultSentences() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteVaultSentence(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n  async restoreVaultSentence(vaultSentenceId, request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${vaultSentenceId}/restore`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 복원 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('문장 복원 오류:', error);\n      throw error;\n    }\n  }\n  async updateVaultSentence(sentenceId, request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 업데이트 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('문장 업데이트 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n      if (response.status === 404) {\n        return null;\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '메모가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n  async deleteHighlight(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '하이라이트가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 스레드별 메모와 하이라이트 데이터 불러오기\n  async getThreadSentenceData(threadId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/threads/${threadId}/sentence-data`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 문장 데이터 조회 실패');\n      }\n      const result = await response.json();\n      return result || {\n        memos: {},\n        highlights: []\n      };\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 오류:', error);\n      // 실패 시 빈 데이터 반환\n      return {\n        memos: {},\n        highlights: []\n      };\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n}\nexport const sentenceApi = new SentenceApi();","map":{"version":3,"names":["API_BASE_URL","SentenceApi","saveSentencesToVault","request","console","log","JSON","stringify","response","fetch","method","headers","body","status","ok","errorData","json","e","errorText","text","error","Error","detail","result","name","message","includes","getVaultSentences","deleteVaultSentence","sentenceId","restoreVaultSentence","vaultSentenceId","updateVaultSentence","createOrUpdateMemo","getMemo","deleteMemo","success","createHighlight","deleteHighlight","getThreadSentenceData","threadId","memos","highlights","getAllMemos","getAllHighlights","getThreadHighlights","sentenceApi"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/api/sentenceApi.ts"],"sourcesContent":["import { API_BASE_URL } from '../../shared/api/chatApi';\r\n\r\nexport interface SentenceVaultItem {\r\n  id: string;\r\n  sentence: string;\r\n  source_message_id: string;\r\n  source_conversation_id?: string;\r\n  source_thread_id?: string;  // 원본 스레드 ID\r\n  source_thread_type?: string;  // 원본 스레드 타입\r\n  source_sentence_id?: string;  // 원본 문장 ID\r\n  created_at: string;\r\n  tags: string[];\r\n  metadata?: Record<string, any>;\r\n  \r\n  // 통합된 문장 상태 정보\r\n  is_highlighted: boolean;  // 하이라이트 여부\r\n  highlight_color?: string;  // 하이라이트 색상\r\n  memo_content?: string;  // 메모 내용\r\n  is_pinned: boolean;  // 고정 여부\r\n}\r\n\r\nexport interface SentenceVaultRequest {\r\n  sentences: string[];\r\n  source_message_id: string;\r\n  source_conversation_id?: string;\r\n  source_thread_id?: string;\r\n  source_thread_type?: string;\r\n  source_sentence_ids?: string[];  // 원본 문장 ID들\r\n  tags?: string[];\r\n  \r\n  // 각 문장별 상태 정보 (sentences와 동일한 순서)\r\n  highlight_states?: boolean[];  // 하이라이트 여부\r\n  highlight_colors?: (string | null)[];  // 하이라이트 색상\r\n  memo_contents?: (string | null)[];  // 메모 내용\r\n}\r\n\r\nexport interface SentenceVaultResponse {\r\n  success: boolean;\r\n  message: string;\r\n  saved_items: SentenceVaultItem[];\r\n}\r\n\r\nexport interface VaultRestoreRequest {\r\n  thread_id: string;\r\n  sentence_id: string;\r\n}\r\n\r\nexport interface VaultRestoreResponse {\r\n  success: boolean;\r\n  message: string;\r\n  restored_highlight: boolean;\r\n  restored_memo: boolean;\r\n  highlight_color?: string;\r\n  memo_content?: string;\r\n}\r\n\r\nexport interface VaultUpdateRequest {\r\n  is_highlighted?: boolean;\r\n  highlight_color?: string;\r\n  memo_content?: string;\r\n  is_pinned?: boolean;\r\n  tags?: string[];\r\n}\r\n\r\nexport interface VaultUpdateResponse {\r\n  success: boolean;\r\n  message: string;\r\n  updated_item: SentenceVaultItem;\r\n}\r\n\r\nexport interface SentenceMemo {\r\n  id: string;\r\n  sentence_id: string;\r\n  content: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface SentenceMemoRequest {\r\n  sentence_id: string;\r\n  content: string;\r\n}\r\n\r\nexport interface SentenceMemoResponse {\r\n  success: boolean;\r\n  message: string;\r\n  memo?: SentenceMemo;\r\n}\r\n\r\nexport interface SentenceHighlight {\r\n  id: string;\r\n  sentence_id: string;\r\n  thread_id: string;\r\n  thread_type: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface SentenceHighlightRequest {\r\n  sentence_id: string;\r\n  thread_id: string;\r\n  thread_type: string;\r\n}\r\n\r\nexport interface SentenceHighlightResponse {\r\n  success: boolean;\r\n  message: string;\r\n  highlight?: SentenceHighlight;\r\n}\r\n\r\nexport interface ThreadSentenceData {\r\n  memos: Record<string, string>;\r\n  highlights: string[];\r\n}\r\n\r\nclass SentenceApi {\r\n  // 저장고 관련 API\r\n  async saveSentencesToVault(request: SentenceVaultRequest): Promise<SentenceVaultResponse> {\r\n    try {\r\n      console.log('=== 저장고 저장 시작 (하이라이트/메모 통합) ===');\r\n      console.log('요청 데이터:', JSON.stringify(request, null, 2));\r\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\r\n      \r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      console.log('HTTP 응답 상태:', response.status);\r\n      console.log('HTTP 응답 OK:', response.ok);\r\n\r\n      if (!response.ok) {\r\n        let errorData;\r\n        try {\r\n          errorData = await response.json();\r\n        } catch (e) {\r\n          const errorText = await response.text();\r\n          console.error('JSON 파싱 실패, 원시 오류 응답:', errorText);\r\n          throw new Error(`서버 오류 (${response.status}): ${errorText}`);\r\n        }\r\n        console.error('서버 오류 응답:', errorData);\r\n        throw new Error(errorData.detail || `서버 오류 (${response.status})`);\r\n      }\r\n\r\n      const result = await response.json();\r\n      console.log('성공 응답:', JSON.stringify(result, null, 2));\r\n      console.log('=== 저장고 저장 완료 ===');\r\n      return result;\r\n    } catch (error: any) {\r\n      console.error('저장고 저장 오류:', error);\r\n      \r\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\r\n        throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');\r\n      }\r\n      \r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getVaultSentences(): Promise<SentenceVaultItem[]> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '저장고 조회 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('저장고 조회 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteVaultSentence(sentenceId: string): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '문장 삭제 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('문장 삭제 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async restoreVaultSentence(vaultSentenceId: string, request: VaultRestoreRequest): Promise<VaultRestoreResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${vaultSentenceId}/restore`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '문장 복원 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('문장 복원 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async updateVaultSentence(sentenceId: string, request: VaultUpdateRequest): Promise<VaultUpdateResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\r\n        method: 'PUT',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '문장 업데이트 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('문장 업데이트 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 메모 관련 API\r\n  async createOrUpdateMemo(request: SentenceMemoRequest): Promise<SentenceMemoResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/memos`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '메모 저장 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('메모 저장 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMemo(sentenceId: string): Promise<SentenceMemo | null> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\r\n\r\n      if (response.status === 404) {\r\n        return null;\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '메모 조회 실패');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result || null;\r\n    } catch (error) {\r\n      console.error('메모 조회 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteMemo(sentenceId: string): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\r\n      if (response.status === 404) {\r\n        return { success: true, message: '메모가 이미 삭제되었습니다' };\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '메모 삭제 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('메모 삭제 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 하이라이트 관련 API\r\n  async createHighlight(request: SentenceHighlightRequest): Promise<SentenceHighlightResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('하이라이트 저장 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteHighlight(sentenceId: string): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\r\n      if (response.status === 404) {\r\n        return { success: true, message: '하이라이트가 이미 삭제되었습니다' };\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('하이라이트 삭제 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 스레드별 메모와 하이라이트 데이터 불러오기\r\n  async getThreadSentenceData(threadId: string): Promise<ThreadSentenceData> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/threads/${threadId}/sentence-data`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '스레드 문장 데이터 조회 실패');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result || { memos: {}, highlights: [] };\r\n    } catch (error) {\r\n      console.error('스레드 문장 데이터 조회 오류:', error);\r\n      // 실패 시 빈 데이터 반환\r\n      return { memos: {}, highlights: [] };\r\n    }\r\n  }\r\n\r\n  // 전체 메모 조회\r\n  async getAllMemos(): Promise<Record<string, string>> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/memos`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('전체 메모 조회 오류:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\r\n  async getAllHighlights(): Promise<Record<string, string[]>> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/highlights`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('전체 하이라이트 조회 오류:', error);\r\n      return {};\r\n    }\r\n  }\r\n\r\n  // 특정 스레드의 하이라이트 조회\r\n  async getThreadHighlights(threadId: string): Promise<string[]> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result.highlights || [];\r\n    } catch (error) {\r\n      console.error('스레드 하이라이트 조회 오류:', error);\r\n      return [];\r\n    }\r\n  }\r\n}\r\n\r\nexport const sentenceApi = new SentenceApi();\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}