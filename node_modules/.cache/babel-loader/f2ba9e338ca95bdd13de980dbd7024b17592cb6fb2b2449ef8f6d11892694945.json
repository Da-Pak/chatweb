{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver4\\\\frontend\\\\src\\\\features\\\\verbalization\\\\components\\\\VerbalizationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\nimport { useSentenceData } from '../../shared/hooks/useSentenceData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n_c2 = HeaderSection;\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n_c3 = HeaderTitle;\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n_c4 = NewThreadButton;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c5 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c6 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c7 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n_c8 = EmptyChat;\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c9 = EmptyIcon;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.$show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c0 = Toast;\nconst VerbalizationView = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n\n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n\n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState([]);\n\n  // useSentenceData 훅 사용\n  const sentenceDataHook = useSentenceData(selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('=== 언어화 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n\n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n\n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      console.log('=== 언어화 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\n  useEffect(() => {\n    console.log('=== 언어화 selectedThread 변경 ===');\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages);\n    if (selectedThread) {\n      // 스레드 메시지들을 localMessages로 동기화\n      const threadMessages = selectedThread.messages || [];\n      console.log('스레드 메시지들:', threadMessages.map(m => {\n        var _m$content;\n        return {\n          role: m.role,\n          content: ((_m$content = m.content) === null || _m$content === void 0 ? void 0 : _m$content.substring(0, 50)) + '...',\n          timestamp: m.timestamp\n        };\n      }));\n      setLocalMessages(threadMessages);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    } else {\n      console.log('selectedThread가 없음 - localMessages 초기화');\n      setLocalMessages([]);\n      // 스레드가 없으면 데이터 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  }, [selectedThread, selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async message => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message.trim(),\n      timestamp: new Date().toISOString()\n    };\n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출\n      const response = await chatApi.chatWithVerbalization(message, selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n      if (response.data && response.data.success) {\n        // 3단계: AI 응답을 로컬에 직접 추가하는 대신, 부모 컴포넌트에 스레드 업데이트를 알려 동기화합니다.\n        // 이 방식이 상태 동기화 문제를 해결합니다.\n        console.log('스레드 업데이트 시작');\n        await onThreadUpdate();\n        console.log('스레드 업데이트 완료');\n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error instanceof Error ? error.message : String(error)}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n\n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n\n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n\n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n\n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async action => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      case 'saveToVault':\n        // 언어화에서도 저장고 기능 제공\n        if (selectedText) {\n          try {\n            console.log('=== 언어화 텍스트 선택 저장고 저장 시작 ===');\n            console.log('선택된 텍스트:', selectedText);\n            console.log('선택된 스레드:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n            if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n              console.warn('선택된 스레드가 없습니다');\n              showCopyToast('저장할 스레드를 선택해주세요');\n              break;\n            }\n            const saveRequest = {\n              sentences: [selectedText],\n              source_message_id: 'verbalization_text_selection',\n              source_conversation_id: selectedThread.id,\n              source_thread_id: selectedThread.id,\n              source_thread_type: 'verbalization',\n              tags: ['verbalization', 'text_selection']\n            };\n            console.log('텍스트 선택 저장 요청:', saveRequest);\n            const response = await sentenceApi.saveSentencesToVault(saveRequest);\n            console.log('텍스트 선택 저장 응답:', response);\n            console.log('=== 언어화 텍스트 선택 저장고 저장 완료 ===');\n            showCopyToast('저장고에 저장되었습니다');\n          } catch (error) {\n            console.error('=== 언어화 텍스트 선택 저장고 저장 실패 ===', error);\n            console.error('오류 세부사항:', {\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined\n            });\n            showCopyToast(`저장고 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        } else {\n          console.warn('선택된 텍스트가 없습니다');\n          showCopyToast('저장할 텍스트를 선택해주세요');\n        }\n        break;\n      case 'addMemo':\n        // 언어화에서도 메모 기능 제공\n        if (selectedText) {\n          try {\n            // 임시 메모 ID 생성 (선택된 텍스트 기반)\n            const tempMemoId = `verbalization_text_${Date.now()}`;\n\n            // 선택된 텍스트에 대한 메모 프롬프트\n            const memo = prompt('선택한 텍스트에 대한 메모를 입력하세요:', selectedText);\n            if (memo) {\n              // 간단한 로컬 메모 저장 (실제로는 더 복잡한 로직 필요)\n              showCopyToast(`메모가 저장되었습니다: ${memo.substring(0, 30)}${memo.length > 30 ? '...' : ''}`);\n            }\n          } catch (error) {\n            console.error('메모 저장 오류:', error);\n            showCopyToast('메모 저장에 실패했습니다');\n          }\n        }\n        break;\n      case 'highlight':\n        // 언어화에서도 하이라이트 기능 제공\n        if (selectedText) {\n          showCopyToast('텍스트가 하이라이트되었습니다');\n        }\n        break;\n    }\n\n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = event => {\n      const target = event.target;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = sentenceId => {\n    console.log('handleToggleSelect 시작:', sentenceId);\n    console.log('현재 selectedSentences:', Array.from(selectedSentences));\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      const wasSelected = newSet.has(sentenceId);\n      if (wasSelected) {\n        newSet.delete(sentenceId);\n        console.log('문장 선택 해제:', sentenceId);\n      } else {\n        newSet.add(sentenceId);\n        console.log('문장 선택 추가:', sentenceId);\n      }\n      console.log('새로운 selectedSentences:', Array.from(newSet));\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    console.log('=== 언어화 메모 저장 시작: 디버깅 강화 ===');\n    console.log('Sentence ID:', sentenceId);\n    console.log('Memo:', memo);\n    const [timestamp, messageIndexStr, sentenceIndexStr] = sentenceId.split('_');\n    const messageIndex = parseInt(messageIndexStr);\n    const sentenceIndex = parseInt(sentenceIndexStr);\n    console.log('Parsed Info:', {\n      timestamp,\n      messageIndex,\n      sentenceIndex\n    });\n    let sentenceContent = '';\n\n    // 타임스탬프와 인덱스를 모두 사용하여 메시지를 더 정확하게 찾습니다.\n    const message = localMessages.find((msg, idx) => (msg.timestamp === timestamp || idx === messageIndex) && msg.role === 'assistant');\n    console.log('전체 localMessages 타임스탬프 목록:');\n    localMessages.forEach((m, i) => console.log(`- [${i}] ${m.timestamp}`));\n    if (message) {\n      console.log('메시지 찾음:', message.content.substring(0, 50) + '...');\n      const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n      if (sentenceIndex < sentences.length) {\n        sentenceContent = sentences[sentenceIndex];\n        console.log('추출된 원본 문장:', sentenceContent);\n      } else {\n        console.warn('Sentence index out of bounds.');\n      }\n    } else {\n      console.error('메모할 원본 메시지를 찾지 못했습니다.');\n    }\n    if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n      console.error('선택된 스레드가 없음');\n      throw new Error('스레드 정보를 찾을 수 없습니다');\n    }\n    try {\n      // 개선된 useSentenceData 훅의 handleMemoChange 사용\n      if (sentenceDataHook !== null && sentenceDataHook !== void 0 && sentenceDataHook.handleMemoChange) {\n        await sentenceDataHook.handleMemoChange(sentenceId, memo, selectedThread.id, 'verbalization', sentenceContent);\n      } else {\n        // 폴백: 직접 API 호출\n        await sentenceApi.createOrUpdateMemo({\n          sentence_id: sentenceId,\n          thread_id: selectedThread.id,\n          thread_type: 'verbalization',\n          content: memo,\n          sentence_content: sentenceContent,\n          source_message_id: 'verbalization_chat',\n          // 백엔드 자동 저장을 위한 추가 정보\n          persona_id: 'verbalization',\n          tags: ['verbalization'],\n          source_conversation_id: selectedThread.id,\n          source_thread_id: selectedThread.id\n        });\n\n        // 성공 시 로컬 상태도 업데이트\n        setMemos(prev => ({\n          ...prev,\n          [sentenceId]: memo\n        }));\n      }\n      console.log('언어화 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error;\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n\n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 새로운 통합된 메뉴 액션 훅 사용\n  const verbalizationMenuActions = useSentenceMenu({\n    personaId: 'verbalization',\n    threadType: 'verbalization',\n    selectedThread,\n    memos,\n    highlightedSentences,\n    setMemos,\n    setHighlightedSentences\n  });\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async action => {\n    var _selectedThread$messa;\n    const selectedIds = Array.from(selectedSentences);\n    console.log('=== 언어화 handleMenuAction 시작 ===');\n    console.log('액션:', action);\n    console.log('선택된 ID들:', selectedIds);\n    console.log('selectedThread 메시지 수:', (selectedThread === null || selectedThread === void 0 ? void 0 : (_selectedThread$messa = selectedThread.messages) === null || _selectedThread$messa === void 0 ? void 0 : _selectedThread$messa.length) || 0);\n    console.log('로컬 메시지 수:', localMessages.length);\n\n    // 선택된 문장들의 텍스트를 추출\n    const selectedTexts = [];\n    const filteredSelectedIds = [];\n\n    // selectedThread가 있으면 우선 사용, 없으면 localMessages 사용\n    const messagesToUse = (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages) || localMessages;\n    console.log('사용할 메시지 배열:', messagesToUse.length > 0 ? '선택된 스레드 메시지' : '로컬 메시지');\n    selectedIds.forEach(id => {\n      console.log('처리 중인 ID:', id);\n      const [timestamp, messageIndexStr, sentenceIndexStr] = id.split('_');\n      const messageIndex = parseInt(messageIndexStr);\n      const sentenceIndex = parseInt(sentenceIndexStr);\n      console.log('파싱된 정보:', {\n        timestamp,\n        messageIndex,\n        sentenceIndex\n      });\n\n      // 메시지 찾기 - 먼저 messageIndex로 시도\n      let message = null;\n      if (!isNaN(messageIndex) && messageIndex >= 0 && messageIndex < messagesToUse.length) {\n        message = messagesToUse[messageIndex];\n        console.log('messageIndex로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 30)}...` : '없음');\n      }\n\n      // messageIndex로 안 되면 timestamp로 시도\n      if (!message) {\n        message = messagesToUse.find(m => m.timestamp === timestamp);\n        console.log('timestamp로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 30)}...` : '없음');\n      }\n      if (message && message.role === 'assistant') {\n        // 문장 분할\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        const text = sentences[sentenceIndex] || '';\n        console.log('선택된 문장 텍스트:', text);\n        if (text && text.length > 0) {\n          selectedTexts.push(text);\n          filteredSelectedIds.push(id);\n          console.log('유효한 문장 추가됨:', text);\n        }\n      } else if (message && message.role === 'user') {\n        console.log('무시됨 - user 메시지');\n      } else {\n        console.warn('메시지를 찾을 수 없음:', {\n          id,\n          messageIndex,\n          timestamp\n        });\n      }\n    });\n    console.log('최종 선택된 텍스트들:', selectedTexts);\n    console.log('최종 필터링된 ID들:', filteredSelectedIds);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          if (selectedTexts.length === 0) {\n            showCopyToast('assistant 메시지만 저장할 수 있습니다');\n            break;\n          }\n          if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n            showCopyToast('저장할 스레드를 선택해주세요');\n            break;\n          }\n\n          // 하이라이트/메모 상태 수집\n          const highlightStates = [];\n          const highlightColors = [];\n          const memoContents = [];\n          for (const sentenceId of filteredSelectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread.id,\n            source_thread_id: selectedThread.id,\n            source_thread_type: 'verbalization',\n            source_sentence_ids: filteredSelectedIds,\n            tags: ['verbalization'],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n\n          // 백엔드에 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            for (const sentenceId of filteredSelectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'verbalization'\n                });\n              } catch (highlightError) {\n                console.warn('하이라이트 저장 실패:', sentenceId, highlightError);\n              }\n            }\n          }\n\n          // 로컬 상태 업데이트\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            filteredSelectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        // 새로운 통합된 메뉴 액션 사용\n        await verbalizationMenuActions.handleAddMemo(filteredSelectedIds, selectedTexts);\n        break;\n      case 'highlight':\n        if (filteredSelectedIds.length > 0 && selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n          try {\n            const currentlyHighlighted = filteredSelectedIds.filter(id => highlightedSentences.has(id));\n            if (currentlyHighlighted.length > 0) {\n              // 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n\n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n\n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'verbalization'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderSection, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderTitle, {\n        children: \"\\uC5B8\\uC5B4\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 831,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewThreadButton, {\n        onClick: handleCreateNewThread,\n        children: \"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 832,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 830,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [localMessages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(EmptyIcon, {\n            children: \"\\uD83D\\uDCAD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 842,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 844,\n                columnNumber: 59\n              }, this), \"\\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 844,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 846,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 846,\n              columnNumber: 23\n            }, this), \"\\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 848,\n              columnNumber: 23\n            }, this), \"\\uC5B4\\uB5A4 \\uAC83\\uC774\\uB4E0 \\uC88B\\uC2B5\\uB2C8\\uB2E4. \\uC9C0\\uAE08 \\uB290\\uB07C\\uACE0 \\uC788\\uB294 \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uD3B8\\uC548\\uD558\\uAC8C \\uB9D0\\uC500\\uD574 \\uC8FC\\uC138\\uC694.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 843,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 841,\n          columnNumber: 13\n        }, this) : localMessages.map((message, index) => {\n          const isAssistant = message.role === 'assistant';\n\n          // assistant 메시지는 항상 SelectableMessage로 렌더링하여 문장 분할과 상호작용 기능 제공\n          return isAssistant ? /*#__PURE__*/_jsxDEV(SelectableMessage, {\n            message: message,\n            messageIndex: index,\n            personas: {},\n            selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n            highlightedSentences: highlightedSentences,\n            memos: memos,\n            onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n            onMemoChange: handleMemoChange,\n            onDeleteMemo: handleDeleteMemo,\n            showSentenceSelector: isSentenceModeActive,\n            showActionButtons: true,\n            onCopy: () => handleCopyMessage(message.content)\n            // 언어화에서는 해, 나, 문 버튼 비활성화\n            ,\n            onSunAction: () => {},\n            onPersonAction: () => {},\n            onDocumentAction: () => {}\n          }, `${message.role}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 858,\n            columnNumber: 17\n          }, this) : /*#__PURE__*/_jsxDEV(Message, {\n            message: message,\n            personas: {},\n            showActionButtons: true,\n            showThreeActionButtons: false,\n            onCopy: () => handleCopyMessage(message.content),\n            onEdit: message.role === 'user' ? () => handleStartEdit(index) : undefined,\n            onEditSave: newContent => handleEditMessage(index, newContent),\n            onEditCancel: handleCancelEdit,\n            isEditing: editingMessageIndex === index\n          }, `${message.role}-${index}`, false, {\n            fileName: _jsxFileName,\n            lineNumber: 878,\n            columnNumber: 17\n          }, this);\n        }), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"\\uC5B8\\uC5B4\\uD654 \\uB3C4\\uC6B0\\uBBF8\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 896,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 839,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: \"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368 \\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          onToggleSentenceMode: handleToggleSentenceMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 905,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 904,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 838,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      $show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 918,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive ? selectedSentences.size > 0 : showFAB,\n      onMenuAction: isSentenceModeActive ? handleMenuAction : handleFABMenuAction,\n      personaId: \"verbalization\",\n      currentInterpretation: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 923,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 828,\n    columnNumber: 5\n  }, this);\n};\n_s(VerbalizationView, \"tnKUsfx2sEZOzwkzLQxEKfFo4IY=\", false, function () {\n  return [useSentenceData, useSentenceMenu];\n});\n_c1 = VerbalizationView;\nexport default VerbalizationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"HeaderSection\");\n$RefreshReg$(_c3, \"HeaderTitle\");\n$RefreshReg$(_c4, \"NewThreadButton\");\n$RefreshReg$(_c5, \"ChatSection\");\n$RefreshReg$(_c6, \"ChatMessages\");\n$RefreshReg$(_c7, \"ChatInputSection\");\n$RefreshReg$(_c8, \"EmptyChat\");\n$RefreshReg$(_c9, \"EmptyIcon\");\n$RefreshReg$(_c0, \"Toast\");\n$RefreshReg$(_c1, \"VerbalizationView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","chatApi","MessageInput","Message","SelectableMessage","LoadingMessage","FloatingActionButton","sentenceApi","useSentenceMenu","useSentenceData","jsxDEV","_jsxDEV","Container","div","_c","HeaderSection","_c2","HeaderTitle","h2","_c3","NewThreadButton","button","_c4","ChatSection","_c5","ChatMessages","_c6","ChatInputSection","_c7","EmptyChat","_c8","EmptyIcon","_c9","Toast","props","$show","_c0","VerbalizationView","selectedThread","threads","onThreadUpdate","onCreateNewThread","_s","isLoading","setIsLoading","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","isSentenceModeActive","setIsSentenceModeActive","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","selectedText","setSelectedText","showFAB","setShowFAB","localMessages","setLocalMessages","sentenceDataHook","id","loadThreadSentenceData","threadId","console","log","data","getThreadSentenceData","Object","keys","length","highlights","error","messages","threadMessages","map","m","_m$content","role","content","substring","timestamp","current","scrollTop","scrollHeight","handleSendMessage","message","trim","userMessage","Date","toISOString","prev","response","chatWithVerbalization","success","slice","showCopyToast","Error","String","handleCreateNewThread","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleTextSelection","selection","window","getSelection","toString","handleClearSelection","_window$getSelection","removeAllRanges","handleFABMenuAction","action","insertText","warn","saveRequest","sentences","source_message_id","source_conversation_id","source_thread_id","source_thread_type","tags","saveSentencesToVault","stack","undefined","tempMemoId","now","memo","prompt","chatElement","handleMouseUp","addEventListener","removeEventListener","handleClickOutside","event","target","contains","closest","document","handleToggleSelect","sentenceId","Array","from","newSet","wasSelected","has","delete","add","handleMemoChange","messageIndexStr","sentenceIndexStr","split","parseInt","sentenceIndex","sentenceContent","find","msg","idx","forEach","i","s","filter","createOrUpdateMemo","sentence_id","thread_id","thread_type","sentence_content","persona_id","handleDeleteMemo","deleteMemo","newMemos","verbalizationMenuActions","personaId","threadType","handleMenuAction","_selectedThread$messa","selectedIds","selectedTexts","filteredSelectedIds","messagesToUse","isNaN","push","formattedText","join","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","source_sentence_ids","highlight_states","highlight_colors","memo_contents","createHighlight","highlightError","handleAddMemo","currentlyHighlighted","deleteHighlight","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","index","isAssistant","personas","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","showActionButtons","onCopy","onSunAction","onPersonAction","onDocumentAction","showThreeActionButtons","onEdit","onEditSave","onEditCancel","isEditing","personaName","personaColor","onSendMessage","disabled","placeholder","hasSelectedSentences","size","onToggleSentenceMode","show","onMenuAction","currentInterpretation","_c1","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver4/frontend/src/features/verbalization/components/VerbalizationView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\nimport { useSentenceData } from '../../shared/hooks/useSentenceData';\n\ninterface VerbalizationViewProps {\n  selectedThread: TrainingThread | null;\n  threads: TrainingThread[];\n  onThreadUpdate: () => void;\n  onCreateNewThread: () => Promise<void>;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ $show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.$show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst VerbalizationView: React.FC<VerbalizationViewProps> = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  \n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n  \n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState<Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n    persona_name?: string;\n  }>>([]);\n\n  // useSentenceData 훅 사용\n  const sentenceDataHook = useSentenceData(selectedThread?.id);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('=== 언어화 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n      \n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n      \n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      \n      console.log('=== 언어화 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\n  useEffect(() => {\n    console.log('=== 언어화 selectedThread 변경 ===');\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread?.messages);\n    \n    if (selectedThread) {\n      // 스레드 메시지들을 localMessages로 동기화\n      const threadMessages = selectedThread.messages || [];\n      console.log('스레드 메시지들:', threadMessages.map(m => ({ role: m.role, content: m.content?.substring(0, 50) + '...', timestamp: m.timestamp })));\n      \n      setLocalMessages(threadMessages);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    } else {\n      console.log('selectedThread가 없음 - localMessages 초기화');\n      setLocalMessages([]);\n      // 스레드가 없으면 데이터 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  }, [selectedThread, selectedThread?.messages]);\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message.trim(),\n      timestamp: new Date().toISOString(),\n    };\n    \n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출\n      const response = await chatApi.chatWithVerbalization(\n        message,\n        selectedThread?.id\n      );\n\n      if (response.data && response.data.success) {\n        // 3단계: AI 응답을 로컬에 직접 추가하는 대신, 부모 컴포넌트에 스레드 업데이트를 알려 동기화합니다.\n        // 이 방식이 상태 동기화 문제를 해결합니다.\n        console.log('스레드 업데이트 시작');\n        await onThreadUpdate();\n        console.log('스레드 업데이트 완료');\n        \n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error instanceof Error ? error.message : String(error)}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n      \n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n      \n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n      \n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n      \n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      \n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      window.getSelection()?.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      \n      case 'saveToVault':\n        // 언어화에서도 저장고 기능 제공\n        if (selectedText) {\n          try {\n            console.log('=== 언어화 텍스트 선택 저장고 저장 시작 ===');\n            console.log('선택된 텍스트:', selectedText);\n            console.log('선택된 스레드:', selectedThread?.id);\n            \n            if (!selectedThread?.id) {\n              console.warn('선택된 스레드가 없습니다');\n              showCopyToast('저장할 스레드를 선택해주세요');\n              break;\n            }\n            \n            const saveRequest = {\n              sentences: [selectedText],\n              source_message_id: 'verbalization_text_selection',\n              source_conversation_id: selectedThread.id,\n              source_thread_id: selectedThread.id,\n              source_thread_type: 'verbalization',\n              tags: ['verbalization', 'text_selection']\n            };\n            \n            console.log('텍스트 선택 저장 요청:', saveRequest);\n            \n            const response = await sentenceApi.saveSentencesToVault(saveRequest);\n            console.log('텍스트 선택 저장 응답:', response);\n            \n            console.log('=== 언어화 텍스트 선택 저장고 저장 완료 ===');\n            showCopyToast('저장고에 저장되었습니다');\n          } catch (error) {\n            console.error('=== 언어화 텍스트 선택 저장고 저장 실패 ===', error);\n            console.error('오류 세부사항:', {\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined\n            });\n            showCopyToast(`저장고 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        } else {\n          console.warn('선택된 텍스트가 없습니다');\n          showCopyToast('저장할 텍스트를 선택해주세요');\n        }\n        break;\n      \n      case 'addMemo':\n        // 언어화에서도 메모 기능 제공\n        if (selectedText) {\n          try {\n            // 임시 메모 ID 생성 (선택된 텍스트 기반)\n            const tempMemoId = `verbalization_text_${Date.now()}`;\n            \n            // 선택된 텍스트에 대한 메모 프롬프트\n            const memo = prompt('선택한 텍스트에 대한 메모를 입력하세요:', selectedText);\n            if (memo) {\n              // 간단한 로컬 메모 저장 (실제로는 더 복잡한 로직 필요)\n              showCopyToast(`메모가 저장되었습니다: ${memo.substring(0, 30)}${memo.length > 30 ? '...' : ''}`);\n            }\n          } catch (error) {\n            console.error('메모 저장 오류:', error);\n            showCopyToast('메모 저장에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'highlight':\n        // 언어화에서도 하이라이트 기능 제공\n        if (selectedText) {\n          showCopyToast('텍스트가 하이라이트되었습니다');\n        }\n        break;\n    }\n    \n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    console.log('handleToggleSelect 시작:', sentenceId);\n    console.log('현재 selectedSentences:', Array.from(selectedSentences));\n    \n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      const wasSelected = newSet.has(sentenceId);\n      \n      if (wasSelected) {\n        newSet.delete(sentenceId);\n        console.log('문장 선택 해제:', sentenceId);\n      } else {\n        newSet.add(sentenceId);\n        console.log('문장 선택 추가:', sentenceId);\n      }\n      \n      console.log('새로운 selectedSentences:', Array.from(newSet));\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    console.log('=== 언어화 메모 저장 시작: 디버깅 강화 ===');\n    console.log('Sentence ID:', sentenceId);\n    console.log('Memo:', memo);\n\n    const [timestamp, messageIndexStr, sentenceIndexStr] = sentenceId.split('_');\n    const messageIndex = parseInt(messageIndexStr);\n    const sentenceIndex = parseInt(sentenceIndexStr);\n    console.log('Parsed Info:', { timestamp, messageIndex, sentenceIndex });\n    \n    let sentenceContent = '';\n    \n    // 타임스탬프와 인덱스를 모두 사용하여 메시지를 더 정확하게 찾습니다.\n    const message = localMessages.find((msg, idx) => \n      (msg.timestamp === timestamp || idx === messageIndex) && msg.role === 'assistant'\n    );\n\n    console.log('전체 localMessages 타임스탬프 목록:');\n    localMessages.forEach((m, i) => console.log(`- [${i}] ${m.timestamp}`));\n    \n      if (message) {\n      console.log('메시지 찾음:', message.content.substring(0, 50) + '...');\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n      if (sentenceIndex < sentences.length) {\n        sentenceContent = sentences[sentenceIndex];\n        console.log('추출된 원본 문장:', sentenceContent);\n      } else {\n        console.warn('Sentence index out of bounds.');\n      }\n    } else {\n      console.error('메모할 원본 메시지를 찾지 못했습니다.');\n    }\n    \n    if (!selectedThread?.id) {\n      console.error('선택된 스레드가 없음');\n      throw new Error('스레드 정보를 찾을 수 없습니다');\n    }\n    \n    try {\n      // 개선된 useSentenceData 훅의 handleMemoChange 사용\n      if (sentenceDataHook?.handleMemoChange) {\n        await sentenceDataHook.handleMemoChange(\n          sentenceId, \n          memo, \n          selectedThread.id, \n          'verbalization',\n          sentenceContent\n        );\n      } else {\n        // 폴백: 직접 API 호출\n        await sentenceApi.createOrUpdateMemo({\n          sentence_id: sentenceId,\n          thread_id: selectedThread.id,\n          thread_type: 'verbalization',\n          content: memo,\n          sentence_content: sentenceContent,\n          source_message_id: 'verbalization_chat',\n          // 백엔드 자동 저장을 위한 추가 정보\n          persona_id: 'verbalization',\n          tags: ['verbalization'],\n          source_conversation_id: selectedThread.id,\n          source_thread_id: selectedThread.id,\n        } as any);\n        \n        // 성공 시 로컬 상태도 업데이트\n        setMemos(prev => ({\n          ...prev,\n          [sentenceId]: memo\n        }));\n      }\n      \n      console.log('언어화 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error;\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n      \n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      \n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 새로운 통합된 메뉴 액션 훅 사용\n  const verbalizationMenuActions = useSentenceMenu({\n    personaId: 'verbalization',\n    threadType: 'verbalization',\n    selectedThread,\n    memos,\n    highlightedSentences,\n    setMemos,\n    setHighlightedSentences\n  });\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    \n    console.log('=== 언어화 handleMenuAction 시작 ===');\n    console.log('액션:', action);\n    console.log('선택된 ID들:', selectedIds);\n    console.log('selectedThread 메시지 수:', selectedThread?.messages?.length || 0);\n    console.log('로컬 메시지 수:', localMessages.length);\n    \n    // 선택된 문장들의 텍스트를 추출\n    const selectedTexts: string[] = [];\n    const filteredSelectedIds: string[] = [];\n    \n    // selectedThread가 있으면 우선 사용, 없으면 localMessages 사용\n    const messagesToUse = selectedThread?.messages || localMessages;\n    console.log('사용할 메시지 배열:', messagesToUse.length > 0 ? '선택된 스레드 메시지' : '로컬 메시지');\n    \n    selectedIds.forEach(id => {\n      console.log('처리 중인 ID:', id);\n      const [timestamp, messageIndexStr, sentenceIndexStr] = id.split('_');\n      const messageIndex = parseInt(messageIndexStr);\n      const sentenceIndex = parseInt(sentenceIndexStr);\n      \n      console.log('파싱된 정보:', { timestamp, messageIndex, sentenceIndex });\n      \n      // 메시지 찾기 - 먼저 messageIndex로 시도\n      let message = null;\n      if (!isNaN(messageIndex) && messageIndex >= 0 && messageIndex < messagesToUse.length) {\n        message = messagesToUse[messageIndex];\n        console.log('messageIndex로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 30)}...` : '없음');\n      }\n      \n      // messageIndex로 안 되면 timestamp로 시도\n      if (!message) {\n        message = messagesToUse.find(m => m.timestamp === timestamp);\n        console.log('timestamp로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 30)}...` : '없음');\n      }\n      \n      if (message && message.role === 'assistant') {\n        // 문장 분할\n        const sentences = message.content\n          .split(/[\\n.]+/)\n          .map(s => s.trim())\n          .filter(s => s.length > 0);\n        \n        const text = sentences[sentenceIndex] || '';\n        console.log('선택된 문장 텍스트:', text);\n        \n        if (text && text.length > 0) {\n          selectedTexts.push(text);\n          filteredSelectedIds.push(id);\n          console.log('유효한 문장 추가됨:', text);\n        }\n      } else if (message && message.role === 'user') {\n        console.log('무시됨 - user 메시지');\n      } else {\n        console.warn('메시지를 찾을 수 없음:', { id, messageIndex, timestamp });\n      }\n    });\n    \n    console.log('최종 선택된 텍스트들:', selectedTexts);\n    console.log('최종 필터링된 ID들:', filteredSelectedIds);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          if (selectedTexts.length === 0) {\n            showCopyToast('assistant 메시지만 저장할 수 있습니다');\n            break;\n          }\n          \n          if (!selectedThread?.id) {\n            showCopyToast('저장할 스레드를 선택해주세요');\n            break;\n          }\n          \n          // 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of filteredSelectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread.id,\n            source_thread_id: selectedThread.id,\n            source_thread_type: 'verbalization',\n            source_sentence_ids: filteredSelectedIds,\n            tags: ['verbalization'],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          // 백엔드에 하이라이트 저장\n          if (selectedThread?.id) {\n            for (const sentenceId of filteredSelectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'verbalization'\n                });\n              } catch (highlightError) {\n                console.warn('하이라이트 저장 실패:', sentenceId, highlightError);\n              }\n            }\n          }\n          \n          // 로컬 상태 업데이트\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            filteredSelectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        // 새로운 통합된 메뉴 액션 사용\n        await verbalizationMenuActions.handleAddMemo(filteredSelectedIds, selectedTexts);\n        break;\n      \n      case 'highlight':\n        if (filteredSelectedIds.length > 0 && selectedThread?.id) {\n          try {\n            const currentlyHighlighted = filteredSelectedIds.filter(id => highlightedSentences.has(id));\n            \n            if (currentlyHighlighted.length > 0) {\n              // 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n              \n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n              \n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'verbalization'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      {/* 헤더 */}\n      <HeaderSection>\n        <HeaderTitle>언어화</HeaderTitle>\n        <NewThreadButton onClick={handleCreateNewThread}>\n          새 대화 시작\n        </NewThreadButton>\n      </HeaderSection>\n\n      {/* 채팅 영역 */}\n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {localMessages.length === 0 ? (\n            <EmptyChat>\n              <EmptyIcon>💭</EmptyIcon>\n              <div>\n                <strong>언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써<br />\n                그것을 인식하고 만들어 가는 것입니다.</strong>\n                <br /><br />\n                자유롭게 당신의 생각을 말로 내뱉으세요!\n                <br /><br />\n                어떤 것이든 좋습니다. 지금 느끼고 있는 감정이나 생각을 편안하게 말씀해 주세요.\n              </div>\n            </EmptyChat>\n          ) : (\n            localMessages.map((message, index) => {\n              const isAssistant = message.role === 'assistant';\n              \n              // assistant 메시지는 항상 SelectableMessage로 렌더링하여 문장 분할과 상호작용 기능 제공\n              return isAssistant ? (\n                <SelectableMessage\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  messageIndex={index}\n                  personas={{}}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  // 언어화에서는 해, 나, 문 버튼 비활성화\n                  onSunAction={() => {}}\n                  onPersonAction={() => {}}\n                  onDocumentAction={() => {}}\n                />\n              ) : (\n                <Message\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  personas={{}}\n                  showActionButtons={true}\n                  showThreeActionButtons={false}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={message.role === 'user' ? () => handleStartEdit(index) : undefined}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                  isEditing={editingMessageIndex === index}\n                />\n              );\n            })\n          )}\n          \n          {/* 로딩 메시지 */}\n          {isLoading && (\n            <LoadingMessage \n              personaName=\"언어화 도우미\"\n              personaColor=\"#666\"\n            />\n          )}\n        </ChatMessages>\n\n        {/* 입력창 */}\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder=\"언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써 그것을 인식하고 만들어 가는 것입니다. 자유롭게 당신의 생각을 말로 내뱉으세요!\"\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            onToggleSentenceMode={handleToggleSentenceMode}\n          />\n        </ChatInputSection>\n      </ChatSection>\n\n      {/* 토스트 메시지 */}\n      <Toast $show={showToast}>\n        {toastMessage}\n      </Toast>\n\n      {/* FloatingActionButton */}\n      <FloatingActionButton\n        show={isSentenceModeActive ? selectedSentences.size > 0 : showFAB}\n        onMenuAction={isSentenceModeActive ? handleMenuAction : handleFABMenuAction}\n        personaId=\"verbalization\"\n        currentInterpretation=\"\"\n      />\n    </Container>\n  );\n};\n\nexport default VerbalizationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}