{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const qaApi = {\n  /**\n   * QA 질문 목록을 가져옵니다.\n   */\n  async getQuestions() {\n    try {\n      console.log(\"🔵 [API] 질문 목록 요청 시작\");\n      console.log(\"🔵 [API] 요청 URL:\", `${API_BASE_URL}/api/qa/questions`);\n      const response = await api.get('/api/qa/questions');\n      console.log(\"✅ [API] 응답 상태:\", response.status);\n      console.log(\"✅ [API] 응답 헤더:\", response.headers);\n      console.log(\"✅ [API] 응답 데이터:\", response.data);\n      console.log(\"✅ [API] 데이터 타입:\", typeof response.data);\n      console.log(\"✅ [API] 배열 여부:\", Array.isArray(response.data));\n      if (Array.isArray(response.data) && response.data.length > 0) {\n        console.log(\"✅ [API] 첫 번째 항목:\", response.data[0]);\n        console.log(\"✅ [API] 첫 번째 항목의 키들:\", Object.keys(response.data[0]));\n      }\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error(\"❌ [API] QA 질문 로드 실패:\", error);\n      console.error(\"❌ [API] 에러 타입:\", typeof error);\n      console.error(\"❌ [API] 에러 응답:\", error.response);\n      console.error(\"❌ [API] 에러 상태:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n      console.error(\"❌ [API] 에러 데이터:\", (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      console.error(\"❌ [API] 에러 메시지:\", error.message);\n      console.error(\"❌ [API] 네트워크 에러:\", error.code);\n      throw error;\n    }\n  },\n  /**\n   * 사용자의 QA 답변 목록을 제출합니다.\n   */\n  async submitAnswers(answers) {\n    try {\n      // 백엔드가 기대하는 { \"answers\": [...] } 형태로 데이터를 감싸서 전송합니다.\n      const response = await api.post('/api/qa/answers', {\n        answers\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 답변 제출 실패:\", error);\n      throw error;\n    }\n  },\n  /**\n   * 사용자의 QA 완료 상태를 확인합니다.\n   */\n  async getStatus() {\n    try {\n      const response = await api.get('/api/qa/status');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 상태 확인 실패:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","qaApi","getQuestions","console","log","response","get","status","data","Array","isArray","length","Object","keys","error","_error$response","_error$response2","message","code","submitAnswers","answers","post","getStatus"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/qa/api/qaApi.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport interface QAQuestion {\n  question_id: number;\n  question_text: string;\n}\n\nexport interface QASubmission {\n  question_id: number;\n  answer: string;\n}\n\nexport const qaApi = {\n  /**\n   * QA 질문 목록을 가져옵니다.\n   */\n  async getQuestions(): Promise<QAQuestion[]> {\n    try {\n      console.log(\"🔵 [API] 질문 목록 요청 시작\");\n      console.log(\"🔵 [API] 요청 URL:\", `${API_BASE_URL}/api/qa/questions`);\n      \n      const response = await api.get<QAQuestion[]>('/api/qa/questions');\n      \n      console.log(\"✅ [API] 응답 상태:\", response.status);\n      console.log(\"✅ [API] 응답 헤더:\", response.headers);\n      console.log(\"✅ [API] 응답 데이터:\", response.data);\n      console.log(\"✅ [API] 데이터 타입:\", typeof response.data);\n      console.log(\"✅ [API] 배열 여부:\", Array.isArray(response.data));\n      \n      if (Array.isArray(response.data) && response.data.length > 0) {\n        console.log(\"✅ [API] 첫 번째 항목:\", response.data[0]);\n        console.log(\"✅ [API] 첫 번째 항목의 키들:\", Object.keys(response.data[0]));\n      }\n      \n      return response.data;\n    } catch (error: any) {\n      console.error(\"❌ [API] QA 질문 로드 실패:\", error);\n      console.error(\"❌ [API] 에러 타입:\", typeof error);\n      console.error(\"❌ [API] 에러 응답:\", error.response);\n      console.error(\"❌ [API] 에러 상태:\", error.response?.status);\n      console.error(\"❌ [API] 에러 데이터:\", error.response?.data);\n      console.error(\"❌ [API] 에러 메시지:\", error.message);\n      console.error(\"❌ [API] 네트워크 에러:\", error.code);\n      throw error;\n    }\n  },\n\n  /**\n   * 사용자의 QA 답변 목록을 제출합니다.\n   */\n  async submitAnswers(answers: QASubmission[]): Promise<{ success: boolean; message: string }> {\n    try {\n      // 백엔드가 기대하는 { \"answers\": [...] } 형태로 데이터를 감싸서 전송합니다.\n      const response = await api.post('/api/qa/answers', { answers });\n  return response.data;\n    } catch (error) {\n      console.error(\"QA 답변 제출 실패:\", error);\n      throw error;\n    }\n  },\n\n  /**\n   * 사용자의 QA 완료 상태를 확인합니다.\n   */\n  async getStatus(): Promise<{ is_completed: boolean }> {\n    try {\n      const response = await api.get('/api/qa/status');\n  return response.data;\n    } catch (error) {\n      console.error(\"QA 상태 확인 실패:\", error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}