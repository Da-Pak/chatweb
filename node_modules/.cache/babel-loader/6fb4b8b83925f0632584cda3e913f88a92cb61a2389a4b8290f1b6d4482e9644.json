{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\SentenceView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst SentenceView = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 문장 스레드를 자동 선택\n      const firstSentenceThread = threads.find(t => t.thread_type === 'sentence');\n      if (firstSentenceThread && !selectedThread) {\n        setSelectedThread(firstSentenceThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트)\n  useEffect(() => {\n    const loadThreadSentenceData = async () => {\n      if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) return;\n      try {\n        const data = await sentenceApi.getThreadSentenceData(selectedThread.id);\n        setMemos(data.memos);\n        setHighlightedSentences(new Set(data.highlights));\n      } catch (error) {\n        console.error('스레드 문장 데이터 로딩 실패:', error);\n      }\n    };\n    loadThreadSentenceData();\n  }, [selectedThread]);\n  const handleSendMessage = async message => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n\n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setSelectedThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        setSelectedThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === currentThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n    try {\n      var _response$data;\n      setIsLoading(true);\n\n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && response.data.updated_thread) {\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n\n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === selectedThread.id ? response.data.updated_thread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = null; // 기본값을 null로 변경\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // 채팅 메시지가 없으면 저장하지 않음\n      if (!contentToSave) {\n        showCopyToast('저장할 채팅 내용이 없습니다. 먼저 채팅을 진행해주세요.');\n        return;\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('현재 Assistant 응답이 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n\n        // 새로 생성된 문장 스레드 선택\n        const newSentenceThread = updatedThreads.filter(t => t.thread_type === 'sentence').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        if (newSentenceThread && (!selectedThread || newSentenceThread.id !== selectedThread.id)) {\n          setSelectedThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'sentence_chat',\n            // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['sentence']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n\n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [bottomSentenceId]: ''\n          }));\n\n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n\n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n\n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n\n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n\n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 716,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCDD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 724,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 725,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 726,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 733,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#4caf50',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 749,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#4caf50\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 784,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 721,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 문장에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || sentenceContent,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 792,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 720,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: sentenceContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 811,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 715,\n    columnNumber: 5\n  }, this);\n};\n_s(SentenceView, \"26B1vIvP83+DxaC4+Z70c6fm9J4=\");\n_c7 = SentenceView;\nexport default SentenceView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"SentenceView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","SentenceView","personaId","personaName","sentenceContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","onRefreshThreads","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","sentenceThreads","filter","thread","thread_type","firstSentenceThread","find","t","current","scrollTop","scrollHeight","messages","loadThreadSentenceData","id","data","getThreadSentenceData","highlights","error","console","handleSendMessage","message","currentThread","sentenceThread","defaultThread","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","response","chatWithThread","thread_id","user_message","assistantMessage","finalUpdatedThread","thread_updated_at","map","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","_response$data","editThreadMessage","success","updated_thread","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleSunAction","contentToSave","length","lastAssistantMessage","slice","reverse","msg","saveCurrentAsInterpretation","handlePersonAction","proceedPrompt","insertText","saveCurrentAsProceed","threadsResponse","getPersonaThreads","handleDocumentAction","sentencePrompt","saveCurrentAsSentence","handleRefreshThreads","newSentenceThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","Array","from","selectedTexts","sentenceIndex","split","m","sentences","s","trim","parseInt","formattedText","join","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","sortedIds","timestampA","sentenceIndexA","timestampB","sentenceIndexB","bottomSentenceId","createHighlight","log","currentlyHighlighted","notHighlighted","deleteHighlight","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/SentenceView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface SentenceViewProps {\n  personaId: string;\n  personaName: string;\n  sentenceContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n  onRefreshThreads?: () => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst SentenceView: React.FC<SentenceViewProps> = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 문장 스레드를 자동 선택\n      const firstSentenceThread = threads.find(t => t.thread_type === 'sentence');\n      if (firstSentenceThread && !selectedThread) {\n        setSelectedThread(firstSentenceThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트)\n  useEffect(() => {\n    const loadThreadSentenceData = async () => {\n      if (!selectedThread?.id) return;\n      \n      try {\n        const data = await sentenceApi.getThreadSentenceData(selectedThread.id);\n        \n        setMemos(data.memos);\n        setHighlightedSentences(new Set(data.highlights));\n      } catch (error) {\n        console.error('스레드 문장 데이터 로딩 실패:', error);\n      }\n    };\n\n    loadThreadSentenceData();\n  }, [selectedThread]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (!selectedThread?.id) {\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      \n      if (response.data?.success && response.data.updated_thread) {\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n        \n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id ? response.data!.updated_thread! : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n    setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n    return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n    setMemos(prev => {\n      const newMemos = { ...prev };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = null; // 기본값을 null로 변경\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n          .reverse()\n          .find(msg => msg.role === 'assistant');\n        \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // 채팅 메시지가 없으면 저장하지 않음\n      if (!contentToSave) {\n        showCopyToast('저장할 채팅 내용이 없습니다. 먼저 채팅을 진행해주세요.');\n        return;\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('현재 Assistant 응답이 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    \n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    \n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    \n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    \n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n          \n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 문장 스레드 선택\n              const newSentenceThread = updatedThreads\n                .filter(t => t.thread_type === 'sentence')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newSentenceThread && (!selectedThread || newSentenceThread.id !== selectedThread.id)) {\n                setSelectedThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'sentence_chat', // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['sentence']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          \n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>📝</div>\n              <div>문장에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#4caf50',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#4caf50\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 문장에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || sentenceContent}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={sentenceContent}\n      />\n    </Container>\n  );\n};\n\nexport default SentenceView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}