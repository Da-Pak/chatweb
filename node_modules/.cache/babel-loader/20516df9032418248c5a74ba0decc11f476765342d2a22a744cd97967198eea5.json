{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject0;import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import{chatApi}from'../../shared/api/chatApi';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import SelectableMessage from'../../training/components/SelectableMessage';import LoadingMessage from'../../shared/components/LoadingMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import{sentenceApi}from'../../training/api/sentenceApi';import{useSentenceMenu}from'../../shared/hooks/useSentenceMenu';import{useSentenceData}from'../../shared/hooks/useSentenceData';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const HeaderSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 20px;\\n  border-bottom: 1px solid #e0e0e0;\\n  background: #f8f9fa;\\n\"])));const HeaderTitle=styled.h2(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  font-size: 24px;\\n  font-weight: 700;\\n  color: #343a40;\\n  margin: 0;\\n\"])));const NewThreadButton=styled.button(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\\n  color: white;\\n  border: none;\\n  border-radius: 8px;\\n  padding: 10px 20px;\\n  font-size: 14px;\\n  font-weight: 600;\\n  cursor: pointer;\\n  transition: all 0.2s ease;\\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\\n\\n  &:hover {\\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\\n    transform: translateY(-1px);\\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\\n  }\\n\\n  &:active {\\n    transform: translateY(0);\\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\\n  }\\n\"])));const ChatSection=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n  line-height: 1.6;\\n\"])));const EmptyIcon=styled.div(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  font-size: 48px;\\n  margin-bottom: 16px;\\n\"])));// 토스트 스타일 컴포넌트 추가\nconst Toast=styled.div(_templateObject0||(_templateObject0=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const VerbalizationView=_ref=>{let{selectedThread,threads,onThreadUpdate,onCreateNewThread}=_ref;const[isLoading,setIsLoading]=useState(false);const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 문장선택 관련 상태 추가\nconst[isSentenceModeActive,setIsSentenceModeActive]=useState(false);const[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});// 텍스트 선택 관련 상태\nconst[selectedText,setSelectedText]=useState('');const[showFAB,setShowFAB]=useState(false);// 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\nconst[localMessages,setLocalMessages]=useState([]);// useSentenceData 훅 사용\nconst sentenceDataHook=useSentenceData(selectedThread===null||selectedThread===void 0?void 0:selectedThread.id);// 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\nconst loadThreadSentenceData=async threadId=>{try{console.log('=== 언어화 스레드 데이터 로딩 시작 ===');console.log('스레드 ID:',threadId);// 백엔드에서 스레드 데이터 로딩\nconst data=await sentenceApi.getThreadSentenceData(threadId);console.log('로딩된 메모:',Object.keys(data.memos).length,'개');console.log('로딩된 하이라이트:',data.highlights.length,'개');// 백엔드 데이터로 상태 설정\nsetMemos(data.memos);setHighlightedSentences(new Set(data.highlights));console.log('=== 언어화 스레드 데이터 로딩 완료 ===');}catch(error){console.error('스레드 문장 데이터 로딩 실패:',error);// 실패 시 빈 상태로 초기화\nsetMemos({});setHighlightedSentences(new Set());}};// selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\nuseEffect(()=>{console.log('=== 언어화 selectedThread 변경 ===');console.log('selectedThread:',selectedThread);console.log('selectedThread.messages:',selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages);if(selectedThread){// 스레드 메시지들을 localMessages로 동기화\nconst threadMessages=selectedThread.messages||[];console.log('스레드 메시지들:',threadMessages.map(m=>{var _m$content;return{role:m.role,content:((_m$content=m.content)===null||_m$content===void 0?void 0:_m$content.substring(0,50))+'...',timestamp:m.timestamp};}));setLocalMessages(threadMessages);// 스레드별 문장 데이터 로딩\nloadThreadSentenceData(selectedThread.id);}else{console.log('selectedThread가 없음 - localMessages 초기화');setLocalMessages([]);// 스레드가 없으면 데이터 초기화\nsetMemos({});setHighlightedSentences(new Set());}},[selectedThread]);// selectedThread가 변경될 때 해당 스레드의 메모/하이라이트 데이터 로딩\nuseEffect(()=>{if(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){console.log('언어화 스레드 변경됨:',selectedThread.id);loadThreadSentenceData(selectedThread.id);}},[selectedThread===null||selectedThread===void 0?void 0:selectedThread.id]);// 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\nuseEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[localMessages,isLoading]);// 메시지 전송 처리\nconst handleSendMessage=async message=>{if(!message.trim()||isLoading)return false;// 1단계: 사용자 메시지를 즉시 UI에 추가\nconst userMessage={role:'user',content:message.trim(),timestamp:new Date().toISOString()};setLocalMessages(prev=>[...prev,userMessage]);setIsLoading(true);try{console.log('=== 언어화 메시지 전송 ===');console.log('selectedThread:',selectedThread);console.log('message:',message);// 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\nconst response=await chatApi.chatWithVerbalization(message,selectedThread===null||selectedThread===void 0?void 0:selectedThread.id// 스레드가 없으면 undefined 전달\n);console.log('API 응답 전체:',response);console.log('응답 데이터:',response.data);console.log('응답 에러:',response.error);if(response.data){console.log('메시지 전송 성공');console.log('응답 구조:',{thread_id:response.data.thread_id,user_message:response.data.user_message,response:response.data.response,thread_updated_at:response.data.thread_updated_at});// 3단계: AI 응답을 로컬 메시지에 추가 (임시)\nconst assistantMessage={role:'assistant',content:response.data.response.content,timestamp:response.data.response.timestamp,persona_name:'언어화 도우미',persona_id:'verbalization'};console.log('생성된 assistant 메시지:',assistantMessage);setLocalMessages(prev=>[...prev,assistantMessage]);// 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n// 스레드 목록과 선택된 스레드를 새로고침\nconsole.log('스레드 업데이트 시작');await onThreadUpdate();console.log('스레드 업데이트 완료');// 새로 생성된 스레드가 선택되도록 추가 처리\nif(!selectedThread&&response.data.thread_id){console.log('새 스레드 생성됨, 선택 업데이트 필요:',response.data.thread_id);// 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\nsetTimeout(async()=>{console.log('지연된 스레드 업데이트 시작');await onThreadUpdate();console.log('지연된 스레드 업데이트 완료');},100);}// 5단계: localMessages와 selectedThread 동기화 확인 및 강제 동기화\n// 짧은 지연 후 selectedThread가 업데이트되면 localMessages를 다시 동기화\nsetTimeout(()=>{console.log('메시지 전송 후 동기화 체크 및 강제 동기화');console.log('현재 selectedThread:',selectedThread);console.log('현재 localMessages 수:',localMessages.length);// 스레드가 업데이트되었으면 강제로 localMessages를 동기화\nif(selectedThread&&selectedThread.messages){console.log('강제 동기화 실행 - selectedThread.messages 수:',selectedThread.messages.length);console.log('selectedThread.messages:',selectedThread.messages.map(m=>{var _m$content2;return{role:m.role,content:((_m$content2=m.content)===null||_m$content2===void 0?void 0:_m$content2.substring(0,50))+'...',timestamp:m.timestamp};}));setLocalMessages([...selectedThread.messages]);console.log('강제 동기화 완료');}},300);return true;}else{// 실패 시 사용자 메시지 제거\nsetLocalMessages(prev=>prev.slice(0,-1));console.error('메시지 전송 실패:',response.error);showCopyToast(\"\\uC5B8\\uC5B4\\uD654 \\uCC44\\uD305 \\uC2E4\\uD328: \".concat(response.error));return false;}}catch(error){// 오류 시 사용자 메시지 제거\nsetLocalMessages(prev=>prev.slice(0,-1));console.error('메시지 전송 오류:',error);showCopyToast(\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC624\\uB958: \".concat(error));return false;}finally{setIsLoading(false);}};// 새 스레드 생성 처리\nconst handleCreateNewThread=async()=>{try{console.log('=== 새 스레드 생성 시작 ===');// 1단계: 로컬 메시지 초기화 (새 대화 준비)\nsetLocalMessages([]);// 2단계: 새 스레드 생성\nconsole.log('새 스레드 생성 중...');// 3단계: 상위 컴포넌트에 새 스레드 생성 요청\nawait onCreateNewThread();// 4단계: 성공 메시지 표시\nshowCopyToast('새 대화가 시작되었습니다!');console.log('새 스레드 생성 및 선택 완료');}catch(error){console.error('새 스레드 생성 오류:',error);showCopyToast('새 대화 생성에 실패했습니다.');}};// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);showCopyToast('복사 실패');}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 관련 함수들\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};const handleEditMessage=async(messageIndex,newContent)=>{// 언어화에서는 메시지 수정 기능을 제공하지 않음\n// 필요시 추후 구현\nreturn false;};const handleCancelEdit=()=>{setEditingMessageIndex(null);};// 텍스트 선택 핸들러\nconst handleTextSelection=()=>{const selection=window.getSelection();if(selection&&selection.toString().trim()){const selectedText=selection.toString().trim();setSelectedText(selectedText);setShowFAB(true);}else{setSelectedText('');setShowFAB(false);}};// 선택 해제 핸들러\nconst handleClearSelection=()=>{setSelectedText('');setShowFAB(false);if(window.getSelection){var _window$getSelection;(_window$getSelection=window.getSelection())===null||_window$getSelection===void 0?void 0:_window$getSelection.removeAllRanges();}};// FloatingActionButton 메뉴 액션 핸들러\nconst handleFABMenuAction=async action=>{switch(action){case'sendToInput':if(messageInputRef.current&&selectedText){messageInputRef.current.insertText(selectedText);showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');}break;case'copy':if(selectedText){await copyToClipboard(selectedText,'선택한 텍스트가 복사되었습니다');}break;case'saveToVault':// 언어화에서도 저장고 기능 제공\nif(selectedText){try{console.log('=== 언어화 텍스트 선택 저장고 저장 시작 ===');console.log('선택된 텍스트:',selectedText);console.log('선택된 스레드:',selectedThread===null||selectedThread===void 0?void 0:selectedThread.id);if(!(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id)){console.warn('선택된 스레드가 없습니다');showCopyToast('저장할 스레드를 선택해주세요');break;}const saveRequest={sentences:[selectedText],source_message_id:'verbalization_text_selection',source_conversation_id:selectedThread.id,source_thread_id:selectedThread.id,source_thread_type:'verbalization',tags:['verbalization','text_selection']};console.log('텍스트 선택 저장 요청:',saveRequest);const response=await sentenceApi.saveSentencesToVault(saveRequest);console.log('텍스트 선택 저장 응답:',response);console.log('=== 언어화 텍스트 선택 저장고 저장 완료 ===');showCopyToast('저장고에 저장되었습니다');}catch(error){console.error('=== 언어화 텍스트 선택 저장고 저장 실패 ===',error);console.error('오류 세부사항:',{message:error instanceof Error?error.message:String(error),stack:error instanceof Error?error.stack:undefined});showCopyToast(\"\\uC800\\uC7A5\\uACE0 \\uC800\\uC7A5\\uC5D0 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4: \".concat(error instanceof Error?error.message:String(error)));}}else{console.warn('선택된 텍스트가 없습니다');showCopyToast('저장할 텍스트를 선택해주세요');}break;case'addMemo':// 언어화에서는 메모 기능 미제공\nshowCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');break;case'highlight':// 언어화에서는 하이라이트 기능 미제공\nshowCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');break;}// 액션 실행 후 선택 해제\nhandleClearSelection();};// 채팅 메시지 영역에 이벤트 리스너 등록\nuseEffect(()=>{const chatElement=chatMessagesRef.current;if(chatElement){const handleMouseUp=()=>{setTimeout(handleTextSelection,10);// 약간의 지연을 주어 selection이 완료된 후 처리\n};chatElement.addEventListener('mouseup',handleMouseUp);chatElement.addEventListener('touchend',handleMouseUp);return()=>{chatElement.removeEventListener('mouseup',handleMouseUp);chatElement.removeEventListener('touchend',handleMouseUp);};}},[]);// 다른 곳 클릭 시 선택 해제\nuseEffect(()=>{const handleClickOutside=event=>{const target=event.target;// FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\nif(chatMessagesRef.current&&!chatMessagesRef.current.contains(target)&&!target.closest('[data-fab]')){handleClearSelection();}};document.addEventListener('mousedown',handleClickOutside);return()=>{document.removeEventListener('mousedown',handleClickOutside);};},[]);// 문장 선택 관련 핸들러들\nconst handleToggleSelect=sentenceId=>{console.log('handleToggleSelect 시작:',sentenceId);console.log('현재 selectedSentences:',Array.from(selectedSentences));setSelectedSentences(prev=>{const newSet=new Set(prev);const wasSelected=newSet.has(sentenceId);if(wasSelected){newSet.delete(sentenceId);console.log('문장 선택 해제:',sentenceId);}else{newSet.add(sentenceId);console.log('문장 선택 추가:',sentenceId);}console.log('새로운 selectedSentences:',Array.from(newSet));return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{console.log('=== 언어화 메모 저장 시작 ===');console.log('문장 ID:',sentenceId);console.log('메모 내용:',memo);console.log('선택된 스레드:',selectedThread===null||selectedThread===void 0?void 0:selectedThread.id);// sentenceId로부터 실제 문장 내용 찾기\nconst[timestamp,,sentenceIndex]=sentenceId.split('_');let sentenceContent='';if(selectedThread!==null&&selectedThread!==void 0&&selectedThread.messages){const message=selectedThread.messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n.]+/).map(s=>s.trim()).filter(s=>s.length>0);sentenceContent=sentences[parseInt(sentenceIndex)]||'';}}if(!(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id)){console.error('선택된 스레드가 없음');throw new Error('스레드 정보를 찾을 수 없습니다');}try{// 개선된 useSentenceData 훅의 handleMemoChange 사용\nif(sentenceDataHook!==null&&sentenceDataHook!==void 0&&sentenceDataHook.handleMemoChange){await sentenceDataHook.handleMemoChange(sentenceId,memo,selectedThread.id,'verbalization');}else{// 폴백: 직접 API 호출\nawait sentenceApi.createOrUpdateMemo({sentence_id:sentenceId,thread_id:selectedThread.id,thread_type:'verbalization',content:memo,sentence_content:sentenceContent,source_message_id:'verbalization_chat',// 백엔드 자동 저장을 위한 추가 정보\npersona_id:'verbalization',tags:['verbalization'],source_conversation_id:selectedThread.id,source_thread_id:selectedThread.id});// 성공 시 로컬 상태도 업데이트\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));}console.log('언어화 메모 저장 성공');showCopyToast('메모가 저장되었습니다');}catch(error){console.error('메모 저장 실패:',error);showCopyToast('메모 저장에 실패했습니다');throw error;}};const handleDeleteMemo=async sentenceId=>{try{// 백엔드 API 호출\nawait sentenceApi.deleteMemo(sentenceId);// 성공 시 로컬 상태 업데이트\nsetMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});setHighlightedSentences(prev=>{const newSet=new Set(prev);newSet.delete(sentenceId);return newSet;});showCopyToast('메모가 삭제되었습니다');}catch(error){console.error('메모 삭제 실패:',error);showCopyToast('메모 삭제에 실패했습니다');}};// 새로운 통합된 메뉴 액션 훅 사용\nconst verbalizationMenuActions=useSentenceMenu({personaId:'verbalization',threadType:'verbalization',selectedThread,memos,highlightedSentences,setMemos,setHighlightedSentences});// FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\nconst handleMenuAction=async action=>{var _selectedThread$messa;const selectedIds=Array.from(selectedSentences);console.log('=== 언어화 handleMenuAction 시작 ===');console.log('액션:',action);console.log('선택된 ID들:',selectedIds);console.log('selectedThread 메시지 수:',(selectedThread===null||selectedThread===void 0?void 0:(_selectedThread$messa=selectedThread.messages)===null||_selectedThread$messa===void 0?void 0:_selectedThread$messa.length)||0);console.log('로컬 메시지 수:',localMessages.length);// 선택된 문장들의 텍스트를 추출\nconst selectedTexts=[];const filteredSelectedIds=[];// selectedThread가 있으면 우선 사용, 없으면 localMessages 사용\nconst messagesToUse=(selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages)||localMessages;console.log('사용할 메시지 배열:',messagesToUse.length>0?'선택된 스레드 메시지':'로컬 메시지');selectedIds.forEach(id=>{console.log('처리 중인 ID:',id);const[timestamp,messageIndexStr,sentenceIndexStr]=id.split('_');const messageIndex=parseInt(messageIndexStr);const sentenceIndex=parseInt(sentenceIndexStr);console.log('파싱된 정보:',{timestamp,messageIndex,sentenceIndex});// 메시지 찾기 - 먼저 messageIndex로 시도\nlet message=null;if(!isNaN(messageIndex)&&messageIndex>=0&&messageIndex<messagesToUse.length){message=messagesToUse[messageIndex];console.log('messageIndex로 찾은 메시지:',message?\"\".concat(message.role,\": \").concat(message.content.substring(0,30),\"...\"):'없음');}// messageIndex로 안 되면 timestamp로 시도\nif(!message){message=messagesToUse.find(m=>m.timestamp===timestamp);console.log('timestamp로 찾은 메시지:',message?\"\".concat(message.role,\": \").concat(message.content.substring(0,30),\"...\"):'없음');}if(message&&message.role==='assistant'){// 문장 분할\nconst sentences=message.content.split(/[\\n.]+/).map(s=>s.trim()).filter(s=>s.length>0);const text=sentences[sentenceIndex]||'';console.log('선택된 문장 텍스트:',text);if(text&&text.length>0){selectedTexts.push(text);filteredSelectedIds.push(id);console.log('유효한 문장 추가됨:',text);}}else if(message&&message.role==='user'){console.log('무시됨 - user 메시지');}else{console.warn('메시지를 찾을 수 없음:',{id,messageIndex,timestamp});}});console.log('최종 선택된 텍스트들:',selectedTexts);console.log('최종 필터링된 ID들:',filteredSelectedIds);switch(action){case'sendToInput':if(messageInputRef.current&&selectedTexts.length>0){const formattedText=selectedTexts.map(text=>\"\\\"\".concat(text,\"\\\"\")).join(', ');messageInputRef.current.insertText(formattedText);}break;case'saveToVault':try{if(selectedTexts.length===0){showCopyToast('assistant 메시지만 저장할 수 있습니다');break;}if(!(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id)){showCopyToast('저장할 스레드를 선택해주세요');break;}// 하이라이트/메모 상태 수집\nconst highlightStates=[];const highlightColors=[];const memoContents=[];for(const sentenceId of filteredSelectedIds){const isHighlighted=highlightedSentences.has(sentenceId);const memoContent=memos[sentenceId]||null;highlightStates.push(isHighlighted);highlightColors.push(isHighlighted?'yellow':null);memoContents.push(memoContent);}await sentenceApi.saveSentencesToVault({sentences:selectedTexts,source_message_id:'verbalization_chat',source_conversation_id:selectedThread.id,source_thread_id:selectedThread.id,source_thread_type:'verbalization',source_sentence_ids:filteredSelectedIds,tags:['verbalization'],highlight_states:highlightStates,highlight_colors:highlightColors,memo_contents:memoContents});// 백엔드에 하이라이트 저장\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){for(const sentenceId of filteredSelectedIds){try{await sentenceApi.createHighlight({sentence_id:sentenceId,thread_id:selectedThread.id,thread_type:'verbalization'});}catch(highlightError){console.warn('하이라이트 저장 실패:',sentenceId,highlightError);}}}// 로컬 상태 업데이트\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);filteredSelectedIds.forEach(id=>newSet.add(id));return newSet;});showCopyToast('저장고에 저장되었습니다');}catch(error){console.error('저장고 저장 실패:',error);showCopyToast('저장고 저장에 실패했습니다');}break;case'addMemo':// 새로운 통합된 메뉴 액션 사용\nawait verbalizationMenuActions.handleAddMemo(filteredSelectedIds,selectedTexts);break;case'highlight':if(filteredSelectedIds.length>0&&selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){try{const currentlyHighlighted=filteredSelectedIds.filter(id=>highlightedSentences.has(id));if(currentlyHighlighted.length>0){// 하이라이트 제거\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);filteredSelectedIds.forEach(id=>newSet.delete(id));return newSet;});// 백엔드에서 하이라이트 삭제\nfor(const sentenceId of filteredSelectedIds){try{await sentenceApi.deleteHighlight(sentenceId);}catch(error){console.warn('백엔드 하이라이트 삭제 실패:',error);}}showCopyToast('하이라이트가 제거되었습니다');}else{// 하이라이트 추가\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);filteredSelectedIds.forEach(id=>newSet.add(id));return newSet;});// 백엔드에 하이라이트 저장\nfor(const sentenceId of filteredSelectedIds){try{await sentenceApi.createHighlight({sentence_id:sentenceId,thread_id:selectedThread.id,thread_type:'verbalization'});}catch(error){console.warn('백엔드 하이라이트 저장 실패:',error);}}showCopyToast('하이라이트가 추가되었습니다');}}catch(error){console.error('하이라이트 토글 실패:',error);showCopyToast('하이라이트 처리에 실패했습니다');}}break;case'copy':if(selectedTexts.length>0){await copyToClipboard(selectedTexts.join(' '),'선택된 문장이 복사되었습니다');}break;}// 모든 선택 해제\nsetSelectedSentences(new Set());};// 문장선택 모드 토글\nconst handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(HeaderSection,{children:[/*#__PURE__*/_jsx(HeaderTitle,{children:\"\\uC5B8\\uC5B4\\uD654\"}),/*#__PURE__*/_jsx(NewThreadButton,{onClick:handleCreateNewThread,children:\"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\"})]}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[localMessages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(EmptyIcon,{children:\"\\uD83D\\uDCAD\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368\",/*#__PURE__*/_jsx(\"br\",{}),\"\\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"\\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"\\uC5B4\\uB5A4 \\uAC83\\uC774\\uB4E0 \\uC88B\\uC2B5\\uB2C8\\uB2E4. \\uC9C0\\uAE08 \\uB290\\uB07C\\uACE0 \\uC788\\uB294 \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uD3B8\\uC548\\uD558\\uAC8C \\uB9D0\\uC500\\uD574 \\uC8FC\\uC138\\uC694.\"]})]}):localMessages.map((message,index)=>{const isAssistant=message.role==='assistant';return isSentenceModeActive&&isAssistant?/*#__PURE__*/_jsx(SelectableMessage,{message:message,messageIndex:index,personas:{},selectedSentences:selectedSentences,highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:handleToggleSelect,onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo,showSentenceSelector:true},\"\".concat(message.role,\"-\").concat(index)):/*#__PURE__*/_jsx(Message,{message:message,personas:{},showActionButtons:true,showThreeActionButtons:false,onCopy:()=>handleCopyMessage(message.content),onEdit:message.role==='user'?()=>handleStartEdit(index):undefined,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit,isEditing:editingMessageIndex===index},\"\".concat(message.role,\"-\").concat(index));}),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:\"\\uC5B8\\uC5B4\\uD654 \\uB3C4\\uC6B0\\uBBF8\",personaColor:\"#666\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:handleSendMessage,disabled:isLoading,placeholder:\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368 \\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,onToggleSentenceMode:handleToggleSentenceMode})})]}),/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsx(FloatingActionButton,{show:isSentenceModeActive?selectedSentences.size>0:showFAB,onMenuAction:isSentenceModeActive?handleMenuAction:handleFABMenuAction,personaId:\"verbalization\",currentInterpretation:\"\"})]});};export default VerbalizationView;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","chatApi","MessageInput","Message","SelectableMessage","LoadingMessage","FloatingActionButton","sentenceApi","useSentenceMenu","useSentenceData","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","HeaderSection","_templateObject2","HeaderTitle","h2","_templateObject3","NewThreadButton","button","_templateObject4","ChatSection","_templateObject5","ChatMessages","_templateObject6","ChatInputSection","_templateObject7","EmptyChat","_templateObject8","EmptyIcon","_templateObject9","Toast","_templateObject0","props","show","VerbalizationView","_ref","selectedThread","threads","onThreadUpdate","onCreateNewThread","isLoading","setIsLoading","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","isSentenceModeActive","setIsSentenceModeActive","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","selectedText","setSelectedText","showFAB","setShowFAB","localMessages","setLocalMessages","sentenceDataHook","id","loadThreadSentenceData","threadId","console","log","data","getThreadSentenceData","Object","keys","length","highlights","error","messages","threadMessages","map","m","_m$content","role","content","substring","timestamp","current","scrollTop","scrollHeight","handleSendMessage","message","trim","userMessage","Date","toISOString","prev","response","chatWithVerbalization","thread_id","user_message","thread_updated_at","assistantMessage","persona_name","persona_id","setTimeout","_m$content2","slice","showCopyToast","concat","handleCreateNewThread","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleTextSelection","selection","window","getSelection","toString","handleClearSelection","_window$getSelection","removeAllRanges","handleFABMenuAction","action","insertText","warn","saveRequest","sentences","source_message_id","source_conversation_id","source_thread_id","source_thread_type","tags","saveSentencesToVault","Error","String","stack","undefined","chatElement","handleMouseUp","addEventListener","removeEventListener","handleClickOutside","event","target","contains","closest","document","handleToggleSelect","sentenceId","Array","from","newSet","wasSelected","has","delete","add","handleMemoChange","memo","sentenceIndex","split","sentenceContent","find","s","filter","parseInt","createOrUpdateMemo","sentence_id","thread_type","sentence_content","_objectSpread","handleDeleteMemo","deleteMemo","newMemos","verbalizationMenuActions","personaId","threadType","handleMenuAction","_selectedThread$messa","selectedIds","selectedTexts","filteredSelectedIds","messagesToUse","forEach","messageIndexStr","sentenceIndexStr","isNaN","push","formattedText","join","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","source_sentence_ids","highlight_states","highlight_colors","memo_contents","createHighlight","highlightError","handleAddMemo","currentlyHighlighted","deleteHighlight","handleToggleSentenceMode","children","onClick","ref","index","isAssistant","personas","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","showActionButtons","showThreeActionButtons","onCopy","onEdit","onEditSave","onEditCancel","isEditing","personaName","personaColor","onSendMessage","disabled","placeholder","hasSelectedSentences","size","onToggleSentenceMode","onMenuAction","currentInterpretation"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/verbalization/components/VerbalizationView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\nimport { useSentenceData } from '../../shared/hooks/useSentenceData';\n\ninterface VerbalizationViewProps {\n  selectedThread: TrainingThread | null;\n  threads: TrainingThread[];\n  onThreadUpdate: () => void;\n  onCreateNewThread: () => Promise<void>;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst VerbalizationView: React.FC<VerbalizationViewProps> = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  \n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n  \n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState<Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n    persona_name?: string;\n  }>>([]);\n\n  // useSentenceData 훅 사용\n  const sentenceDataHook = useSentenceData(selectedThread?.id);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('=== 언어화 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n      \n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n      \n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      \n      console.log('=== 언어화 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\n  useEffect(() => {\n    console.log('=== 언어화 selectedThread 변경 ===');\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread?.messages);\n    \n    if (selectedThread) {\n      // 스레드 메시지들을 localMessages로 동기화\n      const threadMessages = selectedThread.messages || [];\n      console.log('스레드 메시지들:', threadMessages.map(m => ({ role: m.role, content: m.content?.substring(0, 50) + '...', timestamp: m.timestamp })));\n      \n      setLocalMessages(threadMessages);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    } else {\n      console.log('selectedThread가 없음 - localMessages 초기화');\n      setLocalMessages([]);\n      // 스레드가 없으면 데이터 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  }, [selectedThread]);\n\n  // selectedThread가 변경될 때 해당 스레드의 메모/하이라이트 데이터 로딩\n  useEffect(() => {\n    if (selectedThread?.id) {\n      console.log('언어화 스레드 변경됨:', selectedThread.id);\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [selectedThread?.id]);\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message.trim(),\n      timestamp: new Date().toISOString(),\n    };\n    \n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\n      const response = await chatApi.chatWithVerbalization(\n        message,\n        selectedThread?.id // 스레드가 없으면 undefined 전달\n      );\n\n      console.log('API 응답 전체:', response);\n      console.log('응답 데이터:', response.data);\n      console.log('응답 에러:', response.error);\n\n      if (response.data) {\n        console.log('메시지 전송 성공');\n        console.log('응답 구조:', {\n          thread_id: response.data.thread_id,\n          user_message: response.data.user_message,\n          response: response.data.response,\n          thread_updated_at: response.data.thread_updated_at\n        });\n        \n        // 3단계: AI 응답을 로컬 메시지에 추가 (임시)\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_name: '언어화 도우미',\n          persona_id: 'verbalization'\n        };\n        \n        console.log('생성된 assistant 메시지:', assistantMessage);\n        setLocalMessages(prev => [...prev, assistantMessage]);\n        \n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n        // 스레드 목록과 선택된 스레드를 새로고침\n        console.log('스레드 업데이트 시작');\n        await onThreadUpdate();\n        console.log('스레드 업데이트 완료');\n        \n        // 새로 생성된 스레드가 선택되도록 추가 처리\n        if (!selectedThread && response.data.thread_id) {\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\n          setTimeout(async () => {\n            console.log('지연된 스레드 업데이트 시작');\n            await onThreadUpdate();\n            console.log('지연된 스레드 업데이트 완료');\n          }, 100);\n        }\n        \n        // 5단계: localMessages와 selectedThread 동기화 확인 및 강제 동기화\n        // 짧은 지연 후 selectedThread가 업데이트되면 localMessages를 다시 동기화\n        setTimeout(() => {\n          console.log('메시지 전송 후 동기화 체크 및 강제 동기화');\n          console.log('현재 selectedThread:', selectedThread);\n          console.log('현재 localMessages 수:', localMessages.length);\n          \n          // 스레드가 업데이트되었으면 강제로 localMessages를 동기화\n          if (selectedThread && selectedThread.messages) {\n            console.log('강제 동기화 실행 - selectedThread.messages 수:', selectedThread.messages.length);\n            console.log('selectedThread.messages:', selectedThread.messages.map(m => ({ \n              role: m.role, \n              content: m.content?.substring(0, 50) + '...', \n              timestamp: m.timestamp \n            })));\n            \n            setLocalMessages([...selectedThread.messages]);\n            console.log('강제 동기화 완료');\n          }\n        }, 300);\n        \n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n      \n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n      \n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n      \n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n      \n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      \n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      window.getSelection()?.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      \n      case 'saveToVault':\n        // 언어화에서도 저장고 기능 제공\n        if (selectedText) {\n          try {\n            console.log('=== 언어화 텍스트 선택 저장고 저장 시작 ===');\n            console.log('선택된 텍스트:', selectedText);\n            console.log('선택된 스레드:', selectedThread?.id);\n            \n            if (!selectedThread?.id) {\n              console.warn('선택된 스레드가 없습니다');\n              showCopyToast('저장할 스레드를 선택해주세요');\n              break;\n            }\n            \n            const saveRequest = {\n              sentences: [selectedText],\n              source_message_id: 'verbalization_text_selection',\n              source_conversation_id: selectedThread.id,\n              source_thread_id: selectedThread.id,\n              source_thread_type: 'verbalization',\n              tags: ['verbalization', 'text_selection']\n            };\n            \n            console.log('텍스트 선택 저장 요청:', saveRequest);\n            \n            const response = await sentenceApi.saveSentencesToVault(saveRequest);\n            console.log('텍스트 선택 저장 응답:', response);\n            \n            console.log('=== 언어화 텍스트 선택 저장고 저장 완료 ===');\n            showCopyToast('저장고에 저장되었습니다');\n          } catch (error) {\n            console.error('=== 언어화 텍스트 선택 저장고 저장 실패 ===', error);\n            console.error('오류 세부사항:', {\n              message: error instanceof Error ? error.message : String(error),\n              stack: error instanceof Error ? error.stack : undefined\n            });\n            showCopyToast(`저장고 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n          }\n        } else {\n          console.warn('선택된 텍스트가 없습니다');\n          showCopyToast('저장할 텍스트를 선택해주세요');\n        }\n        break;\n      \n      case 'addMemo':\n        // 언어화에서는 메모 기능 미제공\n        showCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');\n        break;\n      \n      case 'highlight':\n        // 언어화에서는 하이라이트 기능 미제공\n        showCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');\n        break;\n    }\n    \n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    console.log('handleToggleSelect 시작:', sentenceId);\n    console.log('현재 selectedSentences:', Array.from(selectedSentences));\n    \n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      const wasSelected = newSet.has(sentenceId);\n      \n      if (wasSelected) {\n        newSet.delete(sentenceId);\n        console.log('문장 선택 해제:', sentenceId);\n      } else {\n        newSet.add(sentenceId);\n        console.log('문장 선택 추가:', sentenceId);\n      }\n      \n      console.log('새로운 selectedSentences:', Array.from(newSet));\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    console.log('=== 언어화 메모 저장 시작 ===');\n    console.log('문장 ID:', sentenceId);\n    console.log('메모 내용:', memo);\n    console.log('선택된 스레드:', selectedThread?.id);\n    \n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp, , sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (selectedThread?.messages) {\n      const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    \n    if (!selectedThread?.id) {\n      console.error('선택된 스레드가 없음');\n      throw new Error('스레드 정보를 찾을 수 없습니다');\n    }\n    \n    try {\n      // 개선된 useSentenceData 훅의 handleMemoChange 사용\n      if (sentenceDataHook?.handleMemoChange) {\n        await sentenceDataHook.handleMemoChange(sentenceId, memo, selectedThread.id, 'verbalization');\n      } else {\n        // 폴백: 직접 API 호출\n        await sentenceApi.createOrUpdateMemo({\n          sentence_id: sentenceId,\n          thread_id: selectedThread.id,\n          thread_type: 'verbalization',\n          content: memo,\n          sentence_content: sentenceContent,\n          source_message_id: 'verbalization_chat',\n          // 백엔드 자동 저장을 위한 추가 정보\n          persona_id: 'verbalization',\n          tags: ['verbalization'],\n          source_conversation_id: selectedThread.id,\n          source_thread_id: selectedThread.id,\n        } as any);\n        \n        // 성공 시 로컬 상태도 업데이트\n        setMemos(prev => ({\n          ...prev,\n          [sentenceId]: memo\n        }));\n      }\n      \n      console.log('언어화 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error;\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n      \n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      \n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 새로운 통합된 메뉴 액션 훅 사용\n  const verbalizationMenuActions = useSentenceMenu({\n    personaId: 'verbalization',\n    threadType: 'verbalization',\n    selectedThread,\n    memos,\n    highlightedSentences,\n    setMemos,\n    setHighlightedSentences\n  });\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    \n    console.log('=== 언어화 handleMenuAction 시작 ===');\n    console.log('액션:', action);\n    console.log('선택된 ID들:', selectedIds);\n    console.log('selectedThread 메시지 수:', selectedThread?.messages?.length || 0);\n    console.log('로컬 메시지 수:', localMessages.length);\n    \n    // 선택된 문장들의 텍스트를 추출\n    const selectedTexts: string[] = [];\n    const filteredSelectedIds: string[] = [];\n    \n    // selectedThread가 있으면 우선 사용, 없으면 localMessages 사용\n    const messagesToUse = selectedThread?.messages || localMessages;\n    console.log('사용할 메시지 배열:', messagesToUse.length > 0 ? '선택된 스레드 메시지' : '로컬 메시지');\n    \n    selectedIds.forEach(id => {\n      console.log('처리 중인 ID:', id);\n      const [timestamp, messageIndexStr, sentenceIndexStr] = id.split('_');\n      const messageIndex = parseInt(messageIndexStr);\n      const sentenceIndex = parseInt(sentenceIndexStr);\n      \n      console.log('파싱된 정보:', { timestamp, messageIndex, sentenceIndex });\n      \n      // 메시지 찾기 - 먼저 messageIndex로 시도\n      let message = null;\n      if (!isNaN(messageIndex) && messageIndex >= 0 && messageIndex < messagesToUse.length) {\n        message = messagesToUse[messageIndex];\n        console.log('messageIndex로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 30)}...` : '없음');\n      }\n      \n      // messageIndex로 안 되면 timestamp로 시도\n      if (!message) {\n        message = messagesToUse.find(m => m.timestamp === timestamp);\n        console.log('timestamp로 찾은 메시지:', message ? `${message.role}: ${message.content.substring(0, 30)}...` : '없음');\n      }\n      \n      if (message && message.role === 'assistant') {\n        // 문장 분할\n        const sentences = message.content\n          .split(/[\\n.]+/)\n          .map(s => s.trim())\n          .filter(s => s.length > 0);\n        \n        const text = sentences[sentenceIndex] || '';\n        console.log('선택된 문장 텍스트:', text);\n        \n        if (text && text.length > 0) {\n          selectedTexts.push(text);\n          filteredSelectedIds.push(id);\n          console.log('유효한 문장 추가됨:', text);\n        }\n      } else if (message && message.role === 'user') {\n        console.log('무시됨 - user 메시지');\n      } else {\n        console.warn('메시지를 찾을 수 없음:', { id, messageIndex, timestamp });\n      }\n    });\n    \n    console.log('최종 선택된 텍스트들:', selectedTexts);\n    console.log('최종 필터링된 ID들:', filteredSelectedIds);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          if (selectedTexts.length === 0) {\n            showCopyToast('assistant 메시지만 저장할 수 있습니다');\n            break;\n          }\n          \n          if (!selectedThread?.id) {\n            showCopyToast('저장할 스레드를 선택해주세요');\n            break;\n          }\n          \n          // 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of filteredSelectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread.id,\n            source_thread_id: selectedThread.id,\n            source_thread_type: 'verbalization',\n            source_sentence_ids: filteredSelectedIds,\n            tags: ['verbalization'],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          // 백엔드에 하이라이트 저장\n          if (selectedThread?.id) {\n            for (const sentenceId of filteredSelectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'verbalization'\n                });\n              } catch (highlightError) {\n                console.warn('하이라이트 저장 실패:', sentenceId, highlightError);\n              }\n            }\n          }\n          \n          // 로컬 상태 업데이트\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            filteredSelectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        // 새로운 통합된 메뉴 액션 사용\n        await verbalizationMenuActions.handleAddMemo(filteredSelectedIds, selectedTexts);\n        break;\n      \n      case 'highlight':\n        if (filteredSelectedIds.length > 0 && selectedThread?.id) {\n          try {\n            const currentlyHighlighted = filteredSelectedIds.filter(id => highlightedSentences.has(id));\n            \n            if (currentlyHighlighted.length > 0) {\n              // 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n              \n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                filteredSelectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n              \n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of filteredSelectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'verbalization'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      {/* 헤더 */}\n      <HeaderSection>\n        <HeaderTitle>언어화</HeaderTitle>\n        <NewThreadButton onClick={handleCreateNewThread}>\n          새 대화 시작\n        </NewThreadButton>\n      </HeaderSection>\n\n      {/* 채팅 영역 */}\n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {localMessages.length === 0 ? (\n            <EmptyChat>\n              <EmptyIcon>💭</EmptyIcon>\n              <div>\n                <strong>언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써<br />\n                그것을 인식하고 만들어 가는 것입니다.</strong>\n                <br /><br />\n                자유롭게 당신의 생각을 말로 내뱉으세요!\n                <br /><br />\n                어떤 것이든 좋습니다. 지금 느끼고 있는 감정이나 생각을 편안하게 말씀해 주세요.\n              </div>\n            </EmptyChat>\n          ) : (\n            localMessages.map((message, index) => {\n              const isAssistant = message.role === 'assistant';\n              \n              return isSentenceModeActive && isAssistant ? (\n                <SelectableMessage\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  messageIndex={index}\n                  personas={{}}\n                  selectedSentences={selectedSentences}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={handleToggleSelect}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={true}\n                />\n              ) : (\n                <Message\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  personas={{}}\n                  showActionButtons={true}\n                  showThreeActionButtons={false}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={message.role === 'user' ? () => handleStartEdit(index) : undefined}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                  isEditing={editingMessageIndex === index}\n                />\n              );\n            })\n          )}\n          \n          {/* 로딩 메시지 */}\n          {isLoading && (\n            <LoadingMessage \n              personaName=\"언어화 도우미\"\n              personaColor=\"#666\"\n            />\n          )}\n        </ChatMessages>\n\n        {/* 입력창 */}\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder=\"언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써 그것을 인식하고 만들어 가는 것입니다. 자유롭게 당신의 생각을 말로 내뱉으세요!\"\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            onToggleSentenceMode={handleToggleSentenceMode}\n          />\n        </ChatInputSection>\n      </ChatSection>\n\n      {/* 토스트 메시지 */}\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n\n      {/* FloatingActionButton */}\n      <FloatingActionButton\n        show={isSentenceModeActive ? selectedSentences.size > 0 : showFAB}\n        onMenuAction={isSentenceModeActive ? handleMenuAction : handleFABMenuAction}\n        personaId=\"verbalization\"\n        currentInterpretation=\"\"\n      />\n    </Container>\n  );\n};\n\nexport default VerbalizationView; "],"mappings":"ocAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,SAAS,CAAEC,MAAM,KAAQ,OAAO,CAC1D,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CAEtC,OAASC,OAAO,KAAQ,0BAA0B,CAClD,MAAO,CAAAC,YAAY,KAA2B,sCAAsC,CACpF,MAAO,CAAAC,OAAO,KAAM,iCAAiC,CACrD,MAAO,CAAAC,iBAAiB,KAAM,6CAA6C,CAC3E,MAAO,CAAAC,cAAc,KAAM,wCAAwC,CACnE,MAAO,CAAAC,oBAAoB,KAAM,8CAA8C,CAC/E,OAASC,WAAW,KAAQ,gCAAgC,CAC5D,OAASC,eAAe,KAAQ,oCAAoC,CACpE,OAASC,eAAe,KAAQ,oCAAoC,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBASrE,KAAM,CAAAC,SAAS,CAAGd,MAAM,CAACe,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,8FAK3B,CAED,KAAM,CAAAC,aAAa,CAAGlB,MAAM,CAACe,GAAG,CAAAI,gBAAA,GAAAA,gBAAA,CAAAF,sBAAA,sKAO/B,CAED,KAAM,CAAAG,WAAW,CAAGpB,MAAM,CAACqB,EAAE,CAAAC,gBAAA,GAAAA,gBAAA,CAAAL,sBAAA,oFAK5B,CAED,KAAM,CAAAM,eAAe,CAAGvB,MAAM,CAACwB,MAAM,CAAAC,gBAAA,GAAAA,gBAAA,CAAAR,sBAAA,kkBAsBpC,CAED,KAAM,CAAAS,WAAW,CAAG1B,MAAM,CAACe,GAAG,CAAAY,gBAAA,GAAAA,gBAAA,CAAAV,sBAAA,wFAK7B,CAED,KAAM,CAAAW,YAAY,CAAG5B,MAAM,CAACe,GAAG,CAAAc,gBAAA,GAAAA,gBAAA,CAAAZ,sBAAA,wHAO9B,CAED,KAAM,CAAAa,gBAAgB,CAAG9B,MAAM,CAACe,GAAG,CAAAgB,gBAAA,GAAAA,gBAAA,CAAAd,sBAAA,8EAIlC,CAED,KAAM,CAAAe,SAAS,CAAGhC,MAAM,CAACe,GAAG,CAAAkB,gBAAA,GAAAA,gBAAA,CAAAhB,sBAAA,uMAU3B,CAED,KAAM,CAAAiB,SAAS,CAAGlC,MAAM,CAACe,GAAG,CAAAoB,gBAAA,GAAAA,gBAAA,CAAAlB,sBAAA,sDAG3B,CAED;AACA,KAAM,CAAAmB,KAAK,CAAGpC,MAAM,CAACe,GAAG,CAAAsB,gBAAA,GAAAA,gBAAA,CAAApB,sBAAA,mTAUTqB,KAAK,EAAIA,KAAK,CAACC,IAAI,CAAG,eAAe,CAAG,kBAAkB,CAIxE,CAED,KAAM,CAAAC,iBAAmD,CAAGC,IAAA,EAKtD,IALuD,CAC3DC,cAAc,CACdC,OAAO,CACPC,cAAc,CACdC,iBACF,CAAC,CAAAJ,IAAA,CACC,KAAM,CAACK,SAAS,CAAEC,YAAY,CAAC,CAAGlD,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAAmD,eAAe,CAAGjD,MAAM,CAAiB,IAAI,CAAC,CACpD,KAAM,CAAAkD,eAAe,CAAGlD,MAAM,CAAkB,IAAI,CAAC,CACrD,KAAM,CAACmD,SAAS,CAAEC,YAAY,CAAC,CAAGtD,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACuD,YAAY,CAAEC,eAAe,CAAC,CAAGxD,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACyD,mBAAmB,CAAEC,sBAAsB,CAAC,CAAG1D,QAAQ,CAAgB,IAAI,CAAC,CAEnF;AACA,KAAM,CAAC2D,oBAAoB,CAAEC,uBAAuB,CAAC,CAAG5D,QAAQ,CAAC,KAAK,CAAC,CACvE,KAAM,CAAC6D,iBAAiB,CAAEC,oBAAoB,CAAC,CAAG9D,QAAQ,CAAc,GAAI,CAAA+D,GAAG,CAAC,CAAC,CAAC,CAClF,KAAM,CAACC,oBAAoB,CAAEC,uBAAuB,CAAC,CAAGjE,QAAQ,CAAc,GAAI,CAAA+D,GAAG,CAAC,CAAC,CAAC,CACxF,KAAM,CAACG,KAAK,CAAEC,QAAQ,CAAC,CAAGnE,QAAQ,CAAyB,CAAC,CAAC,CAAC,CAE9D;AACA,KAAM,CAACoE,YAAY,CAAEC,eAAe,CAAC,CAAGrE,QAAQ,CAAC,EAAE,CAAC,CACpD,KAAM,CAACsE,OAAO,CAAEC,UAAU,CAAC,CAAGvE,QAAQ,CAAC,KAAK,CAAC,CAE7C;AACA,KAAM,CAACwE,aAAa,CAAEC,gBAAgB,CAAC,CAAGzE,QAAQ,CAK9C,EAAE,CAAC,CAEP;AACA,KAAM,CAAA0E,gBAAgB,CAAG9D,eAAe,CAACiC,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE8B,EAAE,CAAC,CAE5D;AACA,KAAM,CAAAC,sBAAsB,CAAG,KAAO,CAAAC,QAAgB,EAAK,CACzD,GAAI,CACFC,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CACxCD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEF,QAAQ,CAAC,CAEhC;AACA,KAAM,CAAAG,IAAI,CAAG,KAAM,CAAAtE,WAAW,CAACuE,qBAAqB,CAACJ,QAAQ,CAAC,CAE9DC,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEG,MAAM,CAACC,IAAI,CAACH,IAAI,CAACd,KAAK,CAAC,CAACkB,MAAM,CAAE,GAAG,CAAC,CAC3DN,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEC,IAAI,CAACK,UAAU,CAACD,MAAM,CAAE,GAAG,CAAC,CAEtD;AACAjB,QAAQ,CAACa,IAAI,CAACd,KAAK,CAAC,CACpBD,uBAAuB,CAAC,GAAI,CAAAF,GAAG,CAACiB,IAAI,CAACK,UAAU,CAAC,CAAC,CAEjDP,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC,CAC1C,CAAE,MAAOO,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CACzC;AACAnB,QAAQ,CAAC,CAAC,CAAC,CAAC,CACZF,uBAAuB,CAAC,GAAI,CAAAF,GAAG,CAAC,CAAC,CAAC,CACpC,CACF,CAAC,CAED;AACA9D,SAAS,CAAC,IAAM,CACd6E,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5CD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAElC,cAAc,CAAC,CAC9CiC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAElC,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE0C,QAAQ,CAAC,CAEjE,GAAI1C,cAAc,CAAE,CAClB;AACA,KAAM,CAAA2C,cAAc,CAAG3C,cAAc,CAAC0C,QAAQ,EAAI,EAAE,CACpDT,OAAO,CAACC,GAAG,CAAC,WAAW,CAAES,cAAc,CAACC,GAAG,CAACC,CAAC,OAAAC,UAAA,OAAK,CAAEC,IAAI,CAAEF,CAAC,CAACE,IAAI,CAAEC,OAAO,CAAE,EAAAF,UAAA,CAAAD,CAAC,CAACG,OAAO,UAAAF,UAAA,iBAATA,UAAA,CAAWG,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,EAAG,KAAK,CAAEC,SAAS,CAAEL,CAAC,CAACK,SAAU,CAAC,EAAC,CAAC,CAAC,CAE3ItB,gBAAgB,CAACe,cAAc,CAAC,CAEhC;AACAZ,sBAAsB,CAAC/B,cAAc,CAAC8B,EAAE,CAAC,CAC3C,CAAC,IAAM,CACLG,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAC,CACrDN,gBAAgB,CAAC,EAAE,CAAC,CACpB;AACAN,QAAQ,CAAC,CAAC,CAAC,CAAC,CACZF,uBAAuB,CAAC,GAAI,CAAAF,GAAG,CAAC,CAAC,CAAC,CACpC,CACF,CAAC,CAAE,CAAClB,cAAc,CAAC,CAAC,CAEpB;AACA5C,SAAS,CAAC,IAAM,CACd,GAAI4C,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE8B,EAAE,CAAE,CACtBG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAElC,cAAc,CAAC8B,EAAE,CAAC,CAC9CC,sBAAsB,CAAC/B,cAAc,CAAC8B,EAAE,CAAC,CAC3C,CACF,CAAC,CAAE,CAAC9B,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE8B,EAAE,CAAC,CAAC,CAExB;AACA1E,SAAS,CAAC,IAAM,CACd,GAAIkD,eAAe,CAAC6C,OAAO,CAAE,CAC3B7C,eAAe,CAAC6C,OAAO,CAACC,SAAS,CAAG9C,eAAe,CAAC6C,OAAO,CAACE,YAAY,CAC1E,CACF,CAAC,CAAE,CAAC1B,aAAa,CAAEvB,SAAS,CAAC,CAAC,CAE9B;AACA,KAAM,CAAAkD,iBAAiB,CAAG,KAAO,CAAAC,OAAe,EAAuB,CACrE,GAAI,CAACA,OAAO,CAACC,IAAI,CAAC,CAAC,EAAIpD,SAAS,CAAE,MAAO,MAAK,CAE9C;AACA,KAAM,CAAAqD,WAAW,CAAG,CAClBV,IAAI,CAAE,MAAe,CACrBC,OAAO,CAAEO,OAAO,CAACC,IAAI,CAAC,CAAC,CACvBN,SAAS,CAAE,GAAI,CAAAQ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAED/B,gBAAgB,CAACgC,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEH,WAAW,CAAC,CAAC,CAChDpD,YAAY,CAAC,IAAI,CAAC,CAElB,GAAI,CACF4B,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CACjCD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAElC,cAAc,CAAC,CAC9CiC,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEqB,OAAO,CAAC,CAEhC;AACA,KAAM,CAAAM,QAAQ,CAAG,KAAM,CAAAtG,OAAO,CAACuG,qBAAqB,CAClDP,OAAO,CACPvD,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE8B,EAAG;AACrB,CAAC,CAEDG,OAAO,CAACC,GAAG,CAAC,YAAY,CAAE2B,QAAQ,CAAC,CACnC5B,OAAO,CAACC,GAAG,CAAC,SAAS,CAAE2B,QAAQ,CAAC1B,IAAI,CAAC,CACrCF,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAE2B,QAAQ,CAACpB,KAAK,CAAC,CAErC,GAAIoB,QAAQ,CAAC1B,IAAI,CAAE,CACjBF,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CACxBD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAE,CACpB6B,SAAS,CAAEF,QAAQ,CAAC1B,IAAI,CAAC4B,SAAS,CAClCC,YAAY,CAAEH,QAAQ,CAAC1B,IAAI,CAAC6B,YAAY,CACxCH,QAAQ,CAAEA,QAAQ,CAAC1B,IAAI,CAAC0B,QAAQ,CAChCI,iBAAiB,CAAEJ,QAAQ,CAAC1B,IAAI,CAAC8B,iBACnC,CAAC,CAAC,CAEF;AACA,KAAM,CAAAC,gBAAgB,CAAG,CACvBnB,IAAI,CAAE,WAAoB,CAC1BC,OAAO,CAAEa,QAAQ,CAAC1B,IAAI,CAAC0B,QAAQ,CAACb,OAAO,CACvCE,SAAS,CAAEW,QAAQ,CAAC1B,IAAI,CAAC0B,QAAQ,CAACX,SAAS,CAC3CiB,YAAY,CAAE,SAAS,CACvBC,UAAU,CAAE,eACd,CAAC,CAEDnC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEgC,gBAAgB,CAAC,CACnDtC,gBAAgB,CAACgC,IAAI,EAAI,CAAC,GAAGA,IAAI,CAAEM,gBAAgB,CAAC,CAAC,CAErD;AACA;AACAjC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC,CAC1B,KAAM,CAAAhC,cAAc,CAAC,CAAC,CACtB+B,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC,CAE1B;AACA,GAAI,CAAClC,cAAc,EAAI6D,QAAQ,CAAC1B,IAAI,CAAC4B,SAAS,CAAE,CAC9C9B,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAE2B,QAAQ,CAAC1B,IAAI,CAAC4B,SAAS,CAAC,CAC9D;AACAM,UAAU,CAAC,SAAY,CACrBpC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAC9B,KAAM,CAAAhC,cAAc,CAAC,CAAC,CACtB+B,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAChC,CAAC,CAAE,GAAG,CAAC,CACT,CAEA;AACA;AACAmC,UAAU,CAAC,IAAM,CACfpC,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC,CACvCD,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAElC,cAAc,CAAC,CACjDiC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAEP,aAAa,CAACY,MAAM,CAAC,CAExD;AACA,GAAIvC,cAAc,EAAIA,cAAc,CAAC0C,QAAQ,CAAE,CAC7CT,OAAO,CAACC,GAAG,CAAC,wCAAwC,CAAElC,cAAc,CAAC0C,QAAQ,CAACH,MAAM,CAAC,CACrFN,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAElC,cAAc,CAAC0C,QAAQ,CAACE,GAAG,CAACC,CAAC,OAAAyB,WAAA,OAAK,CACxEvB,IAAI,CAAEF,CAAC,CAACE,IAAI,CACZC,OAAO,CAAE,EAAAsB,WAAA,CAAAzB,CAAC,CAACG,OAAO,UAAAsB,WAAA,iBAATA,WAAA,CAAWrB,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,EAAG,KAAK,CAC5CC,SAAS,CAAEL,CAAC,CAACK,SACf,CAAC,EAAC,CAAC,CAAC,CAEJtB,gBAAgB,CAAC,CAAC,GAAG5B,cAAc,CAAC0C,QAAQ,CAAC,CAAC,CAC9CT,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC,CAC1B,CACF,CAAC,CAAE,GAAG,CAAC,CAEP,MAAO,KAAI,CACb,CAAC,IAAM,CACL;AACAN,gBAAgB,CAACgC,IAAI,EAAIA,IAAI,CAACW,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAC3CtC,OAAO,CAACQ,KAAK,CAAC,YAAY,CAAEoB,QAAQ,CAACpB,KAAK,CAAC,CAC3C+B,aAAa,kDAAAC,MAAA,CAAeZ,QAAQ,CAACpB,KAAK,CAAE,CAAC,CAC7C,MAAO,MAAK,CACd,CACF,CAAE,MAAOA,KAAK,CAAE,CACd;AACAb,gBAAgB,CAACgC,IAAI,EAAIA,IAAI,CAACW,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAAC,CAAC,CAC3CtC,OAAO,CAACQ,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClC+B,aAAa,2CAAAC,MAAA,CAAahC,KAAK,CAAE,CAAC,CAClC,MAAO,MAAK,CACd,CAAC,OAAS,CACRpC,YAAY,CAAC,KAAK,CAAC,CACrB,CACF,CAAC,CAED;AACA,KAAM,CAAAqE,qBAAqB,CAAG,KAAAA,CAAA,GAAY,CACxC,GAAI,CACFzC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC,CAElC;AACAN,gBAAgB,CAAC,EAAE,CAAC,CAEpB;AACAK,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAE5B;AACA,KAAM,CAAA/B,iBAAiB,CAAC,CAAC,CAEzB;AACAqE,aAAa,CAAC,gBAAgB,CAAC,CAE/BvC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CACjC,CAAE,MAAOO,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpC+B,aAAa,CAAC,kBAAkB,CAAC,CACnC,CACF,CAAC,CAED;AACA,KAAM,CAAAA,aAAa,CAAIjB,OAAe,EAAK,CACzC5C,eAAe,CAAC4C,OAAO,CAAC,CACxB9C,YAAY,CAAC,IAAI,CAAC,CAClB4D,UAAU,CAAC,IAAM5D,YAAY,CAAC,KAAK,CAAC,CAAE,IAAI,CAAC,CAC7C,CAAC,CAED;AACA,KAAM,CAAAkE,eAAe,CAAG,KAAAA,CAAOC,IAAY,CAAEC,cAAsB,GAAK,CACtE,GAAI,CACF,KAAM,CAAAC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACJ,IAAI,CAAC,CACzCJ,aAAa,CAACK,cAAc,CAAC,CAC/B,CAAE,MAAOpC,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAC9B+B,aAAa,CAAC,OAAO,CAAC,CACxB,CACF,CAAC,CAED;AACA,KAAM,CAAAS,iBAAiB,CAAG,KAAO,CAAAC,cAAsB,EAAK,CAC1D,KAAM,CAAAP,eAAe,CAACO,cAAc,CAAE,cAAc,CAAC,CACvD,CAAC,CAED;AACA,KAAM,CAAAC,eAAe,CAAIC,YAAoB,EAAK,CAChDvE,sBAAsB,CAACuE,YAAY,CAAC,CACtC,CAAC,CAED,KAAM,CAAAC,iBAAiB,CAAG,KAAAA,CAAOD,YAAoB,CAAEE,UAAkB,GAAK,CAC5E;AACA;AACA,MAAO,MAAK,CACd,CAAC,CAED,KAAM,CAAAC,gBAAgB,CAAGA,CAAA,GAAM,CAC7B1E,sBAAsB,CAAC,IAAI,CAAC,CAC9B,CAAC,CAED;AACA,KAAM,CAAA2E,mBAAmB,CAAGA,CAAA,GAAM,CAChC,KAAM,CAAAC,SAAS,CAAGC,MAAM,CAACC,YAAY,CAAC,CAAC,CACvC,GAAIF,SAAS,EAAIA,SAAS,CAACG,QAAQ,CAAC,CAAC,CAACpC,IAAI,CAAC,CAAC,CAAE,CAC5C,KAAM,CAAAjC,YAAY,CAAGkE,SAAS,CAACG,QAAQ,CAAC,CAAC,CAACpC,IAAI,CAAC,CAAC,CAChDhC,eAAe,CAACD,YAAY,CAAC,CAC7BG,UAAU,CAAC,IAAI,CAAC,CAClB,CAAC,IAAM,CACLF,eAAe,CAAC,EAAE,CAAC,CACnBE,UAAU,CAAC,KAAK,CAAC,CACnB,CACF,CAAC,CAED;AACA,KAAM,CAAAmE,oBAAoB,CAAGA,CAAA,GAAM,CACjCrE,eAAe,CAAC,EAAE,CAAC,CACnBE,UAAU,CAAC,KAAK,CAAC,CACjB,GAAIgE,MAAM,CAACC,YAAY,CAAE,KAAAG,oBAAA,CACvB,CAAAA,oBAAA,CAAAJ,MAAM,CAACC,YAAY,CAAC,CAAC,UAAAG,oBAAA,iBAArBA,oBAAA,CAAuBC,eAAe,CAAC,CAAC,CAC1C,CACF,CAAC,CAED;AACA,KAAM,CAAAC,mBAAmB,CAAG,KAAO,CAAAC,MAAwE,EAAK,CAC9G,OAAQA,MAAM,EACZ,IAAK,aAAa,CAChB,GAAI1F,eAAe,CAAC4C,OAAO,EAAI5B,YAAY,CAAE,CAC3ChB,eAAe,CAAC4C,OAAO,CAAC+C,UAAU,CAAC3E,YAAY,CAAC,CAChDiD,aAAa,CAAC,uBAAuB,CAAC,CACxC,CACA,MAEF,IAAK,MAAM,CACT,GAAIjD,YAAY,CAAE,CAChB,KAAM,CAAAoD,eAAe,CAACpD,YAAY,CAAE,kBAAkB,CAAC,CACzD,CACA,MAEF,IAAK,aAAa,CAChB;AACA,GAAIA,YAAY,CAAE,CAChB,GAAI,CACFU,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3CD,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEX,YAAY,CAAC,CACrCU,OAAO,CAACC,GAAG,CAAC,UAAU,CAAElC,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE8B,EAAE,CAAC,CAE3C,GAAI,EAAC9B,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE8B,EAAE,EAAE,CACvBG,OAAO,CAACkE,IAAI,CAAC,eAAe,CAAC,CAC7B3B,aAAa,CAAC,iBAAiB,CAAC,CAChC,MACF,CAEA,KAAM,CAAA4B,WAAW,CAAG,CAClBC,SAAS,CAAE,CAAC9E,YAAY,CAAC,CACzB+E,iBAAiB,CAAE,8BAA8B,CACjDC,sBAAsB,CAAEvG,cAAc,CAAC8B,EAAE,CACzC0E,gBAAgB,CAAExG,cAAc,CAAC8B,EAAE,CACnC2E,kBAAkB,CAAE,eAAe,CACnCC,IAAI,CAAE,CAAC,eAAe,CAAE,gBAAgB,CAC1C,CAAC,CAEDzE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEkE,WAAW,CAAC,CAEzC,KAAM,CAAAvC,QAAQ,CAAG,KAAM,CAAAhG,WAAW,CAAC8I,oBAAoB,CAACP,WAAW,CAAC,CACpEnE,OAAO,CAACC,GAAG,CAAC,eAAe,CAAE2B,QAAQ,CAAC,CAEtC5B,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3CsC,aAAa,CAAC,cAAc,CAAC,CAC/B,CAAE,MAAO/B,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,8BAA8B,CAAEA,KAAK,CAAC,CACpDR,OAAO,CAACQ,KAAK,CAAC,UAAU,CAAE,CACxBc,OAAO,CAAEd,KAAK,WAAY,CAAAmE,KAAK,CAAGnE,KAAK,CAACc,OAAO,CAAGsD,MAAM,CAACpE,KAAK,CAAC,CAC/DqE,KAAK,CAAErE,KAAK,WAAY,CAAAmE,KAAK,CAAGnE,KAAK,CAACqE,KAAK,CAAGC,SAChD,CAAC,CAAC,CACFvC,aAAa,gFAAAC,MAAA,CAAoBhC,KAAK,WAAY,CAAAmE,KAAK,CAAGnE,KAAK,CAACc,OAAO,CAAGsD,MAAM,CAACpE,KAAK,CAAC,CAAE,CAAC,CAC5F,CACF,CAAC,IAAM,CACLR,OAAO,CAACkE,IAAI,CAAC,eAAe,CAAC,CAC7B3B,aAAa,CAAC,iBAAiB,CAAC,CAClC,CACA,MAEF,IAAK,SAAS,CACZ;AACAA,aAAa,CAAC,yBAAyB,CAAC,CACxC,MAEF,IAAK,WAAW,CACd;AACAA,aAAa,CAAC,4BAA4B,CAAC,CAC3C,MACJ,CAEA;AACAqB,oBAAoB,CAAC,CAAC,CACxB,CAAC,CAED;AACAzI,SAAS,CAAC,IAAM,CACd,KAAM,CAAA4J,WAAW,CAAG1G,eAAe,CAAC6C,OAAO,CAC3C,GAAI6D,WAAW,CAAE,CACf,KAAM,CAAAC,aAAa,CAAGA,CAAA,GAAM,CAC1B5C,UAAU,CAACmB,mBAAmB,CAAE,EAAE,CAAC,CAAE;AACvC,CAAC,CAEDwB,WAAW,CAACE,gBAAgB,CAAC,SAAS,CAAED,aAAa,CAAC,CACtDD,WAAW,CAACE,gBAAgB,CAAC,UAAU,CAAED,aAAa,CAAC,CAEvD,MAAO,IAAM,CACXD,WAAW,CAACG,mBAAmB,CAAC,SAAS,CAAEF,aAAa,CAAC,CACzDD,WAAW,CAACG,mBAAmB,CAAC,UAAU,CAAEF,aAAa,CAAC,CAC5D,CAAC,CACH,CACF,CAAC,CAAE,EAAE,CAAC,CAEN;AACA7J,SAAS,CAAC,IAAM,CACd,KAAM,CAAAgK,kBAAkB,CAAIC,KAAiB,EAAK,CAChD,KAAM,CAAAC,MAAM,CAAGD,KAAK,CAACC,MAAqB,CAC1C;AACA,GAAIhH,eAAe,CAAC6C,OAAO,EAAI,CAAC7C,eAAe,CAAC6C,OAAO,CAACoE,QAAQ,CAACD,MAAM,CAAC,EAAI,CAACA,MAAM,CAACE,OAAO,CAAC,YAAY,CAAC,CAAE,CACzG3B,oBAAoB,CAAC,CAAC,CACxB,CACF,CAAC,CAED4B,QAAQ,CAACP,gBAAgB,CAAC,WAAW,CAAEE,kBAAkB,CAAC,CAC1D,MAAO,IAAM,CACXK,QAAQ,CAACN,mBAAmB,CAAC,WAAW,CAAEC,kBAAkB,CAAC,CAC/D,CAAC,CACH,CAAC,CAAE,EAAE,CAAC,CAEN;AACA,KAAM,CAAAM,kBAAkB,CAAIC,UAAkB,EAAK,CACjD1F,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAEyF,UAAU,CAAC,CACjD1F,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAE0F,KAAK,CAACC,IAAI,CAAC7G,iBAAiB,CAAC,CAAC,CAEnEC,oBAAoB,CAAC2C,IAAI,EAAI,CAC3B,KAAM,CAAAkE,MAAM,CAAG,GAAI,CAAA5G,GAAG,CAAC0C,IAAI,CAAC,CAC5B,KAAM,CAAAmE,WAAW,CAAGD,MAAM,CAACE,GAAG,CAACL,UAAU,CAAC,CAE1C,GAAII,WAAW,CAAE,CACfD,MAAM,CAACG,MAAM,CAACN,UAAU,CAAC,CACzB1F,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEyF,UAAU,CAAC,CACtC,CAAC,IAAM,CACLG,MAAM,CAACI,GAAG,CAACP,UAAU,CAAC,CACtB1F,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEyF,UAAU,CAAC,CACtC,CAEA1F,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAE0F,KAAK,CAACC,IAAI,CAACC,MAAM,CAAC,CAAC,CACzD,MAAO,CAAAA,MAAM,CACf,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAK,gBAAgB,CAAG,KAAAA,CAAOR,UAAkB,CAAES,IAAY,GAAK,CACnEnG,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACnCD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEyF,UAAU,CAAC,CACjC1F,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEkG,IAAI,CAAC,CAC3BnG,OAAO,CAACC,GAAG,CAAC,UAAU,CAAElC,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE8B,EAAE,CAAC,CAE3C;AACA,KAAM,CAACoB,SAAS,EAAImF,aAAa,CAAC,CAAGV,UAAU,CAACW,KAAK,CAAC,GAAG,CAAC,CAC1D,GAAI,CAAAC,eAAe,CAAG,EAAE,CACxB,GAAIvI,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE0C,QAAQ,CAAE,CAC5B,KAAM,CAAAa,OAAO,CAAGvD,cAAc,CAAC0C,QAAQ,CAAC8F,IAAI,CAAC3F,CAAC,EAAIA,CAAC,CAACK,SAAS,GAAKA,SAAS,CAAC,CAC5E,GAAIK,OAAO,CAAE,CACX,KAAM,CAAA8C,SAAS,CAAG9C,OAAO,CAACP,OAAO,CAACsF,KAAK,CAAC,QAAQ,CAAC,CAAC1F,GAAG,CAAC6F,CAAC,EAAIA,CAAC,CAACjF,IAAI,CAAC,CAAC,CAAC,CAACkF,MAAM,CAACD,CAAC,EAAIA,CAAC,CAAClG,MAAM,CAAG,CAAC,CAAC,CAC9FgG,eAAe,CAAGlC,SAAS,CAACsC,QAAQ,CAACN,aAAa,CAAC,CAAC,EAAI,EAAE,CAC5D,CACF,CAEA,GAAI,EAACrI,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE8B,EAAE,EAAE,CACvBG,OAAO,CAACQ,KAAK,CAAC,aAAa,CAAC,CAC5B,KAAM,IAAI,CAAAmE,KAAK,CAAC,mBAAmB,CAAC,CACtC,CAEA,GAAI,CACF;AACA,GAAI/E,gBAAgB,SAAhBA,gBAAgB,WAAhBA,gBAAgB,CAAEsG,gBAAgB,CAAE,CACtC,KAAM,CAAAtG,gBAAgB,CAACsG,gBAAgB,CAACR,UAAU,CAAES,IAAI,CAAEpI,cAAc,CAAC8B,EAAE,CAAE,eAAe,CAAC,CAC/F,CAAC,IAAM,CACL;AACA,KAAM,CAAAjE,WAAW,CAAC+K,kBAAkB,CAAC,CACnCC,WAAW,CAAElB,UAAU,CACvB5D,SAAS,CAAE/D,cAAc,CAAC8B,EAAE,CAC5BgH,WAAW,CAAE,eAAe,CAC5B9F,OAAO,CAAEoF,IAAI,CACbW,gBAAgB,CAAER,eAAe,CACjCjC,iBAAiB,CAAE,oBAAoB,CACvC;AACAlC,UAAU,CAAE,eAAe,CAC3BsC,IAAI,CAAE,CAAC,eAAe,CAAC,CACvBH,sBAAsB,CAAEvG,cAAc,CAAC8B,EAAE,CACzC0E,gBAAgB,CAAExG,cAAc,CAAC8B,EACnC,CAAQ,CAAC,CAET;AACAR,QAAQ,CAACsC,IAAI,EAAAoF,aAAA,CAAAA,aAAA,IACRpF,IAAI,MACP,CAAC+D,UAAU,EAAGS,IAAI,EAClB,CAAC,CACL,CAEAnG,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAC3BsC,aAAa,CAAC,aAAa,CAAC,CAC9B,CAAE,MAAO/B,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjC+B,aAAa,CAAC,eAAe,CAAC,CAC9B,KAAM,CAAA/B,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAAwG,gBAAgB,CAAG,KAAO,CAAAtB,UAAkB,EAAK,CACrD,GAAI,CACF;AACA,KAAM,CAAA9J,WAAW,CAACqL,UAAU,CAACvB,UAAU,CAAC,CAExC;AACArG,QAAQ,CAACsC,IAAI,EAAI,CACf,KAAM,CAAAuF,QAAQ,CAAAH,aAAA,IAAQpF,IAAI,CAAE,CAC5B,MAAO,CAAAuF,QAAQ,CAACxB,UAAU,CAAC,CAC3B,MAAO,CAAAwB,QAAQ,CACjB,CAAC,CAAC,CAEF/H,uBAAuB,CAACwC,IAAI,EAAI,CAC9B,KAAM,CAAAkE,MAAM,CAAG,GAAI,CAAA5G,GAAG,CAAC0C,IAAI,CAAC,CAC5BkE,MAAM,CAACG,MAAM,CAACN,UAAU,CAAC,CACzB,MAAO,CAAAG,MAAM,CACf,CAAC,CAAC,CAEFtD,aAAa,CAAC,aAAa,CAAC,CAC9B,CAAE,MAAO/B,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjC+B,aAAa,CAAC,eAAe,CAAC,CAChC,CACF,CAAC,CAED;AACA,KAAM,CAAA4E,wBAAwB,CAAGtL,eAAe,CAAC,CAC/CuL,SAAS,CAAE,eAAe,CAC1BC,UAAU,CAAE,eAAe,CAC3BtJ,cAAc,CACdqB,KAAK,CACLF,oBAAoB,CACpBG,QAAQ,CACRF,uBACF,CAAC,CAAC,CAEF;AACA,KAAM,CAAAmI,gBAAgB,CAAG,KAAO,CAAAtD,MAAwE,EAAK,KAAAuD,qBAAA,CAC3G,KAAM,CAAAC,WAAW,CAAG7B,KAAK,CAACC,IAAI,CAAC7G,iBAAiB,CAAC,CAEjDiB,OAAO,CAACC,GAAG,CAAC,iCAAiC,CAAC,CAC9CD,OAAO,CAACC,GAAG,CAAC,KAAK,CAAE+D,MAAM,CAAC,CAC1BhE,OAAO,CAACC,GAAG,CAAC,UAAU,CAAEuH,WAAW,CAAC,CACpCxH,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAE,CAAAlC,cAAc,SAAdA,cAAc,kBAAAwJ,qBAAA,CAAdxJ,cAAc,CAAE0C,QAAQ,UAAA8G,qBAAA,iBAAxBA,qBAAA,CAA0BjH,MAAM,GAAI,CAAC,CAAC,CAC3EN,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEP,aAAa,CAACY,MAAM,CAAC,CAE9C;AACA,KAAM,CAAAmH,aAAuB,CAAG,EAAE,CAClC,KAAM,CAAAC,mBAA6B,CAAG,EAAE,CAExC;AACA,KAAM,CAAAC,aAAa,CAAG,CAAA5J,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE0C,QAAQ,GAAIf,aAAa,CAC/DM,OAAO,CAACC,GAAG,CAAC,aAAa,CAAE0H,aAAa,CAACrH,MAAM,CAAG,CAAC,CAAG,aAAa,CAAG,QAAQ,CAAC,CAE/EkH,WAAW,CAACI,OAAO,CAAC/H,EAAE,EAAI,CACxBG,OAAO,CAACC,GAAG,CAAC,WAAW,CAAEJ,EAAE,CAAC,CAC5B,KAAM,CAACoB,SAAS,CAAE4G,eAAe,CAAEC,gBAAgB,CAAC,CAAGjI,EAAE,CAACwG,KAAK,CAAC,GAAG,CAAC,CACpE,KAAM,CAAAlD,YAAY,CAAGuD,QAAQ,CAACmB,eAAe,CAAC,CAC9C,KAAM,CAAAzB,aAAa,CAAGM,QAAQ,CAACoB,gBAAgB,CAAC,CAEhD9H,OAAO,CAACC,GAAG,CAAC,SAAS,CAAE,CAAEgB,SAAS,CAAEkC,YAAY,CAAEiD,aAAc,CAAC,CAAC,CAElE;AACA,GAAI,CAAA9E,OAAO,CAAG,IAAI,CAClB,GAAI,CAACyG,KAAK,CAAC5E,YAAY,CAAC,EAAIA,YAAY,EAAI,CAAC,EAAIA,YAAY,CAAGwE,aAAa,CAACrH,MAAM,CAAE,CACpFgB,OAAO,CAAGqG,aAAa,CAACxE,YAAY,CAAC,CACrCnD,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAEqB,OAAO,IAAAkB,MAAA,CAAMlB,OAAO,CAACR,IAAI,OAAA0B,MAAA,CAAKlB,OAAO,CAACP,OAAO,CAACC,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,QAAQ,IAAI,CAAC,CAClH,CAEA;AACA,GAAI,CAACM,OAAO,CAAE,CACZA,OAAO,CAAGqG,aAAa,CAACpB,IAAI,CAAC3F,CAAC,EAAIA,CAAC,CAACK,SAAS,GAAKA,SAAS,CAAC,CAC5DjB,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEqB,OAAO,IAAAkB,MAAA,CAAMlB,OAAO,CAACR,IAAI,OAAA0B,MAAA,CAAKlB,OAAO,CAACP,OAAO,CAACC,SAAS,CAAC,CAAC,CAAE,EAAE,CAAC,QAAQ,IAAI,CAAC,CAC/G,CAEA,GAAIM,OAAO,EAAIA,OAAO,CAACR,IAAI,GAAK,WAAW,CAAE,CAC3C;AACA,KAAM,CAAAsD,SAAS,CAAG9C,OAAO,CAACP,OAAO,CAC9BsF,KAAK,CAAC,QAAQ,CAAC,CACf1F,GAAG,CAAC6F,CAAC,EAAIA,CAAC,CAACjF,IAAI,CAAC,CAAC,CAAC,CAClBkF,MAAM,CAACD,CAAC,EAAIA,CAAC,CAAClG,MAAM,CAAG,CAAC,CAAC,CAE5B,KAAM,CAAAqC,IAAI,CAAGyB,SAAS,CAACgC,aAAa,CAAC,EAAI,EAAE,CAC3CpG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAE0C,IAAI,CAAC,CAEhC,GAAIA,IAAI,EAAIA,IAAI,CAACrC,MAAM,CAAG,CAAC,CAAE,CAC3BmH,aAAa,CAACO,IAAI,CAACrF,IAAI,CAAC,CACxB+E,mBAAmB,CAACM,IAAI,CAACnI,EAAE,CAAC,CAC5BG,OAAO,CAACC,GAAG,CAAC,aAAa,CAAE0C,IAAI,CAAC,CAClC,CACF,CAAC,IAAM,IAAIrB,OAAO,EAAIA,OAAO,CAACR,IAAI,GAAK,MAAM,CAAE,CAC7Cd,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAC,CAC/B,CAAC,IAAM,CACLD,OAAO,CAACkE,IAAI,CAAC,eAAe,CAAE,CAAErE,EAAE,CAAEsD,YAAY,CAAElC,SAAU,CAAC,CAAC,CAChE,CACF,CAAC,CAAC,CAEFjB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEwH,aAAa,CAAC,CAC1CzH,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEyH,mBAAmB,CAAC,CAEhD,OAAQ1D,MAAM,EACZ,IAAK,aAAa,CAChB,GAAI1F,eAAe,CAAC4C,OAAO,EAAIuG,aAAa,CAACnH,MAAM,CAAG,CAAC,CAAE,CACvD,KAAM,CAAA2H,aAAa,CAAGR,aAAa,CAAC9G,GAAG,CAACgC,IAAI,OAAAH,MAAA,CAAQG,IAAI,MAAG,CAAC,CAACuF,IAAI,CAAC,IAAI,CAAC,CACvE5J,eAAe,CAAC4C,OAAO,CAAC+C,UAAU,CAACgE,aAAa,CAAC,CACnD,CACA,MAEF,IAAK,aAAa,CAChB,GAAI,CACF,GAAIR,aAAa,CAACnH,MAAM,GAAK,CAAC,CAAE,CAC9BiC,aAAa,CAAC,2BAA2B,CAAC,CAC1C,MACF,CAEA,GAAI,EAACxE,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE8B,EAAE,EAAE,CACvB0C,aAAa,CAAC,iBAAiB,CAAC,CAChC,MACF,CAEA;AACA,KAAM,CAAA4F,eAA0B,CAAG,EAAE,CACrC,KAAM,CAAAC,eAAkC,CAAG,EAAE,CAC7C,KAAM,CAAAC,YAA+B,CAAG,EAAE,CAE1C,IAAK,KAAM,CAAA3C,UAAU,GAAI,CAAAgC,mBAAmB,CAAE,CAC5C,KAAM,CAAAY,aAAa,CAAGpJ,oBAAoB,CAAC6G,GAAG,CAACL,UAAU,CAAC,CAC1D,KAAM,CAAA6C,WAAW,CAAGnJ,KAAK,CAACsG,UAAU,CAAC,EAAI,IAAI,CAE7CyC,eAAe,CAACH,IAAI,CAACM,aAAa,CAAC,CACnCF,eAAe,CAACJ,IAAI,CAACM,aAAa,CAAG,QAAQ,CAAG,IAAI,CAAC,CACrDD,YAAY,CAACL,IAAI,CAACO,WAAW,CAAC,CAChC,CAEA,KAAM,CAAA3M,WAAW,CAAC8I,oBAAoB,CAAC,CACrCN,SAAS,CAAEqD,aAAa,CACxBpD,iBAAiB,CAAE,oBAAoB,CACvCC,sBAAsB,CAAEvG,cAAc,CAAC8B,EAAE,CACzC0E,gBAAgB,CAAExG,cAAc,CAAC8B,EAAE,CACnC2E,kBAAkB,CAAE,eAAe,CACnCgE,mBAAmB,CAAEd,mBAAmB,CACxCjD,IAAI,CAAE,CAAC,eAAe,CAAC,CACvBgE,gBAAgB,CAAEN,eAAe,CACjCO,gBAAgB,CAAEN,eAAe,CACjCO,aAAa,CAAEN,YACjB,CAAC,CAAC,CAEF;AACA,GAAItK,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE8B,EAAE,CAAE,CACtB,IAAK,KAAM,CAAA6F,UAAU,GAAI,CAAAgC,mBAAmB,CAAE,CAC5C,GAAI,CACF,KAAM,CAAA9L,WAAW,CAACgN,eAAe,CAAC,CAChChC,WAAW,CAAElB,UAAU,CACvB5D,SAAS,CAAE/D,cAAc,CAAC8B,EAAE,CAC5BgH,WAAW,CAAE,eACf,CAAC,CAAC,CACJ,CAAE,MAAOgC,cAAc,CAAE,CACvB7I,OAAO,CAACkE,IAAI,CAAC,cAAc,CAAEwB,UAAU,CAAEmD,cAAc,CAAC,CAC1D,CACF,CACF,CAEA;AACA1J,uBAAuB,CAACwC,IAAI,EAAI,CAC9B,KAAM,CAAAkE,MAAM,CAAG,GAAI,CAAA5G,GAAG,CAAC0C,IAAI,CAAC,CAC5B+F,mBAAmB,CAACE,OAAO,CAAC/H,EAAE,EAAIgG,MAAM,CAACI,GAAG,CAACpG,EAAE,CAAC,CAAC,CACjD,MAAO,CAAAgG,MAAM,CACf,CAAC,CAAC,CAEFtD,aAAa,CAAC,cAAc,CAAC,CAC/B,CAAE,MAAO/B,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClC+B,aAAa,CAAC,gBAAgB,CAAC,CACjC,CACA,MAEF,IAAK,SAAS,CACZ;AACA,KAAM,CAAA4E,wBAAwB,CAAC2B,aAAa,CAACpB,mBAAmB,CAAED,aAAa,CAAC,CAChF,MAEF,IAAK,WAAW,CACd,GAAIC,mBAAmB,CAACpH,MAAM,CAAG,CAAC,EAAIvC,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE8B,EAAE,CAAE,CACxD,GAAI,CACF,KAAM,CAAAkJ,oBAAoB,CAAGrB,mBAAmB,CAACjB,MAAM,CAAC5G,EAAE,EAAIX,oBAAoB,CAAC6G,GAAG,CAAClG,EAAE,CAAC,CAAC,CAE3F,GAAIkJ,oBAAoB,CAACzI,MAAM,CAAG,CAAC,CAAE,CACnC;AACAnB,uBAAuB,CAACwC,IAAI,EAAI,CAC9B,KAAM,CAAAkE,MAAM,CAAG,GAAI,CAAA5G,GAAG,CAAC0C,IAAI,CAAC,CAC5B+F,mBAAmB,CAACE,OAAO,CAAC/H,EAAE,EAAIgG,MAAM,CAACG,MAAM,CAACnG,EAAE,CAAC,CAAC,CACpD,MAAO,CAAAgG,MAAM,CACf,CAAC,CAAC,CAEF;AACA,IAAK,KAAM,CAAAH,UAAU,GAAI,CAAAgC,mBAAmB,CAAE,CAC5C,GAAI,CACF,KAAM,CAAA9L,WAAW,CAACoN,eAAe,CAACtD,UAAU,CAAC,CAC/C,CAAE,MAAOlF,KAAK,CAAE,CACdR,OAAO,CAACkE,IAAI,CAAC,kBAAkB,CAAE1D,KAAK,CAAC,CACzC,CACF,CAEA+B,aAAa,CAAC,gBAAgB,CAAC,CACjC,CAAC,IAAM,CACL;AACApD,uBAAuB,CAACwC,IAAI,EAAI,CAC9B,KAAM,CAAAkE,MAAM,CAAG,GAAI,CAAA5G,GAAG,CAAC0C,IAAI,CAAC,CAC5B+F,mBAAmB,CAACE,OAAO,CAAC/H,EAAE,EAAIgG,MAAM,CAACI,GAAG,CAACpG,EAAE,CAAC,CAAC,CACjD,MAAO,CAAAgG,MAAM,CACf,CAAC,CAAC,CAEF;AACA,IAAK,KAAM,CAAAH,UAAU,GAAI,CAAAgC,mBAAmB,CAAE,CAC5C,GAAI,CACF,KAAM,CAAA9L,WAAW,CAACgN,eAAe,CAAC,CAChChC,WAAW,CAAElB,UAAU,CACvB5D,SAAS,CAAE/D,cAAc,CAAC8B,EAAE,CAC5BgH,WAAW,CAAE,eACf,CAAC,CAAC,CACJ,CAAE,MAAOrG,KAAK,CAAE,CACdR,OAAO,CAACkE,IAAI,CAAC,kBAAkB,CAAE1D,KAAK,CAAC,CACzC,CACF,CAEA+B,aAAa,CAAC,gBAAgB,CAAC,CACjC,CACF,CAAE,MAAO/B,KAAK,CAAE,CACdR,OAAO,CAACQ,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpC+B,aAAa,CAAC,kBAAkB,CAAC,CACnC,CACF,CACA,MAEF,IAAK,MAAM,CACT,GAAIkF,aAAa,CAACnH,MAAM,CAAG,CAAC,CAAE,CAC5B,KAAM,CAAAoC,eAAe,CAAC+E,aAAa,CAACS,IAAI,CAAC,GAAG,CAAC,CAAE,iBAAiB,CAAC,CACnE,CACA,MACJ,CAEA;AACAlJ,oBAAoB,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAC,CACjC,CAAC,CAED;AACA,KAAM,CAAAgK,wBAAwB,CAAGA,CAAA,GAAM,CACrCnK,uBAAuB,CAAC6C,IAAI,EAAI,CAACA,IAAI,CAAC,CACxC,CAAC,CAED,mBACEzF,KAAA,CAACC,SAAS,EAAA+M,QAAA,eAERhN,KAAA,CAACK,aAAa,EAAA2M,QAAA,eACZlN,IAAA,CAACS,WAAW,EAAAyM,QAAA,CAAC,oBAAG,CAAa,CAAC,cAC9BlN,IAAA,CAACY,eAAe,EAACuM,OAAO,CAAE1G,qBAAsB,CAAAyG,QAAA,CAAC,kCAEjD,CAAiB,CAAC,EACL,CAAC,cAGhBhN,KAAA,CAACa,WAAW,EAAAmM,QAAA,eACVhN,KAAA,CAACe,YAAY,EAACmM,GAAG,CAAE/K,eAAgB,CAAA6K,QAAA,EAChCxJ,aAAa,CAACY,MAAM,GAAK,CAAC,cACzBpE,KAAA,CAACmB,SAAS,EAAA6L,QAAA,eACRlN,IAAA,CAACuB,SAAS,EAAA2L,QAAA,CAAC,cAAE,CAAW,CAAC,cACzBhN,KAAA,QAAAgN,QAAA,eACEhN,KAAA,WAAAgN,QAAA,EAAQ,2KAAkC,cAAAlN,IAAA,QAAK,CAAC,wGAC3B,EAAQ,CAAC,cAC9BA,IAAA,QAAK,CAAC,cAAAA,IAAA,QAAK,CAAC,8GAEZ,cAAAA,IAAA,QAAK,CAAC,cAAAA,IAAA,QAAK,CAAC,qNAEd,EAAK,CAAC,EACG,CAAC,CAEZ0D,aAAa,CAACiB,GAAG,CAAC,CAACW,OAAO,CAAE+H,KAAK,GAAK,CACpC,KAAM,CAAAC,WAAW,CAAGhI,OAAO,CAACR,IAAI,GAAK,WAAW,CAEhD,MAAO,CAAAjC,oBAAoB,EAAIyK,WAAW,cACxCtN,IAAA,CAACP,iBAAiB,EAEhB6F,OAAO,CAAEA,OAAQ,CACjB6B,YAAY,CAAEkG,KAAM,CACpBE,QAAQ,CAAE,CAAC,CAAE,CACbxK,iBAAiB,CAAEA,iBAAkB,CACrCG,oBAAoB,CAAEA,oBAAqB,CAC3CE,KAAK,CAAEA,KAAM,CACboK,cAAc,CAAE/D,kBAAmB,CACnCgE,YAAY,CAAEvD,gBAAiB,CAC/BwD,YAAY,CAAE1C,gBAAiB,CAC/B2C,oBAAoB,CAAE,IAAK,KAAAnH,MAAA,CAVnBlB,OAAO,CAACR,IAAI,MAAA0B,MAAA,CAAI6G,KAAK,CAW9B,CAAC,cAEFrN,IAAA,CAACR,OAAO,EAEN8F,OAAO,CAAEA,OAAQ,CACjBiI,QAAQ,CAAE,CAAC,CAAE,CACbK,iBAAiB,CAAE,IAAK,CACxBC,sBAAsB,CAAE,KAAM,CAC9BC,MAAM,CAAEA,CAAA,GAAM9G,iBAAiB,CAAC1B,OAAO,CAACP,OAAO,CAAE,CACjDgJ,MAAM,CAAEzI,OAAO,CAACR,IAAI,GAAK,MAAM,CAAG,IAAMoC,eAAe,CAACmG,KAAK,CAAC,CAAGvE,SAAU,CAC3EkF,UAAU,CAAG3G,UAAU,EAAKD,iBAAiB,CAACiG,KAAK,CAAEhG,UAAU,CAAE,CACjE4G,YAAY,CAAE3G,gBAAiB,CAC/B4G,SAAS,CAAEvL,mBAAmB,GAAK0K,KAAM,KAAA7G,MAAA,CATjClB,OAAO,CAACR,IAAI,MAAA0B,MAAA,CAAI6G,KAAK,CAU9B,CACF,CACH,CAAC,CACF,CAGAlL,SAAS,eACRnC,IAAA,CAACN,cAAc,EACbyO,WAAW,CAAC,uCAAS,CACrBC,YAAY,CAAC,MAAM,CACpB,CACF,EACW,CAAC,cAGfpO,IAAA,CAACmB,gBAAgB,EAAA+L,QAAA,cACflN,IAAA,CAACT,YAAY,EACX6N,GAAG,CAAE9K,eAAgB,CACrB+L,aAAa,CAAEhJ,iBAAkB,CACjCiJ,QAAQ,CAAEnM,SAAU,CACpBoM,WAAW,CAAC,6XAAiF,CAC7F1L,oBAAoB,CAAEA,oBAAqB,CAC3C2L,oBAAoB,CAAEzL,iBAAiB,CAAC0L,IAAI,CAAG,CAAE,CACjDC,oBAAoB,CAAEzB,wBAAyB,CAChD,CAAC,CACc,CAAC,EACR,CAAC,cAGdjN,IAAA,CAACyB,KAAK,EAACG,IAAI,CAAEW,SAAU,CAAA2K,QAAA,CACpBzK,YAAY,CACR,CAAC,cAGRzC,IAAA,CAACL,oBAAoB,EACnBiC,IAAI,CAAEiB,oBAAoB,CAAGE,iBAAiB,CAAC0L,IAAI,CAAG,CAAC,CAAGjL,OAAQ,CAClEmL,YAAY,CAAE9L,oBAAoB,CAAGyI,gBAAgB,CAAGvD,mBAAoB,CAC5EqD,SAAS,CAAC,eAAe,CACzBwD,qBAAqB,CAAC,EAAE,CACzB,CAAC,EACO,CAAC,CAEhB,CAAC,CAED,cAAe,CAAA/M,iBAAiB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}