{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\QuickPhraseButton.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport QuickPhraseSettingsModal from './QuickPhraseSettingsModal';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst QuickPhraseContainer = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n_c = QuickPhraseContainer;\nconst QuickPhraseBtn = styled.button`\n  width: 100%;\n  height: 40px;\n  border-radius: 16px; /* 문장선택 버튼과 동일한 라운딩 */\n  border: 1px solid #ccc;\n  background: linear-gradient(90deg, #ffffff 0%, #f0f0f0 100%); /* 왼쪽에서 오른쪽으로 흰색→연한회색 */\n  color: #333;\n  font-size: 11px;\n  font-weight: bold;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  line-height: 1.2;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 살짝의 음영 처리 */\n  \n  &:hover {\n    background: linear-gradient(90deg, #f8f8f8 0%, #e8e8e8 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);\n  }\n  \n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  }\n`;\n_c2 = QuickPhraseBtn;\nconst DropdownMenu = styled.div`\n  position: absolute;\n  bottom: 50px;\n  right: 0; /* 오른쪽에서 시작하여 왼쪽으로 확장 */\n  width: 250px; /* 200px에서 250px로 확대 */\n  background: #f5f5f5;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  z-index: 1000;\n  max-height: 450px; /* 400px에서 450px로 확대 */\n  overflow-y: auto;\n  transform: ${props => props.show ? 'scale(1)' : 'scale(0)'};\n  transform-origin: bottom right; /* 꼭지점을 오른쪽 아래로 설정 */\n  transition: transform 0.2s ease;\n`;\n_c3 = DropdownMenu;\nconst MenuItem = styled.button`\n  width: 100%;\n  padding: 14px 18px; /* 12px 16px에서 14px 18px로 확대 */\n  border: none;\n  background: transparent;\n  text-align: left;\n  cursor: ${props => props.isTodo ? 'not-allowed' : 'pointer'};\n  font-size: 14px; /* 14px에서 12px로 폰트 크기 축소 */\n  color: ${props => props.isTodo ? '#999' : '#333'};\n  border-bottom: none;\n  transition: background-color 0.2s ease;\n  \n  &:hover {\n    background: ${props => props.isTodo ? 'transparent' : '#e9ecef'};\n  }\n  \n  &:active {\n    background: ${props => props.isTodo ? 'transparent' : '#dee2e6'};\n  }\n`;\n_c4 = MenuItem;\nconst Divider = styled.div`\n  height: 1px;\n  background: #ddd;\n  margin: 4px 0;\n`;\n_c5 = Divider;\nconst QuickPhraseButton = ({\n  quickPhrases,\n  onPhraseSelect,\n  onPhrasesUpdate,\n  currentInterpretation,\n  personaId,\n  onGenerateProceed,\n  onGenerateSentence\n}) => {\n  _s();\n  const [showMenu, setShowMenu] = useState(false);\n  const [showSettingsModal, setShowSettingsModal] = useState(false);\n  const menuRef = useRef(null);\n  const handleButtonClick = () => {\n    setShowMenu(!showMenu);\n  };\n  const handlePhraseClick = (text, isTodo = false) => {\n    if (isTodo) return; // TODO 항목은 클릭 불가\n\n    onPhraseSelect(text);\n    setShowMenu(false);\n  };\n  const handleGenerateProceed = () => {\n    if (onGenerateProceed && currentInterpretation && personaId) {\n      onGenerateProceed();\n      setShowMenu(false);\n    }\n  };\n  const handleGenerateSentence = () => {\n    if (onGenerateSentence && currentInterpretation && personaId) {\n      onGenerateSentence();\n      setShowMenu(false);\n    }\n  };\n  const isGenerationAvailable = !!(currentInterpretation && personaId);\n  const handleSettingsClick = () => {\n    setShowMenu(false);\n    setShowSettingsModal(true);\n  };\n\n  // 메뉴 외부 클릭 시 메뉴 닫기\n  useEffect(() => {\n    const handleClickOutside = event => {\n      if (menuRef.current && !menuRef.current.contains(event.target)) {\n        setShowMenu(false);\n      }\n    };\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showMenu]);\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(QuickPhraseContainer, {\n      ref: menuRef,\n      children: [/*#__PURE__*/_jsxDEV(QuickPhraseBtn, {\n        onClick: handleButtonClick,\n        children: [\"\\uC790\\uC8FC\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 161,\n          columnNumber: 13\n        }, this), \"\\uC4F0\\uB294\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(DropdownMenu, {\n        show: showMenu,\n        children: [/*#__PURE__*/_jsxDEV(MenuItem, {\n          isTodo: !isGenerationAvailable,\n          onClick: isGenerationAvailable ? handleGenerateProceed : undefined,\n          children: [\"[\\uB098\\uC544\\uAC00\\uAE30] \\uC0DD\\uC131 \", !isGenerationAvailable && '(해석 필요)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 166,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          isTodo: !isGenerationAvailable,\n          onClick: isGenerationAvailable ? handleGenerateSentence : undefined,\n          children: [\"[\\uBB38\\uC7A5] \\uC0DD\\uC131 \", !isGenerationAvailable && '(해석 필요)']\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 172,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 179,\n          columnNumber: 11\n        }, this), quickPhrases.map(phrase => /*#__PURE__*/_jsxDEV(MenuItem, {\n          onClick: () => handlePhraseClick(phrase.text),\n          children: phrase.text\n        }, phrase.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 183,\n          columnNumber: 13\n        }, this)), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 191,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(MenuItem, {\n          isSettings: true,\n          onClick: handleSettingsClick,\n          children: \"\\uC124\\uC815 (\\uD3B8\\uC9D1 \\uCC3D \\uD638\\uCD9C)\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 164,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 159,\n      columnNumber: 7\n    }, this), showSettingsModal && /*#__PURE__*/_jsxDEV(QuickPhraseSettingsModal, {\n      quickPhrases: quickPhrases,\n      onClose: () => setShowSettingsModal(false),\n      onUpdate: onPhrasesUpdate\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 202,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true);\n};\n_s(QuickPhraseButton, \"Qu6KsSK9/u+p8LXl+c7HzQmj9L4=\");\n_c6 = QuickPhraseButton;\nexport default QuickPhraseButton;\nvar _c, _c2, _c3, _c4, _c5, _c6;\n$RefreshReg$(_c, \"QuickPhraseContainer\");\n$RefreshReg$(_c2, \"QuickPhraseBtn\");\n$RefreshReg$(_c3, \"DropdownMenu\");\n$RefreshReg$(_c4, \"MenuItem\");\n$RefreshReg$(_c5, \"Divider\");\n$RefreshReg$(_c6, \"QuickPhraseButton\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","QuickPhraseSettingsModal","jsxDEV","_jsxDEV","Fragment","_Fragment","QuickPhraseContainer","div","_c","QuickPhraseBtn","button","_c2","DropdownMenu","props","show","_c3","MenuItem","isTodo","_c4","Divider","_c5","QuickPhraseButton","quickPhrases","onPhraseSelect","onPhrasesUpdate","currentInterpretation","personaId","onGenerateProceed","onGenerateSentence","_s","showMenu","setShowMenu","showSettingsModal","setShowSettingsModal","menuRef","handleButtonClick","handlePhraseClick","text","handleGenerateProceed","handleGenerateSentence","isGenerationAvailable","handleSettingsClick","handleClickOutside","event","current","contains","target","document","addEventListener","removeEventListener","children","ref","onClick","fileName","_jsxFileName","lineNumber","columnNumber","undefined","map","phrase","id","isSettings","onClose","onUpdate","_c6","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/QuickPhraseButton.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { QuickPhrase } from '../api/quickPhraseApi';\nimport QuickPhraseSettingsModal from './QuickPhraseSettingsModal';\n\ninterface QuickPhraseButtonProps {\n  quickPhrases: QuickPhrase[];\n  onPhraseSelect: (text: string) => void;\n  onPhrasesUpdate: () => void;\n  currentInterpretation?: string;\n  personaId?: string;\n  onGenerateProceed?: () => void;\n  onGenerateSentence?: () => void;\n}\n\nconst QuickPhraseContainer = styled.div`\n  position: relative;\n  display: inline-block;\n`;\n\nconst QuickPhraseBtn = styled.button`\n  width: 100%;\n  height: 40px;\n  border-radius: 16px; /* 문장선택 버튼과 동일한 라운딩 */\n  border: 1px solid #ccc;\n  background: linear-gradient(90deg, #ffffff 0%, #f0f0f0 100%); /* 왼쪽에서 오른쪽으로 흰색→연한회색 */\n  color: #333;\n  font-size: 11px;\n  font-weight: bold;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  line-height: 1.2;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* 살짝의 음영 처리 */\n  \n  &:hover {\n    background: linear-gradient(90deg, #f8f8f8 0%, #e8e8e8 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 3px 6px rgba(0, 0, 0, 0.15);\n  }\n  \n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 1px 2px rgba(0, 0, 0, 0.1);\n  }\n`;\n\nconst DropdownMenu = styled.div<{ show: boolean }>`\n  position: absolute;\n  bottom: 50px;\n  right: 0; /* 오른쪽에서 시작하여 왼쪽으로 확장 */\n  width: 250px; /* 200px에서 250px로 확대 */\n  background: #f5f5f5;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  overflow: hidden;\n  z-index: 1000;\n  max-height: 450px; /* 400px에서 450px로 확대 */\n  overflow-y: auto;\n  transform: ${props => props.show ? 'scale(1)' : 'scale(0)'};\n  transform-origin: bottom right; /* 꼭지점을 오른쪽 아래로 설정 */\n  transition: transform 0.2s ease;\n`;\n\nconst MenuItem = styled.button<{ isTodo?: boolean; isSettings?: boolean }>`\n  width: 100%;\n  padding: 14px 18px; /* 12px 16px에서 14px 18px로 확대 */\n  border: none;\n  background: transparent;\n  text-align: left;\n  cursor: ${props => props.isTodo ? 'not-allowed' : 'pointer'};\n  font-size: 14px; /* 14px에서 12px로 폰트 크기 축소 */\n  color: ${props => props.isTodo ? '#999' : '#333'};\n  border-bottom: none;\n  transition: background-color 0.2s ease;\n  \n  &:hover {\n    background: ${props => props.isTodo ? 'transparent' : '#e9ecef'};\n  }\n  \n  &:active {\n    background: ${props => props.isTodo ? 'transparent' : '#dee2e6'};\n  }\n`;\n\nconst Divider = styled.div`\n  height: 1px;\n  background: #ddd;\n  margin: 4px 0;\n`;\n\nconst QuickPhraseButton: React.FC<QuickPhraseButtonProps> = ({\n  quickPhrases,\n  onPhraseSelect,\n  onPhrasesUpdate,\n  currentInterpretation,\n  personaId,\n  onGenerateProceed,\n  onGenerateSentence\n}) => {\n  const [showMenu, setShowMenu] = useState(false);\n  const [showSettingsModal, setShowSettingsModal] = useState(false);\n  const menuRef = useRef<HTMLDivElement>(null);\n\n  const handleButtonClick = () => {\n    setShowMenu(!showMenu);\n  };\n\n  const handlePhraseClick = (text: string, isTodo: boolean = false) => {\n    if (isTodo) return; // TODO 항목은 클릭 불가\n    \n    onPhraseSelect(text);\n    setShowMenu(false);\n  };\n\n  const handleGenerateProceed = () => {\n    if (onGenerateProceed && currentInterpretation && personaId) {\n      onGenerateProceed();\n      setShowMenu(false);\n    }\n  };\n\n  const handleGenerateSentence = () => {\n    if (onGenerateSentence && currentInterpretation && personaId) {\n      onGenerateSentence();\n      setShowMenu(false);\n    }\n  };\n\n  const isGenerationAvailable = !!(currentInterpretation && personaId);\n\n  const handleSettingsClick = () => {\n    setShowMenu(false);\n    setShowSettingsModal(true);\n  };\n\n  // 메뉴 외부 클릭 시 메뉴 닫기\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      if (menuRef.current && !menuRef.current.contains(event.target as Node)) {\n        setShowMenu(false);\n      }\n    };\n\n    if (showMenu) {\n      document.addEventListener('mousedown', handleClickOutside);\n    }\n\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, [showMenu]);\n\n  return (\n    <>\n      <QuickPhraseContainer ref={menuRef}>\n        <QuickPhraseBtn onClick={handleButtonClick}>\n          자주<br/>쓰는\n        </QuickPhraseBtn>\n        \n        <DropdownMenu show={showMenu}>\n          {/* 나아가기, 문장 생성 항목들 */}\n          <MenuItem \n            isTodo={!isGenerationAvailable}\n            onClick={isGenerationAvailable ? handleGenerateProceed : undefined}\n          >\n            [나아가기] 생성 {!isGenerationAvailable && '(해석 필요)'}\n          </MenuItem>\n          <MenuItem \n            isTodo={!isGenerationAvailable}\n            onClick={isGenerationAvailable ? handleGenerateSentence : undefined}\n          >\n            [문장] 생성 {!isGenerationAvailable && '(해석 필요)'}\n          </MenuItem>\n          \n          <Divider />\n          \n          {/* 실제 자주쓰는 문장들 */}\n          {quickPhrases.map((phrase) => (\n            <MenuItem \n              key={phrase.id}\n              onClick={() => handlePhraseClick(phrase.text)}\n            >\n              {phrase.text}\n            </MenuItem>\n          ))}\n          \n          <Divider />\n          \n          {/* 설정 메뉴 */}\n          <MenuItem isSettings onClick={handleSettingsClick}>\n            설정 (편집 창 호출)\n          </MenuItem>\n        </DropdownMenu>\n      </QuickPhraseContainer>\n\n      {/* 설정 모달 */}\n      {showSettingsModal && (\n        <QuickPhraseSettingsModal\n          quickPhrases={quickPhrases}\n          onClose={() => setShowSettingsModal(false)}\n          onUpdate={onPhrasesUpdate}\n        />\n      )}\n    </>\n  );\n};\n\nexport default QuickPhraseButton; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}