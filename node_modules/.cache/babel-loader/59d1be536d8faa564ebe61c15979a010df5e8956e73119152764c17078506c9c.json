{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\core\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState(null);\n\n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n\n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState(null);\n\n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n\n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState(null);\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = itemId => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n\n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = itemId => {\n    setSelectedConversationItem(itemId);\n\n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId !== null && itemId !== void 0 && itemId.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId, mode, selectedSentence) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n\n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId, threadType) => {\n    // 스레드 ID에서 페르소나 ID 추출\n    const personaId = threadId.split('_')[1]; // 예: \"interpretation_persona1\" -> \"persona1\"\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 해당 스레드로 이동\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId, interpretation) => {\n    const persona = personas[personaId];\n\n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n\n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: (persona === null || persona === void 0 ? void 0 : persona.name) || '',\n      content: interpretation,\n      messages: [{\n        role: 'assistant',\n        content: interpretation,\n        timestamp: new Date().toISOString()\n      }]\n    });\n\n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async message => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택되었는지 확인\n    const isInterpretationThread = selectedConversationItem === null || selectedConversationItem === void 0 ? void 0 : selectedConversationItem.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant',\n            content: response.data.response.content,\n            timestamp: new Date().toISOString(),\n            persona_id: response.data.response.persona_id,\n            persona_name: response.data.response.persona_name\n          };\n\n          // 현재 해석 상태의 메시지에 추가하지 않고, \n          // ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\n          setIsInterpretationLoading(false);\n\n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅 (기존 로직)\n        console.log('기본 해석 기반 채팅');\n\n        // 사용자 메시지를 currentInterpretation에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage]\n        } : null);\n        const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, message);\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant',\n            content: response.data.response,\n            timestamp: response.data.timestamp\n          };\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, assistantMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n          return true;\n        } else {\n          // API 호출 실패 시 폴백\n          console.error('해석 기반 채팅 API 실패:', response.error);\n          const fallbackMessage = {\n            role: 'assistant',\n            content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n            timestamp: new Date().toISOString()\n          };\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, fallbackMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n\n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant',\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString()\n      };\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage]\n      } : null);\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = updatedInterpretation => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = updatedConversation => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = mode => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread, personaId) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n\n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || []\n        });\n\n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n\n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(thread => thread.id === selectedVerbalizationThread.id);\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread === null || selectedVerbalizationThread === void 0 ? void 0 : selectedVerbalizationThread.id;\n    await loadVerbalizationThreads();\n\n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find(thread => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n\n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async () => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n\n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n\n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data, ...prev]);\n\n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation || selectedPersonaItem === 'recent' || selectedPersonaItem === 'verbalization';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 640,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContainer, {\n      children: [/*#__PURE__*/_jsxDEV(PersonaSidebar, {\n        selectedItem: selectedPersonaItem,\n        onSelectItem: handleSelectPersonaItem,\n        isCollapsed: isPersonaSidebarCollapsed,\n        onToggle: shouldShowConversationSidebar ? undefined : togglePersonaSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 643,\n        columnNumber: 9\n      }, this), shouldShowConversationSidebar && /*#__PURE__*/_jsxDEV(ConversationSidebar, {\n        selectedItem: selectedConversationItem,\n        onSelectItem: handleSelectConversationItem,\n        isCollapsed: isConversationSidebarCollapsed,\n        onToggle: toggleConversationSidebar,\n        selectedPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName,\n        selectedPersonaId: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId,\n        refreshTrigger: conversationRefreshTrigger,\n        mode: selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona',\n        personas: selectedPersonaItem === 'recent' ? personas : undefined,\n        verbalizationThreads: selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined,\n        onSelectVerbalizationThread: selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined,\n        onRefreshTrigger: selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 652,\n        columnNumber: 11\n      }, this), selectedPersonaItem === 'vault' ? /*#__PURE__*/_jsxDEV(VaultView, {\n        onNavigateToPersona: handleNavigateToPersonaWithSentence,\n        onNavigateToThread: handleNavigateToThread\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 670,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatArea, {\n        selectedConversation: selectedConversation,\n        conversations: conversations,\n        personas: personas,\n        globalMessages: globalMessages,\n        isLoading: currentInterpretation ? isInterpretationLoading : isLoading,\n        error: error,\n        onSendInitialMessage: sendInitialMessage,\n        onContinueConversation: continueConversation,\n        onClearError: clearError,\n        selectedPersonaItem: selectedPersonaItem,\n        onSelectPersona: handlePersonaSelection,\n        onInterpretationComplete: handleInterpretationComplete,\n        selectedConversationItem: selectedConversationItem,\n        currentInterpretation: currentInterpretation,\n        onInterpretationMessage: handleInterpretationMessage,\n        onUpdateInterpretation: handleUpdateInterpretation,\n        onUpdateConversation: handleUpdateConversation,\n        onSwitchConversationMode: handleSwitchConversationMode,\n        onRefreshConversationSidebar: handleRefreshConversationSidebar,\n        recentInteractionsProps: {\n          personas,\n          onSelectPersona: handleRecentPersonaSelect,\n          onThreadSelect: handleRecentThreadSelect\n        },\n        verbalizationProps: {\n          selectedThread: selectedVerbalizationThread,\n          threads: verbalizationThreads,\n          onThreadUpdate: handleVerbalizationThreadUpdate,\n          onCreateNewThread: handleCreateNewVerbalizationThread\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 675,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 641,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"s/nMkTlVnWVLnO5s3c+NEbOhcTw=\", false, function () {\n  return [useChat];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useChat","ConversationSidebar","PersonaSidebar","VaultView","ChatArea","GlobalStyle","AppContainer","chatApi","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","isInterpretationLoading","setIsInterpretationLoading","interpretationStore","setInterpretationStore","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","actualId","handleSelectConversationItem","includes","console","log","handleNavigateToPersonaWithSentence","personaId","mode","selectedSentence","persona","existingInterpretation","personaName","name","content","messages","role","timestamp","Date","toISOString","sessionStorage","setItem","handleNavigateToThread","threadId","threadType","split","handlePersonaSelection","handleInterpretationComplete","interpretation","prev","handleInterpretationMessage","message","isInterpretationThread","startsWith","selectedThreadId","userMessage","response","chatWithThread","thread_id","user_message","data","assistantMessage","persona_id","persona_name","chatWithInterpretation","fallbackMessage","errorMessage","handleUpdateInterpretation","updatedInterpretation","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","thread","thread_type","interpretationContent","length","id","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","loadVerbalizationThreads","getVerbalizationThreads","updatedSelectedThread","find","handleVerbalizationThreadUpdate","currentSelectedId","setTimeout","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","onNavigateToPersona","onNavigateToThread","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","onThreadSelect","verbalizationProps","selectedThread","threads","onThreadUpdate","onCreateNewThread","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport TrainingCategoryView from '../training/components/TrainingCategoryView';\nimport InterpretationView from '../training/components/InterpretationView';\nimport RecentInteractionsView from '../shared/components/RecentInteractionsView';\nimport VerbalizationView from '../verbalization/components/VerbalizationView';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null>(null);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n  \n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId: string, mode: 'sentence', selectedSentence: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId: string, threadType: string) => {\n    // 스레드 ID에서 페르소나 ID 추출\n    const personaId = threadId.split('_')[1]; // 예: \"interpretation_persona1\" -> \"persona1\"\n    const persona = personas[personaId];\n    \n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 해당 스레드로 이동\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n    \n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: persona?.name || '',\n      content: interpretation,\n      messages: [\n        {\n          role: 'assistant',\n          content: interpretation,\n          timestamp: new Date().toISOString(),\n        }\n      ],\n    });\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택되었는지 확인\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString(),\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        \n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant' as const,\n            content: response.data.response.content,\n            timestamp: new Date().toISOString(),\n            persona_id: response.data.response.persona_id,\n            persona_name: response.data.response.persona_name,\n          };\n\n          // 현재 해석 상태의 메시지에 추가하지 않고, \n          // ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\n          setIsInterpretationLoading(false);\n          \n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅 (기존 로직)\n        console.log('기본 해석 기반 채팅');\n        \n        // 사용자 메시지를 currentInterpretation에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n\n      const response = await chatApi.chatWithInterpretation(\n        currentInterpretation.personaId,\n        message\n      );\n\n      if (response.data) {\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response,\n          timestamp: response.data.timestamp,\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, assistantMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return true;\n      } else {\n        // API 호출 실패 시 폴백\n        console.error('해석 기반 채팅 API 실패:', response.error);\n        const fallbackMessage = {\n          role: 'assistant' as const,\n          content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n          timestamp: new Date().toISOString(),\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, fallbackMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      \n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant' as const,\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString(),\n      };\n\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n      } : null);\n\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    \n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      \n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || [],\n        });\n        \n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        \n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n        \n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(\n            thread => thread.id === selectedVerbalizationThread.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 영역 - 저장고 모드일 때는 저장고 뷰, 그 외에는 채팅 영역 */}\n        {selectedPersonaItem === 'vault' ? (\n          <VaultView\n            onNavigateToPersona={handleNavigateToPersonaWithSentence}\n            onNavigateToThread={handleNavigateToThread}\n          />\n        ) : (\n        <ChatArea\n          selectedConversation={selectedConversation}\n          conversations={conversations}\n          personas={personas}\n          globalMessages={globalMessages}\n          isLoading={currentInterpretation ? isInterpretationLoading : isLoading}\n          error={error}\n          onSendInitialMessage={sendInitialMessage}\n          onContinueConversation={continueConversation}\n          onClearError={clearError}\n          selectedPersonaItem={selectedPersonaItem}\n          onSelectPersona={handlePersonaSelection}\n          onInterpretationComplete={handleInterpretationComplete}\n          selectedConversationItem={selectedConversationItem}\n          currentInterpretation={currentInterpretation}\n          onInterpretationMessage={handleInterpretationMessage}\n          onUpdateInterpretation={handleUpdateInterpretation}\n          onUpdateConversation={handleUpdateConversation}\n          onSwitchConversationMode={handleSwitchConversationMode}\n          onRefreshConversationSidebar={handleRefreshConversationSidebar}\n            recentInteractionsProps={{\n              personas,\n              onSelectPersona: handleRecentPersonaSelect,\n              onThreadSelect: handleRecentThreadSelect,\n            }}\n            verbalizationProps={{\n              selectedThread: selectedVerbalizationThread,\n              threads: verbalizationThreads,\n              onThreadUpdate: handleVerbalizationThreadUpdate,\n              onCreateNewThread: handleCreateNewVerbalizationThread,\n            }}\n        />\n        )}\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}