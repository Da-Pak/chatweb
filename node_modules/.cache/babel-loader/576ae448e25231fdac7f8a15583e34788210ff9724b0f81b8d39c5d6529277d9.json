{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\core\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport { useBrowserHistory } from '../shared/hooks/useBrowserHistory';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState(null);\n\n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n\n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState(null);\n\n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n\n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState(null);\n\n  // 최근 상호작용 보기 관련 상태\n  const [viewingRecentThread, setViewingRecentThread] = useState(null);\n  const [isRecentThreadLoading, setIsRecentThreadLoading] = useState(false);\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    isLoading,\n    error,\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectPersona,\n    clearError\n  } = useChat();\n\n  // 브라우저 히스토리 관리\n  const {\n    navigateTo,\n    parseInitialState\n  } = useBrowserHistory({\n    selectedPersonaItem,\n    selectedConversationItem,\n    currentPersonaId: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId,\n    currentPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName,\n    onNavigateBack: state => {\n      console.log('=== 브라우저 뒤로가기 처리 ===');\n      console.log('복원할 상태:', state);\n\n      // 상태 복원\n      setSelectedPersonaItem(state.selectedPersonaItem);\n      setSelectedConversationItem(state.selectedConversationItem);\n\n      // 페르소나 선택 복원\n      if (state.personaId && personas[state.personaId]) {\n        selectPersona(state.personaId);\n\n        // 해석 상태 복원이 필요한 경우\n        const existingInterpretation = interpretationStore[state.personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: state.personaId,\n            personaName: personas[state.personaId].name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n      }\n\n      // 사이드바 상태 조정\n      if (state.selectedPersonaItem === 'vault' || state.selectedPersonaItem === 'admin' || state.selectedPersonaItem === 'training') {\n        setIsConversationSidebarCollapsed(true);\n      } else {\n        setIsConversationSidebarCollapsed(false);\n      }\n    }\n  });\n\n  // 페르소나 정보가 로드되면 자동으로 훈습 모드로 전환\n  useEffect(() => {\n    // 페르소나가 있고, 아직 특정 모드가 선택되지 않았으며, 뒤로가기로 복원된 상태가 아닌 경우에만 자동 전환\n    if (Object.keys(personas).length > 0 && !selectedPersonaItem) {\n      console.log('페르소나 정보 로드 완료, 자동으로 훈습 모드로 전환');\n      setSelectedPersonaItem('training');\n    }\n  }, [personas, selectedPersonaItem]);\n\n  // 초기 로드 시 URL에서 상태 복원\n  useEffect(() => {\n    const initialState = parseInitialState();\n    console.log('=== 초기 상태 복원 ===');\n    console.log('URL에서 파싱된 상태:', initialState);\n    if (initialState.selectedPersonaItem) {\n      setSelectedPersonaItem(initialState.selectedPersonaItem);\n    }\n    if (initialState.selectedConversationItem) {\n      setSelectedConversationItem(initialState.selectedConversationItem);\n    }\n    if (initialState.personaId && personas[initialState.personaId]) {\n      selectPersona(initialState.personaId);\n    }\n  }, [personas, parseInitialState, selectPersona]);\n\n  // 최근 상호작용 스레드 로드\n  useEffect(() => {\n    const loadRecentThread = async () => {\n      if (!selectedConversationItem || !selectedConversationItem.startsWith('recent-thread::')) {\n        setViewingRecentThread(null);\n        return;\n      }\n      const parts = selectedConversationItem.split('::');\n      if (parts.length < 3) {\n        setViewingRecentThread(null);\n        return;\n      }\n      const threadId = parts[1];\n      const personaId = parts[2];\n      setIsRecentThreadLoading(true);\n      try {\n        let response;\n        let thread;\n        if (personaId === 'verbalization') {\n          response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            thread = response.data.find(t => t.id === threadId);\n          }\n        } else {\n          response = await chatApi.getPersonaThreads(personaId);\n          if (response.data) {\n            thread = response.data.find(t => t.id === threadId);\n          }\n        }\n        if (thread) {\n          var _personas$personaId;\n          const personaName = personaId === 'verbalization' ? '언어화' : ((_personas$personaId = personas[personaId]) === null || _personas$personaId === void 0 ? void 0 : _personas$personaId.name) || '알 수 없음';\n          setViewingRecentThread({\n            ...thread,\n            persona_id: personaId,\n            persona_name: personaName\n          });\n        } else {\n          setViewingRecentThread(null);\n        }\n      } catch (error) {\n        console.error('최근 상호작용 스레드 로드 실패:', error);\n        setViewingRecentThread(null);\n      } finally {\n        setIsRecentThreadLoading(false);\n      }\n    };\n    if (selectedPersonaItem === 'recent') {\n      loadRecentThread();\n    } else {\n      setViewingRecentThread(null);\n    }\n  }, [selectedConversationItem, selectedPersonaItem, personas]);\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = itemId => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n\n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualItemId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = itemId => {\n    setSelectedConversationItem(itemId);\n\n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId !== null && itemId !== void 0 && itemId.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러\n  const handleNavigateToPersona = (personaId, mode) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n\n    // 해석 모드로 이동해야 하는지 확인\n    const shouldNavigateToInterpretation = sessionStorage.getItem('navigateToInterpretationMode');\n    if (shouldNavigateToInterpretation === 'true') {\n      sessionStorage.removeItem('navigateToInterpretationMode'); // 사용 후 제거\n      setSelectedConversationItem('interpretation');\n    } else if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId, mode, selectedSentence) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n\n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId, threadType, interactionMessage) => {\n    console.log('=== 저장고에서 스레드로 이동 ===');\n    console.log('threadId:', threadId);\n    console.log('threadType:', threadType);\n    console.log('interactionMessage:', interactionMessage);\n\n    // 상호작용 메시지가 있으면 sessionStorage에 저장\n    if (interactionMessage) {\n      sessionStorage.setItem('selectedSentenceForInput', interactionMessage);\n      console.log('상호작용 메시지를 sessionStorage에 저장:', interactionMessage);\n    }\n\n    // 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n    // 신형은 타임스탬프가 포함되어 있으므로 숫자가 끝에 있는지 확인\n    const isLegacyInterpretationId = threadId.startsWith('interpretation_') && !threadId.includes('-') && !/\\d{10,}$/.test(threadId); // 10자리 이상 숫자로 끝나지 않는 경우만 구형\n\n    console.log('isLegacyInterpretationId:', isLegacyInterpretationId);\n    console.log('타임스탬프 테스트:', /\\d{10,}$/.test(threadId));\n\n    // 언어화 스레드인 경우\n    if (threadType === 'verbalization') {\n      console.log('언어화 스레드로 이동');\n      setSelectedPersonaItem('verbalization');\n      setIsConversationSidebarCollapsed(false);\n\n      // 해당 스레드를 찾아서 선택\n      const loadAndSelectThread = async () => {\n        try {\n          const response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            const targetThread = response.data.find(thread => thread.id === threadId);\n            if (targetThread) {\n              console.log('타겟 언어화 스레드 찾음:', targetThread.id);\n              setSelectedVerbalizationThread(targetThread);\n              setVerbalizationThreads(response.data);\n            } else {\n              console.warn('타겟 언어화 스레드를 찾을 수 없음:', threadId);\n              // 폴백: 첫 번째 스레드 선택\n              if (response.data.length > 0) {\n                setSelectedVerbalizationThread(response.data[0]);\n                setVerbalizationThreads(response.data);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('언어화 스레드 로딩 오류:', error);\n        }\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      };\n      loadAndSelectThread();\n      return;\n    }\n\n    // 해석 타입인 경우 특별 처리\n    if (threadType === 'interpretation') {\n      console.log('해석 타입 스레드 처리:', threadId);\n\n      // 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\n      const extractPersonaIdFromThreadId = id => {\n        // interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\n        const parts = id.split('_');\n        console.log('스레드 ID 파싱:', parts);\n        if (parts.length >= 2 && parts[0] === 'interpretation') {\n          const extractedPersonaId = parts[1];\n          console.log('추출된 페르소나 ID:', extractedPersonaId);\n          return extractedPersonaId; // 페르소나 ID 부분\n        }\n        return null;\n      };\n      const personaId = extractPersonaIdFromThreadId(threadId);\n      console.log('최종 페르소나 ID:', personaId);\n      console.log('페르소나 존재 여부:', personaId && personas[personaId]);\n      if (personaId && personas[personaId]) {\n        const persona = personas[personaId];\n        console.log('해석 스레드용 페르소나 찾음:', persona.name);\n\n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 페르소나 선택 및 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        console.log('해석 모드로 이동 완료');\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        return;\n      } else {\n        console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:', threadId);\n        // 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n      }\n    }\n\n    // 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\n    const loadAndNavigateToTrainingThread = async () => {\n      try {\n        console.log('훈습 스레드 정보 로딩 중...');\n\n        // 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\n        let foundThread = null;\n        let foundPersonaId = null;\n        for (const personaId of Object.keys(personas)) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const targetThread = threadsResponse.data.find(thread => thread.id === threadId);\n              if (targetThread) {\n                console.log('스레드를 찾음:', targetThread.id, 'in persona:', personaId);\n                foundThread = targetThread;\n                foundPersonaId = personaId;\n                break;\n              }\n            }\n          } catch (error) {\n            console.warn(`페르소나 ${personaId}의 스레드 로딩 실패:`, error);\n          }\n        }\n        if (!foundThread || !foundPersonaId) {\n          console.error('해당 스레드를 찾을 수 없음:', threadId);\n          alert('해당 스레드를 찾을 수 없습니다.');\n          return;\n        }\n        const persona = personas[foundPersonaId];\n        console.log('찾은 페르소나:', persona.name);\n\n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[foundPersonaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: foundPersonaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 페르소나 선택 및 해당 스레드로 이동\n        selectPersona(foundPersonaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n        console.log('훈습 스레드로 이동 완료:', `${threadType}-thread-${threadId}`);\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      } catch (error) {\n        console.error('훈습 스레드 로딩 오류:', error);\n        alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');\n      }\n    };\n    loadAndNavigateToTrainingThread();\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId, interpretation) => {\n    const persona = personas[personaId];\n\n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n\n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: (persona === null || persona === void 0 ? void 0 : persona.name) || '',\n      content: interpretation,\n      messages: [{\n        role: 'assistant',\n        content: interpretation,\n        timestamp: new Date().toISOString()\n      }]\n    });\n\n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 스레드로 자동 이동 이벤트 리스너\n  useEffect(() => {\n    const handleNavigateToInterpretationThread = event => {\n      const {\n        personaId,\n        threadId\n      } = event.detail;\n      console.log('=== 해석 스레드로 자동 이동 ===');\n      console.log('personaId:', personaId);\n      console.log('threadId:', threadId);\n\n      // 해석이 있는지 확인하고 설정\n      const existingInterpretation = interpretationStore[personaId];\n      const persona = personas[personaId];\n      if (persona) {\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 훈습 모드에서 해석 모드로 전환\n        setSelectedPersonaItem(null); // 훈습 모드 해제\n        setIsConversationSidebarCollapsed(false); // 대화 사이드바 표시\n\n        // 잠시 후 해석 스레드로 전환 (상태 업데이트 완료 대기)\n        setTimeout(() => {\n          setSelectedConversationItem(`interpretation-thread-${threadId}`);\n          setConversationRefreshTrigger(prev => prev + 1);\n          console.log('해석 스레드로 자동 이동 완료:', `interpretation-thread-${threadId}`);\n        }, 100);\n      }\n    };\n\n    // 이벤트 리스너 등록\n    window.addEventListener('navigateToInterpretationThread', handleNavigateToInterpretationThread);\n\n    // 클린업\n    return () => {\n      window.removeEventListener('navigateToInterpretationThread', handleNavigateToInterpretationThread);\n    };\n  }, []);\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async message => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\n    const isInterpretationThread = selectedConversationItem === null || selectedConversationItem === void 0 ? void 0 : selectedConversationItem.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지 객체 생성\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n\n        // 사용자 메시지를 먼저 UI에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage]\n        } : null);\n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n        if (response.data && response.data.success) {\n          // 백엔드에서 받은 완전한 스레드 데이터로 UI 업데이트\n          setCurrentInterpretation(prev => {\n            var _response$data, _response$data$thread;\n            return prev ? {\n              ...prev,\n              messages: ((_response$data = response.data) === null || _response$data === void 0 ? void 0 : (_response$data$thread = _response$data.thread) === null || _response$data$thread === void 0 ? void 0 : _response$data$thread.messages) || []\n            } : null;\n          });\n          setIsInterpretationLoading(false);\n\n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅\n        console.log('기본 해석 기반 채팅');\n\n        // 사용자 메시지를 먼저 UI에 반영\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage]\n        } : null);\n        const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, message);\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant',\n            content: response.data.response,\n            timestamp: response.data.timestamp\n          };\n\n          // AI 응답 추가\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, assistantMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n\n          // 기본 해석 채팅 완료 후 ConversationSidebar 새로고침\n          setConversationRefreshTrigger(prev => prev + 1);\n          return true;\n        } else {\n          // API 호출 실패 시 폴백\n          console.error('해석 기반 채팅 API 실패:', response.error);\n          const fallbackMessage = {\n            role: 'assistant',\n            content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n            timestamp: new Date().toISOString()\n          };\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, fallbackMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n\n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant',\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString()\n      };\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage]\n      } : null);\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = updatedInterpretation => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = updatedConversation => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = mode => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread, personaId) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n\n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || []\n        });\n\n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = useCallback(async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n\n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        setSelectedVerbalizationThread(prevSelected => {\n          if (prevSelected) {\n            var _response$data2;\n            const updatedSelectedThread = (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.find(thread => thread.id === prevSelected.id);\n            if (updatedSelectedThread) {\n              console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n              return updatedSelectedThread;\n            } else {\n              var _response$data3;\n              console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n              return ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3[0]) || null;\n            }\n          } else if (response.data && response.data.length > 0) {\n            // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n            console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n            return response.data[0];\n          }\n          return null;\n        });\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  }, []); // 의존성 배열에서 selectedVerbalizationThread 제거\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem, loadVerbalizationThreads]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread === null || selectedVerbalizationThread === void 0 ? void 0 : selectedVerbalizationThread.id;\n    await loadVerbalizationThreads();\n\n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find(thread => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n\n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async () => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n\n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n\n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data, ...prev]);\n\n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation || selectedPersonaItem === 'recent' || selectedPersonaItem === 'verbalization';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1030,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContainer, {\n      children: [/*#__PURE__*/_jsxDEV(PersonaSidebar, {\n        selectedItem: selectedPersonaItem,\n        onSelectItem: handleSelectPersonaItem,\n        isCollapsed: isPersonaSidebarCollapsed,\n        onToggle: shouldShowConversationSidebar ? undefined : togglePersonaSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1033,\n        columnNumber: 9\n      }, this), shouldShowConversationSidebar && /*#__PURE__*/_jsxDEV(ConversationSidebar, {\n        selectedItem: selectedConversationItem,\n        onSelectItem: handleSelectConversationItem,\n        isCollapsed: isConversationSidebarCollapsed,\n        onToggle: toggleConversationSidebar,\n        selectedPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName,\n        selectedPersonaId: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId,\n        refreshTrigger: conversationRefreshTrigger,\n        mode: selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona',\n        personas: selectedPersonaItem === 'recent' ? personas : undefined,\n        verbalizationThreads: selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined,\n        onSelectVerbalizationThread: selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined,\n        onRefreshTrigger: selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1042,\n        columnNumber: 11\n      }, this), selectedPersonaItem === 'vault' ? /*#__PURE__*/_jsxDEV(VaultView, {\n        personas: personas,\n        onNavigateToPersona: handleNavigateToPersona,\n        onNavigateToThread: handleNavigateToThread,\n        onNavigateToPersonaWithSentence: handleNavigateToPersonaWithSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1060,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatArea, {\n        selectedConversation: selectedConversation,\n        conversations: conversations,\n        personas: personas,\n        globalMessages: globalMessages,\n        isLoading: currentInterpretation ? isInterpretationLoading : isLoading,\n        error: error,\n        onSendInitialMessage: sendInitialMessage,\n        onContinueConversation: continueConversation,\n        onClearError: clearError,\n        selectedPersonaItem: selectedPersonaItem,\n        onSelectPersona: handlePersonaSelection,\n        onInterpretationComplete: handleInterpretationComplete,\n        selectedConversationItem: selectedConversationItem,\n        currentInterpretation: currentInterpretation,\n        onInterpretationMessage: handleInterpretationMessage,\n        onUpdateInterpretation: handleUpdateInterpretation,\n        onUpdateConversation: handleUpdateConversation,\n        onSwitchConversationMode: handleSwitchConversationMode,\n        onRefreshConversationSidebar: handleRefreshConversationSidebar,\n        viewingRecentThread: viewingRecentThread,\n        isRecentThreadLoading: isRecentThreadLoading,\n        onNavigateToThread: handleNavigateToThread,\n        recentInteractionsProps: {\n          personas,\n          onSelectPersona: handleRecentPersonaSelect,\n          onThreadSelect: handleRecentThreadSelect\n        },\n        verbalizationProps: {\n          selectedThread: selectedVerbalizationThread,\n          threads: verbalizationThreads,\n          onThreadUpdate: handleVerbalizationThreadUpdate,\n          onCreateNewThread: handleCreateNewVerbalizationThread\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1067,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1031,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"2JTEiPotOLs0O5HIKUHLN6L24Rk=\", false, function () {\n  return [useChat, useBrowserHistory];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useChat","useBrowserHistory","ConversationSidebar","PersonaSidebar","VaultView","ChatArea","GlobalStyle","AppContainer","chatApi","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","isInterpretationLoading","setIsInterpretationLoading","interpretationStore","setInterpretationStore","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","viewingRecentThread","setViewingRecentThread","isRecentThreadLoading","setIsRecentThreadLoading","personas","globalMessages","conversations","selectedConversation","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectPersona","clearError","navigateTo","parseInitialState","currentPersonaId","personaId","currentPersonaName","personaName","onNavigateBack","state","console","log","existingInterpretation","name","content","messages","role","timestamp","Date","toISOString","Object","keys","length","initialState","loadRecentThread","startsWith","parts","split","threadId","response","thread","getVerbalizationThreads","data","find","t","id","getPersonaThreads","_personas$personaId","persona_id","persona_name","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","handleNavigateToPersona","mode","persona","shouldNavigateToInterpretation","sessionStorage","getItem","removeItem","handleNavigateToPersonaWithSentence","selectedSentence","setItem","handleNavigateToThread","threadType","interactionMessage","isLegacyInterpretationId","test","loadAndSelectThread","targetThread","warn","prev","extractPersonaIdFromThreadId","extractedPersonaId","loadAndNavigateToTrainingThread","foundThread","foundPersonaId","threadsResponse","alert","handlePersonaSelection","handleInterpretationComplete","interpretation","handleNavigateToInterpretationThread","event","detail","setTimeout","window","addEventListener","removeEventListener","handleInterpretationMessage","message","isInterpretationThread","selectedThreadId","userMessage","chatWithThread","thread_id","user_message","success","_response$data","_response$data$thread","chatWithInterpretation","assistantMessage","fallbackMessage","errorMessage","handleUpdateInterpretation","updatedInterpretation","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","thread_type","interpretationContent","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","loadVerbalizationThreads","prevSelected","_response$data2","updatedSelectedThread","_response$data3","handleVerbalizationThreadUpdate","currentSelectedId","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","onNavigateToPersona","onNavigateToThread","onNavigateToPersonaWithSentence","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","onThreadSelect","verbalizationProps","selectedThread","threads","onThreadUpdate","onCreateNewThread","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport { useBrowserHistory } from '../shared/hooks/useBrowserHistory';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null>(null);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n  \n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  // 최근 상호작용 보기 관련 상태\n  const [viewingRecentThread, setViewingRecentThread] = useState<(TrainingThread & { persona_id: string; persona_name: string }) | null>(null);\n  const [isRecentThreadLoading, setIsRecentThreadLoading] = useState(false);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 브라우저 히스토리 관리\n  const { navigateTo, parseInitialState } = useBrowserHistory({\n    selectedPersonaItem,\n    selectedConversationItem,\n    currentPersonaId: currentInterpretation?.personaId,\n    currentPersonaName: currentInterpretation?.personaName,\n    onNavigateBack: (state) => {\n      console.log('=== 브라우저 뒤로가기 처리 ===');\n      console.log('복원할 상태:', state);\n      \n      // 상태 복원\n      setSelectedPersonaItem(state.selectedPersonaItem);\n      setSelectedConversationItem(state.selectedConversationItem);\n      \n      // 페르소나 선택 복원\n      if (state.personaId && personas[state.personaId]) {\n        selectPersona(state.personaId);\n        \n        // 해석 상태 복원이 필요한 경우\n        const existingInterpretation = interpretationStore[state.personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: state.personaId,\n            personaName: personas[state.personaId].name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n      }\n      \n      // 사이드바 상태 조정\n      if (state.selectedPersonaItem === 'vault' || state.selectedPersonaItem === 'admin' || state.selectedPersonaItem === 'training') {\n        setIsConversationSidebarCollapsed(true);\n      } else {\n        setIsConversationSidebarCollapsed(false);\n      }\n    }\n  });\n\n  // 페르소나 정보가 로드되면 자동으로 훈습 모드로 전환\n  useEffect(() => {\n    // 페르소나가 있고, 아직 특정 모드가 선택되지 않았으며, 뒤로가기로 복원된 상태가 아닌 경우에만 자동 전환\n    if (Object.keys(personas).length > 0 && !selectedPersonaItem) {\n      console.log('페르소나 정보 로드 완료, 자동으로 훈습 모드로 전환');\n      setSelectedPersonaItem('training');\n    }\n  }, [personas, selectedPersonaItem]);\n\n  // 초기 로드 시 URL에서 상태 복원\n  useEffect(() => {\n    const initialState = parseInitialState();\n    console.log('=== 초기 상태 복원 ===');\n    console.log('URL에서 파싱된 상태:', initialState);\n    \n    if (initialState.selectedPersonaItem) {\n      setSelectedPersonaItem(initialState.selectedPersonaItem);\n    }\n    \n    if (initialState.selectedConversationItem) {\n      setSelectedConversationItem(initialState.selectedConversationItem);\n    }\n    \n    if (initialState.personaId && personas[initialState.personaId]) {\n      selectPersona(initialState.personaId);\n    }\n  }, [personas, parseInitialState, selectPersona]);\n\n  // 최근 상호작용 스레드 로드\n  useEffect(() => {\n    const loadRecentThread = async () => {\n      if (!selectedConversationItem || !selectedConversationItem.startsWith('recent-thread::')) {\n        setViewingRecentThread(null);\n        return;\n      }\n\n      const parts = selectedConversationItem.split('::');\n      if (parts.length < 3) {\n        setViewingRecentThread(null);\n        return;\n      }\n      const threadId = parts[1];\n      const personaId = parts[2];\n\n      setIsRecentThreadLoading(true);\n      try {\n        let response;\n        let thread: TrainingThread | undefined;\n        \n        if (personaId === 'verbalization') {\n          response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            thread = response.data.find((t: TrainingThread) => t.id === threadId);\n          }\n        } else {\n          response = await chatApi.getPersonaThreads(personaId);\n          if (response.data) {\n            thread = response.data.find((t: TrainingThread) => t.id === threadId);\n          }\n        }\n\n        if (thread) {\n          const personaName = personaId === 'verbalization' ? '언어화' : (personas[personaId]?.name || '알 수 없음');\n          setViewingRecentThread({\n            ...thread,\n            persona_id: personaId,\n            persona_name: personaName,\n          });\n        } else {\n          setViewingRecentThread(null);\n        }\n      } catch (error) {\n        console.error('최근 상호작용 스레드 로드 실패:', error);\n        setViewingRecentThread(null);\n      } finally {\n        setIsRecentThreadLoading(false);\n      }\n    };\n\n    if (selectedPersonaItem === 'recent') {\n      loadRecentThread();\n    } else {\n      setViewingRecentThread(null);\n    }\n  }, [selectedConversationItem, selectedPersonaItem, personas]);\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualItemId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러\n  const handleNavigateToPersona = (personaId: string, mode: 'sentence') => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 해석 모드로 이동해야 하는지 확인\n    const shouldNavigateToInterpretation = sessionStorage.getItem('navigateToInterpretationMode');\n    if (shouldNavigateToInterpretation === 'true') {\n      sessionStorage.removeItem('navigateToInterpretationMode'); // 사용 후 제거\n      setSelectedConversationItem('interpretation');\n    } else if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId: string, mode: 'sentence', selectedSentence: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId: string, threadType: string, interactionMessage?: string) => {\n    console.log('=== 저장고에서 스레드로 이동 ===');\n    console.log('threadId:', threadId);\n    console.log('threadType:', threadType);\n    console.log('interactionMessage:', interactionMessage);\n    \n    // 상호작용 메시지가 있으면 sessionStorage에 저장\n    if (interactionMessage) {\n      sessionStorage.setItem('selectedSentenceForInput', interactionMessage);\n      console.log('상호작용 메시지를 sessionStorage에 저장:', interactionMessage);\n    }\n    \n    // 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n    // 신형은 타임스탬프가 포함되어 있으므로 숫자가 끝에 있는지 확인\n    const isLegacyInterpretationId = threadId.startsWith('interpretation_') && \n                                    !threadId.includes('-') && \n                                    !/\\d{10,}$/.test(threadId); // 10자리 이상 숫자로 끝나지 않는 경우만 구형\n    \n    console.log('isLegacyInterpretationId:', isLegacyInterpretationId);\n    console.log('타임스탬프 테스트:', /\\d{10,}$/.test(threadId));\n    \n    // 언어화 스레드인 경우\n    if (threadType === 'verbalization') {\n      console.log('언어화 스레드로 이동');\n      setSelectedPersonaItem('verbalization');\n      setIsConversationSidebarCollapsed(false);\n      \n      // 해당 스레드를 찾아서 선택\n      const loadAndSelectThread = async () => {\n        try {\n          const response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            const targetThread = response.data.find((thread: TrainingThread) => thread.id === threadId);\n            if (targetThread) {\n              console.log('타겟 언어화 스레드 찾음:', targetThread.id);\n              setSelectedVerbalizationThread(targetThread);\n              setVerbalizationThreads(response.data);\n            } else {\n              console.warn('타겟 언어화 스레드를 찾을 수 없음:', threadId);\n              // 폴백: 첫 번째 스레드 선택\n              if (response.data.length > 0) {\n                setSelectedVerbalizationThread(response.data[0]);\n                setVerbalizationThreads(response.data);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('언어화 스레드 로딩 오류:', error);\n        }\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      };\n      \n      loadAndSelectThread();\n      return;\n    }\n    \n\n    \n    // 해석 타입인 경우 특별 처리\n    if (threadType === 'interpretation') {\n      console.log('해석 타입 스레드 처리:', threadId);\n      \n      // 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\n      const extractPersonaIdFromThreadId = (id: string): string | null => {\n        // interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\n        const parts = id.split('_');\n        console.log('스레드 ID 파싱:', parts);\n        if (parts.length >= 2 && parts[0] === 'interpretation') {\n          const extractedPersonaId = parts[1];\n          console.log('추출된 페르소나 ID:', extractedPersonaId);\n          return extractedPersonaId;  // 페르소나 ID 부분\n        }\n        return null;\n      };\n      \n      const personaId = extractPersonaIdFromThreadId(threadId);\n      console.log('최종 페르소나 ID:', personaId);\n      console.log('페르소나 존재 여부:', personaId && personas[personaId]);\n      \n      if (personaId && personas[personaId]) {\n        const persona = personas[personaId];\n        console.log('해석 스레드용 페르소나 찾음:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        \n        console.log('해석 모드로 이동 완료');\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        return;\n      } else {\n        console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:', threadId);\n        // 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n      }\n    }\n    \n    // 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\n    const loadAndNavigateToTrainingThread = async () => {\n      try {\n        console.log('훈습 스레드 정보 로딩 중...');\n        \n        // 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\n        let foundThread = null;\n        let foundPersonaId = null;\n        \n        for (const personaId of Object.keys(personas)) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const targetThread = threadsResponse.data.find(thread => thread.id === threadId);\n              if (targetThread) {\n                console.log('스레드를 찾음:', targetThread.id, 'in persona:', personaId);\n                foundThread = targetThread;\n                foundPersonaId = personaId;\n                break;\n              }\n            }\n          } catch (error) {\n            console.warn(`페르소나 ${personaId}의 스레드 로딩 실패:`, error);\n          }\n        }\n        \n        if (!foundThread || !foundPersonaId) {\n          console.error('해당 스레드를 찾을 수 없음:', threadId);\n          alert('해당 스레드를 찾을 수 없습니다.');\n          return;\n        }\n        \n        const persona = personas[foundPersonaId];\n        console.log('찾은 페르소나:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[foundPersonaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: foundPersonaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해당 스레드로 이동\n        selectPersona(foundPersonaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n        \n        console.log('훈습 스레드로 이동 완료:', `${threadType}-thread-${threadId}`);\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n      } catch (error) {\n        console.error('훈습 스레드 로딩 오류:', error);\n        alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');\n      }\n    };\n    \n    loadAndNavigateToTrainingThread();\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n    \n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: persona?.name || '',\n      content: interpretation,\n      messages: [\n        {\n          role: 'assistant',\n          content: interpretation,\n          timestamp: new Date().toISOString(),\n        }\n      ],\n    });\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 스레드로 자동 이동 이벤트 리스너\n  useEffect(() => {\n    const handleNavigateToInterpretationThread = (event: CustomEvent) => {\n      const { personaId, threadId } = event.detail;\n      console.log('=== 해석 스레드로 자동 이동 ===');\n      console.log('personaId:', personaId);\n      console.log('threadId:', threadId);\n      \n      // 해석이 있는지 확인하고 설정\n      const existingInterpretation = interpretationStore[personaId];\n      const persona = personas[personaId];\n      \n      if (persona) {\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n        \n        // 훈습 모드에서 해석 모드로 전환\n        setSelectedPersonaItem(null); // 훈습 모드 해제\n        setIsConversationSidebarCollapsed(false); // 대화 사이드바 표시\n        \n        // 잠시 후 해석 스레드로 전환 (상태 업데이트 완료 대기)\n        setTimeout(() => {\n          setSelectedConversationItem(`interpretation-thread-${threadId}`);\n          setConversationRefreshTrigger(prev => prev + 1);\n          console.log('해석 스레드로 자동 이동 완료:', `interpretation-thread-${threadId}`);\n        }, 100);\n      }\n    };\n\n    // 이벤트 리스너 등록\n    window.addEventListener('navigateToInterpretationThread', handleNavigateToInterpretationThread as EventListener);\n\n    // 클린업\n    return () => {\n      window.removeEventListener('navigateToInterpretationThread', handleNavigateToInterpretationThread as EventListener);\n    };\n  }, []);\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지 객체 생성\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString(),\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        \n        // 사용자 메시지를 먼저 UI에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n        \n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n\n        if (response.data && response.data.success) {\n          // 백엔드에서 받은 완전한 스레드 데이터로 UI 업데이트\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: response.data?.thread?.messages || [],\n          } : null);\n          \n          setIsInterpretationLoading(false);\n          \n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅\n        console.log('기본 해석 기반 채팅');\n        \n        // 사용자 메시지를 먼저 UI에 반영\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n\n        const response = await chatApi.chatWithInterpretation(\n          currentInterpretation.personaId,\n          message\n        );\n\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant' as const,\n            content: response.data.response,\n            timestamp: response.data.timestamp,\n          };\n          \n          // AI 응답 추가\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, assistantMessage],\n          } : null);\n\n          setIsInterpretationLoading(false);\n          \n          // 기본 해석 채팅 완료 후 ConversationSidebar 새로고침\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          return true;\n        } else {\n          // API 호출 실패 시 폴백\n          console.error('해석 기반 채팅 API 실패:', response.error);\n          const fallbackMessage = {\n            role: 'assistant' as const,\n            content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, fallbackMessage],\n          } : null);\n\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      \n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant' as const,\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString(),\n      };\n\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n      } : null);\n\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    \n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      \n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || [],\n        });\n        \n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        \n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n        \n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = useCallback(async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        setSelectedVerbalizationThread(prevSelected => {\n          if (prevSelected) {\n            const updatedSelectedThread = response.data?.find(\n              thread => thread.id === prevSelected.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n              return updatedSelectedThread;\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n              return response.data?.[0] || null;\n          }\n          } else if (response.data && response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n            return response.data[0];\n        }\n          return null;\n        });\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  }, []); // 의존성 배열에서 selectedVerbalizationThread 제거\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem, loadVerbalizationThreads]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 영역 - 저장고 모드일 때는 저장고 뷰, 그 외에는 채팅 영역 */}\n        {selectedPersonaItem === 'vault' ? (\n          <VaultView\n            personas={personas}\n            onNavigateToPersona={handleNavigateToPersona}\n            onNavigateToThread={handleNavigateToThread}\n            onNavigateToPersonaWithSentence={handleNavigateToPersonaWithSentence}\n          />\n        ) : (\n        <ChatArea\n          selectedConversation={selectedConversation}\n          conversations={conversations}\n          personas={personas}\n          globalMessages={globalMessages}\n          isLoading={currentInterpretation ? isInterpretationLoading : isLoading}\n          error={error}\n          onSendInitialMessage={sendInitialMessage}\n          onContinueConversation={continueConversation}\n          onClearError={clearError}\n          selectedPersonaItem={selectedPersonaItem}\n          onSelectPersona={handlePersonaSelection}\n          onInterpretationComplete={handleInterpretationComplete}\n          selectedConversationItem={selectedConversationItem}\n          currentInterpretation={currentInterpretation}\n          onInterpretationMessage={handleInterpretationMessage}\n          onUpdateInterpretation={handleUpdateInterpretation}\n          onUpdateConversation={handleUpdateConversation}\n          onSwitchConversationMode={handleSwitchConversationMode}\n          onRefreshConversationSidebar={handleRefreshConversationSidebar}\n          viewingRecentThread={viewingRecentThread}\n          isRecentThreadLoading={isRecentThreadLoading}\n          onNavigateToThread={handleNavigateToThread}\n            recentInteractionsProps={{\n              personas,\n              onSelectPersona: handleRecentPersonaSelect,\n              onThreadSelect: handleRecentThreadSelect,\n            }}\n            verbalizationProps={{\n              selectedThread: selectedVerbalizationThread,\n              threads: verbalizationThreads,\n              onThreadUpdate: handleVerbalizationThreadUpdate,\n              onCreateNewThread: handleCreateNewVerbalizationThread,\n            }}\n        />\n        )}\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}