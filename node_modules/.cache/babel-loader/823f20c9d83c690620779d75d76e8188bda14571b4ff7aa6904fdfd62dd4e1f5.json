{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 요청 인터셉터에서 토큰 추가\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\nexport const qaApi = {\n  /**\n   * QA 질문 목록을 가져옵니다.\n   */\n  async getQuestions() {\n    try {\n      const response = await api.get('/api/qa/questions');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 질문 로드 실패:\", error);\n      throw error;\n    }\n  },\n  /**\n   * 사용자의 QA 답변 목록을 제출합니다.\n   */\n  async submitAnswers(answers) {\n    try {\n      // 백엔드가 기대하는 { \"answers\": [...] } 형태로 데이터를 감싸서 전송합니다.\n      console.log(\"QA 답변 제출 데이터:\", {\n        answers\n      });\n      const response = await api.post('/api/qa/answers', {\n        answers\n      });\n      console.log(\"QA 답변 제출 응답:\", response.data);\n      return response.data;\n    } catch (error) {\n      var _error$response, _error$response2;\n      console.error(\"QA 답변 제출 실패:\", error);\n      console.error(\"Error response:\", error.response);\n      console.error(\"Error status:\", (_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status);\n      console.error(\"Error data:\", (_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data);\n      throw error;\n    }\n  },\n  /**\n   * 사용자의 QA 완료 상태를 확인합니다.\n   */\n  async getStatus() {\n    try {\n      const response = await api.get('/api/qa/status');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 상태 확인 실패:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","interceptors","request","use","config","token","localStorage","getItem","Authorization","qaApi","getQuestions","response","get","data","error","console","submitAnswers","answers","log","post","_error$response","_error$response2","status","getStatus"],"sources":["C:/Users/sungh/Desktop/chat_work_ver4/frontend/src/features/qa/api/qaApi.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\n// 요청 인터셉터에서 토큰 추가\napi.interceptors.request.use((config) => {\n  const token = localStorage.getItem('access_token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\nexport interface QAQuestion {\n  question_id: number;\n  question_text: string;\n}\n\nexport interface QASubmission {\n  question_id: number;\n  answer: string;\n}\n\nexport const qaApi = {\n  /**\n   * QA 질문 목록을 가져옵니다.\n   */\n  async getQuestions(): Promise<QAQuestion[]> {\n    try {\n      const response = await api.get<QAQuestion[]>('/api/qa/questions');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 질문 로드 실패:\", error);\n      throw error;\n    }\n  },\n\n  /**\n   * 사용자의 QA 답변 목록을 제출합니다.\n   */\n  async submitAnswers(answers: QASubmission[]): Promise<{ success: boolean; message: string }> {\n    try {\n      // 백엔드가 기대하는 { \"answers\": [...] } 형태로 데이터를 감싸서 전송합니다.\n      console.log(\"QA 답변 제출 데이터:\", { answers });\n      const response = await api.post('/api/qa/answers', { answers });\n      console.log(\"QA 답변 제출 응답:\", response.data);\n      return response.data;\n    } catch (error: any) {\n      console.error(\"QA 답변 제출 실패:\", error);\n      console.error(\"Error response:\", error.response);\n      console.error(\"Error status:\", error.response?.status);\n      console.error(\"Error data:\", error.response?.data);\n      throw error;\n    }\n  },\n\n  /**\n   * 사용자의 QA 완료 상태를 확인합니다.\n   */\n  async getStatus(): Promise<{ is_completed: boolean }> {\n    try {\n      const response = await api.get('/api/qa/status');\n  return response.data;\n    } catch (error) {\n      console.error(\"QA 상태 확인 실패:\", error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;;AAEF;AACAH,GAAG,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,cAAc,CAAC;EAClD,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACJ,OAAO,CAACQ,aAAa,GAAG,UAAUH,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;AAYF,OAAO,MAAMK,KAAK,GAAG;EACnB;AACF;AACA;EACE,MAAMC,YAAYA,CAAA,EAA0B;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAe,mBAAmB,CAAC;MACjE,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACE,MAAME,aAAaA,CAACC,OAAuB,EAAkD;IAC3F,IAAI;MACF;MACAF,OAAO,CAACG,GAAG,CAAC,eAAe,EAAE;QAAED;MAAQ,CAAC,CAAC;MACzC,MAAMN,QAAQ,GAAG,MAAMd,GAAG,CAACsB,IAAI,CAAC,iBAAiB,EAAE;QAAEF;MAAQ,CAAC,CAAC;MAC/DF,OAAO,CAACG,GAAG,CAAC,cAAc,EAAEP,QAAQ,CAACE,IAAI,CAAC;MAC1C,OAAOF,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAU,EAAE;MAAA,IAAAM,eAAA,EAAAC,gBAAA;MACnBN,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCC,OAAO,CAACD,KAAK,CAAC,iBAAiB,EAAEA,KAAK,CAACH,QAAQ,CAAC;MAChDI,OAAO,CAACD,KAAK,CAAC,eAAe,GAAAM,eAAA,GAAEN,KAAK,CAACH,QAAQ,cAAAS,eAAA,uBAAdA,eAAA,CAAgBE,MAAM,CAAC;MACtDP,OAAO,CAACD,KAAK,CAAC,aAAa,GAAAO,gBAAA,GAAEP,KAAK,CAACH,QAAQ,cAAAU,gBAAA,uBAAdA,gBAAA,CAAgBR,IAAI,CAAC;MAClD,MAAMC,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMS,SAASA,CAAA,EAAuC;IACpD,IAAI;MACF,MAAMZ,QAAQ,GAAG,MAAMd,GAAG,CAACe,GAAG,CAAC,gBAAgB,CAAC;MACpD,OAAOD,QAAQ,CAACE,IAAI;IAClB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}