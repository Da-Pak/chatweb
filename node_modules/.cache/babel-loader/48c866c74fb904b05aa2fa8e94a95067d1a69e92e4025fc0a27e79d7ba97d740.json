{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\ProceedView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst ProceedView = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 나아가기 타입의 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 나아가기 스레드를 자동 선택\n      const firstProceedThread = threads.find(t => t.thread_type === 'proceed');\n      if (firstProceedThread && !selectedThread) {\n        setSelectedThread(firstProceedThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n  const handleSendMessage = async message => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n\n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setSelectedThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id,\n          persona_name: response.data.response.persona_name\n        };\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        setSelectedThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === currentThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setIsLoading(false);\n        return true;\n      } else {\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // 메시지 수정 기능 구현 예정\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    setMemos(prev => ({\n      ...prev,\n      [sentenceId]: memo\n    }));\n  };\n  const handleDeleteMemo = async sentenceId => {\n    setMemos(prev => {\n      const newMemos = {\n        ...prev\n      };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n  const handlePersonAction = async () => {\n    // 현재 채팅 내용을 바탕으로 새로운 나아가기 생성\n    if (!personaId) return;\n    showCopyToast('나아가기를 생성합니다...');\n    try {\n      // 현재 채팅 메시지들을 하나의 컨텍스트로 결합\n      let contextContent = proceedContent;\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // 최근 대화 내용을 포함하여 더 풍부한 컨텍스트 생성\n        const recentMessages = selectedThread.messages.slice(-4) // 최근 4개 메시지\n        .map(msg => `${msg.role === 'user' ? '사용자' : 'AI'}: ${msg.content}`).join('\\n\\n');\n        contextContent = `${proceedContent}\\n\\n=== 최근 대화 내용 ===\\n${recentMessages}`;\n      }\n\n      // chatApi를 통해 직접 나아가기 생성\n      const response = await chatApi.generateProceed({\n        persona_id: personaId,\n        interpretation_content: contextContent\n      });\n      if (response.data) {\n        showCopyToast('나아가기가 성공적으로 생성되었습니다');\n        // 스레드 새로고침\n        handleRefreshThreads();\n      } else {\n        showCopyToast('나아가기 생성에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 생성 중 오류:', error);\n      showCopyToast('나아가기 생성 중 오류가 발생했습니다');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 현재 채팅 내용을 바탕으로 문장 생성\n    if (!personaId) return;\n    showCopyToast('문장을 생성합니다...');\n    try {\n      // 현재 채팅 메시지들을 하나의 컨텍스트로 결합\n      let contextContent = proceedContent;\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // 최근 대화 내용을 포함하여 더 풍부한 컨텍스트 생성\n        const recentMessages = selectedThread.messages.slice(-4) // 최근 4개 메시지\n        .map(msg => `${msg.role === 'user' ? '사용자' : 'AI'}: ${msg.content}`).join('\\n\\n');\n        contextContent = `${proceedContent}\\n\\n=== 최근 대화 내용 ===\\n${recentMessages}`;\n      }\n\n      // chatApi를 통해 직접 문장 생성\n      const response = await chatApi.generateSentence({\n        persona_id: personaId,\n        interpretation_content: contextContent\n      });\n      if (response.data) {\n        showCopyToast('문장이 성공적으로 생성되었습니다');\n        // 문장 모드로 전환\n        if (onSwitchToMode) {\n          onSwitchToMode('sentence');\n        }\n      } else {\n        showCopyToast('문장 생성에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 생성 중 오류:', error);\n      showCopyToast('문장 생성 중 오류가 발생했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n\n        // 새로 생성된 나아가기 스레드 선택\n        const newProceedThread = updatedThreads.filter(t => t.thread_type === 'proceed').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n          setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    showCopyToast(`${action} 기능이 실행되었습니다`);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 422,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83C\\uDFAF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 431,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 432,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 429,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `proceed_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 439,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#ff9800',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `proceed_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 455,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#ff9800\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 490,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 나아가기에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || proceedContent,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 499,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 498,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 426,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: proceedContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 517,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 421,\n    columnNumber: 5\n  }, this);\n};\n_s(ProceedView, \"EbCB/tyxI5Zm8f3niCoWh3LJrFc=\");\n_c7 = ProceedView;\nexport default ProceedView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"ProceedView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","ProceedView","personaId","personaName","proceedContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","proceedThreads","filter","thread","thread_type","firstProceedThread","find","t","current","scrollTop","scrollHeight","messages","handleSendMessage","message","currentThread","proceedThread","defaultThread","id","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","response","chatWithThread","thread_id","user_message","data","assistantMessage","finalUpdatedThread","thread_updated_at","map","error","console","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","handleDeleteMemo","newMemos","handleSunAction","handlePersonAction","contextContent","length","recentMessages","slice","msg","join","generateProceed","interpretation_content","handleRefreshThreads","handleDocumentAction","generateSentence","threadsResponse","getPersonaThreads","newProceedThread","sort","a","b","getTime","handleMenuAction","action","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onRefreshThreads","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/ProceedView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface ProceedViewProps {\n  personaId: string;\n  personaName: string;\n  proceedContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'sentence') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst ProceedView: React.FC<ProceedViewProps> = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 나아가기 타입의 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 나아가기 스레드를 자동 선택\n      const firstProceedThread = threads.find(t => t.thread_type === 'proceed');\n      if (firstProceedThread && !selectedThread) {\n        setSelectedThread(firstProceedThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id,\n          persona_name: response.data.response.persona_name\n        };\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 메시지 수정 기능 구현 예정\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    setMemos(prev => ({ ...prev, [sentenceId]: memo }));\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    setMemos(prev => {\n      const newMemos = { ...prev };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n\n  const handlePersonAction = async () => {\n    // 현재 채팅 내용을 바탕으로 새로운 나아가기 생성\n    if (!personaId) return;\n    \n    showCopyToast('나아가기를 생성합니다...');\n    \n    try {\n      // 현재 채팅 메시지들을 하나의 컨텍스트로 결합\n      let contextContent = proceedContent;\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // 최근 대화 내용을 포함하여 더 풍부한 컨텍스트 생성\n        const recentMessages = selectedThread.messages.slice(-4) // 최근 4개 메시지\n          .map(msg => `${msg.role === 'user' ? '사용자' : 'AI'}: ${msg.content}`)\n          .join('\\n\\n');\n        \n        contextContent = `${proceedContent}\\n\\n=== 최근 대화 내용 ===\\n${recentMessages}`;\n      }\n      \n      // chatApi를 통해 직접 나아가기 생성\n      const response = await chatApi.generateProceed({\n        persona_id: personaId,\n        interpretation_content: contextContent\n      });\n      \n      if (response.data) {\n        showCopyToast('나아가기가 성공적으로 생성되었습니다');\n        // 스레드 새로고침\n        handleRefreshThreads();\n      } else {\n        showCopyToast('나아가기 생성에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 생성 중 오류:', error);\n      showCopyToast('나아가기 생성 중 오류가 발생했습니다');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 현재 채팅 내용을 바탕으로 문장 생성\n    if (!personaId) return;\n    \n    showCopyToast('문장을 생성합니다...');\n    \n    try {\n      // 현재 채팅 메시지들을 하나의 컨텍스트로 결합\n      let contextContent = proceedContent;\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // 최근 대화 내용을 포함하여 더 풍부한 컨텍스트 생성\n        const recentMessages = selectedThread.messages.slice(-4) // 최근 4개 메시지\n          .map(msg => `${msg.role === 'user' ? '사용자' : 'AI'}: ${msg.content}`)\n          .join('\\n\\n');\n        \n        contextContent = `${proceedContent}\\n\\n=== 최근 대화 내용 ===\\n${recentMessages}`;\n      }\n      \n      // chatApi를 통해 직접 문장 생성\n      const response = await chatApi.generateSentence({\n        persona_id: personaId,\n        interpretation_content: contextContent\n      });\n      \n      if (response.data) {\n        showCopyToast('문장이 성공적으로 생성되었습니다');\n        // 문장 모드로 전환\n        if (onSwitchToMode) {\n          onSwitchToMode('sentence');\n        }\n      } else {\n        showCopyToast('문장 생성에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 생성 중 오류:', error);\n      showCopyToast('문장 생성 중 오류가 발생했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        // 새로 생성된 나아가기 스레드 선택\n        const newProceedThread = updatedThreads\n          .filter(t => t.thread_type === 'proceed')\n          .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        \n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n          setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\n    showCopyToast(`${action} 기능이 실행되었습니다`);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>🎯</div>\n              <div>나아가기에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#ff9800',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#ff9800\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 나아가기에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || proceedContent}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={proceedContent}\n      />\n    </Container>\n  );\n};\n\nexport default ProceedView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}