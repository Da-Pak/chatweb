{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\ProceedView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst ProceedView = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 나아가기 타입의 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 나아가기 스레드를 자동 선택\n      const firstProceedThread = threads.find(t => t.thread_type === 'proceed');\n      if (firstProceedThread && !selectedThread) {\n        setSelectedThread(firstProceedThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트)\n  useEffect(() => {\n    const loadThreadSentenceData = async () => {\n      if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) return;\n      try {\n        const data = await sentenceApi.getThreadSentenceData(selectedThread.id);\n        setMemos(data.memos);\n        setHighlightedSentences(new Set(data.highlights));\n      } catch (error) {\n        console.error('스레드 문장 데이터 로딩 실패:', error);\n      }\n    };\n    loadThreadSentenceData();\n  }, [selectedThread]);\n  const handleSendMessage = async message => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n\n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setSelectedThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      console.log('=== ProceedView API 호출 시작 ===');\n      console.log('요청 데이터:', {\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      console.log('=== API 응답 받음 ===');\n      console.log('전체 응답:', response);\n      console.log('response.data:', response.data);\n      console.log('response.error:', response.error);\n      if (response.data) {\n        console.log('응답 데이터 구조 분석:');\n        console.log('- thread_id:', response.data.thread_id);\n        console.log('- user_message:', response.data.user_message);\n        console.log('- response:', response.data.response);\n        console.log('- thread_updated_at:', response.data.thread_updated_at);\n        if (response.data.response) {\n          console.log('응답 메시지 구조 분석:');\n          console.log('- role:', response.data.response.role);\n          console.log('- content:', response.data.response.content);\n          console.log('- timestamp:', response.data.response.timestamp);\n          console.log('- persona_id:', response.data.response.persona_id);\n          console.log('- persona_name:', response.data.response.persona_name);\n        }\n      }\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n        console.log('생성된 assistant 메시지:', assistantMessage);\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        console.log('최종 업데이트된 스레드:', finalUpdatedThread);\n        console.log('스레드 메시지 개수:', finalUpdatedThread.messages.length);\n        setSelectedThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === currentThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        console.log('=== UI 업데이트 완료 ===');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('나아가기 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    console.log('=== handleEditMessage 호출 ===');\n    console.log('messageIndex:', messageIndex);\n    console.log('newContent:', newContent);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages);\n    if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n      console.log('스레드 ID가 없습니다');\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n    console.log('스레드 ID:', selectedThread.id);\n    console.log('요청할 API 정보:', {\n      threadId: selectedThread.id,\n      messageIndex,\n      newContent: newContent.substring(0, 100) + '...'\n    });\n    try {\n      var _response$data;\n      setIsLoading(true);\n\n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      console.log('API 응답:', response);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && response.data.updated_thread) {\n        console.log('수정 성공, 스레드 업데이트 중...');\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n\n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === selectedThread.id ? response.data.updated_thread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = proceedContent; // 기본값: 나아가기 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = proceedContent; // 기본값: 나아가기 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n\n        // 새로 생성된 나아가기 스레드 선택\n        const newProceedThread = updatedThreads.filter(t => t.thread_type === 'proceed').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n          setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'proceed_chat',\n            // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['proceed']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n\n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [bottomSentenceId]: ''\n          }));\n\n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n\n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n\n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n\n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n\n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 725,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83C\\uDFAF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 733,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 734,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 735,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `proceed_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 742,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#ff9800',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `proceed_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#ff9800\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 793,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 730,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 나아가기에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || proceedContent,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 802,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 801,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 729,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: proceedContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 820,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 724,\n    columnNumber: 5\n  }, this);\n};\n_s(ProceedView, \"26B1vIvP83+DxaC4+Z70c6fm9J4=\");\n_c7 = ProceedView;\nexport default ProceedView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"ProceedView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","ProceedView","personaId","personaName","proceedContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","proceedThreads","filter","thread","thread_type","firstProceedThread","find","t","current","scrollTop","scrollHeight","messages","loadThreadSentenceData","id","data","getThreadSentenceData","highlights","error","console","handleSendMessage","message","currentThread","proceedThread","defaultThread","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","log","thread_id","user_message","response","chatWithThread","thread_updated_at","assistantMessage","finalUpdatedThread","length","map","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","threadId","substring","_response$data","editThreadMessage","success","updated_thread","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleSunAction","handlePersonAction","proceedPrompt","insertText","contentToSave","lastAssistantMessage","slice","reverse","msg","saveCurrentAsProceed","handleRefreshThreads","handleDocumentAction","sentencePrompt","saveCurrentAsSentence","threadsResponse","getPersonaThreads","newProceedThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","Array","from","selectedTexts","sentenceIndex","split","m","sentences","s","trim","parseInt","formattedText","join","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","sortedIds","timestampA","sentenceIndexA","timestampB","sentenceIndexB","bottomSentenceId","createHighlight","currentlyHighlighted","notHighlighted","deleteHighlight","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onRefreshThreads","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/ProceedView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface ProceedViewProps {\n  personaId: string;\n  personaName: string;\n  proceedContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'sentence') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst ProceedView: React.FC<ProceedViewProps> = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 나아가기 타입의 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 나아가기 스레드를 자동 선택\n      const firstProceedThread = threads.find(t => t.thread_type === 'proceed');\n      if (firstProceedThread && !selectedThread) {\n        setSelectedThread(firstProceedThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트)\n  useEffect(() => {\n    const loadThreadSentenceData = async () => {\n      if (!selectedThread?.id) return;\n      \n      try {\n        const data = await sentenceApi.getThreadSentenceData(selectedThread.id);\n        \n        setMemos(data.memos);\n        setHighlightedSentences(new Set(data.highlights));\n      } catch (error) {\n        console.error('스레드 문장 데이터 로딩 실패:', error);\n      }\n    };\n\n    loadThreadSentenceData();\n  }, [selectedThread]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      console.log('=== ProceedView API 호출 시작 ===');\n      console.log('요청 데이터:', { thread_id: currentThread.id, user_message: message });\n      \n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      console.log('=== API 응답 받음 ===');\n      console.log('전체 응답:', response);\n      console.log('response.data:', response.data);\n      console.log('response.error:', response.error);\n\n      if (response.data) {\n        console.log('응답 데이터 구조 분석:');\n        console.log('- thread_id:', response.data.thread_id);\n        console.log('- user_message:', response.data.user_message);\n        console.log('- response:', response.data.response);\n        console.log('- thread_updated_at:', response.data.thread_updated_at);\n        \n        if (response.data.response) {\n          console.log('응답 메시지 구조 분석:');\n          console.log('- role:', response.data.response.role);\n          console.log('- content:', response.data.response.content);\n          console.log('- timestamp:', response.data.response.timestamp);\n          console.log('- persona_id:', response.data.response.persona_id);\n          console.log('- persona_name:', response.data.response.persona_name);\n        }\n      }\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        console.log('생성된 assistant 메시지:', assistantMessage);\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        console.log('최종 업데이트된 스레드:', finalUpdatedThread);\n        console.log('스레드 메시지 개수:', finalUpdatedThread.messages.length);\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        console.log('=== UI 업데이트 완료 ===');\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('나아가기 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    console.log('=== handleEditMessage 호출 ===');\n    console.log('messageIndex:', messageIndex);\n    console.log('newContent:', newContent);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread?.messages);\n    \n    if (!selectedThread?.id) {\n      console.log('스레드 ID가 없습니다');\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n\n    console.log('스레드 ID:', selectedThread.id);\n    console.log('요청할 API 정보:', {\n      threadId: selectedThread.id,\n      messageIndex,\n      newContent: newContent.substring(0, 100) + '...'\n    });\n\n    try {\n      setIsLoading(true);\n      \n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      \n      console.log('API 응답:', response);\n      \n      if (response.data?.success && response.data.updated_thread) {\n        console.log('수정 성공, 스레드 업데이트 중...');\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n        \n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id ? response.data!.updated_thread! : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n    setMemos(prev => {\n      const newMemos = { ...prev };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    \n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    \n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = proceedContent; // 기본값: 나아가기 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n          .reverse()\n          .find(msg => msg.role === 'assistant');\n        \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    \n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    \n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = proceedContent; // 기본값: 나아가기 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 나아가기 스레드 선택\n              const newProceedThread = updatedThreads\n                .filter(t => t.thread_type === 'proceed')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n                setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'proceed_chat', // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['proceed']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          \n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>🎯</div>\n              <div>나아가기에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#ff9800',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#ff9800\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 나아가기에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || proceedContent}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={proceedContent}\n      />\n    </Container>\n  );\n};\n\nexport default ProceedView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}