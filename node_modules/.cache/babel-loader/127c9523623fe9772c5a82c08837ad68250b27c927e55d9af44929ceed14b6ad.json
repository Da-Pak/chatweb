{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\core\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport TrainingCategoryView from '../training/components/TrainingCategoryView';\nimport InterpretationView from '../training/components/InterpretationView';\nimport RecentInteractionsView from '../shared/components/RecentInteractionsView';\nimport VerbalizationView from '../verbalization/components/VerbalizationView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState(null);\n\n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n\n  // 해석 관련 상태 - 실제 스레드 기반으로 변경\n  const [currentInterpretation, setCurrentInterpretation] = useState(null);\n\n  // 해석 스레드들 상태\n  const [interpretationThreads, setInterpretationThreads] = useState([]);\n\n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState(null);\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = itemId => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n\n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = itemId => {\n    setSelectedConversationItem(itemId);\n\n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId !== null && itemId !== void 0 && itemId.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = async personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n    try {\n      // 해석 스레드들을 가져와서 확인\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        // 1) 해석 스레드가 있으면 바로 해석 모드로\n        const latestThread = threadsResponse.data.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())[0];\n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          selectedThread: latestThread\n        });\n        setInterpretationThreads(threadsResponse.data);\n\n        // 페르소나 선택 및 일반 채팅 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 훈습 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n      } else {\n        // 2) 해석 스레드가 없으면 생성 과정 진행\n        // 팝업은 TrainingCategoryView에서 처리\n      }\n    } catch (error) {\n      console.error('해석 스레드 조회 실패:', error);\n      // 해석이 없으면 생성 과정 진행\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId, interpretation) => {\n    const persona = personas[personaId];\n    try {\n      // 해석 스레드들을 다시 가져와서 최신 스레드 선택\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        const latestThread = threadsResponse.data.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())[0];\n        setCurrentInterpretation({\n          personaId,\n          personaName: (persona === null || persona === void 0 ? void 0 : persona.name) || '',\n          selectedThread: latestThread\n        });\n        setInterpretationThreads(threadsResponse.data);\n      }\n    } catch (error) {\n      console.error('해석 스레드 로드 실패:', error);\n    }\n\n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async message => {\n    if (!currentInterpretation || !currentInterpretation.selectedThread) return false;\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n    try {\n      // 스레드와 채팅 API 사용\n      const response = await chatApi.chatWithThread({\n        persona_id: currentInterpretation.personaId,\n        user_message: message,\n        thread_id: currentInterpretation.selectedThread.id,\n        thread_type: 'interpretation'\n      });\n      if (response.data && response.data.updated_thread) {\n        // 선택된 스레드 업데이트\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: response.data.updated_thread\n        } : null);\n\n        // 스레드 목록도 업데이트\n        setInterpretationThreads(prev => prev.map(thread => thread.id === response.data.updated_thread.id ? response.data.updated_thread : thread));\n        setIsInterpretationLoading(false);\n        return true;\n      } else {\n        console.error('해석 스레드 채팅 API 실패:', response.error);\n        setIsInterpretationLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 스레드 업데이트 핸들러\n  const handleInterpretationThreadUpdate = async threads => {\n    setInterpretationThreads(threads);\n\n    // 현재 선택된 스레드가 업데이트된 목록에 있는지 확인\n    if (currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.selectedThread) {\n      const updatedSelectedThread = threads.find(thread => thread.id === currentInterpretation.selectedThread.id);\n      if (updatedSelectedThread) {\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: updatedSelectedThread\n        } : null);\n      } else if (threads.length > 0) {\n        // 현재 선택된 스레드가 삭제되었으면 첫 번째 스레드 선택\n        const latestThread = threads.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())[0];\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: latestThread\n        } : null);\n      } else {\n        // 스레드가 모두 삭제되었으면 해석 모드 종료\n        setCurrentInterpretation(null);\n        setSelectedConversationItem(null);\n      }\n    }\n  };\n\n  // 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex, newContent) => {\n    if (!(currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.selectedThread)) return false;\n    try {\n      var _response$data;\n      const response = await chatApi.editThreadMessage(currentInterpretation.selectedThread.id, messageIndex, newContent);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && response.data.updated_thread) {\n        // 선택된 스레드 업데이트\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: response.data.updated_thread\n        } : null);\n\n        // 스레드 목록도 업데이트\n        setInterpretationThreads(prev => prev.map(thread => thread.id === response.data.updated_thread.id ? response.data.updated_thread : thread));\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 오류:', error);\n      return false;\n    }\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = updatedConversation => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = mode => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = async personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n    try {\n      // 해석 스레드들을 가져와서 확인\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        // 해석 스레드가 있으면 바로 해석 모드로\n        const latestThread = threadsResponse.data.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())[0];\n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          selectedThread: latestThread\n        });\n        setInterpretationThreads(threadsResponse.data);\n\n        // 페르소나 선택 및 해석 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n      } else {\n        // 해석이 없으면 훈습 모드로 전환\n        setSelectedPersonaItem('training');\n      }\n    } catch (error) {\n      console.error('해석 스레드 조회 실패:', error);\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread, personaId) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n\n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n    try {\n      // 해석 스레드인 경우 해석 모드로\n      if (thread.thread_type === 'interpretation') {\n        // 해석 스레드들을 가져와서 설정\n        const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n        if (threadsResponse.data) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            selectedThread: thread\n          });\n          setInterpretationThreads(threadsResponse.data);\n\n          // 페르소나 선택 및 해석 모드로 전환\n          selectPersona(personaId);\n          setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n          setIsConversationSidebarCollapsed(false);\n          setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        }\n      } else {\n        // 다른 타입 스레드들은 기존 로직 유지\n        // 해석 스레드들을 가져와서 확인\n        const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n        if (threadsResponse.data && threadsResponse.data.length > 0) {\n          // 해석이 있으면 바로 해석 모드로\n          const latestThread = threadsResponse.data.sort((a, b) => new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime())[0];\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            selectedThread: latestThread\n          });\n          setInterpretationThreads(threadsResponse.data);\n\n          // 페르소나 선택 및 해당 스레드 모드로 전환\n          selectPersona(personaId);\n          setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n          setIsConversationSidebarCollapsed(false);\n          setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        } else {\n          // 해석이 없으면 훈습 모드로 전환\n          setSelectedPersonaItem('training');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 조회 실패:', error);\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n\n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(thread => thread.id === selectedVerbalizationThread.id);\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread === null || selectedVerbalizationThread === void 0 ? void 0 : selectedVerbalizationThread.id;\n    await loadVerbalizationThreads();\n\n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find(thread => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n\n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async () => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n\n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n\n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data, ...prev]);\n\n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && currentInterpretation || selectedPersonaItem === 'recent' || selectedPersonaItem === 'verbalization';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 526,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContainer, {\n      children: [/*#__PURE__*/_jsxDEV(PersonaSidebar, {\n        selectedItem: selectedPersonaItem,\n        onSelectItem: handleSelectPersonaItem,\n        isCollapsed: isPersonaSidebarCollapsed,\n        onToggle: shouldShowConversationSidebar ? undefined : togglePersonaSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 529,\n        columnNumber: 9\n      }, this), shouldShowConversationSidebar && /*#__PURE__*/_jsxDEV(ConversationSidebar, {\n        selectedItem: selectedConversationItem,\n        onSelectItem: handleSelectConversationItem,\n        isCollapsed: isConversationSidebarCollapsed,\n        onToggle: toggleConversationSidebar,\n        selectedPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName,\n        selectedPersonaId: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId,\n        refreshTrigger: conversationRefreshTrigger,\n        mode: selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona',\n        personas: selectedPersonaItem === 'recent' ? personas : undefined,\n        verbalizationThreads: selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined,\n        onSelectVerbalizationThread: selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined,\n        onRefreshTrigger: selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 538,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          flex: 1,\n          display: 'flex',\n          flexDirection: 'column',\n          overflow: 'hidden'\n        },\n        children: [selectedPersonaItem === 'training' && /*#__PURE__*/_jsxDEV(TrainingCategoryView, {\n          personas: personas,\n          onPersonaSelect: handlePersonaSelection,\n          onInterpretationComplete: handleInterpretationComplete\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this), selectedConversationItem === 'interpretation' && (currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.selectedThread) && /*#__PURE__*/_jsxDEV(InterpretationView, {\n          interpretation: currentInterpretation.selectedThread.content,\n          personaName: currentInterpretation.personaName,\n          onSendMessage: handleInterpretationMessage,\n          onEditMessage: handleEditInterpretationMessage,\n          isLoading: isInterpretationLoading,\n          messages: currentInterpretation.selectedThread.messages,\n          onGenerateNewInterpretation: () => setSelectedPersonaItem('training'),\n          onSwitchToMode: mode => setSelectedConversationItem(mode),\n          personaId: currentInterpretation.personaId,\n          onRefreshThreads: () => setConversationRefreshTrigger(prev => prev + 1)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 13\n        }, this), ((selectedConversationItem === null || selectedConversationItem === void 0 ? void 0 : selectedConversationItem.includes('proceed')) || (selectedConversationItem === null || selectedConversationItem === void 0 ? void 0 : selectedConversationItem.includes('sentence'))) && /*#__PURE__*/_jsxDEV(ChatArea, {\n          selectedPersona: selectedPersona,\n          selectedConversation: selectedConversation,\n          conversations: conversations,\n          globalMessages: globalMessages,\n          isLoading: isLoading,\n          onSendMessage: sendInitialMessage,\n          onContinueConversation: continueConversation,\n          onUpdateConversation: handleUpdateConversation,\n          onSwitchMode: handleSwitchConversationMode,\n          error: error,\n          onClearError: clearError,\n          mode: selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.includes('proceed') ? 'proceed' : 'sentence',\n          selectedConversationItem: selectedConversationItem,\n          onRefreshConversationSidebar: handleRefreshConversationSidebar\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 583,\n          columnNumber: 13\n        }, this), selectedPersonaItem === 'recent' && /*#__PURE__*/_jsxDEV(RecentInteractionsView, {\n          personas: personas,\n          onSelectPersona: handleRecentPersonaSelect,\n          onSelectThread: handleRecentThreadSelect\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 603,\n          columnNumber: 13\n        }, this), selectedPersonaItem === 'verbalization' && /*#__PURE__*/_jsxDEV(VerbalizationView, {\n          selectedThread: selectedVerbalizationThread,\n          onThreadUpdate: handleVerbalizationThreadUpdate,\n          onCreateNewThread: handleCreateNewVerbalizationThread\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 612,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 555,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 527,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"FvvfmI6CyR6oqzq6shj7dF2fLs4=\", false, function () {\n  return [useChat];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useChat","ConversationSidebar","PersonaSidebar","TrainingCategoryView","InterpretationView","RecentInteractionsView","VerbalizationView","ChatArea","GlobalStyle","AppContainer","chatApi","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","interpretationThreads","setInterpretationThreads","isInterpretationLoading","setIsInterpretationLoading","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","console","log","handlePersonaSelection","personaId","persona","threadsResponse","getPersonaThreadsByType","data","length","latestThread","sort","a","b","Date","updated_at","getTime","personaName","name","selectedThread","handleInterpretationComplete","interpretation","prev","handleInterpretationMessage","message","response","chatWithThread","persona_id","user_message","thread_id","id","thread_type","updated_thread","map","thread","handleInterpretationThreadUpdate","threads","updatedSelectedThread","find","handleEditInterpretationMessage","messageIndex","newContent","_response$data","editThreadMessage","success","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","mode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","loadVerbalizationThreads","getVerbalizationThreads","handleVerbalizationThreadUpdate","currentSelectedId","setTimeout","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","style","flex","display","flexDirection","overflow","onPersonaSelect","onInterpretationComplete","content","onSendMessage","onEditMessage","messages","onGenerateNewInterpretation","onSwitchToMode","onRefreshThreads","onContinueConversation","onUpdateConversation","onSwitchMode","onClearError","onRefreshConversationSidebar","onSelectPersona","onSelectThread","onThreadUpdate","onCreateNewThread","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport TrainingCategoryView from '../training/components/TrainingCategoryView';\nimport InterpretationView from '../training/components/InterpretationView';\nimport RecentInteractionsView from '../shared/components/RecentInteractionsView';\nimport VerbalizationView from '../verbalization/components/VerbalizationView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태 - 실제 스레드 기반으로 변경\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    selectedThread: TrainingThread | null;\n  } | null>(null);\n  \n  // 해석 스레드들 상태\n  const [interpretationThreads, setInterpretationThreads] = useState<TrainingThread[]>([]);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = async (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    try {\n      // 해석 스레드들을 가져와서 확인\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      \n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        // 1) 해석 스레드가 있으면 바로 해석 모드로\n        const latestThread = threadsResponse.data.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          selectedThread: latestThread,\n        });\n        \n        setInterpretationThreads(threadsResponse.data);\n        \n        // 페르소나 선택 및 일반 채팅 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 훈습 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n      } else {\n        // 2) 해석 스레드가 없으면 생성 과정 진행\n        // 팝업은 TrainingCategoryView에서 처리\n      }\n    } catch (error) {\n      console.error('해석 스레드 조회 실패:', error);\n      // 해석이 없으면 생성 과정 진행\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    try {\n      // 해석 스레드들을 다시 가져와서 최신 스레드 선택\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      \n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        const latestThread = threadsResponse.data.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona?.name || '',\n          selectedThread: latestThread,\n        });\n        \n        setInterpretationThreads(threadsResponse.data);\n      }\n    } catch (error) {\n      console.error('해석 스레드 로드 실패:', error);\n    }\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation || !currentInterpretation.selectedThread) return false;\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      // 스레드와 채팅 API 사용\n      const response = await chatApi.chatWithThread({\n        persona_id: currentInterpretation.personaId,\n        user_message: message,\n        thread_id: currentInterpretation.selectedThread.id,\n        thread_type: 'interpretation'\n      });\n\n      if (response.data && response.data.updated_thread) {\n        // 선택된 스레드 업데이트\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: response.data!.updated_thread!,\n        } : null);\n        \n        // 스레드 목록도 업데이트\n        setInterpretationThreads(prev => prev.map(thread =>\n          thread.id === response.data!.updated_thread!.id \n            ? response.data!.updated_thread! \n            : thread\n        ));\n\n        setIsInterpretationLoading(false);\n        return true;\n      } else {\n        console.error('해석 스레드 채팅 API 실패:', response.error);\n        setIsInterpretationLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 스레드 업데이트 핸들러\n  const handleInterpretationThreadUpdate = async (threads: TrainingThread[]) => {\n    setInterpretationThreads(threads);\n    \n    // 현재 선택된 스레드가 업데이트된 목록에 있는지 확인\n    if (currentInterpretation?.selectedThread) {\n      const updatedSelectedThread = threads.find(\n        thread => thread.id === currentInterpretation.selectedThread!.id\n      );\n      \n      if (updatedSelectedThread) {\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: updatedSelectedThread,\n        } : null);\n      } else if (threads.length > 0) {\n        // 현재 선택된 스레드가 삭제되었으면 첫 번째 스레드 선택\n        const latestThread = threads.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: latestThread,\n        } : null);\n      } else {\n        // 스레드가 모두 삭제되었으면 해석 모드 종료\n        setCurrentInterpretation(null);\n        setSelectedConversationItem(null);\n      }\n    }\n  };\n\n  // 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!currentInterpretation?.selectedThread) return false;\n\n    try {\n      const response = await chatApi.editThreadMessage(\n        currentInterpretation.selectedThread.id,\n        messageIndex,\n        newContent\n      );\n\n      if (response.data?.success && response.data.updated_thread) {\n        // 선택된 스레드 업데이트\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          selectedThread: response.data!.updated_thread!,\n        } : null);\n        \n        // 스레드 목록도 업데이트\n        setInterpretationThreads(prev => prev.map(thread =>\n          thread.id === response.data!.updated_thread!.id \n            ? response.data!.updated_thread! \n            : thread\n        ));\n\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 오류:', error);\n      return false;\n    }\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = async (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    try {\n      // 해석 스레드들을 가져와서 확인\n      const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n      \n      if (threadsResponse.data && threadsResponse.data.length > 0) {\n        // 해석 스레드가 있으면 바로 해석 모드로\n        const latestThread = threadsResponse.data.sort((a, b) => \n          new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n        )[0];\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          selectedThread: latestThread,\n        });\n        \n        setInterpretationThreads(threadsResponse.data);\n        \n        // 페르소나 선택 및 해석 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n      } else {\n        // 해석이 없으면 훈습 모드로 전환\n        setSelectedPersonaItem('training');\n      }\n    } catch (error) {\n      console.error('해석 스레드 조회 실패:', error);\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    try {\n      // 해석 스레드인 경우 해석 모드로\n      if (thread.thread_type === 'interpretation') {\n        // 해석 스레드들을 가져와서 설정\n        const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n        \n        if (threadsResponse.data) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            selectedThread: thread,\n          });\n          \n          setInterpretationThreads(threadsResponse.data);\n          \n          // 페르소나 선택 및 해석 모드로 전환\n          selectPersona(personaId);\n          setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n          setIsConversationSidebarCollapsed(false);\n          setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        }\n      } else {\n        // 다른 타입 스레드들은 기존 로직 유지\n        // 해석 스레드들을 가져와서 확인\n        const threadsResponse = await chatApi.getPersonaThreadsByType(personaId, 'interpretation');\n        \n        if (threadsResponse.data && threadsResponse.data.length > 0) {\n          // 해석이 있으면 바로 해석 모드로\n          const latestThread = threadsResponse.data.sort((a, b) => \n            new Date(b.updated_at).getTime() - new Date(a.updated_at).getTime()\n          )[0];\n          \n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            selectedThread: latestThread,\n          });\n          \n          setInterpretationThreads(threadsResponse.data);\n          \n          // 페르소나 선택 및 해당 스레드 모드로 전환\n          selectPersona(personaId);\n          setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n          setIsConversationSidebarCollapsed(false);\n          setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        } else {\n          // 해석이 없으면 훈습 모드로 전환\n          setSelectedPersonaItem('training');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 조회 실패:', error);\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(\n            thread => thread.id === selectedVerbalizationThread.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 콘텐츠 영역 */}\n        <div style={{ flex: 1, display: 'flex', flexDirection: 'column', overflow: 'hidden' }}>\n          {/* 훈습 모드 */}\n          {selectedPersonaItem === 'training' && (\n            <TrainingCategoryView\n              personas={personas}\n              onPersonaSelect={handlePersonaSelection}\n              onInterpretationComplete={handleInterpretationComplete}\n            />\n          )}\n\n          {/* 해석 모드 */}\n          {selectedConversationItem === 'interpretation' && currentInterpretation?.selectedThread && (\n            <InterpretationView\n              interpretation={currentInterpretation.selectedThread.content}\n              personaName={currentInterpretation.personaName}\n              onSendMessage={handleInterpretationMessage}\n              onEditMessage={handleEditInterpretationMessage}\n              isLoading={isInterpretationLoading}\n              messages={currentInterpretation.selectedThread.messages}\n              onGenerateNewInterpretation={() => setSelectedPersonaItem('training')}\n              onSwitchToMode={(mode) => setSelectedConversationItem(mode)}\n              personaId={currentInterpretation.personaId}\n              onRefreshThreads={() => setConversationRefreshTrigger(prev => prev + 1)}\n            />\n          )}\n\n          {/* 나아가기/문장 모드 - ProceedView/SentenceView 렌더링 */}\n          {(selectedConversationItem?.includes('proceed') || selectedConversationItem?.includes('sentence')) && (\n            <ChatArea\n              selectedPersona={selectedPersona}\n              selectedConversation={selectedConversation}\n              conversations={conversations}\n              globalMessages={globalMessages}\n              isLoading={isLoading}\n              onSendMessage={sendInitialMessage}\n              onContinueConversation={continueConversation}\n              onUpdateConversation={handleUpdateConversation}\n              onSwitchMode={handleSwitchConversationMode}\n              error={error}\n              onClearError={clearError}\n              mode={selectedConversationItem?.includes('proceed') ? 'proceed' : 'sentence'}\n              selectedConversationItem={selectedConversationItem}\n              onRefreshConversationSidebar={handleRefreshConversationSidebar}\n            />\n          )}\n\n          {/* 최근 상호작용 모드 */}\n          {selectedPersonaItem === 'recent' && (\n            <RecentInteractionsView\n              personas={personas}\n              onSelectPersona={handleRecentPersonaSelect}\n              onSelectThread={handleRecentThreadSelect}\n            />\n          )}\n\n          {/* 언어화 모드 */}\n          {selectedPersonaItem === 'verbalization' && (\n            <VerbalizationView\n              selectedThread={selectedVerbalizationThread}\n              onThreadUpdate={handleVerbalizationThreadUpdate}\n              onCreateNewThread={handleCreateNewVerbalizationThread}\n            />\n          )}\n        </div>\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}