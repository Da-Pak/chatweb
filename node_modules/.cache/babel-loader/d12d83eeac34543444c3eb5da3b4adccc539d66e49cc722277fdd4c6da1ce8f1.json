{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject0;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import MessageInput from'./MessageInput';import Message from'./Message';import SelectableMessage from'../../training/components/SelectableMessage';import FloatingActionButton from'./FloatingActionButton';import LoadingMessage from'./LoadingMessage';import{sentenceApi}from'../../training/api/sentenceApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const ContextSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  padding: 24px;\\n  border-bottom: 2px solid #e0e0e0;\\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\\n  position: relative;\\n\"])));const ContextTitle=styled.h2(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  font-size: 20px;\\n  font-weight: 600;\\n  color: #333;\\n  margin-bottom: 16px;\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n\"])));const ContextContent=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  background: white;\\n  border: 1px solid #e0e0e0;\\n  border-radius: 12px;\\n  padding: 20px;\\n  line-height: 1.6;\\n  color: #555;\\n  font-size: 14px;\\n  white-space: pre-line;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\\n\"])));const RefreshButton=styled.button(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 24px;\\n  right: 24px;\\n  background: rgba(108, 117, 125, 0.8);\\n  border: 1px solid rgba(108, 117, 125, 0.3);\\n  color: white;\\n  border-radius: 50%;\\n  width: 36px;\\n  height: 36px;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: 18px;\\n  transition: all 0.2s ease;\\n  \\n  &:hover {\\n    background: rgba(108, 117, 125, 1);\\n    transform: scale(1.1);\\n  }\\n  \\n  &:active {\\n    transform: scale(0.95);\\n  }\\n\"])));const ChatSection=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n\"])));const Toast=styled.div(_templateObject0||(_templateObject0=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const TrainingChatView=_ref=>{let{personaId,personaName,contextContent,contextType,messages,isLoading,onSendMessage,onEditMessage,onGenerateNewContent,onSwitchToMode,threads,selectedThread,onThreadUpdate}=_ref;const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 문장 선택 관련 상태\nconst[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});const[isSentenceModeActive,setIsSentenceModeActive]=useState(false);useEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[messages]);const showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};const copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);try{const textArea=document.createElement('textarea');textArea.value=text;textArea.style.position='fixed';textArea.style.left='-999999px';textArea.style.top='-999999px';document.body.appendChild(textArea);textArea.focus();textArea.select();document.execCommand('copy');document.body.removeChild(textArea);showCopyToast(successMessage);}catch(fallbackError){console.error('대체 복사 방법도 실패:',fallbackError);showCopyToast('복사 실패');}}};const handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};const handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};const handleEditMessage=async(messageIndex,newContent)=>{if(onEditMessage){const success=await onEditMessage(messageIndex,newContent);if(success){setEditingMessageIndex(null);showCopyToast('메시지가 수정되었습니다');}else{showCopyToast('메시지 수정에 실패했습니다');}}};const handleCancelEdit=()=>{setEditingMessageIndex(null);};// 문장 선택 핸들러들\nconst handleToggleSelect=sentenceId=>{setSelectedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(sentenceId)){newSet.delete(sentenceId);}else{newSet.add(sentenceId);}return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{try{setMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));sentenceApi.createOrUpdateMemo({sentence_id:sentenceId,content:memo}).catch(error=>{console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):',error);});}catch(error){console.error('메모 저장 실패:',error);showCopyToast('메모 저장에 실패했습니다');}};const handleDeleteMemo=async sentenceId=>{try{setMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});setHighlightedSentences(prev=>{const newSet=new Set(prev);newSet.delete(sentenceId);return newSet;});sentenceApi.deleteMemo(sentenceId).catch(error=>{console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):',error);});showCopyToast('메모가 삭제되었습니다');}catch(error){console.error('메모 삭제 실패:',error);showCopyToast('메모 삭제에 실패했습니다');}};const handleMenuAction=async action=>{const selectedIds=Array.from(selectedSentences);const selectedTexts=selectedIds.map(id=>{const[timestamp,messageIndex,sentenceIndex]=id.split('_');const message=messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n\\.]+/).map(s=>s.trim()).filter(s=>s.length>0);return sentences[parseInt(sentenceIndex)]||'';}return'';}).filter(text=>text.length>0);switch(action){case'sendToInput':if(messageInputRef.current&&selectedTexts.length>0){const formattedText=selectedTexts.map(text=>\"\\\"\".concat(text,\"\\\"\")).join(', ');messageInputRef.current.insertText(formattedText);}break;case'saveToVault':try{await sentenceApi.saveSentencesToVault({sentences:selectedTexts,source_message_id:\"\".concat(contextType,\"_chat\"),source_conversation_id:undefined,tags:[contextType]});selectedIds.forEach(id=>{setHighlightedSentences(prev=>new Set(prev).add(id));});showCopyToast('저장고에 저장되었습니다');}catch(error){console.error('저장고 저장 실패:',error);showCopyToast('저장고 저장에 실패했습니다');}break;case'addMemo':selectedIds.forEach(id=>{setMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[id]:''}));setHighlightedSentences(prev=>new Set(prev).add(id));sentenceApi.createOrUpdateMemo({sentence_id:id,content:''}).catch(error=>{console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):',error);});});break;case'highlight':selectedIds.forEach(id=>{setHighlightedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(id)){newSet.delete(id);}else{newSet.add(id);}return newSet;});});break;case'copy':if(selectedTexts.length>0){copyToClipboard(selectedTexts.join(' '),'선택된 문장이 복사되었습니다');}break;case'generateProceed':if(onSwitchToMode){onSwitchToMode('proceed');}break;case'generateSentence':if(onSwitchToMode){onSwitchToMode('sentence');}break;}setSelectedSentences(new Set());};const handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};const handleSunAction=async()=>{if(onGenerateNewContent){onGenerateNewContent();}};const handlePersonAction=async()=>{if(onSwitchToMode){onSwitchToMode('proceed');}};const handleDocumentAction=async()=>{if(onSwitchToMode){onSwitchToMode('sentence');}};const getContextTitle=()=>{switch(contextType){case'interpretation':return'📝 해석';case'proceed':return'🚀 나아가기';case'sentence':return'📖 문장';default:return'💬 채팅';}};const getEmptyMessage=()=>{switch(contextType){case'interpretation':return'해석에 대해 더 자세히 질문해보세요';case'proceed':return'나아가기 방향에 대해 질문해보세요';case'sentence':return'문장에 대해 질문하거나 개선 요청을 해보세요';default:return'질문을 입력해보세요';}};const getPlaceholder=()=>{switch(contextType){case'interpretation':return\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\");case'proceed':return\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\");case'sentence':return\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\");default:return\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\");}};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsxs(ContextSection,{children:[/*#__PURE__*/_jsxs(ContextTitle,{children:[getContextTitle(),onGenerateNewContent&&/*#__PURE__*/_jsx(RefreshButton,{onClick:onGenerateNewContent,title:\"\\uC0C8\\uB85C \\uC0DD\\uC131\",children:\"\\uD83D\\uDD04\"})]}),/*#__PURE__*/_jsx(ContextContent,{children:contextContent})]}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[messages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'24px',marginBottom:'8px'},children:\"\\uD83D\\uDCAC\"}),/*#__PURE__*/_jsx(\"div\",{children:getEmptyMessage()}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'4px'},children:[personaName,\"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]})]}):messages.map((message,index)=>message.role==='user'?/*#__PURE__*/_jsx(Message,{message:_objectSpread(_objectSpread({},message),{},{persona_id:undefined,persona_name:undefined}),personas:{},showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onEdit:()=>handleStartEdit(index),isEditing:editingMessageIndex===index,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit},\"\".concat(contextType,\"_\").concat(index)):/*#__PURE__*/_jsx(SelectableMessage,{message:_objectSpread(_objectSpread({},message),{},{persona_id:'current_persona',persona_name:personaName}),personas:{current_persona:{name:personaName,description:'',color:'#6c757d',prompt:'',category:'',subcategory:''}},selectedSentences:isSentenceModeActive?selectedSentences:new Set(),highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:isSentenceModeActive?handleToggleSelect:()=>{},onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo,showSentenceSelector:isSentenceModeActive,showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onSunAction:handleSunAction,onPersonAction:handlePersonAction,onDocumentAction:handleDocumentAction},\"\".concat(contextType,\"_\").concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:personaName,personaColor:\"#6c757d\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:onSendMessage,disabled:isLoading,placeholder:getPlaceholder(),onToggleSentenceMode:handleToggleSentenceMode,isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,currentInterpretation:contextContent,personaId:personaId,onGenerateProceed:handlePersonAction,onGenerateSentence:handleDocumentAction})})]}),isSentenceModeActive&&selectedSentences.size>0&&/*#__PURE__*/_jsx(FloatingActionButton,{selectedCount:selectedSentences.size,onMenuAction:handleMenuAction})]});};export default TrainingChatView;","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","ContextSection","_templateObject2","ContextTitle","h2","_templateObject3","ContextContent","_templateObject4","RefreshButton","button","_templateObject5","ChatSection","_templateObject6","ChatMessages","_templateObject7","ChatInputSection","_templateObject8","EmptyChat","_templateObject9","Toast","_templateObject0","props","show","TrainingChatView","_ref","personaId","personaName","contextContent","contextType","messages","isLoading","onSendMessage","onEditMessage","onGenerateNewContent","onSwitchToMode","threads","selectedThread","onThreadUpdate","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","error","console","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","_objectSpread","createOrUpdateMemo","sentence_id","content","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","action","selectedIds","Array","from","selectedTexts","map","id","timestamp","sentenceIndex","split","find","m","sentences","s","trim","filter","length","parseInt","formattedText","concat","join","insertText","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","handleToggleSentenceMode","handleSunAction","handlePersonAction","handleDocumentAction","getContextTitle","getEmptyMessage","getPlaceholder","children","onClick","title","ref","fontSize","marginBottom","marginTop","index","role","persona_id","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","selectedCount","onMenuAction"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/shared/components/TrainingChatView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport MessageInput, { MessageInputRef } from './MessageInput';\r\nimport Message from './Message';\r\nimport SelectableMessage from '../../training/components/SelectableMessage';\r\nimport FloatingActionButton from './FloatingActionButton';\r\nimport LoadingMessage from './LoadingMessage';\r\nimport { sentenceApi } from '../../training/api/sentenceApi';\r\nimport { chatApi } from '../api/chatApi';\r\nimport { TrainingThread } from '../types';\r\n\r\ninterface TrainingChatViewProps {\r\n  // 기본 정보\r\n  personaId: string;\r\n  personaName: string;\r\n  \r\n  // 컨텍스트 콘텐츠 (해석, 나아가기, 문장 등)\r\n  contextContent: string;\r\n  contextType: 'interpretation' | 'proceed' | 'sentence';\r\n  \r\n  // 메시지들\r\n  messages: Array<{\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: string;\r\n  }>;\r\n  \r\n  // 상태\r\n  isLoading: boolean;\r\n  \r\n  // 콜백들\r\n  onSendMessage: (message: string) => Promise<boolean>;\r\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\r\n  onGenerateNewContent?: () => void;\r\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed' | 'sentence') => void;\r\n  \r\n  // 스레드 관련 (선택사항)\r\n  threads?: TrainingThread[];\r\n  selectedThread?: TrainingThread | null;\r\n  onThreadUpdate?: (updatedThreads: TrainingThread[]) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background: white;\r\n`;\r\n\r\nconst ContextSection = styled.div`\r\n  padding: 24px;\r\n  border-bottom: 2px solid #e0e0e0;\r\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\r\n  position: relative;\r\n`;\r\n\r\nconst ContextTitle = styled.h2`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #333;\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n`;\r\n\r\nconst ContextContent = styled.div`\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  color: #555;\r\n  font-size: 14px;\r\n  white-space: pre-line;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\nconst RefreshButton = styled.button`\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 24px;\r\n  background: rgba(108, 117, 125, 0.8);\r\n  border: 1px solid rgba(108, 117, 125, 0.3);\r\n  color: white;\r\n  border-radius: 50%;\r\n  width: 36px;\r\n  height: 36px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 18px;\r\n  transition: all 0.2s ease;\r\n  \r\n  &:hover {\r\n    background: rgba(108, 117, 125, 1);\r\n    transform: scale(1.1);\r\n  }\r\n  \r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n`;\r\n\r\nconst ChatInputSection = styled.div`\r\n  padding: 16px 20px;\r\n  border-top: none;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst EmptyChat = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #999;\r\n  font-size: 14px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Toast = styled.div<{ show: boolean }>`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  background: #6c757d;\r\n  color: white;\r\n  padding: 12px 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\r\n  transition: transform 0.3s ease;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst TrainingChatView: React.FC<TrainingChatViewProps> = ({\r\n  personaId,\r\n  personaName,\r\n  contextContent,\r\n  contextType,\r\n  messages,\r\n  isLoading,\r\n  onSendMessage,\r\n  onEditMessage,\r\n  onGenerateNewContent,\r\n  onSwitchToMode,\r\n  threads,\r\n  selectedThread,\r\n  onThreadUpdate,\r\n}) => {\r\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\r\n  const messageInputRef = useRef<MessageInputRef>(null);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\r\n  \r\n  // 문장 선택 관련 상태\r\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\r\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\r\n  const [memos, setMemos] = useState<Record<string, string>>({});\r\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (chatMessagesRef.current) {\r\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  const showCopyToast = (message: string) => {\r\n    setToastMessage(message);\r\n    setShowToast(true);\r\n    setTimeout(() => setShowToast(false), 3000);\r\n  };\r\n\r\n  const copyToClipboard = async (text: string, successMessage: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      showCopyToast(successMessage);\r\n    } catch (error) {\r\n      console.error('복사 실패:', error);\r\n      try {\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = text;\r\n        textArea.style.position = 'fixed';\r\n        textArea.style.left = '-999999px';\r\n        textArea.style.top = '-999999px';\r\n        document.body.appendChild(textArea);\r\n        textArea.focus();\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        showCopyToast(successMessage);\r\n      } catch (fallbackError) {\r\n        console.error('대체 복사 방법도 실패:', fallbackError);\r\n        showCopyToast('복사 실패');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCopyMessage = async (messageContent: string) => {\r\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\r\n  };\r\n\r\n  const handleStartEdit = (messageIndex: number) => {\r\n    setEditingMessageIndex(messageIndex);\r\n  };\r\n\r\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\r\n    if (onEditMessage) {\r\n      const success = await onEditMessage(messageIndex, newContent);\r\n      if (success) {\r\n        setEditingMessageIndex(null);\r\n        showCopyToast('메시지가 수정되었습니다');\r\n      } else {\r\n        showCopyToast('메시지 수정에 실패했습니다');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingMessageIndex(null);\r\n  };\r\n\r\n  // 문장 선택 핸들러들\r\n  const handleToggleSelect = (sentenceId: string) => {\r\n    setSelectedSentences(prev => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(sentenceId)) {\r\n        newSet.delete(sentenceId);\r\n      } else {\r\n        newSet.add(sentenceId);\r\n      }\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\r\n    try {\r\n      setMemos(prev => ({\r\n        ...prev,\r\n        [sentenceId]: memo\r\n      }));\r\n      \r\n      sentenceApi.createOrUpdateMemo({\r\n        sentence_id: sentenceId,\r\n        content: memo\r\n      }).catch(error => {\r\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\r\n      });\r\n    } catch (error) {\r\n      console.error('메모 저장 실패:', error);\r\n      showCopyToast('메모 저장에 실패했습니다');\r\n    }\r\n  };\r\n\r\n  const handleDeleteMemo = async (sentenceId: string) => {\r\n    try {\r\n      setMemos(prev => {\r\n        const newMemos = { ...prev };\r\n        delete newMemos[sentenceId];\r\n        return newMemos;\r\n      });\r\n      setHighlightedSentences(prev => {\r\n        const newSet = new Set(prev);\r\n        newSet.delete(sentenceId);\r\n        return newSet;\r\n      });\r\n      \r\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\r\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\r\n      });\r\n      \r\n      showCopyToast('메모가 삭제되었습니다');\r\n    } catch (error) {\r\n      console.error('메모 삭제 실패:', error);\r\n      showCopyToast('메모 삭제에 실패했습니다');\r\n    }\r\n  };\r\n\r\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\r\n    const selectedIds = Array.from(selectedSentences);\r\n    const selectedTexts = selectedIds.map(id => {\r\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\r\n      const message = messages.find(m => m.timestamp === timestamp);\r\n      if (message) {\r\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\r\n        return sentences[parseInt(sentenceIndex)] || '';\r\n      }\r\n      return '';\r\n    }).filter(text => text.length > 0);\r\n\r\n    switch (action) {\r\n      case 'sendToInput':\r\n        if (messageInputRef.current && selectedTexts.length > 0) {\r\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\r\n          messageInputRef.current.insertText(formattedText);\r\n        }\r\n        break;\r\n      \r\n      case 'saveToVault':\r\n        try {\r\n          await sentenceApi.saveSentencesToVault({\r\n            sentences: selectedTexts,\r\n            source_message_id: `${contextType}_chat`,\r\n            source_conversation_id: undefined,\r\n            tags: [contextType]\r\n          });\r\n          selectedIds.forEach(id => {\r\n            setHighlightedSentences(prev => new Set(prev).add(id));\r\n          });\r\n          showCopyToast('저장고에 저장되었습니다');\r\n        } catch (error) {\r\n          console.error('저장고 저장 실패:', error);\r\n          showCopyToast('저장고 저장에 실패했습니다');\r\n        }\r\n        break;\r\n      \r\n      case 'addMemo':\r\n        selectedIds.forEach(id => {\r\n          setMemos(prev => ({ ...prev, [id]: '' }));\r\n          setHighlightedSentences(prev => new Set(prev).add(id));\r\n          \r\n          sentenceApi.createOrUpdateMemo({\r\n            sentence_id: id,\r\n            content: ''\r\n          }).catch(error => {\r\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\r\n          });\r\n        });\r\n        break;\r\n      \r\n      case 'highlight':\r\n        selectedIds.forEach(id => {\r\n          setHighlightedSentences(prev => {\r\n            const newSet = new Set(prev);\r\n            if (newSet.has(id)) {\r\n              newSet.delete(id);\r\n            } else {\r\n              newSet.add(id);\r\n            }\r\n            return newSet;\r\n          });\r\n        });\r\n        break;\r\n      \r\n      case 'copy':\r\n        if (selectedTexts.length > 0) {\r\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\r\n        }\r\n        break;\r\n\r\n      case 'generateProceed':\r\n        if (onSwitchToMode) {\r\n          onSwitchToMode('proceed');\r\n        }\r\n        break;\r\n\r\n      case 'generateSentence':\r\n        if (onSwitchToMode) {\r\n          onSwitchToMode('sentence');\r\n        }\r\n        break;\r\n    }\r\n\r\n    setSelectedSentences(new Set());\r\n  };\r\n\r\n  const handleToggleSentenceMode = () => {\r\n    setIsSentenceModeActive(prev => !prev);\r\n  };\r\n\r\n  const handleSunAction = async () => {\r\n    if (onGenerateNewContent) {\r\n      onGenerateNewContent();\r\n    }\r\n  };\r\n\r\n  const handlePersonAction = async () => {\r\n    if (onSwitchToMode) {\r\n      onSwitchToMode('proceed');\r\n    }\r\n  };\r\n\r\n  const handleDocumentAction = async () => {\r\n    if (onSwitchToMode) {\r\n      onSwitchToMode('sentence');\r\n    }\r\n  };\r\n\r\n  const getContextTitle = () => {\r\n    switch (contextType) {\r\n      case 'interpretation':\r\n        return '📝 해석';\r\n      case 'proceed':\r\n        return '🚀 나아가기';\r\n      case 'sentence':\r\n        return '📖 문장';\r\n      default:\r\n        return '💬 채팅';\r\n    }\r\n  };\r\n\r\n  const getEmptyMessage = () => {\r\n    switch (contextType) {\r\n      case 'interpretation':\r\n        return '해석에 대해 더 자세히 질문해보세요';\r\n      case 'proceed':\r\n        return '나아가기 방향에 대해 질문해보세요';\r\n      case 'sentence':\r\n        return '문장에 대해 질문하거나 개선 요청을 해보세요';\r\n      default:\r\n        return '질문을 입력해보세요';\r\n    }\r\n  };\r\n\r\n  const getPlaceholder = () => {\r\n    switch (contextType) {\r\n      case 'interpretation':\r\n        return `${personaName}에게 해석에 대해 질문해보세요...`;\r\n      case 'proceed':\r\n        return `${personaName}에게 나아가기에 대해 질문해보세요...`;\r\n      case 'sentence':\r\n        return `${personaName}에게 문장에 대해 질문해보세요...`;\r\n      default:\r\n        return `${personaName}에게 질문해보세요...`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Toast show={showToast}>\r\n        {toastMessage}\r\n      </Toast>\r\n      \r\n      <ContextSection>\r\n        <ContextTitle>\r\n          {getContextTitle()}\r\n          {onGenerateNewContent && (\r\n            <RefreshButton onClick={onGenerateNewContent} title=\"새로 생성\">\r\n              🔄\r\n            </RefreshButton>\r\n          )}\r\n        </ContextTitle>\r\n        <ContextContent>\r\n          {contextContent}\r\n        </ContextContent>\r\n      </ContextSection>\r\n      \r\n      <ChatSection>\r\n        <ChatMessages ref={chatMessagesRef}>\r\n          {messages.length === 0 ? (\r\n            <EmptyChat>\r\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\r\n              <div>{getEmptyMessage()}</div>\r\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\r\n                {personaName}와 대화를 나눌 수 있습니다\r\n              </div>\r\n            </EmptyChat>\r\n          ) : (\r\n            messages.map((message, index) => \r\n              message.role === 'user' ? (\r\n                <Message\r\n                  key={`${contextType}_${index}`}\r\n                  message={{\r\n                    ...message,\r\n                    persona_id: undefined,\r\n                    persona_name: undefined,\r\n                  }}\r\n                  personas={{}}\r\n                  showActionButtons={true}\r\n                  onCopy={() => handleCopyMessage(message.content)}\r\n                  onEdit={() => handleStartEdit(index)}\r\n                  isEditing={editingMessageIndex === index}\r\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\r\n                  onEditCancel={handleCancelEdit}\r\n                />\r\n              ) : (\r\n                <SelectableMessage\r\n                  key={`${contextType}_${index}`}\r\n                  message={{\r\n                    ...message,\r\n                    persona_id: 'current_persona',\r\n                    persona_name: personaName,\r\n                  }}\r\n                  personas={{\r\n                    current_persona: {\r\n                      name: personaName,\r\n                      description: '',\r\n                      color: '#6c757d',\r\n                      prompt: '',\r\n                      category: '',\r\n                      subcategory: ''\r\n                    }\r\n                  }}\r\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\r\n                  highlightedSentences={highlightedSentences}\r\n                  memos={memos}\r\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\r\n                  onMemoChange={handleMemoChange}\r\n                  onDeleteMemo={handleDeleteMemo}\r\n                  showSentenceSelector={isSentenceModeActive}\r\n                  showActionButtons={true}\r\n                  onCopy={() => handleCopyMessage(message.content)}\r\n                  onSunAction={handleSunAction}\r\n                  onPersonAction={handlePersonAction}\r\n                  onDocumentAction={handleDocumentAction}\r\n                />\r\n              )\r\n            )\r\n          )}\r\n          \r\n          {isLoading && (\r\n            <LoadingMessage \r\n              personaName={personaName}\r\n              personaColor=\"#6c757d\"\r\n            />\r\n          )}\r\n        </ChatMessages>\r\n\r\n        <ChatInputSection>\r\n          <MessageInput\r\n            ref={messageInputRef}\r\n            onSendMessage={onSendMessage}\r\n            disabled={isLoading}\r\n            placeholder={getPlaceholder()}\r\n            onToggleSentenceMode={handleToggleSentenceMode}\r\n            isSentenceModeActive={isSentenceModeActive}\r\n            hasSelectedSentences={selectedSentences.size > 0}\r\n            currentInterpretation={contextContent}\r\n            personaId={personaId}\r\n            onGenerateProceed={handlePersonAction}\r\n            onGenerateSentence={handleDocumentAction}\r\n          />\r\n        </ChatInputSection>\r\n      </ChatSection>\r\n      \r\n      {/* 플로팅 액션 버튼 */}\r\n      {isSentenceModeActive && selectedSentences.size > 0 && (\r\n        <FloatingActionButton\r\n          selectedCount={selectedSentences.size}\r\n          onMenuAction={handleMenuAction}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TrainingChatView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}