{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\InterpretationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst InterpretationView = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n  selectedThread: propSelectedThread\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 선택된 스레드 변경 시 처리 (나아가기와 동일)\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 해석 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (나아가기와 동일한 방식)\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('=== 해석 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n\n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n\n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      console.log('=== 해석 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    // 디버깅 로그 추가\n    console.log('=== 해석 메모 저장 디버깅 ===');\n    console.log('sentenceId:', sentenceId);\n    console.log('memo:', memo);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread?.id:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n    console.log('personaId:', personaId);\n\n    // selectedThread가 없으면 최신 해석 스레드를 찾아서 사용 (폴백 로직)\n    let threadIdToUse = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id;\n    if (!threadIdToUse && personaId) {\n      console.log('selectedThread가 없어서 최신 해석 스레드 찾는 중...');\n      try {\n        const threadsResponse = await chatApi.getPersonaThreads(personaId);\n        if (threadsResponse.data) {\n          const interpretationThreads = threadsResponse.data.filter(t => t.thread_type === 'interpretation');\n          if (interpretationThreads.length > 0) {\n            // 가장 최신 해석 스레드 사용\n            const latestThread = interpretationThreads.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n            threadIdToUse = latestThread.id;\n            console.log('폴백으로 찾은 해석 스레드 ID:', threadIdToUse);\n          }\n        }\n      } catch (error) {\n        console.warn('해석 스레드 조회 실패:', error);\n      }\n    }\n    if (!threadIdToUse) {\n      console.error('사용할 스레드 ID를 찾을 수 없음');\n      showCopyToast('해석 스레드를 찾을 수 없습니다. 해석을 다시 생성해주세요.');\n      throw new Error('해석 스레드를 찾을 수 없습니다.');\n    }\n    console.log('최종 사용할 스레드 ID:', threadIdToUse);\n\n    // 로컬 상태 업데이트는 SelectableSentence에서 처리하므로 제거\n    // 백엔드 저장만 수행\n\n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp,, sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages) {\n      const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    console.log('추출된 문장 내용:', sentenceContent);\n    try {\n      // 메모 저장고에도 저장하기 위한 추가 정보\n      const memoRequest = {\n        sentence_id: sentenceId,\n        thread_id: threadIdToUse,\n        // 폴백 로직으로 찾은 스레드 ID 사용\n        thread_type: 'interpretation',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `interpretation_${personaId}`\n      };\n      console.log('메모 저장 요청 데이터:', memoRequest);\n\n      // 메모가 추가되었을 때, 메모 저장고에도 자동 저장\n      if (memo.trim()) {\n        const memoVaultRequest = {\n          memo_content: memo,\n          sentence_content: sentenceContent,\n          source_message_id: `interpretation_${personaId}`,\n          source_conversation_id: threadIdToUse,\n          source_thread_id: threadIdToUse,\n          source_thread_type: 'interpretation',\n          source_sentence_id: sentenceId,\n          tags: ['interpretation', personaId]\n        };\n        console.log('메모 저장고 저장 요청:', memoVaultRequest);\n        try {\n          await sentenceApi.saveMemoToVault(memoVaultRequest);\n          console.log('메모 저장고 저장 성공');\n        } catch (vaultError) {\n          console.warn('메모 저장고 저장 실패 (메모 자체는 저장됨):', vaultError);\n        }\n      }\n\n      // 백엔드 API 호출로 실제 저장\n      await sentenceApi.createOrUpdateMemo(memoRequest);\n\n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      console.log('해석 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('해석 메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error; // SelectableSentence에서 에러 처리할 수 있도록\n    }\n    console.log('=== 해석 메모 저장 디버깅 끝 ===');\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp,, sentenceIndex] = id.split('_');\n      const message = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          if (!personaId) {\n            showCopyToast('페르소나 ID를 찾을 수 없습니다');\n            return;\n          }\n\n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates = [];\n          const highlightColors = [];\n          const memoContents = [];\n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          // 스레드 ID 생성 (selectedThread가 없는 경우 대비)\n          const threadId = (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id) || `interpretation_${personaId}_${Date.now()}`;\n          console.log('=== 해석 저장고 저장 디버깅 ===');\n          console.log('personaId:', personaId);\n          console.log('selectedThread:', selectedThread);\n          console.log('사용할 threadId:', threadId);\n          console.log('selectedTexts:', selectedTexts);\n          console.log('selectedIds:', selectedIds);\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `interpretation_${personaId}`,\n            source_conversation_id: threadId,\n            source_thread_id: threadId,\n            source_thread_type: 'interpretation',\n            source_sentence_ids: selectedIds,\n            tags: ['interpretation', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          console.log('해석 저장고 저장 완료');\n          console.log('=== 해석 저장고 저장 디버깅 끝 ===');\n\n          // 백엔드에 하이라이트도 저장 (나아가기와 동일한 로직)\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            for (const sentenceId of selectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'interpretation'\n                });\n              } catch (error) {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              }\n            }\n          }\n\n          // 성공 시 로컬 상태 업데이트 (나아가기와 동일한 방식)\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n\n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [bottomSentenceId]: ''\n          }));\n\n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 메모 저장 (가장 아래 문장만) - 메모 저장고 정보 포함\n          const bottomSentenceText = selectedTexts[selectedTexts.length - 1];\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            thread_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n            thread_type: 'interpretation',\n            content: '',\n            sentence_content: bottomSentenceText,\n            source_message_id: `interpretation_${personaId}`\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n\n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'interpretation'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      case 'highlight':\n        if (selectedIds.length > 0 && selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n          try {\n            console.log('=== 해석 하이라이트 토글 시작 ===');\n            console.log('selectedThread.id:', selectedThread.id);\n            console.log('선택된 문장들:', selectedIds);\n\n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            console.log('사용할 스레드 ID:', selectedThread.id);\n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n\n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n\n              // 백엔드에서 모든 하이라이트 삭제\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 삭제 중:', id);\n                  await sentenceApi.deleteHighlight(id);\n                  console.log('하이라이트 삭제 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', id, error);\n                }\n              }\n              console.log('모든 선택된 문장의 하이라이트 제거 완료');\n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n\n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.add(id));\n                return newSet;\n              });\n\n              // 백엔드에 모든 하이라이트 저장\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 저장 중:', id);\n                  const saveRequest = {\n                    sentence_id: id,\n                    thread_id: selectedThread.id,\n                    thread_type: 'interpretation'\n                  };\n                  console.log('하이라이트 저장 요청:', saveRequest);\n                  const response = await sentenceApi.createHighlight(saveRequest);\n                  console.log('하이라이트 저장 응답:', response);\n                  console.log('하이라이트 저장 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', id, error);\n                }\n              }\n              console.log('모든 선택된 문장에 하이라이트 추가 완료');\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n            console.log('=== 해석 하이라이트 토글 완료 ===');\n          } catch (error) {\n            console.error('=== 해석 하이라이트 토글 실패 ===', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        } else {\n          console.warn('선택된 문장이 없거나 personaId가 없습니다:', {\n            selectedIds,\n            personaId\n          });\n          showCopyToast('선택된 문장이 없습니다');\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async messageContent => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    console.log('messageContent:', messageContent.substring(0, 100) + '...');\n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    if (!messageContent) {\n      console.error('저장할 메시지 내용이 없습니다');\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: messageContent.length,\n        contentPreview: messageContent.substring(0, 100) + '...'\n      });\n\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      console.log('API 응답:', response);\n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    console.log('=== handleSunAction 완료 ===');\n  };\n  const handlePersonAction = async messageContent => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async messageContent => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 749,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCAC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 757,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 758,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 759,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 756,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 766,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#6c757d',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 782,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#6c757d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 754,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: onSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 해석에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: interpretation,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: messages,\n          onRefreshThreads: onRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 825,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 824,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 753,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: interpretation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 843,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 748,\n    columnNumber: 5\n  }, this);\n};\n_s(InterpretationView, \"41AgrF/si3j3MNjR4yugmXcQeo0=\");\n_c7 = InterpretationView;\nexport default InterpretationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"InterpretationView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","chatApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","InterpretationView","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","onRefreshThreads","selectedThread","propSelectedThread","_s","setSelectedThread","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","console","log","id","loadThreadSentenceData","threadId","data","getThreadSentenceData","Object","keys","length","highlights","error","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","threadIdToUse","threadsResponse","getPersonaThreads","interpretationThreads","filter","t","thread_type","latestThread","sort","a","b","Date","created_at","getTime","warn","Error","timestamp","sentenceIndex","split","sentenceContent","find","m","sentences","content","map","s","trim","parseInt","memoRequest","sentence_id","thread_id","sentence_content","source_message_id","memoVaultRequest","memo_content","source_conversation_id","source_thread_id","source_thread_type","source_sentence_id","tags","saveMemoToVault","vaultError","createOrUpdateMemo","handleDeleteMemo","newMemos","deleteMemo","catch","handleMenuAction","action","selectedIds","Array","from","selectedTexts","formattedText","join","insertText","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","push","now","saveSentencesToVault","source_sentence_ids","highlight_states","highlight_colors","memo_contents","createHighlight","sortedIds","timestampA","sentenceIndexA","timestampB","sentenceIndexB","bottomSentenceId","forEach","bottomSentenceText","currentlyHighlighted","notHighlighted","deleteHighlight","saveRequest","response","handleToggleSentenceMode","handleSunAction","substring","contentLength","contentPreview","saveCurrentAsInterpretation","persona_id","String","handlePersonAction","saveCurrentAsProceed","handleDocumentAction","saveCurrentAsSentence","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","fontSize","marginBottom","marginTop","index","role","undefined","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\n\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n  onRefreshThreads?: () => void;\n  selectedThread?: TrainingThread | null; // 나아가기와 동일하게 추가\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\n\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 선택된 스레드 변경 시 처리 (나아가기와 동일)\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 해석 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (나아가기와 동일한 방식)\n  const loadThreadSentenceData = async (threadId: string) => {\n      try {\n      console.log('=== 해석 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n        \n      // 백엔드에서 스레드 데이터 로딩\n        const data = await sentenceApi.getThreadSentenceData(threadId);\n        \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n        \n      // 백엔드 데이터로 상태 설정\n          setMemos(data.memos);\n          setHighlightedSentences(new Set(data.highlights));\n        \n        console.log('=== 해석 스레드 데이터 로딩 완료 ===');\n      } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n        // 실패 시 빈 상태로 초기화\n        setMemos({});\n        setHighlightedSentences(new Set());\n      }\n    };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    // 디버깅 로그 추가\n    console.log('=== 해석 메모 저장 디버깅 ===');\n    console.log('sentenceId:', sentenceId);\n    console.log('memo:', memo);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread?.id:', selectedThread?.id);\n    console.log('personaId:', personaId);\n    \n    // selectedThread가 없으면 최신 해석 스레드를 찾아서 사용 (폴백 로직)\n    let threadIdToUse = selectedThread?.id;\n    \n    if (!threadIdToUse && personaId) {\n      console.log('selectedThread가 없어서 최신 해석 스레드 찾는 중...');\n      try {\n        const threadsResponse = await chatApi.getPersonaThreads(personaId);\n        if (threadsResponse.data) {\n          const interpretationThreads = threadsResponse.data.filter(t => t.thread_type === 'interpretation');\n          if (interpretationThreads.length > 0) {\n            // 가장 최신 해석 스레드 사용\n            const latestThread = interpretationThreads.sort((a, b) => \n              new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n            )[0];\n            threadIdToUse = latestThread.id;\n            console.log('폴백으로 찾은 해석 스레드 ID:', threadIdToUse);\n          }\n        }\n      } catch (error) {\n        console.warn('해석 스레드 조회 실패:', error);\n      }\n    }\n    \n    if (!threadIdToUse) {\n      console.error('사용할 스레드 ID를 찾을 수 없음');\n      showCopyToast('해석 스레드를 찾을 수 없습니다. 해석을 다시 생성해주세요.');\n      throw new Error('해석 스레드를 찾을 수 없습니다.');\n    }\n    \n    console.log('최종 사용할 스레드 ID:', threadIdToUse);\n    \n    // 로컬 상태 업데이트는 SelectableSentence에서 처리하므로 제거\n    // 백엔드 저장만 수행\n    \n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp, , sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (selectedThread?.messages) {\n      const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    \n    console.log('추출된 문장 내용:', sentenceContent);\n    \n    try {\n      // 메모 저장고에도 저장하기 위한 추가 정보\n      const memoRequest = {\n        sentence_id: sentenceId,\n        thread_id: threadIdToUse, // 폴백 로직으로 찾은 스레드 ID 사용\n        thread_type: 'interpretation',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `interpretation_${personaId}`\n      };\n      \n      console.log('메모 저장 요청 데이터:', memoRequest);\n      \n      // 메모가 추가되었을 때, 메모 저장고에도 자동 저장\n      if (memo.trim()) {\n        const memoVaultRequest = {\n          memo_content: memo,\n          sentence_content: sentenceContent,\n          source_message_id: `interpretation_${personaId}`,\n          source_conversation_id: threadIdToUse,\n          source_thread_id: threadIdToUse,\n          source_thread_type: 'interpretation',\n          source_sentence_id: sentenceId,\n          tags: ['interpretation', personaId]\n        };\n        \n        console.log('메모 저장고 저장 요청:', memoVaultRequest);\n        \n        try {\n          await sentenceApi.saveMemoToVault(memoVaultRequest);\n          console.log('메모 저장고 저장 성공');\n        } catch (vaultError) {\n          console.warn('메모 저장고 저장 실패 (메모 자체는 저장됨):', vaultError);\n        }\n      }\n      \n      // 백엔드 API 호출로 실제 저장\n      await sentenceApi.createOrUpdateMemo(memoRequest);\n      \n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      console.log('해석 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('해석 메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error; // SelectableSentence에서 에러 처리할 수 있도록\n    }\n    \n    console.log('=== 해석 메모 저장 디버깅 끝 ===');\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, , sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          if (!personaId) {\n            showCopyToast('페르소나 ID를 찾을 수 없습니다');\n            return;\n          }\n          \n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          // 스레드 ID 생성 (selectedThread가 없는 경우 대비)\n          const threadId = selectedThread?.id || `interpretation_${personaId}_${Date.now()}`;\n          \n          console.log('=== 해석 저장고 저장 디버깅 ===');\n          console.log('personaId:', personaId);\n          console.log('selectedThread:', selectedThread);\n          console.log('사용할 threadId:', threadId);\n          console.log('selectedTexts:', selectedTexts);\n          console.log('selectedIds:', selectedIds);\n          \n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `interpretation_${personaId}`,\n            source_conversation_id: threadId,\n            source_thread_id: threadId,\n            source_thread_type: 'interpretation',\n            source_sentence_ids: selectedIds,\n            tags: ['interpretation', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          console.log('해석 저장고 저장 완료');\n          console.log('=== 해석 저장고 저장 디버깅 끝 ===');\n          \n          // 백엔드에 하이라이트도 저장 (나아가기와 동일한 로직)\n          if (selectedThread?.id) {\n            for (const sentenceId of selectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'interpretation'\n                });\n              } catch (error) {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              }\n            }\n          }\n          \n          // 성공 시 로컬 상태 업데이트 (나아가기와 동일한 방식)\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          \n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만) - 메모 저장고 정보 포함\n          const bottomSentenceText = selectedTexts[selectedTexts.length - 1];\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            thread_id: selectedThread?.id,\n            thread_type: 'interpretation',\n            content: '',\n            sentence_content: bottomSentenceText,\n            source_message_id: `interpretation_${personaId}`\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread?.id) {\n          selectedIds.forEach(id => {\n            sentenceApi.createHighlight({\n              sentence_id: id,\n                thread_id: selectedThread.id,\n              thread_type: 'interpretation'\n            }).catch(error => {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n          });\n        });\n          }\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        if (selectedIds.length > 0 && selectedThread?.id) {\n          try {\n            console.log('=== 해석 하이라이트 토글 시작 ===');\n            console.log('selectedThread.id:', selectedThread.id);\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n            console.log('사용할 스레드 ID:', selectedThread.id);\n            \n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n              \n              // 로컬 상태에서 하이라이트 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 삭제 중:', id);\n                  await sentenceApi.deleteHighlight(id);\n                  console.log('하이라이트 삭제 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', id, error);\n                }\n              }\n          \n              console.log('모든 선택된 문장의 하이라이트 제거 완료');\n              showCopyToast('하이라이트가 제거되었습니다');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n              \n              // 로컬 상태에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 저장 중:', id);\n                  const saveRequest = {\n              sentence_id: id,\n                    thread_id: selectedThread.id,\n              thread_type: 'interpretation'\n                  };\n                  console.log('하이라이트 저장 요청:', saveRequest);\n                  \n                  const response = await sentenceApi.createHighlight(saveRequest);\n                  console.log('하이라이트 저장 응답:', response);\n                  console.log('하이라이트 저장 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', id, error);\n                }\n              }\n          \n              console.log('모든 선택된 문장에 하이라이트 추가 완료');\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n            \n            console.log('=== 해석 하이라이트 토글 완료 ===');\n          } catch (error) {\n            console.error('=== 해석 하이라이트 토글 실패 ===', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        } else {\n          console.warn('선택된 문장이 없거나 personaId가 없습니다:', { selectedIds, personaId });\n          showCopyToast('선택된 문장이 없습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    console.log('messageContent:', messageContent.substring(0, 100) + '...');\n    \n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    \n    if (!messageContent) {\n      console.error('저장할 메시지 내용이 없습니다');\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: messageContent.length,\n        contentPreview: messageContent.substring(0, 100) + '...'\n      });\n      \n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      \n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      console.log('API 응답:', response);\n      \n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    console.log('=== handleSunAction 완료 ===');\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\n              <div>해석에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#6c757d',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#6c757d\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={onSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 해석에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={interpretation}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={messages}\n            onRefreshThreads={onRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={interpretation}\n      />\n    </Container>\n  );\n};\n\nexport default InterpretationView; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,YAAY,MAA2B,sCAAsC;AACpF,OAAOC,OAAO,MAAM,iCAAiC;AACrD,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,oBAAoB,MAAM,8CAA8C;AAC/E,OAAOC,cAAc,MAAM,wCAAwC;AACnE,SAASC,WAAW,QAAQ,oBAAoB;AAEhD,SAASC,OAAO,QAAQ,0BAA0B;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAqBnD,MAAMC,SAAS,GAAGV,MAAM,CAACW,GAAG;AAC5B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,SAAS;AASf,MAAMG,WAAW,GAAGb,MAAM,CAACW,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GALID,WAAW;AAOjB,MAAME,YAAY,GAAGf,MAAM,CAACW,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACK,GAAA,GAPID,YAAY;AASlB,MAAME,gBAAgB,GAAGjB,MAAM,CAACW,GAAG;AACnC;AACA;AACA;AACA,CAAC;AAACO,GAAA,GAJID,gBAAgB;AAMtB,MAAME,SAAS,GAAGnB,MAAM,CAACW,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAS,GAAA,GAXMD,SAAS;AAYf,MAAME,KAAK,GAAGrB,MAAM,CAACW,GAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeW,KAAK,IAAIA,KAAK,CAACC,IAAI,GAAG,eAAe,GAAG,kBAAkB;AACzE;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAdIH,KAAK;AAgBX,MAAMI,kBAAqD,GAAGA,CAAC;EAC7DC,cAAc;EACdC,WAAW;EACXC,aAAa;EACbC,aAAa;EACbC,SAAS;EACTC,QAAQ;EACRC,2BAA2B;EAC3BC,cAAc;EACdC,SAAS;EACTC,gBAAgB;EAChBC,cAAc,EAAEC;AAClB,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACF,cAAc,EAAEG,iBAAiB,CAAC,GAAG1C,QAAQ,CAAwBwC,kBAAkB,IAAI,IAAI,CAAC;EACvG,MAAMG,eAAe,GAAG1C,MAAM,CAAiB,IAAI,CAAC;EACpD,MAAM2C,eAAe,GAAG3C,MAAM,CAAkB,IAAI,CAAC;EACrD,MAAM,CAAC4C,SAAS,EAAEC,YAAY,CAAC,GAAG9C,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAAC+C,YAAY,EAAEC,eAAe,CAAC,GAAGhD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACiD,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGlD,QAAQ,CAAgB,IAAI,CAAC;;EAEnF;EACA,MAAM,CAACmD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGpD,QAAQ,CAAc,IAAIqD,GAAG,CAAC,CAAC,CAAC;EAClF,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGvD,QAAQ,CAAc,IAAIqD,GAAG,CAAC,CAAC,CAAC;EACxF,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAGzD,QAAQ,CAAyB,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC0D,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG3D,QAAQ,CAAC,KAAK,CAAC;EAEvEE,SAAS,CAAC,MAAM;IACd,IAAIyC,eAAe,CAACiB,OAAO,EAAE;MAC3BjB,eAAe,CAACiB,OAAO,CAACC,SAAS,GAAGlB,eAAe,CAACiB,OAAO,CAACE,YAAY;IAC1E;EACF,CAAC,EAAE,CAAC5B,QAAQ,CAAC,CAAC;;EAEd;EACAhC,SAAS,CAAC,MAAM;IACd,IAAIsC,kBAAkB,EAAE;MACtBuB,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAExB,kBAAkB,CAACyB,EAAE,CAAC;MACpDvB,iBAAiB,CAACF,kBAAkB,CAAC;;MAErC;MACA0B,sBAAsB,CAAC1B,kBAAkB,CAACyB,EAAE,CAAC;IAC/C;EACF,CAAC,EAAE,CAACzB,kBAAkB,CAAC,CAAC;;EAExB;EACA,MAAM0B,sBAAsB,GAAG,MAAOC,QAAgB,IAAK;IACvD,IAAI;MACJJ,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;MACvCD,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEG,QAAQ,CAAC;;MAEhC;MACE,MAAMC,IAAI,GAAG,MAAM3D,WAAW,CAAC4D,qBAAqB,CAACF,QAAQ,CAAC;MAEhEJ,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEM,MAAM,CAACC,IAAI,CAACH,IAAI,CAACZ,KAAK,CAAC,CAACgB,MAAM,EAAE,GAAG,CAAC;MAC3DT,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEI,IAAI,CAACK,UAAU,CAACD,MAAM,EAAE,GAAG,CAAC;;MAEtD;MACIf,QAAQ,CAACW,IAAI,CAACZ,KAAK,CAAC;MACpBD,uBAAuB,CAAC,IAAIF,GAAG,CAACe,IAAI,CAACK,UAAU,CAAC,CAAC;MAEnDV,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;IACzC,CAAC,CAAC,OAAOU,KAAK,EAAE;MAChBX,OAAO,CAACW,KAAK,CAAC,mBAAmB,EAAEA,KAAK,CAAC;MACvC;MACAjB,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZF,uBAAuB,CAAC,IAAIF,GAAG,CAAC,CAAC,CAAC;IACpC;EACF,CAAC;;EAEH;EACA,MAAMsB,aAAa,GAAIC,OAAe,IAAK;IACzC5B,eAAe,CAAC4B,OAAO,CAAC;IACxB9B,YAAY,CAAC,IAAI,CAAC;IAClB+B,UAAU,CAAC,MAAM/B,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;EAC7C,CAAC;;EAED;EACA,MAAMgC,eAAe,GAAG,MAAAA,CAAOC,IAAY,EAAEC,cAAsB,KAAK;IACtE,IAAI;MACF,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACJ,IAAI,CAAC;MACzCJ,aAAa,CAACK,cAAc,CAAC;IAC/B,CAAC,CAAC,OAAON,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B;MACA,IAAI;QACF,MAAMU,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;QACnDF,QAAQ,CAACG,KAAK,GAAGR,IAAI;QACrBK,QAAQ,CAACI,KAAK,CAACC,QAAQ,GAAG,OAAO;QACjCL,QAAQ,CAACI,KAAK,CAACE,IAAI,GAAG,WAAW;QACjCN,QAAQ,CAACI,KAAK,CAACG,GAAG,GAAG,WAAW;QAChCN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,QAAQ,CAAC;QACnCA,QAAQ,CAACU,KAAK,CAAC,CAAC;QAChBV,QAAQ,CAACW,MAAM,CAAC,CAAC;QACjBV,QAAQ,CAACW,WAAW,CAAC,MAAM,CAAC;QAC5BX,QAAQ,CAACO,IAAI,CAACK,WAAW,CAACb,QAAQ,CAAC;QACnCT,aAAa,CAACK,cAAc,CAAC;MAC/B,CAAC,CAAC,OAAOkB,aAAa,EAAE;QACtBnC,OAAO,CAACW,KAAK,CAAC,eAAe,EAAEwB,aAAa,CAAC;QAC7CvB,aAAa,CAAC,OAAO,CAAC;MACxB;IACF;EACF,CAAC;;EAED;EACA,MAAMwB,iBAAiB,GAAG,MAAOC,cAAsB,IAAK;IAC1D,MAAMtB,eAAe,CAACsB,cAAc,EAAE,cAAc,CAAC;EACvD,CAAC;;EAED;EACA,MAAMC,eAAe,GAAIC,YAAoB,IAAK;IAChDpD,sBAAsB,CAACoD,YAAY,CAAC;EACtC,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAG,MAAAA,CAAOD,YAAoB,EAAEE,UAAkB,KAAK;IAC5E,IAAIxE,aAAa,EAAE;MACjB,MAAMyE,OAAO,GAAG,MAAMzE,aAAa,CAACsE,YAAY,EAAEE,UAAU,CAAC;MAC7D,IAAIC,OAAO,EAAE;QACXvD,sBAAsB,CAAC,IAAI,CAAC;QAC5ByB,aAAa,CAAC,cAAc,CAAC;MAC/B,CAAC,MAAM;QACLA,aAAa,CAAC,gBAAgB,CAAC;MACjC;IACF;EACF,CAAC;;EAED;EACA,MAAM+B,gBAAgB,GAAGA,CAAA,KAAM;IAC7BxD,sBAAsB,CAAC,IAAI,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMyD,kBAAkB,GAAIC,UAAkB,IAAK;IACjDxD,oBAAoB,CAACyD,IAAI,IAAI;MAC3B,MAAMC,MAAM,GAAG,IAAIzD,GAAG,CAACwD,IAAI,CAAC;MAC5B,IAAIC,MAAM,CAACC,GAAG,CAACH,UAAU,CAAC,EAAE;QAC1BE,MAAM,CAACE,MAAM,CAACJ,UAAU,CAAC;MAC3B,CAAC,MAAM;QACLE,MAAM,CAACG,GAAG,CAACL,UAAU,CAAC;MACxB;MACA,OAAOE,MAAM;IACf,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,gBAAgB,GAAG,MAAAA,CAAON,UAAkB,EAAEO,IAAY,KAAK;IACnE;IACApD,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC;IACnCD,OAAO,CAACC,GAAG,CAAC,aAAa,EAAE4C,UAAU,CAAC;IACtC7C,OAAO,CAACC,GAAG,CAAC,OAAO,EAAEmD,IAAI,CAAC;IAC1BpD,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEzB,cAAc,CAAC;IAC9CwB,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAEzB,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE0B,EAAE,CAAC;IACtDF,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE3B,SAAS,CAAC;;IAEpC;IACA,IAAI+E,aAAa,GAAG7E,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE0B,EAAE;IAEtC,IAAI,CAACmD,aAAa,IAAI/E,SAAS,EAAE;MAC/B0B,OAAO,CAACC,GAAG,CAAC,uCAAuC,CAAC;MACpD,IAAI;QACF,MAAMqD,eAAe,GAAG,MAAM3G,OAAO,CAAC4G,iBAAiB,CAACjF,SAAS,CAAC;QAClE,IAAIgF,eAAe,CAACjD,IAAI,EAAE;UACxB,MAAMmD,qBAAqB,GAAGF,eAAe,CAACjD,IAAI,CAACoD,MAAM,CAACC,CAAC,IAAIA,CAAC,CAACC,WAAW,KAAK,gBAAgB,CAAC;UAClG,IAAIH,qBAAqB,CAAC/C,MAAM,GAAG,CAAC,EAAE;YACpC;YACA,MAAMmD,YAAY,GAAGJ,qBAAqB,CAACK,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KACnD,IAAIC,IAAI,CAACD,CAAC,CAACE,UAAU,CAAC,CAACC,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAACF,CAAC,CAACG,UAAU,CAAC,CAACC,OAAO,CAAC,CACpE,CAAC,CAAC,CAAC,CAAC;YACJb,aAAa,GAAGO,YAAY,CAAC1D,EAAE;YAC/BF,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEoD,aAAa,CAAC;UAClD;QACF;MACF,CAAC,CAAC,OAAO1C,KAAK,EAAE;QACdX,OAAO,CAACmE,IAAI,CAAC,eAAe,EAAExD,KAAK,CAAC;MACtC;IACF;IAEA,IAAI,CAAC0C,aAAa,EAAE;MAClBrD,OAAO,CAACW,KAAK,CAAC,qBAAqB,CAAC;MACpCC,aAAa,CAAC,mCAAmC,CAAC;MAClD,MAAM,IAAIwD,KAAK,CAAC,oBAAoB,CAAC;IACvC;IAEApE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEoD,aAAa,CAAC;;IAE5C;IACA;;IAEA;IACA,MAAM,CAACgB,SAAS,GAAIC,aAAa,CAAC,GAAGzB,UAAU,CAAC0B,KAAK,CAAC,GAAG,CAAC;IAC1D,IAAIC,eAAe,GAAG,EAAE;IACxB,IAAIhG,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEL,QAAQ,EAAE;MAC5B,MAAM0C,OAAO,GAAGrC,cAAc,CAACL,QAAQ,CAACsG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,SAAS,KAAKA,SAAS,CAAC;MAC5E,IAAIxD,OAAO,EAAE;QACX,MAAM8D,SAAS,GAAG9D,OAAO,CAAC+D,OAAO,CAACL,KAAK,CAAC,QAAQ,CAAC,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACtB,MAAM,CAACqB,CAAC,IAAIA,CAAC,CAACrE,MAAM,GAAG,CAAC,CAAC;QAC9F+D,eAAe,GAAGG,SAAS,CAACK,QAAQ,CAACV,aAAa,CAAC,CAAC,IAAI,EAAE;MAC5D;IACF;IAEAtE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEuE,eAAe,CAAC;IAE1C,IAAI;MACF;MACA,MAAMS,WAAW,GAAG;QAClBC,WAAW,EAAErC,UAAU;QACvBsC,SAAS,EAAE9B,aAAa;QAAE;QAC1BM,WAAW,EAAE,gBAAgB;QAC7BiB,OAAO,EAAExB,IAAI;QACbgC,gBAAgB,EAAEZ,eAAe;QACjCa,iBAAiB,EAAE,kBAAkB/G,SAAS;MAChD,CAAC;MAED0B,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEgF,WAAW,CAAC;;MAEzC;MACA,IAAI7B,IAAI,CAAC2B,IAAI,CAAC,CAAC,EAAE;QACf,MAAMO,gBAAgB,GAAG;UACvBC,YAAY,EAAEnC,IAAI;UAClBgC,gBAAgB,EAAEZ,eAAe;UACjCa,iBAAiB,EAAE,kBAAkB/G,SAAS,EAAE;UAChDkH,sBAAsB,EAAEnC,aAAa;UACrCoC,gBAAgB,EAAEpC,aAAa;UAC/BqC,kBAAkB,EAAE,gBAAgB;UACpCC,kBAAkB,EAAE9C,UAAU;UAC9B+C,IAAI,EAAE,CAAC,gBAAgB,EAAEtH,SAAS;QACpC,CAAC;QAED0B,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEqF,gBAAgB,CAAC;QAE9C,IAAI;UACF,MAAM5I,WAAW,CAACmJ,eAAe,CAACP,gBAAgB,CAAC;UACnDtF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;QAC7B,CAAC,CAAC,OAAO6F,UAAU,EAAE;UACnB9F,OAAO,CAACmE,IAAI,CAAC,4BAA4B,EAAE2B,UAAU,CAAC;QACxD;MACF;;MAEA;MACA,MAAMpJ,WAAW,CAACqJ,kBAAkB,CAACd,WAAW,CAAC;;MAEjD;MACAvF,QAAQ,CAACoD,IAAI,KAAK;QAChB,GAAGA,IAAI;QACP,CAACD,UAAU,GAAGO;MAChB,CAAC,CAAC,CAAC;MAEHpD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAC1BW,aAAa,CAAC,aAAa,CAAC;IAC9B,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCC,aAAa,CAAC,eAAe,CAAC;MAC9B,MAAMD,KAAK,CAAC,CAAC;IACf;IAEAX,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;EACvC,CAAC;EAED,MAAM+F,gBAAgB,GAAG,MAAOnD,UAAkB,IAAK;IACrD,IAAI;MACF;MACAnD,QAAQ,CAACoD,IAAI,IAAI;QACf,MAAMmD,QAAQ,GAAG;UAAE,GAAGnD;QAAK,CAAC;QAC5B,OAAOmD,QAAQ,CAACpD,UAAU,CAAC;QAC3B,OAAOoD,QAAQ;MACjB,CAAC,CAAC;MACFzG,uBAAuB,CAACsD,IAAI,IAAI;QAC9B,MAAMC,MAAM,GAAG,IAAIzD,GAAG,CAACwD,IAAI,CAAC;QAC5BC,MAAM,CAACE,MAAM,CAACJ,UAAU,CAAC;QACzB,OAAOE,MAAM;MACf,CAAC,CAAC;;MAEF;MACArG,WAAW,CAACwJ,UAAU,CAACrD,UAAU,CAAC,CAACsD,KAAK,CAACxF,KAAK,IAAI;QAChDX,OAAO,CAACmE,IAAI,CAAC,2BAA2B,EAAExD,KAAK,CAAC;MAClD,CAAC,CAAC;MAEFC,aAAa,CAAC,aAAa,CAAC;IAC9B,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjCC,aAAa,CAAC,eAAe,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMwF,gBAAgB,GAAG,MAAOC,MAAwE,IAAK;IAC3G,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAACpH,iBAAiB,CAAC;IACjD,MAAMqH,aAAa,GAAGH,WAAW,CAACzB,GAAG,CAAC3E,EAAE,IAAI;MAC1C;MACA,MAAM,CAACmE,SAAS,GAAIC,aAAa,CAAC,GAAGpE,EAAE,CAACqE,KAAK,CAAC,GAAG,CAAC;MAClD,MAAM1D,OAAO,GAAGrC,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEL,QAAQ,CAACsG,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACL,SAAS,KAAKA,SAAS,CAAC;MAC7E,IAAIxD,OAAO,EAAE;QACX,MAAM8D,SAAS,GAAG9D,OAAO,CAAC+D,OAAO,CAACL,KAAK,CAAC,QAAQ,CAAC,CAACM,GAAG,CAACC,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACtB,MAAM,CAACqB,CAAC,IAAIA,CAAC,CAACrE,MAAM,GAAG,CAAC,CAAC;QAC9F,OAAOkE,SAAS,CAACK,QAAQ,CAACV,aAAa,CAAC,CAAC,IAAI,EAAE;MACjD;MACA,OAAO,EAAE;IACX,CAAC,CAAC,CAACb,MAAM,CAACzC,IAAI,IAAIA,IAAI,CAACP,MAAM,GAAG,CAAC,CAAC;IAElC,QAAQ4F,MAAM;MACZ,KAAK,aAAa;QAChB,IAAIxH,eAAe,CAACgB,OAAO,IAAI4G,aAAa,CAAChG,MAAM,GAAG,CAAC,EAAE;UACvD,MAAMiG,aAAa,GAAGD,aAAa,CAAC5B,GAAG,CAAC7D,IAAI,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC2F,IAAI,CAAC,IAAI,CAAC;UACvE9H,eAAe,CAACgB,OAAO,CAAC+G,UAAU,CAACF,aAAa,CAAC;QACnD;QACA;MAEF,KAAK,aAAa;QAChB,IAAI;UACF,IAAI,CAACpI,SAAS,EAAE;YACdsC,aAAa,CAAC,oBAAoB,CAAC;YACnC;UACF;;UAEA;UACA,MAAMiG,eAA0B,GAAG,EAAE;UACrC,MAAMC,eAAkC,GAAG,EAAE;UAC7C,MAAMC,YAA+B,GAAG,EAAE;UAE1C,KAAK,MAAMlE,UAAU,IAAIyD,WAAW,EAAE;YACpC,MAAMU,aAAa,GAAGzH,oBAAoB,CAACyD,GAAG,CAACH,UAAU,CAAC;YAC1D,MAAMoE,WAAW,GAAGxH,KAAK,CAACoD,UAAU,CAAC,IAAI,IAAI;YAE7CgE,eAAe,CAACK,IAAI,CAACF,aAAa,CAAC;YACnCF,eAAe,CAACI,IAAI,CAACF,aAAa,GAAG,QAAQ,GAAG,IAAI,CAAC;YACrDD,YAAY,CAACG,IAAI,CAACD,WAAW,CAAC;UAChC;;UAEA;UACA,MAAM7G,QAAQ,GAAG,CAAA5B,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE0B,EAAE,KAAI,kBAAkB5B,SAAS,IAAI0F,IAAI,CAACmD,GAAG,CAAC,CAAC,EAAE;UAElFnH,OAAO,CAACC,GAAG,CAAC,uBAAuB,CAAC;UACpCD,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE3B,SAAS,CAAC;UACpC0B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEzB,cAAc,CAAC;UAC9CwB,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEG,QAAQ,CAAC;UACtCJ,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEwG,aAAa,CAAC;UAC5CzG,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEqG,WAAW,CAAC;UAExC,MAAM5J,WAAW,CAAC0K,oBAAoB,CAAC;YACrCzC,SAAS,EAAE8B,aAAa;YACxBpB,iBAAiB,EAAE,kBAAkB/G,SAAS,EAAE;YAChDkH,sBAAsB,EAAEpF,QAAQ;YAChCqF,gBAAgB,EAAErF,QAAQ;YAC1BsF,kBAAkB,EAAE,gBAAgB;YACpC2B,mBAAmB,EAAEf,WAAW;YAChCV,IAAI,EAAE,CAAC,gBAAgB,EAAEtH,SAAS,CAAC;YACnCgJ,gBAAgB,EAAET,eAAe;YACjCU,gBAAgB,EAAET,eAAe;YACjCU,aAAa,EAAET;UACjB,CAAC,CAAC;UAEF/G,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;UAC3BD,OAAO,CAACC,GAAG,CAAC,yBAAyB,CAAC;;UAEtC;UACA,IAAIzB,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAE0B,EAAE,EAAE;YACtB,KAAK,MAAM2C,UAAU,IAAIyD,WAAW,EAAE;cACpC,IAAI;gBACF,MAAM5J,WAAW,CAAC+K,eAAe,CAAC;kBAChCvC,WAAW,EAAErC,UAAU;kBACvBsC,SAAS,EAAE3G,cAAc,CAAC0B,EAAE;kBAC5ByD,WAAW,EAAE;gBACf,CAAC,CAAC;cACJ,CAAC,CAAC,OAAOhD,KAAK,EAAE;gBACdX,OAAO,CAACmE,IAAI,CAAC,kBAAkB,EAAExD,KAAK,CAAC;cACzC;YACF;UACF;;UAEA;UACAnB,uBAAuB,CAACsD,IAAI,IAAI,IAAIxD,GAAG,CAAC,CAAC,GAAGiH,KAAK,CAACC,IAAI,CAAC1D,IAAI,CAAC,EAAE,GAAGwD,WAAW,CAAC,CAAC,CAAC;UAE/E1F,aAAa,CAAC,+BAA+B,CAAC;QAChD,CAAC,CAAC,OAAOD,KAAK,EAAE;UACdX,OAAO,CAACW,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UAClCC,aAAa,CAAC,gBAAgB,CAAC;QACjC;QACA;MAEF,KAAK,SAAS;QACZ,IAAI0F,WAAW,CAAC7F,MAAM,GAAG,CAAC,EAAE;UAC1B;UACA,MAAMiH,SAAS,GAAGpB,WAAW,CAACzC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;YAC3C,MAAM,CAAC4D,UAAU,GAAIC,cAAc,CAAC,GAAG9D,CAAC,CAACS,KAAK,CAAC,GAAG,CAAC;YACnD,MAAM,CAACsD,UAAU,GAAIC,cAAc,CAAC,GAAG/D,CAAC,CAACQ,KAAK,CAAC,GAAG,CAAC;YAEnD,IAAIoD,UAAU,KAAKE,UAAU,EAAE;cAC7B,OAAO,IAAI7D,IAAI,CAAC2D,UAAU,CAAC,CAACzD,OAAO,CAAC,CAAC,GAAG,IAAIF,IAAI,CAAC6D,UAAU,CAAC,CAAC3D,OAAO,CAAC,CAAC;YACxE;YACA,OAAOc,QAAQ,CAAC4C,cAAc,CAAC,GAAG5C,QAAQ,CAAC8C,cAAc,CAAC;UAC5D,CAAC,CAAC;UAEF,MAAMC,gBAAgB,GAAGL,SAAS,CAACA,SAAS,CAACjH,MAAM,GAAG,CAAC,CAAC;;UAExD;UACAf,QAAQ,CAACoD,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE,CAACiF,gBAAgB,GAAG;UAAG,CAAC,CAAC,CAAC;;UAEvD;UACAvI,uBAAuB,CAACsD,IAAI,IAAI;YAC9B,MAAMC,MAAM,GAAG,IAAIzD,GAAG,CAACwD,IAAI,CAAC;YAC5BwD,WAAW,CAAC0B,OAAO,CAAC9H,EAAE,IAAI6C,MAAM,CAACG,GAAG,CAAChD,EAAE,CAAC,CAAC;YACzC,OAAO6C,MAAM;UACf,CAAC,CAAC;;UAEF;UACA,MAAMkF,kBAAkB,GAAGxB,aAAa,CAACA,aAAa,CAAChG,MAAM,GAAG,CAAC,CAAC;UAClE/D,WAAW,CAACqJ,kBAAkB,CAAC;YAC7Bb,WAAW,EAAE6C,gBAAgB;YAC7B5C,SAAS,EAAE3G,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAE0B,EAAE;YAC7ByD,WAAW,EAAE,gBAAgB;YAC7BiB,OAAO,EAAE,EAAE;YACXQ,gBAAgB,EAAE6C,kBAAkB;YACpC5C,iBAAiB,EAAE,kBAAkB/G,SAAS;UAChD,CAAC,CAAC,CAAC6H,KAAK,CAACxF,KAAK,IAAI;YAChBX,OAAO,CAACmE,IAAI,CAAC,2BAA2B,EAAExD,KAAK,CAAC;UAClD,CAAC,CAAC;;UAEF;UACA,IAAInC,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAE0B,EAAE,EAAE;YACxBoG,WAAW,CAAC0B,OAAO,CAAC9H,EAAE,IAAI;cACxBxD,WAAW,CAAC+K,eAAe,CAAC;gBAC1BvC,WAAW,EAAEhF,EAAE;gBACbiF,SAAS,EAAE3G,cAAc,CAAC0B,EAAE;gBAC9ByD,WAAW,EAAE;cACf,CAAC,CAAC,CAACwC,KAAK,CAACxF,KAAK,IAAI;gBAChBX,OAAO,CAACmE,IAAI,CAAC,kBAAkB,EAAExD,KAAK,CAAC;cAC3C,CAAC,CAAC;YACJ,CAAC,CAAC;UACA;UAEAX,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QACrD;QACA;MAEF,KAAK,WAAW;QACd,IAAIqG,WAAW,CAAC7F,MAAM,GAAG,CAAC,IAAIjC,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAE0B,EAAE,EAAE;UAChD,IAAI;YACFF,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;YACrCD,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEzB,cAAc,CAAC0B,EAAE,CAAC;YACxDF,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEqG,WAAW,CAAC;;YAEpC;YACA,MAAM4B,oBAAoB,GAAG5B,WAAW,CAAC7C,MAAM,CAACvD,EAAE,IAAIX,oBAAoB,CAACyD,GAAG,CAAC9C,EAAE,CAAC,CAAC;YACnF,MAAMiI,cAAc,GAAG7B,WAAW,CAAC7C,MAAM,CAACvD,EAAE,IAAI,CAACX,oBAAoB,CAACyD,GAAG,CAAC9C,EAAE,CAAC,CAAC;YAE9EF,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEiI,oBAAoB,CAAC;YACnDlI,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAEkI,cAAc,CAAC;YAE7CnI,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEzB,cAAc,CAAC0B,EAAE,CAAC;YAEjD,IAAIgI,oBAAoB,CAACzH,MAAM,GAAG,CAAC,EAAE;cACnC;cACIT,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;;cAE/B;cACJT,uBAAuB,CAACsD,IAAI,IAAI;gBAC9B,MAAMC,MAAM,GAAG,IAAIzD,GAAG,CAACwD,IAAI,CAAC;gBAC5BwD,WAAW,CAAC0B,OAAO,CAAC9H,EAAE,IAAI6C,MAAM,CAACE,MAAM,CAAC/C,EAAE,CAAC,CAAC;gBAC5C,OAAO6C,MAAM;cACf,CAAC,CAAC;;cAEF;cACI,KAAK,MAAM7C,EAAE,IAAIoG,WAAW,EAAE;gBAC5B,IAAI;kBACFtG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,EAAE,CAAC;kBAC9B,MAAMxD,WAAW,CAAC0L,eAAe,CAAClI,EAAE,CAAC;kBACrCF,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,EAAE,CAAC;gBACjC,CAAC,CAAC,OAAOS,KAAK,EAAE;kBACdX,OAAO,CAACmE,IAAI,CAAC,kBAAkB,EAAEjE,EAAE,EAAES,KAAK,CAAC;gBAC7C;cACF;cAEAX,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;cACrCW,aAAa,CAAC,gBAAgB,CAAC;YACrC,CAAC,MAAM;cACL;cACIZ,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC;;cAE9B;cACJT,uBAAuB,CAACsD,IAAI,IAAI;gBAC9B,MAAMC,MAAM,GAAG,IAAIzD,GAAG,CAACwD,IAAI,CAAC;gBAC5BwD,WAAW,CAAC0B,OAAO,CAAC9H,EAAE,IAAI6C,MAAM,CAACG,GAAG,CAAChD,EAAE,CAAC,CAAC;gBACzC,OAAO6C,MAAM;cACf,CAAC,CAAC;;cAEF;cACI,KAAK,MAAM7C,EAAE,IAAIoG,WAAW,EAAE;gBAC5B,IAAI;kBACFtG,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEC,EAAE,CAAC;kBAC9B,MAAMmI,WAAW,GAAG;oBACxBnD,WAAW,EAAEhF,EAAE;oBACTiF,SAAS,EAAE3G,cAAc,CAAC0B,EAAE;oBAClCyD,WAAW,EAAE;kBACT,CAAC;kBACD3D,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEoI,WAAW,CAAC;kBAExC,MAAMC,QAAQ,GAAG,MAAM5L,WAAW,CAAC+K,eAAe,CAACY,WAAW,CAAC;kBAC/DrI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEqI,QAAQ,CAAC;kBACrCtI,OAAO,CAACC,GAAG,CAAC,cAAc,EAAEC,EAAE,CAAC;gBACjC,CAAC,CAAC,OAAOS,KAAK,EAAE;kBACdX,OAAO,CAACmE,IAAI,CAAC,kBAAkB,EAAEjE,EAAE,EAAES,KAAK,CAAC;gBAC7C;cACF;cAEAX,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;cACrCW,aAAa,CAAC,gBAAgB,CAAC;YACjC;YAEAZ,OAAO,CAACC,GAAG,CAAC,wBAAwB,CAAC;UACvC,CAAC,CAAC,OAAOU,KAAK,EAAE;YACdX,OAAO,CAACW,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;YAC9CC,aAAa,CAAC,kBAAkB,CAAC;UACnC;QACF,CAAC,MAAM;UACLZ,OAAO,CAACmE,IAAI,CAAC,8BAA8B,EAAE;YAAEmC,WAAW;YAAEhI;UAAU,CAAC,CAAC;UACxEsC,aAAa,CAAC,cAAc,CAAC;QAC/B;QACA;MAEF,KAAK,MAAM;QACT,IAAI6F,aAAa,CAAChG,MAAM,GAAG,CAAC,EAAE;UAC5BM,eAAe,CAAC0F,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC,EAAE,iBAAiB,CAAC;QAC7D;QACA;IACJ;;IAEA;IACAtH,oBAAoB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EACjC,CAAC;;EAED;EACA,MAAMiJ,wBAAwB,GAAGA,CAAA,KAAM;IACrC3I,uBAAuB,CAACkD,IAAI,IAAI,CAACA,IAAI,CAAC;EACxC,CAAC;;EAED;EACA,MAAM0F,eAAe,GAAG,MAAOnG,cAAsB,IAAK;IACxD;IACArC,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;IACzCD,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE3B,SAAS,CAAC;IACpC0B,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEoC,cAAc,CAACoG,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG,KAAK,CAAC;IAExE,IAAI,CAACnK,SAAS,EAAE;MACd0B,OAAO,CAACW,KAAK,CAAC,iBAAiB,CAAC;MAChCC,aAAa,CAAC,oBAAoB,CAAC;MACnC;IACF;IAEA,IAAI,CAACyB,cAAc,EAAE;MACnBrC,OAAO,CAACW,KAAK,CAAC,kBAAkB,CAAC;MACjCC,aAAa,CAAC,kBAAkB,CAAC;MACjC;IACF;IAEA,IAAI;MACFZ,OAAO,CAACC,GAAG,CAAC,YAAY,EAAE;QACxB3B,SAAS;QACToK,aAAa,EAAErG,cAAc,CAAC5B,MAAM;QACpCkI,cAAc,EAAEtG,cAAc,CAACoG,SAAS,CAAC,CAAC,EAAE,GAAG,CAAC,GAAG;MACrD,CAAC,CAAC;;MAEF;MACA,MAAM;QAAE9L;MAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC;MAC5DqD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;MAE1B,MAAMqI,QAAQ,GAAG,MAAM3L,OAAO,CAACiM,2BAA2B,CAACtK,SAAS,EAAE+D,cAAc,CAAC;MACrFrC,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEqI,QAAQ,CAAC;MAEhC,IAAIA,QAAQ,CAACjI,IAAI,IAAIiI,QAAQ,CAACjI,IAAI,CAACwI,UAAU,IAAIP,QAAQ,CAACjI,IAAI,CAACvC,cAAc,EAAE;QAC7EkC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAEqI,QAAQ,CAACjI,IAAI,CAAC;QACvC;QACA,IAAI9B,gBAAgB,EAAE;UACpByB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC1B1B,gBAAgB,CAAC,CAAC;UAClByB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;QAC5B;QACAW,aAAa,CAAC,sBAAsB,CAAC;MACvC,CAAC,MAAM,IAAI0H,QAAQ,CAAC3H,KAAK,EAAE;QACzBX,OAAO,CAACW,KAAK,CAAC,SAAS,EAAE2H,QAAQ,CAAC3H,KAAK,CAAC;QACxCC,aAAa,CAAC,kBAAkB0H,QAAQ,CAAC3H,KAAK,EAAE,CAAC;MACnD,CAAC,MAAM;QACLX,OAAO,CAACW,KAAK,CAAC,eAAe,EAAE2H,QAAQ,CAAC;QACxC;QACA,IAAIA,QAAQ,CAACjI,IAAI,EAAE;UACjBL,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;UAC/B,IAAI1B,gBAAgB,EAAE;YACpByB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;YAC1B1B,gBAAgB,CAAC,CAAC;YAClByB,OAAO,CAACC,GAAG,CAAC,aAAa,CAAC;UAC5B;UACAW,aAAa,CAAC,sBAAsB,CAAC;QACvC,CAAC,MAAM;UACLA,aAAa,CAAC,eAAe,CAAC;QAChC;MACF;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,gBAAgB,EAAEA,KAAK,CAAC;MACtCC,aAAa,CAAC,kBAAkBD,KAAK,YAAYyD,KAAK,GAAGzD,KAAK,CAACE,OAAO,GAAGiI,MAAM,CAACnI,KAAK,CAAC,EAAE,CAAC;IAC3F;IAEAX,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC;EAC3C,CAAC;EAED,MAAM8I,kBAAkB,GAAG,MAAO1G,cAAsB,IAAK;IAC3D;IACA,IAAI,CAAC/D,SAAS,EAAE;IAEhB,IAAI,CAAC+D,cAAc,EAAE;MACnBzB,aAAa,CAAC,kBAAkB,CAAC;MACjC;IACF;IAEA,IAAI;MACF;MACA,MAAM;QAAEjE;MAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC;MAC5D,MAAM2L,QAAQ,GAAG,MAAM3L,OAAO,CAACqM,oBAAoB,CAAC1K,SAAS,EAAE+D,cAAc,CAAC;MAE9E,IAAIiG,QAAQ,CAACjI,IAAI,EAAE;QACjB;QACA,IAAI9B,gBAAgB,EAAE;UACpBA,gBAAgB,CAAC,CAAC;QACpB;QACAqC,aAAa,CAAC,wBAAwB,CAAC;MACzC,CAAC,MAAM;QACLA,aAAa,CAAC,iBAAiB,CAAC;MAClC;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,eAAe,EAAEA,KAAK,CAAC;MACrCC,aAAa,CAAC,iBAAiB,CAAC;IAClC;EACF,CAAC;EAED,MAAMqI,oBAAoB,GAAG,MAAO5G,cAAsB,IAAK;IAC7D;IACA,IAAI,CAAC/D,SAAS,EAAE;IAEhB,IAAI,CAAC+D,cAAc,EAAE;MACnBzB,aAAa,CAAC,kBAAkB,CAAC;MACjC;IACF;IAEA,IAAI;MACF;MACA,MAAM;QAAEjE;MAAQ,CAAC,GAAG,MAAM,MAAM,CAAC,0BAA0B,CAAC;MAC5D,MAAM2L,QAAQ,GAAG,MAAM3L,OAAO,CAACuM,qBAAqB,CAAC5K,SAAS,EAAE+D,cAAc,CAAC;MAE/E,IAAIiG,QAAQ,CAACjI,IAAI,EAAE;QACjB;QACA,IAAI9B,gBAAgB,EAAE;UACpBA,gBAAgB,CAAC,CAAC;QACpB;QACAqC,aAAa,CAAC,sBAAsB,CAAC;MACvC,CAAC,MAAM;QACLA,aAAa,CAAC,eAAe,CAAC;MAChC;IACF,CAAC,CAAC,OAAOD,KAAK,EAAE;MACdX,OAAO,CAACW,KAAK,CAAC,aAAa,EAAEA,KAAK,CAAC;MACnCC,aAAa,CAAC,eAAe,CAAC;IAChC;EACF,CAAC;EAED,oBACE/D,OAAA,CAACC,SAAS;IAAAqM,QAAA,gBACRtM,OAAA,CAACY,KAAK;MAACE,IAAI,EAAEmB,SAAU;MAAAqK,QAAA,EACpBnK;IAAY;MAAAoK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAER1M,OAAA,CAACI,WAAW;MAAAkM,QAAA,gBACVtM,OAAA,CAACM,YAAY;QAACqM,GAAG,EAAE5K,eAAgB;QAAAuK,QAAA,GAChC,CAAC3K,cAAc,IAAIA,cAAc,CAACL,QAAQ,CAACsC,MAAM,KAAK,CAAC,gBACtD5D,OAAA,CAACU,SAAS;UAAA4L,QAAA,gBACRtM,OAAA;YAAK4E,KAAK,EAAE;cAAEgI,QAAQ,EAAE,MAAM;cAAEC,YAAY,EAAE;YAAM,CAAE;YAAAP,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/D1M,OAAA;YAAAsM,QAAA,EAAK;UAAmB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC9B1M,OAAA;YAAK4E,KAAK,EAAE;cAAEgI,QAAQ,EAAE,MAAM;cAAEE,SAAS,EAAE;YAAM,CAAE;YAAAR,QAAA,GAChDpL,WAAW,EAAC,wEACf;UAAA;YAAAqL,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,GAEZ/K,cAAc,CAACL,QAAQ,CAAC0G,GAAG,CAAC,CAAChE,OAAO,EAAE+I,KAAK,KACzC/I,OAAO,CAACgJ,IAAI,KAAK,MAAM,gBACrBhN,OAAA,CAACP,OAAO;UAENuE,OAAO,EAAE;YACP,GAAGA,OAAO;YACVgI,UAAU,EAAEiB,SAAS;YACrBC,YAAY,EAAED;UAChB,CAAE;UACFE,QAAQ,EAAE,CAAC,CAAE;UACbC,iBAAiB,EAAE,IAAK;UACxBC,MAAM,EAAEA,CAAA,KAAM9H,iBAAiB,CAACvB,OAAO,CAAC+D,OAAO,CAAE;UACjDuF,MAAM,EAAEA,CAAA,KAAM7H,eAAe,CAACsH,KAAK,CAAE;UACrCQ,SAAS,EAAElL,mBAAmB,KAAK0K,KAAM;UACzCS,UAAU,EAAG5H,UAAU,IAAKD,iBAAiB,CAACoH,KAAK,EAAEnH,UAAU,CAAE;UACjE6H,YAAY,EAAE3H;QAAiB,GAZ1B,kBAAkBiH,KAAK,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAa/B,CAAC,gBAEF1M,OAAA,CAACN,iBAAiB;UAEhBsE,OAAO,EAAE;YACP,GAAGA,OAAO;YACVgI,UAAU,EAAE,iBAAiB;YAC7BkB,YAAY,EAAEhM;UAChB,CAAE;UACFiM,QAAQ,EAAE;YACRO,eAAe,EAAE;cACfC,IAAI,EAAEzM,WAAW;cACjB0M,WAAW,EAAE,EAAE;cACfC,KAAK,EAAE,SAAS;cAChBC,MAAM,EAAE,EAAE;cACVC,QAAQ,EAAE,EAAE;cACZC,WAAW,EAAE;YACf;UACF,CAAE;UACFzL,iBAAiB,EAAEO,oBAAoB,GAAGP,iBAAiB,GAAG,IAAIE,GAAG,CAAC,CAAE;UACxEC,oBAAoB,EAAEA,oBAAqB;UAC3CE,KAAK,EAAEA,KAAM;UACbqL,cAAc,EAAEnL,oBAAoB,GAAGiD,kBAAkB,GAAG,MAAM,CAAC,CAAE;UACrEmI,YAAY,EAAE5H,gBAAiB;UAC/B6H,YAAY,EAAEhF,gBAAiB;UAC/BiF,oBAAoB,EAAEtL,oBAAqB;UAC3CsK,iBAAiB,EAAE,IAAK;UACxBC,MAAM,EAAEA,CAAA,KAAM9H,iBAAiB,CAACvB,OAAO,CAAC+D,OAAO,CAAE;UACjDsG,WAAW,EAAE1C,eAAgB;UAC7B2C,cAAc,EAAEpC,kBAAmB;UACnCqC,gBAAgB,EAAEnC;QAAqB,GA3BlC,kBAAkBW,KAAK,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA4B/B,CAEL,CACD,EAEArL,SAAS,iBACRrB,OAAA,CAACJ,cAAc;UACbsB,WAAW,EAAEA,WAAY;UACzBsN,YAAY,EAAC;QAAS;UAAAjC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CACF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAAC,eAEf1M,OAAA,CAACQ,gBAAgB;QAAA8L,QAAA,eACftM,OAAA,CAACR,YAAY;UACXmN,GAAG,EAAE3K,eAAgB;UACrBb,aAAa,EAAEA,aAAc;UAC7BsN,QAAQ,EAAEpN,SAAU;UACpBqN,WAAW,EAAE,GAAGxN,WAAW,qBAAsB;UACjDyN,oBAAoB,EAAEjD,wBAAyB;UAC/C5I,oBAAoB,EAAEA,oBAAqB;UAC3C8L,oBAAoB,EAAErM,iBAAiB,CAACsM,IAAI,GAAG,CAAE;UACjDC,qBAAqB,EAAE7N,cAAe;UACtCQ,SAAS,EAAEA,SAAU;UACrBsN,iBAAiB,EAAE7C,kBAAmB;UACtC8C,kBAAkB,EAAE5C,oBAAqB;UACzC6C,mBAAmB,EAAE3N,QAAS;UAC9BI,gBAAgB,EAAEA;QAAiB;UAAA6K,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpC;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACc,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAEd1M,OAAA,CAACL,oBAAoB;MACnBmB,IAAI,EAAEgC,oBAAoB,IAAIP,iBAAiB,CAACsM,IAAI,GAAG,CAAE;MACzDK,YAAY,EAAE3F,gBAAiB;MAC/B9H,SAAS,EAAEA,SAAU;MACrBqN,qBAAqB,EAAE7N;IAAe;MAAAsL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAAC7K,EAAA,CAzvBIb,kBAAqD;AAAAmO,GAAA,GAArDnO,kBAAqD;AA2vB3D,eAAeA,kBAAkB;AAAC,IAAAb,EAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAoO,GAAA;AAAAC,YAAA,CAAAjP,EAAA;AAAAiP,YAAA,CAAA/O,GAAA;AAAA+O,YAAA,CAAA7O,GAAA;AAAA6O,YAAA,CAAA3O,GAAA;AAAA2O,YAAA,CAAAzO,GAAA;AAAAyO,YAAA,CAAArO,GAAA;AAAAqO,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}