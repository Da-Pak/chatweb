{"ast":null,"code":"import { API_BASE_URL } from '../../shared/api/chatApi';\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request) {\n    try {\n      console.log('=== 저장고 저장 시작 ===');\n      console.log('요청 데이터:', request);\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || '저장고 저장 실패');\n      }\n      const result = await response.json();\n      console.log('성공 응답:', result);\n      return result;\n    } catch (error) {\n      console.error('저장고 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getVaultSentences() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteVaultSentence(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n      if (response.status === 404) {\n        return null;\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '메모가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n  async deleteHighlight(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '하이라이트가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 스레드별 메모와 하이라이트 데이터 불러오기\n  async getThreadSentenceData(threadId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/threads/${threadId}/sentence-data`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 문장 데이터 조회 실패');\n      }\n      const result = await response.json();\n      return result || {\n        memos: {},\n        highlights: []\n      };\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 오류:', error);\n      // 실패 시 빈 데이터 반환\n      return {\n        memos: {},\n        highlights: []\n      };\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n}\nexport const sentenceApi = new SentenceApi();","map":{"version":3,"names":["API_BASE_URL","SentenceApi","saveSentencesToVault","request","console","log","response","fetch","method","headers","body","JSON","stringify","status","ok","errorData","json","error","Error","detail","result","getVaultSentences","deleteVaultSentence","sentenceId","createOrUpdateMemo","getMemo","deleteMemo","success","message","createHighlight","deleteHighlight","getThreadSentenceData","threadId","memos","highlights","getAllMemos","getAllHighlights","getThreadHighlights","sentenceApi"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/api/sentenceApi.ts"],"sourcesContent":["import { API_BASE_URL } from '../../shared/api/chatApi';\n\nexport interface SentenceVaultItem {\n  id: string;\n  sentence: string;\n  source_message_id: string;\n  source_conversation_id?: string;\n  created_at: string;\n  tags: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface SentenceVaultRequest {\n  sentences: string[];\n  source_message_id: string;\n  source_conversation_id?: string;\n  tags?: string[];\n}\n\nexport interface SentenceVaultResponse {\n  success: boolean;\n  message: string;\n  saved_items: SentenceVaultItem[];\n}\n\nexport interface SentenceMemo {\n  id: string;\n  sentence_id: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SentenceMemoRequest {\n  sentence_id: string;\n  content: string;\n}\n\nexport interface SentenceMemoResponse {\n  success: boolean;\n  message: string;\n  memo?: SentenceMemo;\n}\n\nexport interface SentenceHighlight {\n  id: string;\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n  created_at: string;\n}\n\nexport interface SentenceHighlightRequest {\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n}\n\nexport interface SentenceHighlightResponse {\n  success: boolean;\n  message: string;\n  highlight?: SentenceHighlight;\n}\n\nexport interface ThreadSentenceData {\n  memos: Record<string, string>;\n  highlights: string[];\n}\n\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request: SentenceVaultRequest): Promise<SentenceVaultResponse> {\n    try {\n      console.log('=== 저장고 저장 시작 ===');\n      console.log('요청 데이터:', request);\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      \n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || '저장고 저장 실패');\n      }\n\n      const result = await response.json();\n      console.log('성공 응답:', result);\n      return result;\n    } catch (error) {\n      console.error('저장고 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async getVaultSentences(): Promise<SentenceVaultItem[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteVaultSentence(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request: SentenceMemoRequest): Promise<SentenceMemoResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async getMemo(sentenceId: string): Promise<SentenceMemo | null> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n\n      if (response.status === 404) {\n        return null;\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteMemo(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '메모가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request: SentenceHighlightRequest): Promise<SentenceHighlightResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteHighlight(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '하이라이트가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 스레드별 메모와 하이라이트 데이터 불러오기\n  async getThreadSentenceData(threadId: string): Promise<ThreadSentenceData> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/threads/${threadId}/sentence-data`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 문장 데이터 조회 실패');\n      }\n\n      const result = await response.json();\n      return result || { memos: {}, highlights: [] };\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 오류:', error);\n      // 실패 시 빈 데이터 반환\n      return { memos: {}, highlights: [] };\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos(): Promise<Record<string, string>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights(): Promise<Record<string, string[]>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n}\n\nexport const sentenceApi = new SentenceApi(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}