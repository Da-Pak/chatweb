{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\shared\\\\components\\\\TrainingChatView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from './MessageInput';\nimport Message from './Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport FloatingActionButton from './FloatingActionButton';\nimport LoadingMessage from './LoadingMessage';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ContextSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\n_c2 = ContextSection;\nconst ContextTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n_c3 = ContextTitle;\nconst ContextContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\n_c4 = ContextContent;\nconst RefreshButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\n_c5 = RefreshButton;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c6 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c7 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c8 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n_c9 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c0 = Toast;\nconst TrainingChatView = ({\n  personaId,\n  personaName,\n  contextContent,\n  contextType,\n  messages,\n  isLoading,\n  onSendMessage,\n  onEditMessage,\n  onGenerateNewContent,\n  onSwitchToMode,\n  threads,\n  selectedThread,\n  onThreadUpdate\n}) => {\n  _s();\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `${contextType}_chat`,\n            source_conversation_id: undefined,\n            tags: [contextType]\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        selectedIds.forEach(id => {\n          setMemos(prev => ({\n            ...prev,\n            [id]: ''\n          }));\n          setHighlightedSentences(prev => new Set(prev).add(id));\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: id,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n        });\n        break;\n      case 'highlight':\n        selectedIds.forEach(id => {\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            if (newSet.has(id)) {\n              newSet.delete(id);\n            } else {\n              newSet.add(id);\n            }\n            return newSet;\n          });\n        });\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n      case 'generateProceed':\n        if (onSwitchToMode) {\n          onSwitchToMode('proceed');\n        }\n        break;\n      case 'generateSentence':\n        if (onSwitchToMode) {\n          onSwitchToMode('sentence');\n        }\n        break;\n    }\n    setSelectedSentences(new Set());\n  };\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  const handleSunAction = async () => {\n    if (onGenerateNewContent) {\n      onGenerateNewContent();\n    }\n  };\n  const handlePersonAction = async () => {\n    if (onSwitchToMode) {\n      onSwitchToMode('proceed');\n    }\n  };\n  const handleDocumentAction = async () => {\n    if (onSwitchToMode) {\n      onSwitchToMode('sentence');\n    }\n  };\n  const getContextTitle = () => {\n    switch (contextType) {\n      case 'interpretation':\n        return '📝 해석';\n      case 'proceed':\n        return '🚀 나아가기';\n      case 'sentence':\n        return '📖 문장';\n      default:\n        return '💬 채팅';\n    }\n  };\n  const getEmptyMessage = () => {\n    switch (contextType) {\n      case 'interpretation':\n        return '해석에 대해 더 자세히 질문해보세요';\n      case 'proceed':\n        return '나아가기 방향에 대해 질문해보세요';\n      case 'sentence':\n        return '문장에 대해 질문하거나 개선 요청을 해보세요';\n      default:\n        return '질문을 입력해보세요';\n    }\n  };\n  const getPlaceholder = () => {\n    switch (contextType) {\n      case 'interpretation':\n        return `${personaName}에게 해석에 대해 질문해보세요...`;\n      case 'proceed':\n        return `${personaName}에게 나아가기에 대해 질문해보세요...`;\n      case 'sentence':\n        return `${personaName}에게 문장에 대해 질문해보세요...`;\n      default:\n        return `${personaName}에게 질문해보세요...`;\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 450,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContextSection, {\n      children: [/*#__PURE__*/_jsxDEV(ContextTitle, {\n        children: [getContextTitle(), onGenerateNewContent && /*#__PURE__*/_jsxDEV(RefreshButton, {\n          onClick: onGenerateNewContent,\n          title: \"\\uC0C8\\uB85C \\uC0DD\\uC131\",\n          children: \"\\uD83D\\uDD04\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 458,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 455,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ContextContent, {\n        children: contextContent\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 463,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCAC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 472,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: getEmptyMessage()\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 473,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 474,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 471,\n          columnNumber: 13\n        }, this) : messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `${contextType}_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 481,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#6c757d',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `${contextType}_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 497,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#6c757d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 532,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 469,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: onSendMessage,\n          disabled: isLoading,\n          placeholder: getPlaceholder(),\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: contextContent,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 540,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 468,\n      columnNumber: 7\n    }, this), isSentenceModeActive && selectedSentences.size > 0 && /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      selectedCount: selectedSentences.size,\n      onMenuAction: handleMenuAction\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 558,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 449,\n    columnNumber: 5\n  }, this);\n};\n_s(TrainingChatView, \"PpJzrACJfn/PoJ94B3HH84CaeZU=\");\n_c1 = TrainingChatView;\nexport default TrainingChatView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ContextSection\");\n$RefreshReg$(_c3, \"ContextTitle\");\n$RefreshReg$(_c4, \"ContextContent\");\n$RefreshReg$(_c5, \"RefreshButton\");\n$RefreshReg$(_c6, \"ChatSection\");\n$RefreshReg$(_c7, \"ChatMessages\");\n$RefreshReg$(_c8, \"ChatInputSection\");\n$RefreshReg$(_c9, \"EmptyChat\");\n$RefreshReg$(_c0, \"Toast\");\n$RefreshReg$(_c1, \"TrainingChatView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","ContextSection","_c2","ContextTitle","h2","_c3","ContextContent","_c4","RefreshButton","button","_c5","ChatSection","_c6","ChatMessages","_c7","ChatInputSection","_c8","EmptyChat","_c9","Toast","props","show","_c0","TrainingChatView","personaId","personaName","contextContent","contextType","messages","isLoading","onSendMessage","onEditMessage","onGenerateNewContent","onSwitchToMode","threads","selectedThread","onThreadUpdate","_s","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","error","console","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","content","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","action","selectedIds","Array","from","selectedTexts","map","id","timestamp","sentenceIndex","split","find","m","sentences","s","trim","filter","length","parseInt","formattedText","join","insertText","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","handleToggleSentenceMode","handleSunAction","handlePersonAction","handleDocumentAction","getContextTitle","getEmptyMessage","getPlaceholder","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","ref","fontSize","marginBottom","marginTop","index","role","persona_id","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","selectedCount","onMenuAction","_c1","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/shared/components/TrainingChatView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport MessageInput, { MessageInputRef } from './MessageInput';\r\nimport Message from './Message';\r\nimport SelectableMessage from '../../training/components/SelectableMessage';\r\nimport FloatingActionButton from './FloatingActionButton';\r\nimport LoadingMessage from './LoadingMessage';\r\nimport { sentenceApi } from '../../training/api/sentenceApi';\r\nimport { chatApi } from '../api/chatApi';\r\nimport { TrainingThread } from '../types';\r\n\r\ninterface TrainingChatViewProps {\r\n  // 기본 정보\r\n  personaId: string;\r\n  personaName: string;\r\n  \r\n  // 컨텍스트 콘텐츠 (해석, 나아가기, 문장 등)\r\n  contextContent: string;\r\n  contextType: 'interpretation' | 'proceed' | 'sentence';\r\n  \r\n  // 메시지들\r\n  messages: Array<{\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: string;\r\n  }>;\r\n  \r\n  // 상태\r\n  isLoading: boolean;\r\n  \r\n  // 콜백들\r\n  onSendMessage: (message: string) => Promise<boolean>;\r\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\r\n  onGenerateNewContent?: () => void;\r\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed' | 'sentence') => void;\r\n  \r\n  // 스레드 관련 (선택사항)\r\n  threads?: TrainingThread[];\r\n  selectedThread?: TrainingThread | null;\r\n  onThreadUpdate?: (updatedThreads: TrainingThread[]) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background: white;\r\n`;\r\n\r\nconst ContextSection = styled.div`\r\n  padding: 24px;\r\n  border-bottom: 2px solid #e0e0e0;\r\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\r\n  position: relative;\r\n`;\r\n\r\nconst ContextTitle = styled.h2`\r\n  font-size: 20px;\r\n  font-weight: 600;\r\n  color: #333;\r\n  margin-bottom: 16px;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n`;\r\n\r\nconst ContextContent = styled.div`\r\n  background: white;\r\n  border: 1px solid #e0e0e0;\r\n  border-radius: 12px;\r\n  padding: 20px;\r\n  line-height: 1.6;\r\n  color: #555;\r\n  font-size: 14px;\r\n  white-space: pre-line;\r\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\r\n`;\r\n\r\nconst RefreshButton = styled.button`\r\n  position: absolute;\r\n  top: 24px;\r\n  right: 24px;\r\n  background: rgba(108, 117, 125, 0.8);\r\n  border: 1px solid rgba(108, 117, 125, 0.3);\r\n  color: white;\r\n  border-radius: 50%;\r\n  width: 36px;\r\n  height: 36px;\r\n  cursor: pointer;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 18px;\r\n  transition: all 0.2s ease;\r\n  \r\n  &:hover {\r\n    background: rgba(108, 117, 125, 1);\r\n    transform: scale(1.1);\r\n  }\r\n  \r\n  &:active {\r\n    transform: scale(0.95);\r\n  }\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n`;\r\n\r\nconst ChatInputSection = styled.div`\r\n  padding: 16px 20px;\r\n  border-top: none;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst EmptyChat = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #999;\r\n  font-size: 14px;\r\n  text-align: center;\r\n`;\r\n\r\nconst Toast = styled.div<{ show: boolean }>`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  background: #6c757d;\r\n  color: white;\r\n  padding: 12px 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\r\n  transition: transform 0.3s ease;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst TrainingChatView: React.FC<TrainingChatViewProps> = ({\r\n  personaId,\r\n  personaName,\r\n  contextContent,\r\n  contextType,\r\n  messages,\r\n  isLoading,\r\n  onSendMessage,\r\n  onEditMessage,\r\n  onGenerateNewContent,\r\n  onSwitchToMode,\r\n  threads,\r\n  selectedThread,\r\n  onThreadUpdate,\r\n}) => {\r\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\r\n  const messageInputRef = useRef<MessageInputRef>(null);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\r\n  \r\n  // 문장 선택 관련 상태\r\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\r\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\r\n  const [memos, setMemos] = useState<Record<string, string>>({});\r\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\r\n\r\n  useEffect(() => {\r\n    if (chatMessagesRef.current) {\r\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\r\n    }\r\n  }, [messages]);\r\n\r\n  const showCopyToast = (message: string) => {\r\n    setToastMessage(message);\r\n    setShowToast(true);\r\n    setTimeout(() => setShowToast(false), 3000);\r\n  };\r\n\r\n  const copyToClipboard = async (text: string, successMessage: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      showCopyToast(successMessage);\r\n    } catch (error) {\r\n      console.error('복사 실패:', error);\r\n      try {\r\n        const textArea = document.createElement('textarea');\r\n        textArea.value = text;\r\n        textArea.style.position = 'fixed';\r\n        textArea.style.left = '-999999px';\r\n        textArea.style.top = '-999999px';\r\n        document.body.appendChild(textArea);\r\n        textArea.focus();\r\n        textArea.select();\r\n        document.execCommand('copy');\r\n        document.body.removeChild(textArea);\r\n        showCopyToast(successMessage);\r\n      } catch (fallbackError) {\r\n        console.error('대체 복사 방법도 실패:', fallbackError);\r\n        showCopyToast('복사 실패');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCopyMessage = async (messageContent: string) => {\r\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\r\n  };\r\n\r\n  const handleStartEdit = (messageIndex: number) => {\r\n    setEditingMessageIndex(messageIndex);\r\n  };\r\n\r\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\r\n    if (onEditMessage) {\r\n      const success = await onEditMessage(messageIndex, newContent);\r\n      if (success) {\r\n        setEditingMessageIndex(null);\r\n        showCopyToast('메시지가 수정되었습니다');\r\n      } else {\r\n        showCopyToast('메시지 수정에 실패했습니다');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingMessageIndex(null);\r\n  };\r\n\r\n  // 문장 선택 핸들러들\r\n  const handleToggleSelect = (sentenceId: string) => {\r\n    setSelectedSentences(prev => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(sentenceId)) {\r\n        newSet.delete(sentenceId);\r\n      } else {\r\n        newSet.add(sentenceId);\r\n      }\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\r\n    try {\r\n      setMemos(prev => ({\r\n        ...prev,\r\n        [sentenceId]: memo\r\n      }));\r\n      \r\n      sentenceApi.createOrUpdateMemo({\r\n        sentence_id: sentenceId,\r\n        content: memo\r\n      }).catch(error => {\r\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\r\n      });\r\n    } catch (error) {\r\n      console.error('메모 저장 실패:', error);\r\n      showCopyToast('메모 저장에 실패했습니다');\r\n    }\r\n  };\r\n\r\n  const handleDeleteMemo = async (sentenceId: string) => {\r\n    try {\r\n      setMemos(prev => {\r\n        const newMemos = { ...prev };\r\n        delete newMemos[sentenceId];\r\n        return newMemos;\r\n      });\r\n      setHighlightedSentences(prev => {\r\n        const newSet = new Set(prev);\r\n        newSet.delete(sentenceId);\r\n        return newSet;\r\n      });\r\n      \r\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\r\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\r\n      });\r\n      \r\n      showCopyToast('메모가 삭제되었습니다');\r\n    } catch (error) {\r\n      console.error('메모 삭제 실패:', error);\r\n      showCopyToast('메모 삭제에 실패했습니다');\r\n    }\r\n  };\r\n\r\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\r\n    const selectedIds = Array.from(selectedSentences);\r\n    const selectedTexts = selectedIds.map(id => {\r\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\r\n      const message = messages.find(m => m.timestamp === timestamp);\r\n      if (message) {\r\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\r\n        return sentences[parseInt(sentenceIndex)] || '';\r\n      }\r\n      return '';\r\n    }).filter(text => text.length > 0);\r\n\r\n    switch (action) {\r\n      case 'sendToInput':\r\n        if (messageInputRef.current && selectedTexts.length > 0) {\r\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\r\n          messageInputRef.current.insertText(formattedText);\r\n        }\r\n        break;\r\n      \r\n      case 'saveToVault':\r\n        try {\r\n          await sentenceApi.saveSentencesToVault({\r\n            sentences: selectedTexts,\r\n            source_message_id: `${contextType}_chat`,\r\n            source_conversation_id: undefined,\r\n            tags: [contextType]\r\n          });\r\n          selectedIds.forEach(id => {\r\n            setHighlightedSentences(prev => new Set(prev).add(id));\r\n          });\r\n          showCopyToast('저장고에 저장되었습니다');\r\n        } catch (error) {\r\n          console.error('저장고 저장 실패:', error);\r\n          showCopyToast('저장고 저장에 실패했습니다');\r\n        }\r\n        break;\r\n      \r\n      case 'addMemo':\r\n        selectedIds.forEach(id => {\r\n          setMemos(prev => ({ ...prev, [id]: '' }));\r\n          setHighlightedSentences(prev => new Set(prev).add(id));\r\n          \r\n          sentenceApi.createOrUpdateMemo({\r\n            sentence_id: id,\r\n            content: ''\r\n          }).catch(error => {\r\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\r\n          });\r\n        });\r\n        break;\r\n      \r\n      case 'highlight':\r\n        selectedIds.forEach(id => {\r\n          setHighlightedSentences(prev => {\r\n            const newSet = new Set(prev);\r\n            if (newSet.has(id)) {\r\n              newSet.delete(id);\r\n            } else {\r\n              newSet.add(id);\r\n            }\r\n            return newSet;\r\n          });\r\n        });\r\n        break;\r\n      \r\n      case 'copy':\r\n        if (selectedTexts.length > 0) {\r\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\r\n        }\r\n        break;\r\n\r\n      case 'generateProceed':\r\n        if (onSwitchToMode) {\r\n          onSwitchToMode('proceed');\r\n        }\r\n        break;\r\n\r\n      case 'generateSentence':\r\n        if (onSwitchToMode) {\r\n          onSwitchToMode('sentence');\r\n        }\r\n        break;\r\n    }\r\n\r\n    setSelectedSentences(new Set());\r\n  };\r\n\r\n  const handleToggleSentenceMode = () => {\r\n    setIsSentenceModeActive(prev => !prev);\r\n  };\r\n\r\n  const handleSunAction = async () => {\r\n    if (onGenerateNewContent) {\r\n      onGenerateNewContent();\r\n    }\r\n  };\r\n\r\n  const handlePersonAction = async () => {\r\n    if (onSwitchToMode) {\r\n      onSwitchToMode('proceed');\r\n    }\r\n  };\r\n\r\n  const handleDocumentAction = async () => {\r\n    if (onSwitchToMode) {\r\n      onSwitchToMode('sentence');\r\n    }\r\n  };\r\n\r\n  const getContextTitle = () => {\r\n    switch (contextType) {\r\n      case 'interpretation':\r\n        return '📝 해석';\r\n      case 'proceed':\r\n        return '🚀 나아가기';\r\n      case 'sentence':\r\n        return '📖 문장';\r\n      default:\r\n        return '💬 채팅';\r\n    }\r\n  };\r\n\r\n  const getEmptyMessage = () => {\r\n    switch (contextType) {\r\n      case 'interpretation':\r\n        return '해석에 대해 더 자세히 질문해보세요';\r\n      case 'proceed':\r\n        return '나아가기 방향에 대해 질문해보세요';\r\n      case 'sentence':\r\n        return '문장에 대해 질문하거나 개선 요청을 해보세요';\r\n      default:\r\n        return '질문을 입력해보세요';\r\n    }\r\n  };\r\n\r\n  const getPlaceholder = () => {\r\n    switch (contextType) {\r\n      case 'interpretation':\r\n        return `${personaName}에게 해석에 대해 질문해보세요...`;\r\n      case 'proceed':\r\n        return `${personaName}에게 나아가기에 대해 질문해보세요...`;\r\n      case 'sentence':\r\n        return `${personaName}에게 문장에 대해 질문해보세요...`;\r\n      default:\r\n        return `${personaName}에게 질문해보세요...`;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Toast show={showToast}>\r\n        {toastMessage}\r\n      </Toast>\r\n      \r\n      <ContextSection>\r\n        <ContextTitle>\r\n          {getContextTitle()}\r\n          {onGenerateNewContent && (\r\n            <RefreshButton onClick={onGenerateNewContent} title=\"새로 생성\">\r\n              🔄\r\n            </RefreshButton>\r\n          )}\r\n        </ContextTitle>\r\n        <ContextContent>\r\n          {contextContent}\r\n        </ContextContent>\r\n      </ContextSection>\r\n      \r\n      <ChatSection>\r\n        <ChatMessages ref={chatMessagesRef}>\r\n          {messages.length === 0 ? (\r\n            <EmptyChat>\r\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\r\n              <div>{getEmptyMessage()}</div>\r\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\r\n                {personaName}와 대화를 나눌 수 있습니다\r\n              </div>\r\n            </EmptyChat>\r\n          ) : (\r\n            messages.map((message, index) => \r\n              message.role === 'user' ? (\r\n                <Message\r\n                  key={`${contextType}_${index}`}\r\n                  message={{\r\n                    ...message,\r\n                    persona_id: undefined,\r\n                    persona_name: undefined,\r\n                  }}\r\n                  personas={{}}\r\n                  showActionButtons={true}\r\n                  onCopy={() => handleCopyMessage(message.content)}\r\n                  onEdit={() => handleStartEdit(index)}\r\n                  isEditing={editingMessageIndex === index}\r\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\r\n                  onEditCancel={handleCancelEdit}\r\n                />\r\n              ) : (\r\n                <SelectableMessage\r\n                  key={`${contextType}_${index}`}\r\n                  message={{\r\n                    ...message,\r\n                    persona_id: 'current_persona',\r\n                    persona_name: personaName,\r\n                  }}\r\n                  personas={{\r\n                    current_persona: {\r\n                      name: personaName,\r\n                      description: '',\r\n                      color: '#6c757d',\r\n                      prompt: '',\r\n                      category: '',\r\n                      subcategory: ''\r\n                    }\r\n                  }}\r\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\r\n                  highlightedSentences={highlightedSentences}\r\n                  memos={memos}\r\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\r\n                  onMemoChange={handleMemoChange}\r\n                  onDeleteMemo={handleDeleteMemo}\r\n                  showSentenceSelector={isSentenceModeActive}\r\n                  showActionButtons={true}\r\n                  onCopy={() => handleCopyMessage(message.content)}\r\n                  onSunAction={handleSunAction}\r\n                  onPersonAction={handlePersonAction}\r\n                  onDocumentAction={handleDocumentAction}\r\n                />\r\n              )\r\n            )\r\n          )}\r\n          \r\n          {isLoading && (\r\n            <LoadingMessage \r\n              personaName={personaName}\r\n              personaColor=\"#6c757d\"\r\n            />\r\n          )}\r\n        </ChatMessages>\r\n\r\n        <ChatInputSection>\r\n          <MessageInput\r\n            ref={messageInputRef}\r\n            onSendMessage={onSendMessage}\r\n            disabled={isLoading}\r\n            placeholder={getPlaceholder()}\r\n            onToggleSentenceMode={handleToggleSentenceMode}\r\n            isSentenceModeActive={isSentenceModeActive}\r\n            hasSelectedSentences={selectedSentences.size > 0}\r\n            currentInterpretation={contextContent}\r\n            personaId={personaId}\r\n            onGenerateProceed={handlePersonAction}\r\n            onGenerateSentence={handleDocumentAction}\r\n          />\r\n        </ChatInputSection>\r\n      </ChatSection>\r\n      \r\n      {/* 플로팅 액션 버튼 */}\r\n      {isSentenceModeActive && selectedSentences.size > 0 && (\r\n        <FloatingActionButton\r\n          selectedCount={selectedSentences.size}\r\n          onMenuAction={handleMenuAction}\r\n        />\r\n      )}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TrainingChatView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}