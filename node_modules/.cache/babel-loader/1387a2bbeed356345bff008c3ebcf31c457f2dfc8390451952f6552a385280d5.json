{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\InterpretationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from './MessageInput';\nimport Message from './Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from './FloatingActionButton';\nimport LoadingMessage from './LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst InterpretationSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\nconst InterpretationTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\nconst InterpretationContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\nconst NewInterpretationButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst InterpretationView = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId\n}) => {\n  _s();\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 해석 내용 복사 기능\n  const handleCopyInterpretation = async () => {\n    await copyToClipboard(interpretation, '해석 내용이 복사되었습니다');\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'interpretation_chat',\n            // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['interpretation']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        selectedIds.forEach(id => {\n          // 로컬 상태에서 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [id]: ''\n          }));\n          setHighlightedSentences(prev => new Set(prev).add(id));\n\n          // 백엔드 API 호출 (비동기, 실패해도 로컬 생성은 유지)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: id,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n        });\n        break;\n      case 'highlight':\n        selectedIds.forEach(id => {\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            if (newSet.has(id)) {\n              newSet.delete(id);\n            } else {\n              newSet.add(id);\n            }\n            return newSet;\n          });\n        });\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n      case 'generateProceed':\n        showCopyToast('나아가기 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');\n        break;\n      case 'generateSentence':\n        showCopyToast('문장 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n  const handlePersonAction = async () => {\n    // 나아가기 모드로 전환 (이미 자동 생성되었을 것임)\n    if (onSwitchToMode) {\n      onSwitchToMode('proceed');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 문장 모드로 전환 (이미 자동 생성되었을 것임)\n    if (onSwitchToMode) {\n      onSwitchToMode('sentence');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCAC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 428,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 429,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 430,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 13\n        }, this) : messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 437,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#6c757d',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 453,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#6c757d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 488,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 425,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: onSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 해석에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: interpretation,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 496,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 495,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: interpretation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 512,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 419,\n    columnNumber: 5\n  }, this);\n};\n_s(InterpretationView, \"PpJzrACJfn/PoJ94B3HH84CaeZU=\");\n_c7 = InterpretationView;\nexport default InterpretationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"InterpretationView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","InterpretationSection","InterpretationTitle","h2","InterpretationContent","NewInterpretationButton","button","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","InterpretationView","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","_s","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","formatTime","timestamp","Date","toLocaleTimeString","hour","minute","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","error","console","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyInterpretation","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","content","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","action","selectedIds","Array","from","selectedTexts","map","id","sentenceIndex","split","find","m","sentences","s","trim","filter","length","parseInt","formattedText","join","insertText","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","handleToggleSentenceMode","handleSunAction","handlePersonAction","handleDocumentAction","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","fontSize","marginBottom","marginTop","index","role","persona_id","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from './MessageInput';\nimport Message from './Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from './FloatingActionButton';\nimport LoadingMessage from './LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { chatApi } from '../api/chatApi';\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst InterpretationSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\n\nconst InterpretationTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst InterpretationContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\n\nconst NewInterpretationButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n}) => {\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 해석 내용 복사 기능\n  const handleCopyInterpretation = async () => {\n    await copyToClipboard(interpretation, '해석 내용이 복사되었습니다');\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'interpretation_chat', // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['interpretation']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        selectedIds.forEach(id => {\n          // 로컬 상태에서 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [id]: '' }));\n          setHighlightedSentences(prev => new Set(prev).add(id));\n          \n          // 백엔드 API 호출 (비동기, 실패해도 로컬 생성은 유지)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: id,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n        });\n        break;\n      \n      case 'highlight':\n        selectedIds.forEach(id => {\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            if (newSet.has(id)) {\n              newSet.delete(id);\n            } else {\n              newSet.add(id);\n            }\n            return newSet;\n          });\n        });\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n\n      case 'generateProceed':\n        showCopyToast('나아가기 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');\n        break;\n\n      case 'generateSentence':\n        showCopyToast('문장 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n\n  const handlePersonAction = async () => {\n    // 나아가기 모드로 전환 (이미 자동 생성되었을 것임)\n    if (onSwitchToMode) {\n      onSwitchToMode('proceed');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 문장 모드로 전환 (이미 자동 생성되었을 것임)\n    if (onSwitchToMode) {\n      onSwitchToMode('sentence');\n    }\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\n              <div>해석에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#6c757d',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#6c757d\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={onSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 해석에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={interpretation}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={interpretation}\n      />\n    </Container>\n  );\n};\n\nexport default InterpretationView; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,MAAM,EAAEC,SAAS,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AACtC,OAAOC,YAAY,MAA2B,gBAAgB;AAC9D,OAAOC,OAAO,MAAM,WAAW;AAC/B,OAAOC,iBAAiB,MAAM,qBAAqB;AACnD,OAAOC,oBAAoB,MAAM,wBAAwB;AACzD,OAAOC,cAAc,MAAM,kBAAkB;AAC7C,SAASC,WAAW,QAAQ,oBAAoB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAmBjD,MAAMC,SAAS,GAAGT,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,SAAS;AAOf,MAAMG,qBAAqB,GAAGZ,MAAM,CAACU,GAAG;AACxC;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMG,mBAAmB,GAAGb,MAAM,CAACc,EAAE;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,qBAAqB,GAAGf,MAAM,CAACU,GAAG;AACxC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMM,uBAAuB,GAAGhB,MAAM,CAACiB,MAAM;AAC7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAED,MAAMC,WAAW,GAAGlB,MAAM,CAACU,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC;AAACS,GAAA,GALID,WAAW;AAOjB,MAAME,YAAY,GAAGpB,MAAM,CAACU,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACW,GAAA,GAPID,YAAY;AASlB,MAAME,gBAAgB,GAAGtB,MAAM,CAACU,GAAG;AACnC;AACA;AACA;AACA,CAAC;AAACa,GAAA,GAJID,gBAAgB;AAMtB,MAAME,SAAS,GAAGxB,MAAM,CAACU,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AAAAe,GAAA,GAXMD,SAAS;AAYf,MAAME,KAAK,GAAG1B,MAAM,CAACU,GAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeiB,KAAK,IAAIA,KAAK,CAACC,IAAI,GAAG,eAAe,GAAG,kBAAkB;AACzE;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAdIH,KAAK;AAgBX,MAAMI,kBAAqD,GAAGA,CAAC;EAC7DC,cAAc;EACdC,WAAW;EACXC,aAAa;EACbC,aAAa;EACbC,SAAS;EACTC,QAAQ;EACRC,2BAA2B;EAC3BC,cAAc;EACdC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAMC,eAAe,GAAG3C,MAAM,CAAiB,IAAI,CAAC;EACpD,MAAM4C,eAAe,GAAG5C,MAAM,CAAkB,IAAI,CAAC;EACrD,MAAM,CAAC6C,SAAS,EAAEC,YAAY,CAAC,GAAG/C,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACgD,YAAY,EAAEC,eAAe,CAAC,GAAGjD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACkD,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGnD,QAAQ,CAAgB,IAAI,CAAC;;EAEnF;EACA,MAAM,CAACoD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGrD,QAAQ,CAAc,IAAIsD,GAAG,CAAC,CAAC,CAAC;EAClF,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGxD,QAAQ,CAAc,IAAIsD,GAAG,CAAC,CAAC,CAAC;EACxF,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAG1D,QAAQ,CAAyB,CAAC,CAAC,CAAC;EAC9D,MAAM,CAAC2D,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG5D,QAAQ,CAAC,KAAK,CAAC;EAEvEE,SAAS,CAAC,MAAM;IACd,IAAI0C,eAAe,CAACiB,OAAO,EAAE;MAC3BjB,eAAe,CAACiB,OAAO,CAACC,SAAS,GAAGlB,eAAe,CAACiB,OAAO,CAACE,YAAY;IAC1E;EACF,CAAC,EAAE,CAACxB,QAAQ,CAAC,CAAC;EAEd,MAAMyB,UAAU,GAAIC,SAAiB,IAAK;IACxC,OAAO,IAAIC,IAAI,CAACD,SAAS,CAAC,CAACE,kBAAkB,CAAC,OAAO,EAAE;MACrDC,IAAI,EAAE,SAAS;MACfC,MAAM,EAAE;IACV,CAAC,CAAC;EACJ,CAAC;;EAED;EACA,MAAMC,aAAa,GAAIC,OAAe,IAAK;IACzCtB,eAAe,CAACsB,OAAO,CAAC;IACxBxB,YAAY,CAAC,IAAI,CAAC;IAClByB,UAAU,CAAC,MAAMzB,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;EAC7C,CAAC;;EAED;EACA,MAAM0B,eAAe,GAAG,MAAAA,CAAOC,IAAY,EAAEC,cAAsB,KAAK;IACtE,IAAI;MACF,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACJ,IAAI,CAAC;MACzCJ,aAAa,CAACK,cAAc,CAAC;IAC/B,CAAC,CAAC,OAAOI,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9B;MACA,IAAI;QACF,MAAME,QAAQ,GAAGC,QAAQ,CAACC,aAAa,CAAC,UAAU,CAAC;QACnDF,QAAQ,CAACG,KAAK,GAAGV,IAAI;QACrBO,QAAQ,CAACI,KAAK,CAACC,QAAQ,GAAG,OAAO;QACjCL,QAAQ,CAACI,KAAK,CAACE,IAAI,GAAG,WAAW;QACjCN,QAAQ,CAACI,KAAK,CAACG,GAAG,GAAG,WAAW;QAChCN,QAAQ,CAACO,IAAI,CAACC,WAAW,CAACT,QAAQ,CAAC;QACnCA,QAAQ,CAACU,KAAK,CAAC,CAAC;QAChBV,QAAQ,CAACW,MAAM,CAAC,CAAC;QACjBV,QAAQ,CAACW,WAAW,CAAC,MAAM,CAAC;QAC5BX,QAAQ,CAACO,IAAI,CAACK,WAAW,CAACb,QAAQ,CAAC;QACnCX,aAAa,CAACK,cAAc,CAAC;MAC/B,CAAC,CAAC,OAAOoB,aAAa,EAAE;QACtBf,OAAO,CAACD,KAAK,CAAC,eAAe,EAAEgB,aAAa,CAAC;QAC7CzB,aAAa,CAAC,OAAO,CAAC;MACxB;IACF;EACF,CAAC;;EAED;EACA,MAAM0B,wBAAwB,GAAG,MAAAA,CAAA,KAAY;IAC3C,MAAMvB,eAAe,CAACvC,cAAc,EAAE,gBAAgB,CAAC;EACzD,CAAC;;EAED;EACA,MAAM+D,iBAAiB,GAAG,MAAOC,cAAsB,IAAK;IAC1D,MAAMzB,eAAe,CAACyB,cAAc,EAAE,cAAc,CAAC;EACvD,CAAC;;EAED;EACA,MAAMC,eAAe,GAAIC,YAAoB,IAAK;IAChDjD,sBAAsB,CAACiD,YAAY,CAAC;EACtC,CAAC;;EAED;EACA,MAAMC,iBAAiB,GAAG,MAAAA,CAAOD,YAAoB,EAAEE,UAAkB,KAAK;IAC5E,IAAIjE,aAAa,EAAE;MACjB,MAAMkE,OAAO,GAAG,MAAMlE,aAAa,CAAC+D,YAAY,EAAEE,UAAU,CAAC;MAC7D,IAAIC,OAAO,EAAE;QACXpD,sBAAsB,CAAC,IAAI,CAAC;QAC5BmB,aAAa,CAAC,cAAc,CAAC;MAC/B,CAAC,MAAM;QACLA,aAAa,CAAC,gBAAgB,CAAC;MACjC;IACF;EACF,CAAC;;EAED;EACA,MAAMkC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BrD,sBAAsB,CAAC,IAAI,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMsD,kBAAkB,GAAIC,UAAkB,IAAK;IACjDrD,oBAAoB,CAACsD,IAAI,IAAI;MAC3B,MAAMC,MAAM,GAAG,IAAItD,GAAG,CAACqD,IAAI,CAAC;MAC5B,IAAIC,MAAM,CAACC,GAAG,CAACH,UAAU,CAAC,EAAE;QAC1BE,MAAM,CAACE,MAAM,CAACJ,UAAU,CAAC;MAC3B,CAAC,MAAM;QACLE,MAAM,CAACG,GAAG,CAACL,UAAU,CAAC;MACxB;MACA,OAAOE,MAAM;IACf,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,gBAAgB,GAAG,MAAAA,CAAON,UAAkB,EAAEO,IAAY,KAAK;IACnE,IAAI;MACF;MACAvD,QAAQ,CAACiD,IAAI,KAAK;QAChB,GAAGA,IAAI;QACP,CAACD,UAAU,GAAGO;MAChB,CAAC,CAAC,CAAC;;MAEH;MACAxG,WAAW,CAACyG,kBAAkB,CAAC;QAC7BC,WAAW,EAAET,UAAU;QACvBU,OAAO,EAAEH;MACX,CAAC,CAAC,CAACI,KAAK,CAACtC,KAAK,IAAI;QAChBC,OAAO,CAACsC,IAAI,CAAC,2BAA2B,EAAEvC,KAAK,CAAC;MAClD,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjCT,aAAa,CAAC,eAAe,CAAC;IAChC;EACF,CAAC;EAED,MAAMiD,gBAAgB,GAAG,MAAOb,UAAkB,IAAK;IACrD,IAAI;MACF;MACAhD,QAAQ,CAACiD,IAAI,IAAI;QACf,MAAMa,QAAQ,GAAG;UAAE,GAAGb;QAAK,CAAC;QAC5B,OAAOa,QAAQ,CAACd,UAAU,CAAC;QAC3B,OAAOc,QAAQ;MACjB,CAAC,CAAC;MACFhE,uBAAuB,CAACmD,IAAI,IAAI;QAC9B,MAAMC,MAAM,GAAG,IAAItD,GAAG,CAACqD,IAAI,CAAC;QAC5BC,MAAM,CAACE,MAAM,CAACJ,UAAU,CAAC;QACzB,OAAOE,MAAM;MACf,CAAC,CAAC;;MAEF;MACAnG,WAAW,CAACgH,UAAU,CAACf,UAAU,CAAC,CAACW,KAAK,CAACtC,KAAK,IAAI;QAChDC,OAAO,CAACsC,IAAI,CAAC,2BAA2B,EAAEvC,KAAK,CAAC;MAClD,CAAC,CAAC;MAEFT,aAAa,CAAC,aAAa,CAAC;IAC9B,CAAC,CAAC,OAAOS,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjCT,aAAa,CAAC,eAAe,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMoD,gBAAgB,GAAG,MAAOC,MAAiH,IAAK;IACpJ,MAAMC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAAC1E,iBAAiB,CAAC;IACjD,MAAM2E,aAAa,GAAGH,WAAW,CAACI,GAAG,CAACC,EAAE,IAAI;MAC1C;MACA,MAAM,CAAChE,SAAS,EAAEmC,YAAY,EAAE8B,aAAa,CAAC,GAAGD,EAAE,CAACE,KAAK,CAAC,GAAG,CAAC;MAC9D,MAAM5D,OAAO,GAAGhC,QAAQ,CAAC6F,IAAI,CAACC,CAAC,IAAIA,CAAC,CAACpE,SAAS,KAAKA,SAAS,CAAC;MAC7D,IAAIM,OAAO,EAAE;QACX,MAAM+D,SAAS,GAAG/D,OAAO,CAAC6C,OAAO,CAACe,KAAK,CAAC,SAAS,CAAC,CAACH,GAAG,CAACO,CAAC,IAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACC,MAAM,CAACF,CAAC,IAAIA,CAAC,CAACG,MAAM,GAAG,CAAC,CAAC;QAC/F,OAAOJ,SAAS,CAACK,QAAQ,CAACT,aAAa,CAAC,CAAC,IAAI,EAAE;MACjD;MACA,OAAO,EAAE;IACX,CAAC,CAAC,CAACO,MAAM,CAAC/D,IAAI,IAAIA,IAAI,CAACgE,MAAM,GAAG,CAAC,CAAC;IAElC,QAAQf,MAAM;MACZ,KAAK,aAAa;QAChB,IAAI9E,eAAe,CAACgB,OAAO,IAAIkE,aAAa,CAACW,MAAM,GAAG,CAAC,EAAE;UACvD,MAAME,aAAa,GAAGb,aAAa,CAACC,GAAG,CAACtD,IAAI,IAAI,IAAIA,IAAI,GAAG,CAAC,CAACmE,IAAI,CAAC,IAAI,CAAC;UACvEhG,eAAe,CAACgB,OAAO,CAACiF,UAAU,CAACF,aAAa,CAAC;QACnD;QACA;MAEF,KAAK,aAAa;QAChB,IAAI;UACF,MAAMnI,WAAW,CAACsI,oBAAoB,CAAC;YACrCT,SAAS,EAAEP,aAAa;YACxBiB,iBAAiB,EAAE,qBAAqB;YAAE;YAC1CC,sBAAsB,EAAEC,SAAS;YACjCC,IAAI,EAAE,CAAC,gBAAgB;UACzB,CAAC,CAAC;UACFvB,WAAW,CAACwB,OAAO,CAACnB,EAAE,IAAI;YACxBzE,uBAAuB,CAACmD,IAAI,IAAI,IAAIrD,GAAG,CAACqD,IAAI,CAAC,CAACI,GAAG,CAACkB,EAAE,CAAC,CAAC;UACxD,CAAC,CAAC;UACF3D,aAAa,CAAC,cAAc,CAAC;QAC/B,CAAC,CAAC,OAAOS,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UAClCT,aAAa,CAAC,gBAAgB,CAAC;QACjC;QACA;MAEF,KAAK,SAAS;QACZsD,WAAW,CAACwB,OAAO,CAACnB,EAAE,IAAI;UACxB;UACAvE,QAAQ,CAACiD,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE,CAACsB,EAAE,GAAG;UAAG,CAAC,CAAC,CAAC;UACzCzE,uBAAuB,CAACmD,IAAI,IAAI,IAAIrD,GAAG,CAACqD,IAAI,CAAC,CAACI,GAAG,CAACkB,EAAE,CAAC,CAAC;;UAEtD;UACAxH,WAAW,CAACyG,kBAAkB,CAAC;YAC7BC,WAAW,EAAEc,EAAE;YACfb,OAAO,EAAE;UACX,CAAC,CAAC,CAACC,KAAK,CAACtC,KAAK,IAAI;YAChBC,OAAO,CAACsC,IAAI,CAAC,2BAA2B,EAAEvC,KAAK,CAAC;UAClD,CAAC,CAAC;QACJ,CAAC,CAAC;QACF;MAEF,KAAK,WAAW;QACd6C,WAAW,CAACwB,OAAO,CAACnB,EAAE,IAAI;UACxBzE,uBAAuB,CAACmD,IAAI,IAAI;YAC9B,MAAMC,MAAM,GAAG,IAAItD,GAAG,CAACqD,IAAI,CAAC;YAC5B,IAAIC,MAAM,CAACC,GAAG,CAACoB,EAAE,CAAC,EAAE;cAClBrB,MAAM,CAACE,MAAM,CAACmB,EAAE,CAAC;YACnB,CAAC,MAAM;cACLrB,MAAM,CAACG,GAAG,CAACkB,EAAE,CAAC;YAChB;YACA,OAAOrB,MAAM;UACf,CAAC,CAAC;QACJ,CAAC,CAAC;QACF;MAEF,KAAK,MAAM;QACT,IAAImB,aAAa,CAACW,MAAM,GAAG,CAAC,EAAE;UAC5BjE,eAAe,CAACsD,aAAa,CAACc,IAAI,CAAC,GAAG,CAAC,EAAE,iBAAiB,CAAC;QAC7D;QACA;MAEF,KAAK,iBAAiB;QACpBvE,aAAa,CAAC,iCAAiC,CAAC;QAChD;MAEF,KAAK,kBAAkB;QACrBA,aAAa,CAAC,+BAA+B,CAAC;QAC9C;IACJ;;IAEA;IACAjB,oBAAoB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EACjC,CAAC;;EAED;EACA,MAAM+F,wBAAwB,GAAGA,CAAA,KAAM;IACrCzF,uBAAuB,CAAC+C,IAAI,IAAI,CAACA,IAAI,CAAC;EACxC,CAAC;;EAED;EACA,MAAM2C,eAAe,GAAG,MAAAA,CAAA,KAAY;IAClC,IAAI9G,2BAA2B,EAAE;MAC/BA,2BAA2B,CAAC,CAAC;IAC/B;EACF,CAAC;EAED,MAAM+G,kBAAkB,GAAG,MAAAA,CAAA,KAAY;IACrC;IACA,IAAI9G,cAAc,EAAE;MAClBA,cAAc,CAAC,SAAS,CAAC;IAC3B;EACF,CAAC;EAED,MAAM+G,oBAAoB,GAAG,MAAAA,CAAA,KAAY;IACvC;IACA,IAAI/G,cAAc,EAAE;MAClBA,cAAc,CAAC,UAAU,CAAC;IAC5B;EACF,CAAC;EAED,oBACE9B,OAAA,CAACC,SAAS;IAAA6I,QAAA,gBACR9I,OAAA,CAACkB,KAAK;MAACE,IAAI,EAAEe,SAAU;MAAA2G,QAAA,EACpBzG;IAAY;MAAA0G,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAERlJ,OAAA,CAACU,WAAW;MAAAoI,QAAA,gBACV9I,OAAA,CAACY,YAAY;QAACuI,GAAG,EAAElH,eAAgB;QAAA6G,QAAA,GAChClH,QAAQ,CAACmG,MAAM,KAAK,CAAC,gBACpB/H,OAAA,CAACgB,SAAS;UAAA8H,QAAA,gBACR9I,OAAA;YAAK0E,KAAK,EAAE;cAAE0E,QAAQ,EAAE,MAAM;cAAEC,YAAY,EAAE;YAAM,CAAE;YAAAP,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC/DlJ,OAAA;YAAA8I,QAAA,EAAK;UAAmB;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC,eAC9BlJ,OAAA;YAAK0E,KAAK,EAAE;cAAE0E,QAAQ,EAAE,MAAM;cAAEE,SAAS,EAAE;YAAM,CAAE;YAAAR,QAAA,GAChDtH,WAAW,EAAC,wEACf;UAAA;YAAAuH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,GAEZtH,QAAQ,CAACyF,GAAG,CAAC,CAACzD,OAAO,EAAE2F,KAAK,KAC1B3F,OAAO,CAAC4F,IAAI,KAAK,MAAM,gBACrBxJ,OAAA,CAACN,OAAO;UAENkE,OAAO,EAAE;YACP,GAAGA,OAAO;YACV6F,UAAU,EAAElB,SAAS;YACrBmB,YAAY,EAAEnB;UAChB,CAAE;UACFoB,QAAQ,EAAE,CAAC,CAAE;UACbC,iBAAiB,EAAE,IAAK;UACxBC,MAAM,EAAEA,CAAA,KAAMvE,iBAAiB,CAAC1B,OAAO,CAAC6C,OAAO,CAAE;UACjDqD,MAAM,EAAEA,CAAA,KAAMtE,eAAe,CAAC+D,KAAK,CAAE;UACrCQ,SAAS,EAAExH,mBAAmB,KAAKgH,KAAM;UACzCS,UAAU,EAAGrE,UAAU,IAAKD,iBAAiB,CAAC6D,KAAK,EAAE5D,UAAU,CAAE;UACjEsE,YAAY,EAAEpE;QAAiB,GAZ1B,kBAAkB0D,KAAK,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAa/B,CAAC,gBAEFlJ,OAAA,CAACL,iBAAiB;UAEhBiE,OAAO,EAAE;YACP,GAAGA,OAAO;YACV6F,UAAU,EAAE,iBAAiB;YAC7BC,YAAY,EAAElI;UAChB,CAAE;UACFmI,QAAQ,EAAE;YACRO,eAAe,EAAE;cACfC,IAAI,EAAE3I,WAAW;cACjB4I,WAAW,EAAE,EAAE;cACfC,KAAK,EAAE,SAAS;cAChBC,MAAM,EAAE,EAAE;cACVC,QAAQ,EAAE,EAAE;cACZC,WAAW,EAAE;YACf;UACF,CAAE;UACF/H,iBAAiB,EAAEO,oBAAoB,GAAGP,iBAAiB,GAAG,IAAIE,GAAG,CAAC,CAAE;UACxEC,oBAAoB,EAAEA,oBAAqB;UAC3CE,KAAK,EAAEA,KAAM;UACb2H,cAAc,EAAEzH,oBAAoB,GAAG8C,kBAAkB,GAAG,MAAM,CAAC,CAAE;UACrE4E,YAAY,EAAErE,gBAAiB;UAC/BsE,YAAY,EAAE/D,gBAAiB;UAC/BgE,oBAAoB,EAAE5H,oBAAqB;UAC3C4G,iBAAiB,EAAE,IAAK;UACxBC,MAAM,EAAEA,CAAA,KAAMvE,iBAAiB,CAAC1B,OAAO,CAAC6C,OAAO,CAAE;UACjDoE,WAAW,EAAElC,eAAgB;UAC7BmC,cAAc,EAAElC,kBAAmB;UACnCmC,gBAAgB,EAAElC;QAAqB,GA3BlC,kBAAkBU,KAAK,EAAE;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OA4B/B,CAEL,CACD,EAEAvH,SAAS,iBACR3B,OAAA,CAACH,cAAc;UACb2B,WAAW,EAAEA,WAAY;UACzBwJ,YAAY,EAAC;QAAS;UAAAjC,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACvB,CACF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAAC,eAEflJ,OAAA,CAACc,gBAAgB;QAAAgI,QAAA,eACf9I,OAAA,CAACP,YAAY;UACX0J,GAAG,EAAEjH,eAAgB;UACrBT,aAAa,EAAEA,aAAc;UAC7BwJ,QAAQ,EAAEtJ,SAAU;UACpBuJ,WAAW,EAAE,GAAG1J,WAAW,qBAAsB;UACjD2J,oBAAoB,EAAEzC,wBAAyB;UAC/C1F,oBAAoB,EAAEA,oBAAqB;UAC3CoI,oBAAoB,EAAE3I,iBAAiB,CAAC4I,IAAI,GAAG,CAAE;UACjDC,qBAAqB,EAAE/J,cAAe;UACtCQ,SAAS,EAAEA,SAAU;UACrBwJ,iBAAiB,EAAE3C,kBAAmB;UACtC4C,kBAAkB,EAAE3C;QAAqB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAC1C;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACc,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAEdlJ,OAAA,CAACJ,oBAAoB;MACnBwB,IAAI,EAAE4B,oBAAoB,IAAIP,iBAAiB,CAAC4I,IAAI,GAAG,CAAE;MACzDI,YAAY,EAAE1E,gBAAiB;MAC/BhF,SAAS,EAAEA,SAAU;MACrBuJ,qBAAqB,EAAE/J;IAAe;MAAAwH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACvC,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAAClH,EAAA,CA5XIV,kBAAqD;AAAAoK,GAAA,GAArDpK,kBAAqD;AA8X3D,eAAeA,kBAAkB;AAAC,IAAAnB,EAAA,EAAAQ,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAqK,GAAA;AAAAC,YAAA,CAAAxL,EAAA;AAAAwL,YAAA,CAAAhL,GAAA;AAAAgL,YAAA,CAAA9K,GAAA;AAAA8K,YAAA,CAAA5K,GAAA;AAAA4K,YAAA,CAAA1K,GAAA;AAAA0K,YAAA,CAAAtK,GAAA;AAAAsK,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}