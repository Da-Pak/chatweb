{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\ProceedView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst ProceedView = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 나아가기 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // 선택된 스레드 변경 시 처리\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드 변경 시 메모/하이라이트 데이터 로딩\n  useEffect(() => {\n    if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id]);\n\n  // personaId 변경 시도 메모/하이라이트 데이터 로딩\n  useEffect(() => {\n    if (personaId && selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [personaId]);\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('나아가기 뷰에서 스레드 데이터 로딩 중:', threadId);\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 스레드 데이터:', data);\n\n      // 백엔드에서 가져온 실제 데이터로 상태 업데이트\n      setMemos(data.memos || {});\n      setHighlightedSentences(new Set(data.highlights || []));\n      console.log('나아가기 뷰 메모/하이라이트 상태 업데이트 완료');\n    } catch (error) {\n      console.warn('나아가기 뷰 스레드 데이터 로딩 실패:', error);\n      // 백엔드에 데이터가 없으면 로컬 상태도 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n  const handleSendMessage = async message => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n\n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setSelectedThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      console.log('=== ProceedView API 호출 시작 ===');\n      console.log('요청 데이터:', {\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      console.log('=== API 응답 받음 ===');\n      console.log('전체 응답:', response);\n      console.log('response.data:', response.data);\n      console.log('response.error:', response.error);\n      if (response.data) {\n        console.log('응답 데이터 구조 분석:');\n        console.log('- thread_id:', response.data.thread_id);\n        console.log('- user_message:', response.data.user_message);\n        console.log('- response:', response.data.response);\n        console.log('- thread_updated_at:', response.data.thread_updated_at);\n        if (response.data.response) {\n          console.log('응답 메시지 구조 분석:');\n          console.log('- role:', response.data.response.role);\n          console.log('- content:', response.data.response.content);\n          console.log('- timestamp:', response.data.response.timestamp);\n          console.log('- persona_id:', response.data.response.persona_id);\n          console.log('- persona_name:', response.data.response.persona_name);\n        }\n      }\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n        console.log('생성된 assistant 메시지:', assistantMessage);\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        console.log('최종 업데이트된 스레드:', finalUpdatedThread);\n        console.log('스레드 메시지 개수:', finalUpdatedThread.messages.length);\n        setSelectedThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === currentThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        console.log('=== UI 업데이트 완료 ===');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('나아가기 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    console.log('=== handleEditMessage 호출 ===');\n    console.log('messageIndex:', messageIndex);\n    console.log('newContent:', newContent);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages);\n    if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n      console.log('스레드 ID가 없습니다');\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n    console.log('스레드 ID:', selectedThread.id);\n    console.log('요청할 API 정보:', {\n      threadId: selectedThread.id,\n      messageIndex,\n      newContent: newContent.substring(0, 100) + '...'\n    });\n    try {\n      var _response$data;\n      setIsLoading(true);\n\n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      console.log('API 응답:', response);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && response.data.updated_thread) {\n        console.log('수정 성공, 스레드 업데이트 중...');\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n\n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === selectedThread.id ? response.data.updated_thread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // sentenceId로부터 실제 문장 내용 찾기\n      const [timestamp, messageIndex, sentenceIndex] = sentenceId.split('_');\n      let sentenceContent = '';\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages) {\n        const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n        if (message) {\n          const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n          sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n        }\n      }\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지) - 메모 저장고 정보 포함\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        thread_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n        thread_type: 'proceed',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `proceed_${personaId}`\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n\n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n\n      // 하이라이트도 제거\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async messageContent => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n  const handlePersonAction = async messageContent => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async messageContent => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n\n        // 새로 생성된 나아가기 스레드 선택\n        const newProceedThread = updatedThreads.filter(t => t.thread_type === 'proceed').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n          setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates = [];\n          const highlightColors = [];\n          const memoContents = [];\n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `proceed_${personaId}`,\n            source_conversation_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n            source_thread_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n            source_thread_type: 'proceed',\n            source_sentence_ids: selectedIds,\n            tags: ['proceed', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n\n          // 백엔드에 하이라이트도 저장 (기존 로직 유지)\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            for (const sentenceId of selectedIds) {\n              await sentenceApi.createHighlight({\n                sentence_id: sentenceId,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              });\n            }\n          }\n\n          // 성공 시 로컬 상태 업데이트\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          try {\n            // 백엔드에 메모 생성 - 메모 저장고 정보 포함\n            const bottomSentenceText = selectedTexts[selectedTexts.length - 1];\n            await sentenceApi.createOrUpdateMemo({\n              sentence_id: bottomSentenceId,\n              thread_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n              thread_type: 'proceed',\n              content: '',\n              sentence_content: bottomSentenceText,\n              source_message_id: `proceed_${personaId}`\n            });\n\n            // 백엔드에 하이라이트 저장\n            if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n              for (const sentenceId of selectedIds) {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'proceed'\n                });\n              }\n            }\n\n            // 성공 시 로컬 상태 업데이트\n            setMemos(prev => ({\n              ...prev,\n              [bottomSentenceId]: ''\n            }));\n            setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n            showCopyToast('메모와 하이라이트가 추가되었습니다');\n          } catch (error) {\n            console.error('메모/하이라이트 추가 실패:', error);\n            showCopyToast('메모/하이라이트 추가에 실패했습니다');\n          }\n        }\n        break;\n      case 'highlight':\n        if (selectedIds.length > 0 && selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n          try {\n            console.log('하이라이트 토글 시작:', selectedIds);\n\n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n\n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n\n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n\n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n\n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'proceed'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 784,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83C\\uDFAF\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 792,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 793,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 794,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 791,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `proceed_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 801,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#ff9800',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: messageContent => handleSunAction(messageContent),\n          onPersonAction: messageContent => handlePersonAction(messageContent),\n          onDocumentAction: messageContent => handleDocumentAction(messageContent)\n        }, `proceed_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 817,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#ff9800\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 852,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 789,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 나아가기에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || proceedContent,\n          personaId: personaId,\n          onGenerateProceed: messageContent => handlePersonAction(messageContent),\n          onGenerateSentence: messageContent => handleDocumentAction(messageContent),\n          currentChatMessages: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 861,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 860,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 788,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: proceedContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 879,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 783,\n    columnNumber: 5\n  }, this);\n};\n_s(ProceedView, \"w6MOqSyr7ggfe7Qe3efWldh0CH8=\");\n_c7 = ProceedView;\nexport default ProceedView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"ProceedView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","ProceedView","personaId","personaName","proceedContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","onRefreshThreads","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","proceedThreads","filter","thread","thread_type","console","log","id","loadThreadSentenceData","threadId","data","getThreadSentenceData","highlights","error","warn","current","scrollTop","scrollHeight","messages","handleSendMessage","message","currentThread","proceedThread","defaultThread","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","thread_id","user_message","response","chatWithThread","thread_updated_at","assistantMessage","finalUpdatedThread","length","map","t","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","substring","_response$data","editThreadMessage","success","updated_thread","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","sentenceIndex","split","sentenceContent","find","m","sentences","s","trim","parseInt","createOrUpdateMemo","sentence_id","sentence_content","source_message_id","catch","handleDeleteMemo","deleteMemo","newMemos","handleSunAction","saveCurrentAsInterpretation","handlePersonAction","saveCurrentAsProceed","handleRefreshThreads","handleDocumentAction","saveCurrentAsSentence","threadsResponse","getPersonaThreads","newProceedThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","Array","from","selectedTexts","formattedText","join","insertText","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","push","saveSentencesToVault","source_conversation_id","source_thread_id","source_thread_type","source_sentence_ids","tags","highlight_states","highlight_colors","memo_contents","createHighlight","sortedIds","timestampA","sentenceIndexA","timestampB","sentenceIndexB","bottomSentenceId","bottomSentenceText","currentlyHighlighted","notHighlighted","forEach","deleteHighlight","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/ProceedView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface ProceedViewProps {\n  personaId: string;\n  personaName: string;\n  proceedContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'sentence') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n  onRefreshThreads?: () => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst ProceedView: React.FC<ProceedViewProps> = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 나아가기 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // 선택된 스레드 변경 시 처리\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드 변경 시 메모/하이라이트 데이터 로딩\n  useEffect(() => {\n    if (selectedThread?.id) {\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [selectedThread?.id]);\n\n  // personaId 변경 시도 메모/하이라이트 데이터 로딩\n  useEffect(() => {\n    if (personaId && selectedThread?.id) {\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [personaId]);\n\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('나아가기 뷰에서 스레드 데이터 로딩 중:', threadId);\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 스레드 데이터:', data);\n      \n      // 백엔드에서 가져온 실제 데이터로 상태 업데이트\n      setMemos(data.memos || {});\n      setHighlightedSentences(new Set(data.highlights || []));\n      \n      console.log('나아가기 뷰 메모/하이라이트 상태 업데이트 완료');\n    } catch (error) {\n      console.warn('나아가기 뷰 스레드 데이터 로딩 실패:', error);\n      // 백엔드에 데이터가 없으면 로컬 상태도 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      console.log('=== ProceedView API 호출 시작 ===');\n      console.log('요청 데이터:', { thread_id: currentThread.id, user_message: message });\n      \n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      console.log('=== API 응답 받음 ===');\n      console.log('전체 응답:', response);\n      console.log('response.data:', response.data);\n      console.log('response.error:', response.error);\n\n      if (response.data) {\n        console.log('응답 데이터 구조 분석:');\n        console.log('- thread_id:', response.data.thread_id);\n        console.log('- user_message:', response.data.user_message);\n        console.log('- response:', response.data.response);\n        console.log('- thread_updated_at:', response.data.thread_updated_at);\n        \n        if (response.data.response) {\n          console.log('응답 메시지 구조 분석:');\n          console.log('- role:', response.data.response.role);\n          console.log('- content:', response.data.response.content);\n          console.log('- timestamp:', response.data.response.timestamp);\n          console.log('- persona_id:', response.data.response.persona_id);\n          console.log('- persona_name:', response.data.response.persona_name);\n        }\n      }\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        console.log('생성된 assistant 메시지:', assistantMessage);\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        console.log('최종 업데이트된 스레드:', finalUpdatedThread);\n        console.log('스레드 메시지 개수:', finalUpdatedThread.messages.length);\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        console.log('=== UI 업데이트 완료 ===');\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('나아가기 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    console.log('=== handleEditMessage 호출 ===');\n    console.log('messageIndex:', messageIndex);\n    console.log('newContent:', newContent);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread?.messages);\n    \n    if (!selectedThread?.id) {\n      console.log('스레드 ID가 없습니다');\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n\n    console.log('스레드 ID:', selectedThread.id);\n    console.log('요청할 API 정보:', {\n      threadId: selectedThread.id,\n      messageIndex,\n      newContent: newContent.substring(0, 100) + '...'\n    });\n\n    try {\n      setIsLoading(true);\n      \n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      \n      console.log('API 응답:', response);\n      \n      if (response.data?.success && response.data.updated_thread) {\n        console.log('수정 성공, 스레드 업데이트 중...');\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n        \n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id ? response.data!.updated_thread! : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n    setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n    return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // sentenceId로부터 실제 문장 내용 찾기\n      const [timestamp, messageIndex, sentenceIndex] = sentenceId.split('_');\n      let sentenceContent = '';\n      if (selectedThread?.messages) {\n        const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n        if (message) {\n          const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n          sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n        }\n      }\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지) - 메모 저장고 정보 포함\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        thread_id: selectedThread?.id,\n        thread_type: 'proceed',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `proceed_${personaId}`\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n      \n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      \n      // 하이라이트도 제거\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n      \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 나아가기 스레드 선택\n              const newProceedThread = updatedThreads\n                .filter(t => t.thread_type === 'proceed')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n                setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `proceed_${personaId}`,\n            source_conversation_id: selectedThread?.id,\n            source_thread_id: selectedThread?.id,\n            source_thread_type: 'proceed',\n            source_sentence_ids: selectedIds,\n            tags: ['proceed', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          // 백엔드에 하이라이트도 저장 (기존 로직 유지)\n          if (selectedThread?.id) {\n            for (const sentenceId of selectedIds) {\n              await sentenceApi.createHighlight({\n                sentence_id: sentenceId,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              });\n            }\n          }\n          \n          // 성공 시 로컬 상태 업데이트\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          \n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          try {\n            // 백엔드에 메모 생성 - 메모 저장고 정보 포함\n            const bottomSentenceText = selectedTexts[selectedTexts.length - 1];\n            await sentenceApi.createOrUpdateMemo({\n              sentence_id: bottomSentenceId,\n              thread_id: selectedThread?.id,\n              thread_type: 'proceed',\n              content: '',\n              sentence_content: bottomSentenceText,\n              source_message_id: `proceed_${personaId}`\n            });\n            \n            // 백엔드에 하이라이트 저장\n            if (selectedThread?.id) {\n              for (const sentenceId of selectedIds) {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'proceed'\n                });\n              }\n            }\n            \n            // 성공 시 로컬 상태 업데이트\n            setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n            setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n            \n            showCopyToast('메모와 하이라이트가 추가되었습니다');\n          } catch (error) {\n            console.error('메모/하이라이트 추가 실패:', error);\n            showCopyToast('메모/하이라이트 추가에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'highlight':\n        if (selectedIds.length > 0 && selectedThread?.id) {\n          try {\n            console.log('하이라이트 토글 시작:', selectedIds);\n            \n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            \n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            \n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n              \n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n              \n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n              \n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n              \n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'proceed'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>🎯</div>\n              <div>나아가기에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#ff9800',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={(messageContent) => handleSunAction(messageContent)}\n                  onPersonAction={(messageContent) => handlePersonAction(messageContent)}\n                  onDocumentAction={(messageContent) => handleDocumentAction(messageContent)}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#ff9800\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 나아가기에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || proceedContent}\n            personaId={personaId}\n            onGenerateProceed={(messageContent: string) => handlePersonAction(messageContent)}\n            onGenerateSentence={(messageContent: string) => handleDocumentAction(messageContent)}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={proceedContent}\n      />\n    </Container>\n  );\n};\n\nexport default ProceedView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}