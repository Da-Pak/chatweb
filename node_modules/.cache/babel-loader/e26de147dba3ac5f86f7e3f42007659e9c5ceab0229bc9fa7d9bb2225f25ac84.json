{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport { useChat } from './hooks/useChat';\nimport ConversationSidebar from './components/ConversationSidebar';\nimport PersonaSidebar from './components/PersonaSidebar';\nimport ChatArea from './components/ChatArea';\nimport { GlobalStyle, AppContainer } from './styles/GlobalStyle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState(null);\n\n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState(null);\n\n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState({});\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    selectConversation,\n    selectPersona,\n    clearError\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = itemId => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n\n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin') {\n      setIsConversationSidebarCollapsed(false);\n    }\n    console.log('Selected persona item:', actualItemId);\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = itemId => {\n    setSelectedConversationItem(itemId);\n    console.log('Selected conversation item:', itemId);\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = (personaId, interpretation) => {\n    const persona = personas[personaId];\n\n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n\n    // 현재 해석 설정 (해석을 첫 번째 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: (persona === null || persona === void 0 ? void 0 : persona.name) || '',\n      content: interpretation,\n      messages: [{\n        role: 'assistant',\n        content: interpretation,\n        timestamp: new Date().toISOString()\n      }]\n    });\n\n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async message => {\n    if (!currentInterpretation) return false;\n\n    // 사용자 메시지 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    setCurrentInterpretation(prev => prev ? {\n      ...prev,\n      messages: [...prev.messages, userMessage]\n    } : null);\n\n    // 가짜 응답 생성 (실제로는 백엔드 API 호출)\n    setTimeout(() => {\n      const assistantMessage = {\n        role: 'assistant',\n        content: `${currentInterpretation.personaName}의 관점에서 답변드리겠습니다.\\n\\n당신의 질문 \"${message}\"에 대해 더 깊이 탐구해보면, 이는 앞서 제시한 해석과도 밀접한 연관이 있습니다. 특히 심리적 역동 측면에서 보면, 이러한 의문은 자연스러운 성찰 과정의 일부로 볼 수 있습니다.`,\n        timestamp: new Date().toISOString()\n      };\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, assistantMessage]\n      } : null);\n    }, 1500);\n    return true;\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = updatedInterpretation => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 페르소나 사이드바 토글 - 두 사이드바 모두 제어\n  const togglePersonaSidebar = () => {\n    const newCollapsedState = !isPersonaSidebarCollapsed;\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n\n    // 페르소나 사이드바를 접을 때는 대화 목록 사이드바도 함께 접기\n    if (newCollapsedState) {\n      setIsConversationSidebarCollapsed(true);\n    } else {\n      // 페르소나 사이드바를 펼칠 때는 대화 목록 사이드바도 함께 펼치기\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 자기 자신만 제어\n  const toggleConversationSidebar = () => {\n    setIsConversationSidebarCollapsed(!isConversationSidebarCollapsed);\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 200,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContainer, {\n      children: [/*#__PURE__*/_jsxDEV(PersonaSidebar, {\n        selectedItem: selectedPersonaItem,\n        onSelectItem: handleSelectPersonaItem,\n        isCollapsed: isPersonaSidebarCollapsed,\n        onToggle: togglePersonaSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 203,\n        columnNumber: 9\n      }, this), selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && currentInterpretation && /*#__PURE__*/_jsxDEV(ConversationSidebar, {\n        selectedItem: selectedConversationItem,\n        onSelectItem: handleSelectConversationItem,\n        isCollapsed: isConversationSidebarCollapsed,\n        onToggle: toggleConversationSidebar,\n        selectedPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 212,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(ChatArea, {\n        selectedConversation: selectedConversation,\n        conversations: conversations,\n        personas: personas,\n        globalMessages: globalMessages,\n        isLoading: isLoading,\n        error: error,\n        onSendInitialMessage: sendInitialMessage,\n        onContinueConversation: continueConversation,\n        onClearError: clearError,\n        selectedPersonaItem: selectedPersonaItem,\n        onSelectPersona: handlePersonaSelection,\n        onInterpretationComplete: handleInterpretationComplete,\n        selectedConversationItem: selectedConversationItem,\n        currentInterpretation: currentInterpretation,\n        onInterpretationMessage: handleInterpretationMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 222,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 201,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"tgxmTYSs1qpd4gYc0hJh3DwjmOY=\", false, function () {\n  return [useChat];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useChat","ConversationSidebar","PersonaSidebar","ChatArea","GlobalStyle","AppContainer","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","currentInterpretation","setCurrentInterpretation","interpretationStore","setInterpretationStore","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","error","sendInitialMessage","continueConversation","selectConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","console","log","handleSelectConversationItem","handlePersonaSelection","personaId","persona","existingInterpretation","personaName","name","content","messages","role","timestamp","Date","toISOString","handleInterpretationComplete","interpretation","prev","handleInterpretationMessage","message","userMessage","setTimeout","assistantMessage","handleUpdateInterpretation","updatedInterpretation","togglePersonaSidebar","newCollapsedState","toggleConversationSidebar","children","fileName","_jsxFileName","lineNumber","columnNumber","selectedItem","onSelectItem","isCollapsed","onToggle","selectedPersonaName","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/App.tsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport { useChat } from './hooks/useChat';\r\nimport ConversationSidebar from './components/ConversationSidebar';\r\nimport PersonaSidebar from './components/PersonaSidebar';\r\nimport ChatArea from './components/ChatArea';\r\nimport { GlobalStyle, AppContainer } from './styles/GlobalStyle';\r\n\r\nconst App: React.FC = () => {\r\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\r\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\r\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\r\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\r\n  \r\n  // 해석 관련 상태\r\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\r\n    personaId: string;\r\n    personaName: string;\r\n    content: string;\r\n    messages: Array<{\r\n      role: 'user' | 'assistant';\r\n      content: string;\r\n      timestamp: string;\r\n    }>;\r\n  } | null>(null);\r\n  \r\n  // 해석 저장소 (실제로는 백엔드에서 관리)\r\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\r\n\r\n  const {\r\n    // State\r\n    personas,\r\n    globalMessages,\r\n    conversations,\r\n    selectedConversation,\r\n    selectedPersona,\r\n    isLoading,\r\n    error,\r\n\r\n    // Actions\r\n    sendInitialMessage,\r\n    continueConversation,\r\n    selectConversation,\r\n    selectPersona,\r\n    clearError,\r\n  } = useChat();\r\n\r\n  // 페르소나 메뉴 아이템 선택 핸들러\r\n  const handleSelectPersonaItem = (itemId: string | null) => {\r\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\r\n    const actualItemId = itemId === '' ? null : itemId;\r\n    setSelectedPersonaItem(actualItemId);\r\n    \r\n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\r\n    if (actualItemId !== 'training' && actualItemId !== 'admin') {\r\n      setIsConversationSidebarCollapsed(false);\r\n    }\r\n    \r\n    console.log('Selected persona item:', actualItemId);\r\n  };\r\n\r\n  // 대화 메뉴 아이템 선택 핸들러\r\n  const handleSelectConversationItem = (itemId: string | null) => {\r\n    setSelectedConversationItem(itemId);\r\n    console.log('Selected conversation item:', itemId);\r\n  };\r\n\r\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\r\n  const handlePersonaSelection = (personaId: string) => {\r\n    const persona = personas[personaId];\r\n    if (!persona) return;\r\n\r\n    // 해석이 이미 존재하는지 확인\r\n    const existingInterpretation = interpretationStore[personaId];\r\n    \r\n    if (existingInterpretation) {\r\n      // 1) 해석이 있으면 바로 채팅 모드로\r\n      setCurrentInterpretation({\r\n        personaId,\r\n        personaName: persona.name,\r\n        content: existingInterpretation,\r\n        messages: [\r\n          {\r\n            role: 'assistant',\r\n            content: existingInterpretation,\r\n            timestamp: new Date().toISOString(),\r\n          }\r\n        ],\r\n      });\r\n      \r\n      // 페르소나 선택 및 일반 채팅 모드로 전환\r\n      selectPersona(personaId);\r\n      setSelectedPersonaItem(null); // 훈습 모드 해제\r\n      setIsConversationSidebarCollapsed(false);\r\n      setSelectedConversationItem('interpretation');\r\n    } else {\r\n      // 2) 해석이 없으면 생성 과정 진행\r\n      // 팝업은 TrainingCategoryView에서 처리\r\n    }\r\n  };\r\n\r\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\r\n  const handleInterpretationComplete = (personaId: string, interpretation: string) => {\r\n    const persona = personas[personaId];\r\n    \r\n    // 해석을 저장소에 저장\r\n    setInterpretationStore(prev => ({\r\n      ...prev,\r\n      [personaId]: interpretation\r\n    }));\r\n    \r\n    // 현재 해석 설정 (해석을 첫 번째 메시지로)\r\n    setCurrentInterpretation({\r\n      personaId,\r\n      personaName: persona?.name || '',\r\n      content: interpretation,\r\n      messages: [\r\n        {\r\n          role: 'assistant',\r\n          content: interpretation,\r\n          timestamp: new Date().toISOString(),\r\n        }\r\n      ],\r\n    });\r\n    \r\n    // 페르소나 선택 및 일반 채팅 모드로 전환\r\n    selectPersona(personaId);\r\n    setSelectedPersonaItem(null); // 훈습 모드 해제\r\n    setIsConversationSidebarCollapsed(false);\r\n    setSelectedConversationItem('interpretation');\r\n  };\r\n\r\n  // 해석 채팅 메시지 전송 핸들러\r\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\r\n    if (!currentInterpretation) return false;\r\n\r\n    // 사용자 메시지 추가\r\n    const userMessage = {\r\n      role: 'user' as const,\r\n      content: message,\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n\r\n    setCurrentInterpretation(prev => prev ? {\r\n      ...prev,\r\n      messages: [...prev.messages, userMessage],\r\n    } : null);\r\n\r\n    // 가짜 응답 생성 (실제로는 백엔드 API 호출)\r\n    setTimeout(() => {\r\n      const assistantMessage = {\r\n        role: 'assistant' as const,\r\n        content: `${currentInterpretation.personaName}의 관점에서 답변드리겠습니다.\\n\\n당신의 질문 \"${message}\"에 대해 더 깊이 탐구해보면, 이는 앞서 제시한 해석과도 밀접한 연관이 있습니다. 특히 심리적 역동 측면에서 보면, 이러한 의문은 자연스러운 성찰 과정의 일부로 볼 수 있습니다.`,\r\n        timestamp: new Date().toISOString(),\r\n      };\r\n\r\n      setCurrentInterpretation(prev => prev ? {\r\n        ...prev,\r\n        messages: [...prev.messages, assistantMessage],\r\n      } : null);\r\n    }, 1500);\r\n\r\n    return true;\r\n  };\r\n\r\n  // 해석 업데이트 핸들러\r\n  const handleUpdateInterpretation = (updatedInterpretation: {\r\n    personaId: string;\r\n    personaName: string;\r\n    content: string;\r\n    messages: Array<{\r\n      role: 'user' | 'assistant';\r\n      content: string;\r\n      timestamp: string;\r\n    }>;\r\n  }) => {\r\n    setCurrentInterpretation(updatedInterpretation);\r\n  };\r\n\r\n  // 페르소나 사이드바 토글 - 두 사이드바 모두 제어\r\n  const togglePersonaSidebar = () => {\r\n    const newCollapsedState = !isPersonaSidebarCollapsed;\r\n    setIsPersonaSidebarCollapsed(newCollapsedState);\r\n    \r\n    // 페르소나 사이드바를 접을 때는 대화 목록 사이드바도 함께 접기\r\n    if (newCollapsedState) {\r\n      setIsConversationSidebarCollapsed(true);\r\n    } else {\r\n      // 페르소나 사이드바를 펼칠 때는 대화 목록 사이드바도 함께 펼치기\r\n      setIsConversationSidebarCollapsed(false);\r\n    }\r\n  };\r\n\r\n  // 대화 목록 사이드바 토글 - 자기 자신만 제어\r\n  const toggleConversationSidebar = () => {\r\n    setIsConversationSidebarCollapsed(!isConversationSidebarCollapsed);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <GlobalStyle />\r\n      <AppContainer>\r\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\r\n        <PersonaSidebar\r\n          selectedItem={selectedPersonaItem}\r\n          onSelectItem={handleSelectPersonaItem}\r\n          isCollapsed={isPersonaSidebarCollapsed}\r\n          onToggle={togglePersonaSidebar}\r\n        />\r\n\r\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있을 때만 표시 */}\r\n        {selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && currentInterpretation && (\r\n          <ConversationSidebar\r\n            selectedItem={selectedConversationItem}\r\n            onSelectItem={handleSelectConversationItem}\r\n            isCollapsed={isConversationSidebarCollapsed}\r\n            onToggle={toggleConversationSidebar}\r\n            selectedPersonaName={currentInterpretation?.personaName}\r\n          />\r\n        )}\r\n\r\n        {/* 메인 채팅 영역 */}\r\n        <ChatArea\r\n          selectedConversation={selectedConversation}\r\n          conversations={conversations}\r\n          personas={personas}\r\n          globalMessages={globalMessages}\r\n          isLoading={isLoading}\r\n          error={error}\r\n          onSendInitialMessage={sendInitialMessage}\r\n          onContinueConversation={continueConversation}\r\n          onClearError={clearError}\r\n          selectedPersonaItem={selectedPersonaItem}\r\n          onSelectPersona={handlePersonaSelection}\r\n          onInterpretationComplete={handleInterpretationComplete}\r\n          selectedConversationItem={selectedConversationItem}\r\n          currentInterpretation={currentInterpretation}\r\n          onInterpretationMessage={handleInterpretationMessage}\r\n        />\r\n      </AppContainer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}