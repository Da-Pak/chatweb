{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\shared\\\\components\\\\ChatArea.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from '../../training/components/TrainingCategoryView';\nimport InterpretationView from '../../training/components/InterpretationView';\nimport ProceedView from '../../training/components/ProceedView';\nimport SentenceView from '../../training/components/SentenceView';\nimport PersonaAdminPanel from '../../admin/components/PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport { MainArea, ChatContent, EmptyState, EmptyStateTitle, EmptyStateText, ChatHeader, ChatHeaderTitle } from '../styles/GlobalStyle';\nimport InteractionHistoryView from '../../training/components/InteractionHistoryView';\nimport RecentInteractionsView from '../components/RecentInteractionsView';\nimport VerbalizationView from '../../verbalization/components/VerbalizationView';\nimport styled from 'styled-components';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst NavigateButton = styled.button`\n  /* \"해당 대화로 이동\" 버튼 스타일 */\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  padding: 10px 20px;\n  background-color: #333;\n  color: white;\n  // ...\n`;\n_c = NavigateButton;\nconst ChatArea = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onSwitchConversationMode,\n  onRefreshConversationSidebar,\n  recentInteractionsProps,\n  verbalizationProps,\n  viewingThreadDetail,\n  onNavigateToOriginalThread\n}) => {\n  _s();\n  var _personas$currentConv, _personas$currentConv2, _personas$currentConv3;\n  const chatContentRef = useRef(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n\n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 훈습 관련 상태\n  const [threads, setThreads] = useState([]);\n  const [proceedContent, setProceedContent] = useState('');\n  const [sentenceContent, setSentenceContent] = useState('');\n  const [interactionRecords, setInteractionRecords] = useState([]);\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages, globalMessages, isLoading]);\n\n  // 훈습 데이터 로딩을 더 정확하게 수정\n  useEffect(() => {\n    const loadTrainingData = async () => {\n      if (!(currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.personaId)) return;\n      try {\n        // 스레드 데이터 로드\n        const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n        if (threadsResponse.data) {\n          setThreads(threadsResponse.data);\n\n          // 나아가기와 문장 스레드에서 콘텐츠 추출\n          const proceedThread = threadsResponse.data.find(t => t.thread_type === 'proceed');\n          const sentenceThread = threadsResponse.data.find(t => t.thread_type === 'sentence');\n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('훈습 데이터 로드 실패:', error);\n      }\n    };\n    loadTrainingData();\n  }, [currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId]);\n\n  // 스레드 업데이트 시 콘텐츠도 업데이트\n  useEffect(() => {\n    const proceedThread = threads.find(t => t.thread_type === 'proceed');\n    const sentenceThread = threads.find(t => t.thread_type === 'sentence');\n    if (proceedThread && proceedThread.messages.length > 0) {\n      const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n      if (firstProceedMessage) {\n        setProceedContent(firstProceedMessage.content);\n      }\n    }\n    if (sentenceThread && sentenceThread.messages.length > 0) {\n      const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n      if (firstSentenceMessage) {\n        setSentenceContent(firstSentenceMessage.content);\n      }\n    }\n  }, [threads]);\n\n  // 상호작용 기록 로드\n  useEffect(() => {\n    const loadInteractionRecords = async () => {\n      try {\n        const recordsResponse = await chatApi.getAllInteractionRecords();\n        if (recordsResponse.data) {\n          setInteractionRecords(recordsResponse.data);\n        }\n      } catch (error) {\n        console.error('상호작용 기록 로드 실패:', error);\n      }\n    };\n    loadInteractionRecords();\n  }, [currentInterpretation, threads]); // threads나 currentInterpretation이 변경될 때마다 새로고침\n\n  const handleSendMessage = async message => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex, newContent) => {\n    if (!currentInterpretation) return false;\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString()\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, newContent);\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant',\n              content: response.data.response,\n              timestamp: response.data.timestamp\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant',\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString()\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n\n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant',\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString()\n          };\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse]\n          };\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex, newContent) => {\n    if (!selectedConversation || !currentConversation) return false;\n    try {\n      var _result$data;\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      if ((_result$data = result.data) !== null && _result$data !== void 0 && _result$data.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    const latestMessage = globalMessages[globalMessages.length - 1];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'user',\n          content: latestMessage.user_message,\n          timestamp: latestMessage.timestamp\n        },\n        personas: personas,\n        showActionButtons: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 347,\n        columnNumber: 9\n      }, this), latestMessage.responses.map(response => /*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'assistant',\n          content: response.content,\n          timestamp: response.timestamp,\n          persona_id: response.persona_id,\n          persona_name: response.persona_name\n        },\n        personas: personas,\n        showActionButtons: true\n      }, `${latestMessage.id}_${response.persona_id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 359,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            color: '#666',\n            marginBottom: '8px'\n          },\n          children: \"\\uD83D\\uDCA1 \\uAC01 \\uD398\\uB974\\uC18C\\uB098\\uC640 \\uAC1C\\uBCC4\\uC801\\uC73C\\uB85C \\uB300\\uD654\\uB97C \\uC774\\uC5B4\\uAC00\\uB824\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 381,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '13px',\n            color: '#888'\n          },\n          children: \"\\uC67C\\uCABD \\uC0AC\\uC774\\uB4DC\\uBC14\\uC5D0\\uC11C \\uD398\\uB974\\uC18C\\uB098\\uB97C \\uC120\\uD0DD\\uD558\\uAC70\\uB098, \\uD2B9\\uC815 \\uB300\\uD654\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 373,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 345,\n      columnNumber: 7\n    }, this);\n  };\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n    return currentConversation.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      personas: personas,\n      showActionButtons: true,\n      onCopy: () => {\n        navigator.clipboard.writeText(message.content);\n      },\n      onEdit: message.role === 'user' ? () => setEditingMessageIndex(index) : undefined,\n      onEditSave: message.role === 'user' ? async newContent => {\n        const success = await handleEditConversationMessage(index, newContent);\n        if (success) {\n          setEditingMessageIndex(null);\n        }\n        return success;\n      } : undefined,\n      onEditCancel: () => setEditingMessageIndex(null),\n      isEditing: editingMessageIndex === index,\n      onSunAction: () => {},\n      onPersonAction: () => {},\n      onDocumentAction: () => {}\n    }, `${currentConversation.id}_${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 396,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEmptyState = () => /*#__PURE__*/_jsxDEV(EmptyState, {\n    children: [/*#__PURE__*/_jsxDEV(EmptyStateTitle, {\n      children: \"\\uC0C8\\uB85C\\uC6B4 \\uB300\\uD654\\uB97C \\uC2DC\\uC791\\uD574\\uBCF4\\uC138\\uC694!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 423,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmptyStateText, {\n      children: Object.keys(personas).length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\uC544\\uB798\\uC5D0 \\uC9C8\\uBB38\\uC744 \\uC785\\uB825\\uD558\\uBA74 \", Object.keys(personas).length, \"\\uAC1C\\uC758 \\uD398\\uB974\\uC18C\\uB098\\uAC00\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 427,\n          columnNumber: 64\n        }, this), \"\\uAC01\\uAC01 \\uB2E4\\uB978 \\uAD00\\uC810\\uC5D0\\uC11C \\uB2F5\\uBCC0\\uD574\\uB4DC\\uB9BD\\uB2C8\\uB2E4.\"]\n      }, void 0, true) : '페르소나 정보를 불러오는 중입니다...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 424,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 422,\n    columnNumber: 5\n  }, this);\n\n  // 모드 전환 핸들러\n  const handleSwitchToMode = mode => {\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(mode);\n    }\n  };\n\n  // 새로운 해석 생성 핸들러\n  const handleGenerateNewInterpretation = async () => {\n    if (!(currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.personaId)) return;\n    try {\n      // 새로운 해석을 생성하고 완료 콜백 호출\n      onInterpretationComplete(currentInterpretation.personaId, '새로운 해석을 생성합니다...');\n    } catch (error) {\n      console.error('새로운 해석 생성 실패:', error);\n    }\n  };\n\n  // 선택된 스레드 추출\n  const getSelectedThread = conversationItem => {\n    if (!conversationItem || !conversationItem.includes('-thread-')) return null;\n    const threadId = conversationItem.split('-thread-')[1];\n    return threads.find(thread => thread.id === threadId) || null;\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    if (!(currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.personaId)) return;\n    try {\n      console.log('=== 스레드 새로고침 시작 ===');\n      console.log('personaId:', currentInterpretation.personaId);\n\n      // 1. 스레드 정보 새로고침\n      const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setThreads(updatedThreads);\n        console.log('스레드 업데이트 완료:', updatedThreads.length, '개');\n\n        // 콘텐츠 업데이트\n        const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n        const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n        if (proceedThread && proceedThread.messages.length > 0) {\n          const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n          if (firstProceedMessage) {\n            setProceedContent(firstProceedMessage.content);\n          }\n        }\n        if (sentenceThread && sentenceThread.messages.length > 0) {\n          const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n          if (firstSentenceMessage) {\n            setSentenceContent(firstSentenceMessage.content);\n          }\n        }\n      }\n\n      // 2. 해석 내용도 새로고침 (중요!)\n      try {\n        console.log('해석 내용 새로고침 시작...');\n        const interpretationResponse = await chatApi.getInterpretation(currentInterpretation.personaId);\n        if (interpretationResponse.data) {\n          console.log('해석 내용 업데이트:', interpretationResponse.data.interpretation.substring(0, 100) + '...');\n\n          // 해석 내용 업데이트\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            content: interpretationResponse.data.interpretation\n          };\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n            console.log('해석 내용 업데이트 완료');\n          }\n        }\n      } catch (interpretationError) {\n        console.warn('해석 내용 새로고침 실패:', interpretationError);\n      }\n\n      // 3. 상호작용 기록도 새로고침 (해석 저장이 반영되도록)\n      try {\n        console.log('상호작용 기록 새로고침 시작...');\n        const interactionResponse = await chatApi.getAllInteractionRecords();\n        if (interactionResponse.data) {\n          setInteractionRecords(interactionResponse.data);\n          console.log('상호작용 기록 업데이트 완료:', interactionResponse.data.length, '개');\n        }\n      } catch (interactionError) {\n        console.warn('상호작용 기록 새로고침 실패:', interactionError);\n      }\n\n      // 4. ConversationSidebar 새로고침\n      if (onRefreshConversationSidebar) {\n        console.log('ConversationSidebar 새로고침 트리거...');\n        onRefreshConversationSidebar();\n      }\n      console.log('=== 스레드 새로고침 완료 ===');\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    var _selectedThread;\n    if (!currentInterpretation) return null;\n\n    // 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\n    let selectedThread = getSelectedThread(selectedConversationItem);\n    const isInterpretationThread = selectedConversationItem === null || selectedConversationItem === void 0 ? void 0 : selectedConversationItem.startsWith('interpretation-thread-');\n\n    // 스레드가 선택되지 않았으면 가장 최신 해석 스레드를 찾아서 사용 (나아가기와 동일)\n    if (!selectedThread) {\n      const interpretationThreads = threads.filter(thread => thread.thread_type === 'interpretation');\n      if (interpretationThreads.length > 0) {\n        selectedThread = interpretationThreads.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        console.log('가장 최신 해석 스레드 자동 선택:', selectedThread.id);\n      }\n    }\n\n    // 사용할 메시지들 결정: 해석 스레드가 선택되었으면 해당 스레드의 메시지 사용\n    const messagesToShow = isInterpretationThread && selectedThread ? selectedThread.messages : currentInterpretation.messages;\n\n    // 사용할 해석 내용 결정: 해석 스레드가 선택되었으면 해당 스레드의 content 사용\n    const interpretationContent = isInterpretationThread && selectedThread ? selectedThread.content || (selectedThread.messages.length > 0 ? selectedThread.messages[0].content : currentInterpretation.content) : currentInterpretation.content;\n    console.log('해석 뷰 렌더링:', {\n      isInterpretationThread,\n      selectedThreadId: (_selectedThread = selectedThread) === null || _selectedThread === void 0 ? void 0 : _selectedThread.id,\n      messageCount: messagesToShow.length,\n      contentPreview: interpretationContent.substring(0, 100) + '...'\n    });\n    return /*#__PURE__*/_jsxDEV(InterpretationView, {\n      interpretation: interpretationContent,\n      personaName: currentInterpretation.personaName,\n      onSendMessage: onInterpretationMessage,\n      onEditMessage: handleEditInterpretationMessage,\n      isLoading: isLoading,\n      messages: messagesToShow,\n      onGenerateNewInterpretation: handleGenerateNewInterpretation,\n      onSwitchToMode: handleSwitchToMode,\n      personaId: currentInterpretation.personaId,\n      onRefreshThreads: handleRefreshThreads,\n      selectedThread: selectedThread\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 581,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 나아가기 뷰 렌더링\n  const renderProceedView = () => {\n    if (!currentInterpretation) return null;\n    const selectedThread = getSelectedThread(selectedConversationItem);\n    return /*#__PURE__*/_jsxDEV(ProceedView, {\n      personaId: currentInterpretation.personaId,\n      personaName: currentInterpretation.personaName,\n      proceedContent: proceedContent || '나아가기를 생성하고 있습니다...',\n      threads: threads,\n      onThreadUpdate: updatedThreads => {\n        setThreads(updatedThreads);\n        // 스레드 업데이트 시 콘텐츠도 업데이트\n        const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n        if (proceedThread && proceedThread.messages.length > 0) {\n          const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n          if (firstProceedMessage) {\n            setProceedContent(firstProceedMessage.content);\n          }\n        }\n        // ConversationSidebar 새로고침\n        if (onRefreshConversationSidebar) {\n          onRefreshConversationSidebar();\n        }\n      },\n      onSwitchToMode: handleSwitchToMode,\n      onGenerateNewInterpretation: handleGenerateNewInterpretation,\n      selectedThread: selectedThread,\n      onRefreshThreads: handleRefreshThreads\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 604,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 문장 뷰 렌더링\n  const renderSentenceView = () => {\n    if (!currentInterpretation) return null;\n    const selectedThread = getSelectedThread(selectedConversationItem);\n    return /*#__PURE__*/_jsxDEV(SentenceView, {\n      personaId: currentInterpretation.personaId,\n      personaName: currentInterpretation.personaName,\n      sentenceContent: sentenceContent || '문장을 생성하고 있습니다...',\n      threads: threads,\n      onThreadUpdate: updatedThreads => {\n        setThreads(updatedThreads);\n        // 스레드 업데이트 시 콘텐츠도 업데이트\n        const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n        if (sentenceThread && sentenceThread.messages.length > 0) {\n          const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n          if (firstSentenceMessage) {\n            setSentenceContent(firstSentenceMessage.content);\n          }\n        }\n        // ConversationSidebar 새로고침\n        if (onRefreshConversationSidebar) {\n          onRefreshConversationSidebar();\n        }\n      },\n      onSwitchToMode: handleSwitchToMode,\n      onGenerateNewInterpretation: handleGenerateNewInterpretation,\n      selectedThread: selectedThread,\n      onRefreshThreads: handleRefreshThreads\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 상호작용 기록 뷰 렌더링\n  const renderInteractionHistoryView = () => {\n    if (!currentInterpretation) return null;\n    return /*#__PURE__*/_jsxDEV(InteractionHistoryView, {\n      personaId: currentInterpretation.personaId,\n      personaName: currentInterpretation.personaName,\n      allInteractionRecords: interactionRecords,\n      onThreadSelect: handleInteractionThreadSelect,\n      onSwitchToMode: handleSwitchToMode,\n      onGenerateNewInterpretation: handleGenerateNewInterpretation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 672,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 상호작용 기록에서 스레드 선택 핸들러\n  const handleInteractionThreadSelect = thread => {\n    // 해당 스레드의 모드로 전환하고 스레드 선택\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(`${thread.thread_type}-thread-${thread.id}`);\n    }\n  };\n  if (viewingThreadDetail) {\n    return /*#__PURE__*/_jsxDEV(MainArea, {\n      children: [/*#__PURE__*/_jsxDEV(NavigateButton, {\n        onClick: onNavigateToOriginalThread,\n        children: \"\\uD574\\uB2F9 \\uB300\\uD654\\uB85C \\uC774\\uB3D9 \\u279E\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 694,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatHeader, {\n        children: /*#__PURE__*/_jsxDEV(ChatHeaderTitle, {\n          children: [viewingThreadDetail.persona_name, \" - \", viewingThreadDetail.thread_type]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 698,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 697,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatContent, {\n        children: viewingThreadDetail.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n          message: message,\n          personas: {}\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 704,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 702,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 693,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MainArea, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 714,\n      columnNumber: 11\n    }, this), selectedPersonaItem === 'training' ? /*#__PURE__*/_jsxDEV(TrainingCategoryView, {\n      personas: personas,\n      onSelectPersona: onSelectPersona || (() => {}),\n      onInterpretationComplete: onInterpretationComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 724,\n      columnNumber: 9\n    }, this) : selectedPersonaItem === 'recent' ?\n    /*#__PURE__*/\n    // 최근 상호작용 모드일 때 RecentInteractionsView 표시\n    _jsxDEV(RecentInteractionsView, {\n      personas: (recentInteractionsProps === null || recentInteractionsProps === void 0 ? void 0 : recentInteractionsProps.personas) || {},\n      onSelectPersona: (recentInteractionsProps === null || recentInteractionsProps === void 0 ? void 0 : recentInteractionsProps.onSelectPersona) || (() => {}),\n      onThreadSelect: (recentInteractionsProps === null || recentInteractionsProps === void 0 ? void 0 : recentInteractionsProps.onThreadSelect) || (() => {}),\n      selectedThreadId: selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('recent-thread-') ? selectedConversationItem.split('-')[2] : undefined,\n      selectedPersonaId: selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('recent-thread-') ? selectedConversationItem.split('-')[3] : undefined\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 731,\n      columnNumber: 9\n    }, this) : selectedPersonaItem === 'verbalization' ?\n    /*#__PURE__*/\n    // 언어화 모드일 때 VerbalizationView 표시\n    _jsxDEV(VerbalizationView, {\n      selectedThread: (verbalizationProps === null || verbalizationProps === void 0 ? void 0 : verbalizationProps.selectedThread) || null,\n      threads: (verbalizationProps === null || verbalizationProps === void 0 ? void 0 : verbalizationProps.threads) || [],\n      onThreadUpdate: (verbalizationProps === null || verbalizationProps === void 0 ? void 0 : verbalizationProps.onThreadUpdate) || (() => {}),\n      onCreateNewThread: (verbalizationProps === null || verbalizationProps === void 0 ? void 0 : verbalizationProps.onCreateNewThread) || (async () => {})\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 748,\n      columnNumber: 9\n    }, this) : selectedPersonaItem === 'admin' ? /*#__PURE__*/_jsxDEV(PersonaAdminPanel, {\n      onClose: () => {\n        // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n        if (onSelectPersona) {\n          onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 755,\n      columnNumber: 9\n    }, this) : currentInterpretation && (selectedConversationItem === 'proceed' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('proceed-thread-')) ?\n    // 나아가기 모드일 때 ProceedView 사용\n    renderProceedView() : currentInterpretation && (selectedConversationItem === 'sentence' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('sentence-thread-')) ?\n    // 문장 모드일 때 SentenceView 사용\n    renderSentenceView() : currentInterpretation && (selectedConversationItem === 'interpretation' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('interpretation-thread-')) ?\n    // 해석 모드일 때 InterpretationView 사용\n    renderInterpretationView() : currentInterpretation && selectedConversationItem === 'interaction_history' ?\n    // 상호작용 기록 모드일 때 InteractionHistoryView 사용\n    renderInteractionHistoryView() : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatContent, {\n        ref: chatContentRef,\n        children: [!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState(), !selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses(), selectedConversation && renderConversation(), isLoading && (selectedConversation && currentConversation ? /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: (_personas$currentConv = personas[currentConversation.persona_id]) === null || _personas$currentConv === void 0 ? void 0 : _personas$currentConv.name,\n          personaColor: (_personas$currentConv2 = personas[currentConversation.persona_id]) === null || _personas$currentConv2 === void 0 ? void 0 : _personas$currentConv2.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 790,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"AI\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 795,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 777,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        disabled: isLoading || Object.keys(personas).length === 0,\n        placeholder: selectedConversation && currentConversation ? `${(_personas$currentConv3 = personas[currentConversation.persona_id]) === null || _personas$currentConv3 === void 0 ? void 0 : _personas$currentConv3.name}에게 메시지를 보내세요...` : \"모든 페르소나에게 질문해보세요...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 803,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 712,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatArea, \"ZpaVkbWLJKttFKo6G/JtUbnr7cQ=\");\n_c2 = ChatArea;\nexport default ChatArea;\nvar _c, _c2;\n$RefreshReg$(_c, \"NavigateButton\");\n$RefreshReg$(_c2, \"ChatArea\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Message","MessageInput","TrainingCategoryView","InterpretationView","ProceedView","SentenceView","PersonaAdminPanel","LoadingMessage","chatApi","MainArea","ChatContent","EmptyState","EmptyStateTitle","EmptyStateText","ChatHeader","ChatHeaderTitle","InteractionHistoryView","RecentInteractionsView","VerbalizationView","styled","jsxDEV","_jsxDEV","Fragment","_Fragment","NavigateButton","button","_c","ChatArea","selectedConversation","conversations","personas","globalMessages","isLoading","error","onSendInitialMessage","onContinueConversation","onClearError","selectedPersonaItem","onSelectPersona","onInterpretationComplete","selectedConversationItem","currentInterpretation","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","verbalizationProps","viewingThreadDetail","onNavigateToOriginalThread","_s","_personas$currentConv","_personas$currentConv2","_personas$currentConv3","chatContentRef","currentConversation","editingMessageIndex","setEditingMessageIndex","threads","setThreads","proceedContent","setProceedContent","sentenceContent","setSentenceContent","interactionRecords","setInteractionRecords","current","scrollTop","scrollHeight","messages","loadTrainingData","personaId","threadsResponse","getPersonaThreads","data","proceedThread","find","t","thread_type","sentenceThread","length","firstProceedMessage","m","role","content","firstSentenceMessage","console","loadInteractionRecords","recordsResponse","getAllInteractionRecords","handleSendMessage","message","handleEditInterpretationMessage","messageIndex","newContent","updatedMessages","timestamp","Date","toISOString","filteredMessages","slice","response","chatWithInterpretation","aiResponse","updatedInterpretation","personaName","apiError","handleEditConversationMessage","_result$data","result","editMessage","success","updated_conversation","renderInitialResponses","latestMessage","children","user_message","showActionButtons","fileName","_jsxFileName","lineNumber","columnNumber","responses","map","persona_id","persona_name","id","style","margin","padding","backgroundColor","borderRadius","border","textAlign","fontSize","color","marginBottom","renderConversation","index","onCopy","navigator","clipboard","writeText","onEdit","undefined","onEditSave","onEditCancel","isEditing","onSunAction","onPersonAction","onDocumentAction","renderEmptyState","Object","keys","handleSwitchToMode","mode","handleGenerateNewInterpretation","getSelectedThread","conversationItem","includes","threadId","split","thread","handleRefreshThreads","log","updatedThreads","interpretationResponse","getInterpretation","interpretation","substring","interpretationError","warn","interactionResponse","interactionError","renderInterpretationView","_selectedThread","selectedThread","isInterpretationThread","startsWith","interpretationThreads","filter","sort","a","b","created_at","getTime","messagesToShow","interpretationContent","selectedThreadId","messageCount","contentPreview","onSendMessage","onEditMessage","onGenerateNewInterpretation","onSwitchToMode","onRefreshThreads","renderProceedView","onThreadUpdate","renderSentenceView","renderInteractionHistoryView","allInteractionRecords","onThreadSelect","handleInteractionThreadSelect","onClick","height","borderBottom","background","selectedPersonaId","onCreateNewThread","onClose","ref","name","personaColor","disabled","placeholder","_c2","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/shared/components/ChatArea.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Conversation, Persona, GlobalMessage, TrainingThread, InteractionRecord } from '../types';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from '../../training/components/TrainingCategoryView';\nimport InterpretationView from '../../training/components/InterpretationView';\nimport ProceedView from '../../training/components/ProceedView';\nimport SentenceView from '../../training/components/SentenceView';\nimport PersonaAdminPanel from '../../admin/components/PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport {\n  MainArea,\n  ChatContent,\n  EmptyState,\n  EmptyStateTitle,\n  EmptyStateText,\n  ChatHeader,\n  ChatHeaderTitle,\n} from '../styles/GlobalStyle';\nimport InteractionHistoryView from '../../training/components/InteractionHistoryView';\nimport RecentInteractionsView from '../components/RecentInteractionsView';\nimport VerbalizationView from '../../verbalization/components/VerbalizationView';\nimport { ThreadDetail } from '../../core/MainLayout';\nimport styled from 'styled-components';\nimport { Message as MessageType } from '../types';\n\ninterface ChatAreaProps {\n  selectedConversation: string | null;\n  conversations: Record<string, Conversation>;\n  personas: Record<string, Persona>;\n  globalMessages: GlobalMessage[];\n  isLoading: boolean;\n  error: string | null;\n  onSendInitialMessage: (message: string) => Promise<boolean>;\n  onContinueConversation: (conversationId: string, message: string) => Promise<boolean>;\n  onClearError: () => void;\n  selectedPersonaItem?: string | null; // 훈습 모드 확인용\n  onSelectPersona?: (personaId: string) => void; // 페르소나 선택 핸들러\n  onInterpretationComplete: (personaId: string, interpretation: string) => void; // 해석 완료 핸들러\n  selectedConversationItem?: string | null; // 선택된 대화 항목\n  currentInterpretation?: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null;\n  onInterpretationMessage: (message: string) => Promise<boolean>; // 해석 채팅 메시지 핸들러\n  onUpdateInterpretation?: (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => void; // 해석 업데이트 핸들러\n  onUpdateConversation?: (updatedConversation: any) => void; // 대화 업데이트 핸들러\n  onSwitchConversationMode?: (mode: string) => void; // 대화 모드 전환 핸들러\n  onRefreshConversationSidebar?: () => void; // ConversationSidebar 새로고침 핸들러\n  recentInteractionsProps?: {\n    personas: Record<string, Persona>;\n    onSelectPersona: (personaId: string) => void;\n    onThreadSelect: (thread: TrainingThread, personaId: string) => void;\n  }; // 최근 상호작용 관련 props\n  verbalizationProps?: {\n    selectedThread: TrainingThread | null;\n    threads: TrainingThread[];\n    onThreadUpdate: () => void;\n    onCreateNewThread: () => Promise<void>;\n  }; // 언어화 관련 props\n  viewingThreadDetail: ThreadDetail | null;\n  onNavigateToOriginalThread: () => void;\n}\n\nconst NavigateButton = styled.button`\n  /* \"해당 대화로 이동\" 버튼 스타일 */\n  position: absolute;\n  top: 20px;\n  right: 20px;\n  padding: 10px 20px;\n  background-color: #333;\n  color: white;\n  // ...\n`;\n\nconst ChatArea: React.FC<ChatAreaProps> = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onSwitchConversationMode,\n  onRefreshConversationSidebar,\n  recentInteractionsProps,\n  verbalizationProps,\n  viewingThreadDetail,\n  onNavigateToOriginalThread,\n}) => {\n  const chatContentRef = useRef<HTMLDivElement>(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n  \n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 훈습 관련 상태\n  const [threads, setThreads] = useState<TrainingThread[]>([]);\n  const [proceedContent, setProceedContent] = useState<string>('');\n  const [sentenceContent, setSentenceContent] = useState<string>('');\n  const [interactionRecords, setInteractionRecords] = useState<InteractionRecord[]>([]);\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation?.messages, globalMessages, isLoading]);\n\n  // 훈습 데이터 로딩을 더 정확하게 수정\n  useEffect(() => {\n    const loadTrainingData = async () => {\n      if (!currentInterpretation?.personaId) return;\n\n      try {\n        // 스레드 데이터 로드\n        const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n        if (threadsResponse.data) {\n          setThreads(threadsResponse.data);\n          \n          // 나아가기와 문장 스레드에서 콘텐츠 추출\n          const proceedThread = threadsResponse.data.find(t => t.thread_type === 'proceed');\n          const sentenceThread = threadsResponse.data.find(t => t.thread_type === 'sentence');\n          \n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          \n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('훈습 데이터 로드 실패:', error);\n      }\n    };\n\n    loadTrainingData();\n  }, [currentInterpretation?.personaId]);\n\n  // 스레드 업데이트 시 콘텐츠도 업데이트\n  useEffect(() => {\n    const proceedThread = threads.find(t => t.thread_type === 'proceed');\n    const sentenceThread = threads.find(t => t.thread_type === 'sentence');\n    \n    if (proceedThread && proceedThread.messages.length > 0) {\n      const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n      if (firstProceedMessage) {\n        setProceedContent(firstProceedMessage.content);\n      }\n    }\n    \n    if (sentenceThread && sentenceThread.messages.length > 0) {\n      const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n      if (firstSentenceMessage) {\n        setSentenceContent(firstSentenceMessage.content);\n      }\n    }\n  }, [threads]);\n\n  // 상호작용 기록 로드\n  useEffect(() => {\n    const loadInteractionRecords = async () => {\n      try {\n        const recordsResponse = await chatApi.getAllInteractionRecords();\n        if (recordsResponse.data) {\n          setInteractionRecords(recordsResponse.data);\n        }\n      } catch (error) {\n        console.error('상호작용 기록 로드 실패:', error);\n      }\n    };\n\n    loadInteractionRecords();\n  }, [currentInterpretation, threads]); // threads나 currentInterpretation이 변경될 때마다 새로고침\n\n  const handleSendMessage = async (message: string) => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString(),\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(\n            currentInterpretation.personaId,\n            newContent\n          );\n\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: response.data.response,\n              timestamp: response.data.timestamp,\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString(),\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n          \n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant' as const,\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse],\n          };\n\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!selectedConversation || !currentConversation) return false;\n\n    try {\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      \n      if (result.data?.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        \n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n\n\n\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    \n    const latestMessage = globalMessages[globalMessages.length - 1];\n    \n    return (\n      <div>\n        {/* 사용자 질문 */}\n        <Message\n          message={{\n            role: 'user',\n            content: latestMessage.user_message,\n            timestamp: latestMessage.timestamp,\n          }}\n          personas={personas}\n          showActionButtons={false}\n        />\n        \n        {/* 모든 페르소나 응답 */}\n        {latestMessage.responses.map((response) => (\n          <Message\n            key={`${latestMessage.id}_${response.persona_id}`}\n            message={{\n              role: 'assistant',\n              content: response.content,\n              timestamp: response.timestamp,\n              persona_id: response.persona_id,\n              persona_name: response.persona_name,\n            }}\n            personas={personas}\n            showActionButtons={true}\n          />\n        ))}\n        \n        <div style={{\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center',\n        }}>\n          <div style={{ fontSize: '14px', color: '#666', marginBottom: '8px' }}>\n            💡 각 페르소나와 개별적으로 대화를 이어가려면\n          </div>\n          <div style={{ fontSize: '13px', color: '#888' }}>\n            왼쪽 사이드바에서 페르소나를 선택하거나, 특정 대화를 선택하세요\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n\n    return currentConversation.messages.map((message, index) => (\n      <Message\n        key={`${currentConversation.id}_${index}`}\n        message={message}\n        personas={personas}\n        showActionButtons={true}\n        onCopy={() => {\n          navigator.clipboard.writeText(message.content);\n        }}\n        onEdit={message.role === 'user' ? () => setEditingMessageIndex(index) : undefined}\n        onEditSave={message.role === 'user' ? async (newContent) => {\n          const success = await handleEditConversationMessage(index, newContent);\n                  if (success) {\n          setEditingMessageIndex(null);\n        }\n          return success;\n        } : undefined}\n        onEditCancel={() => setEditingMessageIndex(null)}\n        isEditing={editingMessageIndex === index}\n        onSunAction={() => {}}\n        onPersonAction={() => {}}\n        onDocumentAction={() => {}}\n      />\n    ));\n  };\n\n  const renderEmptyState = () => (\n    <EmptyState>\n      <EmptyStateTitle>새로운 대화를 시작해보세요!</EmptyStateTitle>\n      <EmptyStateText>\n        {Object.keys(personas).length > 0 ? (\n          <>\n            아래에 질문을 입력하면 {Object.keys(personas).length}개의 페르소나가<br />\n            각각 다른 관점에서 답변해드립니다.\n          </>\n        ) : (\n          '페르소나 정보를 불러오는 중입니다...'\n        )}\n      </EmptyStateText>\n    </EmptyState>\n  );\n\n  // 모드 전환 핸들러\n  const handleSwitchToMode = (mode: 'interpretation' | 'proceed' | 'sentence') => {\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(mode);\n    }\n  };\n\n  // 새로운 해석 생성 핸들러\n  const handleGenerateNewInterpretation = async () => {\n    if (!currentInterpretation?.personaId) return;\n    \n    try {\n      // 새로운 해석을 생성하고 완료 콜백 호출\n      onInterpretationComplete(currentInterpretation.personaId, '새로운 해석을 생성합니다...');\n    } catch (error) {\n      console.error('새로운 해석 생성 실패:', error);\n    }\n  };\n\n  // 선택된 스레드 추출\n  const getSelectedThread = (conversationItem: string | null | undefined): TrainingThread | null => {\n    if (!conversationItem || !conversationItem.includes('-thread-')) return null;\n    \n    const threadId = conversationItem.split('-thread-')[1];\n    return threads.find(thread => thread.id === threadId) || null;\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    if (!currentInterpretation?.personaId) return;\n    \n    try {\n      console.log('=== 스레드 새로고침 시작 ===');\n      console.log('personaId:', currentInterpretation.personaId);\n      \n      // 1. 스레드 정보 새로고침\n      const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setThreads(updatedThreads);\n        console.log('스레드 업데이트 완료:', updatedThreads.length, '개');\n        \n        // 콘텐츠 업데이트\n        const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n        const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n        \n        if (proceedThread && proceedThread.messages.length > 0) {\n          const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n          if (firstProceedMessage) {\n            setProceedContent(firstProceedMessage.content);\n          }\n        }\n        \n        if (sentenceThread && sentenceThread.messages.length > 0) {\n          const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n          if (firstSentenceMessage) {\n            setSentenceContent(firstSentenceMessage.content);\n          }\n        }\n      }\n      \n      // 2. 해석 내용도 새로고침 (중요!)\n      try {\n        console.log('해석 내용 새로고침 시작...');\n        const interpretationResponse = await chatApi.getInterpretation(currentInterpretation.personaId);\n        if (interpretationResponse.data) {\n          console.log('해석 내용 업데이트:', interpretationResponse.data.interpretation.substring(0, 100) + '...');\n          \n          // 해석 내용 업데이트\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            content: interpretationResponse.data.interpretation,\n          };\n          \n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n            console.log('해석 내용 업데이트 완료');\n          }\n        }\n      } catch (interpretationError) {\n        console.warn('해석 내용 새로고침 실패:', interpretationError);\n      }\n      \n      // 3. 상호작용 기록도 새로고침 (해석 저장이 반영되도록)\n      try {\n        console.log('상호작용 기록 새로고침 시작...');\n        const interactionResponse = await chatApi.getAllInteractionRecords();\n        if (interactionResponse.data) {\n          setInteractionRecords(interactionResponse.data);\n          console.log('상호작용 기록 업데이트 완료:', interactionResponse.data.length, '개');\n        }\n      } catch (interactionError) {\n        console.warn('상호작용 기록 새로고침 실패:', interactionError);\n      }\n      \n      // 4. ConversationSidebar 새로고침\n      if (onRefreshConversationSidebar) {\n        console.log('ConversationSidebar 새로고침 트리거...');\n        onRefreshConversationSidebar();\n      }\n      \n      console.log('=== 스레드 새로고침 완료 ===');\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return null;\n\n    // 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\n    let selectedThread = getSelectedThread(selectedConversationItem);\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    \n    // 스레드가 선택되지 않았으면 가장 최신 해석 스레드를 찾아서 사용 (나아가기와 동일)\n    if (!selectedThread) {\n      const interpretationThreads = threads.filter(thread => thread.thread_type === 'interpretation');\n      if (interpretationThreads.length > 0) {\n        selectedThread = interpretationThreads.sort((a, b) => \n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n        )[0];\n        console.log('가장 최신 해석 스레드 자동 선택:', selectedThread.id);\n      }\n    }\n    \n    // 사용할 메시지들 결정: 해석 스레드가 선택되었으면 해당 스레드의 메시지 사용\n    const messagesToShow = isInterpretationThread && selectedThread \n      ? selectedThread.messages \n      : currentInterpretation.messages;\n    \n    // 사용할 해석 내용 결정: 해석 스레드가 선택되었으면 해당 스레드의 content 사용\n    const interpretationContent = isInterpretationThread && selectedThread \n      ? (selectedThread.content || (selectedThread.messages.length > 0 ? selectedThread.messages[0].content : currentInterpretation.content))\n      : currentInterpretation.content;\n\n    console.log('해석 뷰 렌더링:', {\n      isInterpretationThread,\n      selectedThreadId: selectedThread?.id,\n      messageCount: messagesToShow.length,\n      contentPreview: interpretationContent.substring(0, 100) + '...'\n    });\n\n    return (\n      <InterpretationView\n        interpretation={interpretationContent}\n        personaName={currentInterpretation.personaName}\n        onSendMessage={onInterpretationMessage}\n        onEditMessage={handleEditInterpretationMessage}\n        isLoading={isLoading}\n        messages={messagesToShow}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        onSwitchToMode={handleSwitchToMode}\n        personaId={currentInterpretation.personaId}\n        onRefreshThreads={handleRefreshThreads}\n        selectedThread={selectedThread}\n      />\n    );\n  };\n\n  // 나아가기 뷰 렌더링\n  const renderProceedView = () => {\n    if (!currentInterpretation) return null;\n\n    const selectedThread = getSelectedThread(selectedConversationItem);\n\n    return (\n      <ProceedView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        proceedContent={proceedContent || '나아가기를 생성하고 있습니다...'}\n        threads={threads}\n        onThreadUpdate={(updatedThreads) => {\n          setThreads(updatedThreads);\n          // 스레드 업데이트 시 콘텐츠도 업데이트\n          const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          // ConversationSidebar 새로고침\n          if (onRefreshConversationSidebar) {\n            onRefreshConversationSidebar();\n          }\n        }}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        selectedThread={selectedThread}\n        onRefreshThreads={handleRefreshThreads}\n      />\n    );\n  };\n\n  // 문장 뷰 렌더링\n  const renderSentenceView = () => {\n    if (!currentInterpretation) return null;\n\n    const selectedThread = getSelectedThread(selectedConversationItem);\n\n    return (\n      <SentenceView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        sentenceContent={sentenceContent || '문장을 생성하고 있습니다...'}\n        threads={threads}\n        onThreadUpdate={(updatedThreads) => {\n          setThreads(updatedThreads);\n          // 스레드 업데이트 시 콘텐츠도 업데이트\n          const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n          // ConversationSidebar 새로고침\n          if (onRefreshConversationSidebar) {\n            onRefreshConversationSidebar();\n          }\n        }}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        selectedThread={selectedThread}\n        onRefreshThreads={handleRefreshThreads}\n      />\n    );\n  };\n\n  // 상호작용 기록 뷰 렌더링\n  const renderInteractionHistoryView = () => {\n    if (!currentInterpretation) return null;\n\n    return (\n      <InteractionHistoryView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        allInteractionRecords={interactionRecords}\n        onThreadSelect={handleInteractionThreadSelect}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n      />\n    );\n  };\n\n  // 상호작용 기록에서 스레드 선택 핸들러\n  const handleInteractionThreadSelect = (thread: TrainingThread) => {\n    // 해당 스레드의 모드로 전환하고 스레드 선택\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(`${thread.thread_type}-thread-${thread.id}`);\n    }\n  };\n\n  if (viewingThreadDetail) {\n    return (\n      <MainArea>\n        <NavigateButton onClick={onNavigateToOriginalThread}>\n          해당 대화로 이동 ➞\n        </NavigateButton>\n        <ChatHeader>\n          <ChatHeaderTitle>\n            {viewingThreadDetail.persona_name} - {viewingThreadDetail.thread_type}\n          </ChatHeaderTitle>\n        </ChatHeader>\n        <ChatContent>\n          {viewingThreadDetail.messages.map((message: MessageType, index: number) => (\n            <Message key={index} message={message} personas={{}} />\n          ))}\n        </ChatContent>\n      </MainArea>\n    );\n  }\n\n  return (\n    <MainArea>\n      {/* 메인 영역 헤더 - 사이드바와 높이 맞춤 (80px) - 빈 공간 */}\n          <div style={{ \n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white',\n          }}>\n        {/* 빈 헤더 공간 */}\n          </div>\n\n      {/* 훈습 모드일 때 카테고리 뷰 표시 */}\n      {selectedPersonaItem === 'training' ? (\n        <TrainingCategoryView\n          personas={personas}\n          onSelectPersona={onSelectPersona || (() => {})}\n          onInterpretationComplete={onInterpretationComplete}\n        />\n      ) : selectedPersonaItem === 'recent' ? (\n        // 최근 상호작용 모드일 때 RecentInteractionsView 표시\n        <RecentInteractionsView\n          personas={recentInteractionsProps?.personas || {}}\n          onSelectPersona={recentInteractionsProps?.onSelectPersona || (() => {})}\n          onThreadSelect={recentInteractionsProps?.onThreadSelect || (() => {})}\n          selectedThreadId={\n            selectedConversationItem?.startsWith('recent-thread-') \n              ? selectedConversationItem.split('-')[2]\n              : undefined\n          }\n          selectedPersonaId={\n            selectedConversationItem?.startsWith('recent-thread-') \n              ? selectedConversationItem.split('-')[3]\n              : undefined\n          }\n        />\n      ) : selectedPersonaItem === 'verbalization' ? (\n        // 언어화 모드일 때 VerbalizationView 표시\n        <VerbalizationView\n          selectedThread={verbalizationProps?.selectedThread || null}\n          threads={verbalizationProps?.threads || []}\n          onThreadUpdate={verbalizationProps?.onThreadUpdate || (() => {})}\n          onCreateNewThread={verbalizationProps?.onCreateNewThread || (async () => {})}\n        />\n      ) : selectedPersonaItem === 'admin' ? (\n        <PersonaAdminPanel \n          onClose={() => {\n            // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n            if (onSelectPersona) {\n              onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n            }\n          }}\n        />\n      ) : currentInterpretation && (selectedConversationItem === 'proceed' || selectedConversationItem?.startsWith('proceed-thread-')) ? (\n        // 나아가기 모드일 때 ProceedView 사용\n        renderProceedView()\n      ) : currentInterpretation && (selectedConversationItem === 'sentence' || selectedConversationItem?.startsWith('sentence-thread-')) ? (\n        // 문장 모드일 때 SentenceView 사용\n        renderSentenceView()\n      ) : currentInterpretation && (selectedConversationItem === 'interpretation' || selectedConversationItem?.startsWith('interpretation-thread-')) ? (\n        // 해석 모드일 때 InterpretationView 사용\n        renderInterpretationView()\n      ) : currentInterpretation && selectedConversationItem === 'interaction_history' ? (\n        // 상호작용 기록 모드일 때 InteractionHistoryView 사용\n        renderInteractionHistoryView()\n      ) : (\n        <>\n      <ChatContent ref={chatContentRef}>\n        {/* {error && (\n          <ErrorMessage onClick={onClearError}>\n            {error} (클릭하여 닫기)\n          </ErrorMessage>\n        )} */}\n\n            {!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState()}\n            {!selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses()}\n        {selectedConversation && renderConversation()}\n\n        {isLoading && (\n          selectedConversation && currentConversation ? (\n            <LoadingMessage \n              personaName={personas[currentConversation.persona_id]?.name}\n              personaColor={personas[currentConversation.persona_id]?.color}\n            />\n          ) : (\n            <LoadingMessage \n              personaName=\"AI\"\n              personaColor=\"#666\"\n            />\n          )\n        )}\n      </ChatContent>\n\n      <MessageInput\n        onSendMessage={handleSendMessage}\n        disabled={isLoading || Object.keys(personas).length === 0}\n        placeholder={\n          selectedConversation && currentConversation\n            ? `${personas[currentConversation.persona_id]?.name}에게 메시지를 보내세요...`\n            : \"모든 페르소나에게 질문해보세요...\"\n        }\n      />\n        </>\n      )}\n    </MainArea>\n  );\n};\n\nexport default ChatArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}