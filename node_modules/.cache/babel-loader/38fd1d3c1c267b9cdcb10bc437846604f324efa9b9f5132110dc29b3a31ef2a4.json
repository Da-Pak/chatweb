{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\vault\\\\components\\\\SentenceVaultView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { chatApi } from '../../shared/api/chatApi';\nimport SentenceFilterDropdown from './SentenceFilterDropdown';\nimport SentenceCard from './SentenceCard';\nimport ConfirmationModal from './ConfirmationModal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n_c = Container;\nconst Header = styled.div`\n  padding: 20px;\n  border-bottom: 1px solid #e9ecef;\n  background: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\n_c2 = Header;\nconst FilterButton = styled.button`\n  background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);\n  border: 1px solid #dee2e6;\n  border-radius: 8px;\n  padding: 8px 16px;\n  cursor: pointer;\n  font-size: 14px;\n  color: #333;\n  \n  &:hover {\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n  }\n`;\nconst NavigationButton = styled.button`\n  background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);\n  border: 1px solid #dee2e6;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  color: #333;\n  \n  &:hover {\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n_c3 = NavigationButton;\nconst ContentArea = styled.div`\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background: #f8f9fa;\n`;\n_c4 = ContentArea;\nconst SentenceGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 16px;\n`;\n_c5 = SentenceGrid;\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 60px 20px;\n  color: #6c757d;\n  \n  .icon {\n    font-size: 48px;\n    margin-bottom: 16px;\n  }\n  \n  .title {\n    font-size: 18px;\n    font-weight: 500;\n    margin-bottom: 8px;\n  }\n  \n  .description {\n    font-size: 14px;\n  }\n`;\n_c6 = EmptyState;\nconst SentenceVaultView = ({\n  onNavigateToPersona,\n  onNavigateToThread\n}) => {\n  _s();\n  const [sentences, setSentences] = useState([]);\n  const [filteredSentences, setFilteredSentences] = useState([]);\n  const [personas, setPersonas] = useState({});\n  const [currentFilter, setCurrentFilter] = useState('전체');\n  const [loading, setLoading] = useState(true);\n  const [showFilterDropdown, setShowFilterDropdown] = useState(false);\n  const [pinnedSentences, setPinnedSentences] = useState(new Set());\n  const [confirmModal, setConfirmModal] = useState({\n    show: false,\n    type: 'interact'\n  });\n\n  // 필터 옵션들\n  const [filterOptions, setFilterOptions] = useState(['전체', '언어화', '편지']);\n  const [currentFilterIndex, setCurrentFilterIndex] = useState(0);\n  useEffect(() => {\n    loadData();\n  }, []);\n  useEffect(() => {\n    applyFilter();\n  }, [sentences, currentFilter, pinnedSentences]);\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      // 저장고 문장들 로드\n      const sentenceData = await sentenceApi.getVaultSentences();\n      setSentences(sentenceData);\n\n      // 페르소나 데이터 로드\n      const personaResponse = await chatApi.getPersonas();\n      if (personaResponse.data) {\n        setPersonas(personaResponse.data);\n\n        // 필터 옵션에 페르소나들 추가\n        const personaNames = Object.values(personaResponse.data).map(p => p.name);\n        setFilterOptions(['전체', '언어화', '편지', ...personaNames]);\n      }\n    } catch (error) {\n      console.error('데이터 로딩 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n  const applyFilter = () => {\n    let filtered = [...sentences];\n    if (currentFilter !== '전체') {\n      if (currentFilter === '언어화') {\n        filtered = filtered.filter(s => s.tags.includes('verbalization'));\n      } else if (currentFilter === '편지') {\n        filtered = filtered.filter(s => s.tags.includes('letter'));\n      } else {\n        // 페르소나 이름으로 필터링\n        const personaId = Object.keys(personas).find(id => personas[id].name === currentFilter);\n        if (personaId) {\n          filtered = filtered.filter(s => s.tags.includes(personaId) || s.source_message_id.includes(personaId));\n        }\n      }\n    }\n\n    // 고정된 문장들을 맨 위로\n    const pinned = filtered.filter(s => pinnedSentences.has(s.id));\n    const unpinned = filtered.filter(s => !pinnedSentences.has(s.id));\n\n    // 날짜순 정렬 (최신순)\n    pinned.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n    unpinned.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n    setFilteredSentences([...pinned, ...unpinned]);\n  };\n  const handleFilterChange = filter => {\n    setCurrentFilter(filter);\n    setCurrentFilterIndex(filterOptions.indexOf(filter));\n    setShowFilterDropdown(false);\n  };\n  const handleNavigateFilter = direction => {\n    const newIndex = direction === 'prev' ? Math.max(0, currentFilterIndex - 1) : Math.min(filterOptions.length - 1, currentFilterIndex + 1);\n    setCurrentFilterIndex(newIndex);\n    setCurrentFilter(filterOptions[newIndex]);\n  };\n  const handleSentenceAction = (action, sentence) => {\n    switch (action) {\n      case 'interact':\n        setConfirmModal({\n          show: true,\n          type: 'interact',\n          sentence\n        });\n        break;\n      case 'navigate':\n        setConfirmModal({\n          show: true,\n          type: 'navigate',\n          sentence\n        });\n        break;\n      case 'pin':\n        togglePin(sentence.id);\n        break;\n      case 'delete':\n        setConfirmModal({\n          show: true,\n          type: 'delete',\n          sentence\n        });\n        break;\n    }\n  };\n  const togglePin = sentenceId => {\n    setPinnedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleConfirmAction = async () => {\n    const {\n      type,\n      sentence\n    } = confirmModal;\n    if (!sentence) return;\n    try {\n      switch (type) {\n        case 'interact':\n          // 페르소나 페이지의 문장 모드로 이동하면서 해당 문장을 입력창에 설정\n          if (onNavigateToPersona) {\n            const personaId = extractPersonaIdFromSentence(sentence);\n            if (personaId) {\n              onNavigateToPersona(personaId, 'sentence');\n              // TODO: 입력창에 문장 설정하는 로직 추가 필요\n            }\n          }\n          break;\n        case 'navigate':\n          // 해당 기록으로 이동\n          if (onNavigateToThread && sentence.source_conversation_id) {\n            onNavigateToThread(sentence.source_conversation_id, 'interpretation');\n          }\n          break;\n        case 'delete':\n          // 문장 삭제\n          await sentenceApi.deleteVaultSentence(sentence.id);\n          setSentences(prev => prev.filter(s => s.id !== sentence.id));\n          break;\n      }\n    } catch (error) {\n      console.error('액션 실행 실패:', error);\n    }\n    setConfirmModal({\n      show: false,\n      type: 'interact'\n    });\n  };\n  const extractPersonaIdFromSentence = sentence => {\n    // tags에서 페르소나 ID 찾기\n    for (const tag of sentence.tags) {\n      if (personas[tag]) {\n        return tag;\n      }\n    }\n    return null;\n  };\n  const getPersonaName = sentence => {\n    var _personas$personaId;\n    const personaId = extractPersonaIdFromSentence(sentence);\n    return personaId ? ((_personas$personaId = personas[personaId]) === null || _personas$personaId === void 0 ? void 0 : _personas$personaId.name) || '알 수 없음' : '시스템';\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          padding: '40px',\n          textAlign: 'center'\n        },\n        children: \"\\uB85C\\uB529 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 279,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 278,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Header, {\n      children: [/*#__PURE__*/_jsxDEV(NavigationButton, {\n        onClick: () => handleNavigateFilter('prev'),\n        disabled: currentFilterIndex === 0,\n        children: \"\\u2039\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 289,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SentenceFilterDropdown, {\n        currentFilter: currentFilter,\n        options: filterOptions,\n        isOpen: showFilterDropdown,\n        onToggle: () => setShowFilterDropdown(!showFilterDropdown),\n        onSelect: handleFilterChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 296,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NavigationButton, {\n        onClick: () => handleNavigateFilter('next'),\n        disabled: currentFilterIndex === filterOptions.length - 1,\n        children: \"\\u203A\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 304,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 288,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ContentArea, {\n      children: filteredSentences.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyState, {\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"icon\",\n          children: \"\\uD83D\\uDCDD\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 315,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"title\",\n          children: \"\\uC800\\uC7A5\\uB41C \\uBB38\\uC7A5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 316,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"description\",\n          children: \"\\uD6C8\\uC2B5 \\uD398\\uC774\\uC9C0\\uC5D0\\uC11C \\uBB38\\uC7A5\\uC744 \\uC800\\uC7A5\\uACE0\\uC5D0 \\uC800\\uC7A5\\uD574\\uBCF4\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 317,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 314,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(SentenceGrid, {\n        children: filteredSentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n          sentence: sentence,\n          personaName: getPersonaName(sentence),\n          isPinned: pinnedSentences.has(sentence.id),\n          onAction: action => handleSentenceAction(action, sentence)\n        }, sentence.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 324,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 322,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 312,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      show: confirmModal.show,\n      type: confirmModal.type,\n      sentence: confirmModal.sentence,\n      personaName: confirmModal.sentence ? getPersonaName(confirmModal.sentence) : '',\n      onConfirm: handleConfirmAction,\n      onCancel: () => setConfirmModal({\n        show: false,\n        type: 'interact'\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 287,\n    columnNumber: 5\n  }, this);\n};\n_s(SentenceVaultView, \"pPYR3Bl3qbYdjy9mYM9ztxQlgSE=\");\n_c7 = SentenceVaultView;\nexport default SentenceVaultView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"Header\");\n$RefreshReg$(_c3, \"NavigationButton\");\n$RefreshReg$(_c4, \"ContentArea\");\n$RefreshReg$(_c5, \"SentenceGrid\");\n$RefreshReg$(_c6, \"EmptyState\");\n$RefreshReg$(_c7, \"SentenceVaultView\");","map":{"version":3,"names":["React","useState","useEffect","styled","sentenceApi","chatApi","SentenceFilterDropdown","SentenceCard","ConfirmationModal","jsxDEV","_jsxDEV","Container","div","_c","Header","_c2","FilterButton","button","NavigationButton","_c3","ContentArea","_c4","SentenceGrid","_c5","EmptyState","_c6","SentenceVaultView","onNavigateToPersona","onNavigateToThread","_s","sentences","setSentences","filteredSentences","setFilteredSentences","personas","setPersonas","currentFilter","setCurrentFilter","loading","setLoading","showFilterDropdown","setShowFilterDropdown","pinnedSentences","setPinnedSentences","Set","confirmModal","setConfirmModal","show","type","filterOptions","setFilterOptions","currentFilterIndex","setCurrentFilterIndex","loadData","applyFilter","sentenceData","getVaultSentences","personaResponse","getPersonas","data","personaNames","Object","values","map","p","name","error","console","filtered","filter","s","tags","includes","personaId","keys","find","id","source_message_id","pinned","has","unpinned","sort","a","b","Date","created_at","getTime","handleFilterChange","indexOf","handleNavigateFilter","direction","newIndex","Math","max","min","length","handleSentenceAction","action","sentence","togglePin","sentenceId","prev","newSet","delete","add","handleConfirmAction","extractPersonaIdFromSentence","source_conversation_id","deleteVaultSentence","tag","getPersonaName","_personas$personaId","children","style","padding","textAlign","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","options","isOpen","onToggle","onSelect","className","personaName","isPinned","onAction","onConfirm","onCancel","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/vault/components/SentenceVaultView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport { sentenceApi, SentenceVaultItem } from '../../training/api/sentenceApi';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { Persona } from '../../shared/types';\nimport SentenceFilterDropdown from './SentenceFilterDropdown';\nimport SentenceCard from './SentenceCard';\nimport ConfirmationModal from './ConfirmationModal';\n\ninterface SentenceVaultViewProps {\n  onNavigateToPersona: (personaId: string, mode: 'sentence') => void;\n  onNavigateToThread: (threadId: string, threadType: string) => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100vh;\n`;\n\nconst Header = styled.div`\n  padding: 20px;\n  border-bottom: 1px solid #e9ecef;\n  background: #fff;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  gap: 10px;\n`;\n\nconst FilterButton = styled.button`\n  background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);\n  border: 1px solid #dee2e6;\n  border-radius: 8px;\n  padding: 8px 16px;\n  cursor: pointer;\n  font-size: 14px;\n  color: #333;\n  \n  &:hover {\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n  }\n`;\n\nconst NavigationButton = styled.button`\n  background: linear-gradient(135deg, #fff 0%, #f8f9fa 100%);\n  border: 1px solid #dee2e6;\n  border-radius: 50%;\n  width: 32px;\n  height: 32px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 14px;\n  color: #333;\n  \n  &:hover {\n    background: linear-gradient(135deg, #f8f9fa 0%, #e9ecef 100%);\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n\nconst ContentArea = styled.div`\n  flex: 1;\n  padding: 20px;\n  overflow-y: auto;\n  background: #f8f9fa;\n`;\n\nconst SentenceGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 16px;\n`;\n\nconst EmptyState = styled.div`\n  text-align: center;\n  padding: 60px 20px;\n  color: #6c757d;\n  \n  .icon {\n    font-size: 48px;\n    margin-bottom: 16px;\n  }\n  \n  .title {\n    font-size: 18px;\n    font-weight: 500;\n    margin-bottom: 8px;\n  }\n  \n  .description {\n    font-size: 14px;\n  }\n`;\n\nconst SentenceVaultView: React.FC<SentenceVaultViewProps> = ({\n  onNavigateToPersona,\n  onNavigateToThread\n}) => {\n  const [sentences, setSentences] = useState<SentenceVaultItem[]>([]);\n  const [filteredSentences, setFilteredSentences] = useState<SentenceVaultItem[]>([]);\n  const [personas, setPersonas] = useState<Record<string, Persona>>({});\n  const [currentFilter, setCurrentFilter] = useState<string>('전체');\n  const [loading, setLoading] = useState(true);\n  const [showFilterDropdown, setShowFilterDropdown] = useState(false);\n  const [pinnedSentences, setPinnedSentences] = useState<Set<string>>(new Set());\n  const [confirmModal, setConfirmModal] = useState<{\n    show: boolean;\n    type: 'interact' | 'navigate' | 'delete';\n    sentence?: SentenceVaultItem;\n  }>({ show: false, type: 'interact' });\n\n  // 필터 옵션들\n  const [filterOptions, setFilterOptions] = useState<string[]>(['전체', '언어화', '편지']);\n  const [currentFilterIndex, setCurrentFilterIndex] = useState(0);\n\n  useEffect(() => {\n    loadData();\n  }, []);\n\n  useEffect(() => {\n    applyFilter();\n  }, [sentences, currentFilter, pinnedSentences]);\n\n  const loadData = async () => {\n    setLoading(true);\n    try {\n      // 저장고 문장들 로드\n      const sentenceData = await sentenceApi.getVaultSentences();\n      setSentences(sentenceData);\n\n      // 페르소나 데이터 로드\n      const personaResponse = await chatApi.getPersonas();\n      if (personaResponse.data) {\n        setPersonas(personaResponse.data);\n        \n        // 필터 옵션에 페르소나들 추가\n        const personaNames = Object.values(personaResponse.data).map(p => p.name);\n        setFilterOptions(['전체', '언어화', '편지', ...personaNames]);\n      }\n    } catch (error) {\n      console.error('데이터 로딩 실패:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  const applyFilter = () => {\n    let filtered = [...sentences];\n\n    if (currentFilter !== '전체') {\n      if (currentFilter === '언어화') {\n        filtered = filtered.filter(s => s.tags.includes('verbalization'));\n      } else if (currentFilter === '편지') {\n        filtered = filtered.filter(s => s.tags.includes('letter'));\n      } else {\n        // 페르소나 이름으로 필터링\n        const personaId = Object.keys(personas).find(id => personas[id].name === currentFilter);\n        if (personaId) {\n          filtered = filtered.filter(s => s.tags.includes(personaId) || s.source_message_id.includes(personaId));\n        }\n      }\n    }\n\n    // 고정된 문장들을 맨 위로\n    const pinned = filtered.filter(s => pinnedSentences.has(s.id));\n    const unpinned = filtered.filter(s => !pinnedSentences.has(s.id));\n    \n    // 날짜순 정렬 (최신순)\n    pinned.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n    unpinned.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n\n    setFilteredSentences([...pinned, ...unpinned]);\n  };\n\n  const handleFilterChange = (filter: string) => {\n    setCurrentFilter(filter);\n    setCurrentFilterIndex(filterOptions.indexOf(filter));\n    setShowFilterDropdown(false);\n  };\n\n  const handleNavigateFilter = (direction: 'prev' | 'next') => {\n    const newIndex = direction === 'prev' \n      ? Math.max(0, currentFilterIndex - 1)\n      : Math.min(filterOptions.length - 1, currentFilterIndex + 1);\n    \n    setCurrentFilterIndex(newIndex);\n    setCurrentFilter(filterOptions[newIndex]);\n  };\n\n  const handleSentenceAction = (action: string, sentence: SentenceVaultItem) => {\n    switch (action) {\n      case 'interact':\n        setConfirmModal({ show: true, type: 'interact', sentence });\n        break;\n      case 'navigate':\n        setConfirmModal({ show: true, type: 'navigate', sentence });\n        break;\n      case 'pin':\n        togglePin(sentence.id);\n        break;\n      case 'delete':\n        setConfirmModal({ show: true, type: 'delete', sentence });\n        break;\n    }\n  };\n\n  const togglePin = (sentenceId: string) => {\n    setPinnedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleConfirmAction = async () => {\n    const { type, sentence } = confirmModal;\n    if (!sentence) return;\n\n    try {\n      switch (type) {\n        case 'interact':\n          // 페르소나 페이지의 문장 모드로 이동하면서 해당 문장을 입력창에 설정\n          if (onNavigateToPersona) {\n            const personaId = extractPersonaIdFromSentence(sentence);\n            if (personaId) {\n              onNavigateToPersona(personaId, 'sentence');\n              // TODO: 입력창에 문장 설정하는 로직 추가 필요\n            }\n          }\n          break;\n        case 'navigate':\n          // 해당 기록으로 이동\n          if (onNavigateToThread && sentence.source_conversation_id) {\n            onNavigateToThread(sentence.source_conversation_id, 'interpretation');\n          }\n          break;\n        case 'delete':\n          // 문장 삭제\n          await sentenceApi.deleteVaultSentence(sentence.id);\n          setSentences(prev => prev.filter(s => s.id !== sentence.id));\n          break;\n      }\n    } catch (error) {\n      console.error('액션 실행 실패:', error);\n    }\n\n    setConfirmModal({ show: false, type: 'interact' });\n  };\n\n  const extractPersonaIdFromSentence = (sentence: SentenceVaultItem): string | null => {\n    // tags에서 페르소나 ID 찾기\n    for (const tag of sentence.tags) {\n      if (personas[tag]) {\n        return tag;\n      }\n    }\n    return null;\n  };\n\n  const getPersonaName = (sentence: SentenceVaultItem): string => {\n    const personaId = extractPersonaIdFromSentence(sentence);\n    return personaId ? personas[personaId]?.name || '알 수 없음' : '시스템';\n  };\n\n  if (loading) {\n    return (\n      <Container>\n        <div style={{ padding: '40px', textAlign: 'center' }}>\n          로딩 중...\n        </div>\n      </Container>\n    );\n  }\n\n  return (\n    <Container>\n      <Header>\n        <NavigationButton\n          onClick={() => handleNavigateFilter('prev')}\n          disabled={currentFilterIndex === 0}\n        >\n          ‹\n        </NavigationButton>\n        \n        <SentenceFilterDropdown\n          currentFilter={currentFilter}\n          options={filterOptions}\n          isOpen={showFilterDropdown}\n          onToggle={() => setShowFilterDropdown(!showFilterDropdown)}\n          onSelect={handleFilterChange}\n        />\n        \n        <NavigationButton\n          onClick={() => handleNavigateFilter('next')}\n          disabled={currentFilterIndex === filterOptions.length - 1}\n        >\n          ›\n        </NavigationButton>\n      </Header>\n\n      <ContentArea>\n        {filteredSentences.length === 0 ? (\n          <EmptyState>\n            <div className=\"icon\">📝</div>\n            <div className=\"title\">저장된 문장이 없습니다</div>\n            <div className=\"description\">\n              훈습 페이지에서 문장을 저장고에 저장해보세요\n            </div>\n          </EmptyState>\n        ) : (\n          <SentenceGrid>\n            {filteredSentences.map(sentence => (\n              <SentenceCard\n                key={sentence.id}\n                sentence={sentence}\n                personaName={getPersonaName(sentence)}\n                isPinned={pinnedSentences.has(sentence.id)}\n                onAction={(action) => handleSentenceAction(action, sentence)}\n              />\n            ))}\n          </SentenceGrid>\n        )}\n      </ContentArea>\n\n      <ConfirmationModal\n        show={confirmModal.show}\n        type={confirmModal.type}\n        sentence={confirmModal.sentence}\n        personaName={confirmModal.sentence ? getPersonaName(confirmModal.sentence) : ''}\n        onConfirm={handleConfirmAction}\n        onCancel={() => setConfirmModal({ show: false, type: 'interact' })}\n      />\n    </Container>\n  );\n};\n\nexport default SentenceVaultView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}