{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const qaApi = {\n  /**\n   * QA 질문 목록을 가져옵니다.\n   */\n  async getQuestions() {\n    try {\n      const response = await api.get('/api/qa/questions');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 질문 로드 실패:\", error);\n      throw error;\n    }\n  },\n  /**\n   * 사용자의 QA 답변 목록을 제출합니다.\n   */\n  async submitAnswers(answers) {\n    try {\n      const response = await api.post('/api/qa/answers', {\n        answers\n      });\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 답변 제출 실패:\", error);\n      throw error;\n    }\n  },\n  /**\n   * 사용자의 QA 완료 상태를 확인합니다.\n   */\n  async getStatus() {\n    try {\n      const response = await api.get('/api/qa/status');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 상태 확인 실패:\", error);\n      throw error;\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","qaApi","getQuestions","response","get","data","error","console","submitAnswers","answers","post","getStatus"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/qa/api/qaApi.ts"],"sourcesContent":["import axios from 'axios';\n\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport interface QAQuestion {\n  question_id: number;\n  question_text: string;\n}\n\nexport interface QASubmission {\n  question_id: number;\n  answer: string;\n}\n\nexport const qaApi = {\n  /**\n   * QA 질문 목록을 가져옵니다.\n   */\n  async getQuestions(): Promise<QAQuestion[]> {\n    try {\n      const response = await api.get<QAQuestion[]>('/api/qa/questions');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 질문 로드 실패:\", error);\n      throw error;\n    }\n  },\n\n  /**\n   * 사용자의 QA 답변 목록을 제출합니다.\n   */\n  async submitAnswers(answers: QASubmission[]): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await api.post('/api/qa/answers', { answers });\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 답변 제출 실패:\", error);\n      throw error;\n    }\n  },\n\n  /**\n   * 사용자의 QA 완료 상태를 확인합니다.\n   */\n  async getStatus(): Promise<{ is_completed: boolean }> {\n    try {\n      const response = await api.get('/api/qa/status');\n      return response.data;\n    } catch (error) {\n      console.error(\"QA 상태 확인 실패:\", error);\n      throw error;\n    }\n  }\n};\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAGC,OAAO,CAACC,GAAG,CAACC,iBAAiB,IAAI,uBAAuB;AAE7E,MAAMC,GAAG,GAAGL,KAAK,CAACM,MAAM,CAAC;EACvBC,OAAO,EAAEN,YAAY;EACrBO,OAAO,EAAE;IACP,cAAc,EAAE;EAClB;AACF,CAAC,CAAC;AAYF,OAAO,MAAMC,KAAK,GAAG;EACnB;AACF;AACA;EACE,MAAMC,YAAYA,CAAA,EAA0B;IAC1C,IAAI;MACF,MAAMC,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAe,mBAAmB,CAAC;MACjE,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACE,MAAME,aAAaA,CAACC,OAAuB,EAAkD;IAC3F,IAAI;MACF,MAAMN,QAAQ,GAAG,MAAMN,GAAG,CAACa,IAAI,CAAC,iBAAiB,EAAE;QAAED;MAAQ,CAAC,CAAC;MAC/D,OAAON,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF,CAAC;EAED;AACF;AACA;EACE,MAAMK,SAASA,CAAA,EAAuC;IACpD,IAAI;MACF,MAAMR,QAAQ,GAAG,MAAMN,GAAG,CAACO,GAAG,CAAC,gBAAgB,CAAC;MAChD,OAAOD,QAAQ,CAACE,IAAI;IACtB,CAAC,CAAC,OAAOC,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpC,MAAMA,KAAK;IACb;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}