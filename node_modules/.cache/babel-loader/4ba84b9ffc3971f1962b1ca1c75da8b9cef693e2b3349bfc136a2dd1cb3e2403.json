{"ast":null,"code":"import { API_BASE_URL } from '../../shared/api/chatApi';\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request) {\n    try {\n      console.log('=== 저장고 저장 시작 ===');\n      console.log('요청 데이터:', JSON.stringify(request, null, 2));\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n      console.log('응답 헤더:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          const errorText = await response.text();\n          console.error('JSON 파싱 실패, 원시 오류 응답:', errorText);\n          throw new Error(`서버 오류 (${response.status}): ${errorText}`);\n        }\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || `서버 오류 (${response.status})`);\n      }\n      const result = await response.json();\n      console.log('성공 응답:', JSON.stringify(result, null, 2));\n      console.log('=== 저장고 저장 완료 ===');\n      return result;\n    } catch (error) {\n      console.error('저장고 저장 오류:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');\n      }\n      throw error;\n    }\n  }\n  async getVaultSentences() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteVaultSentence(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n      if (response.status === 404) {\n        return null;\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '메모가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n  async deleteHighlight(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '하이라이트가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 스레드별 메모와 하이라이트 데이터 불러오기\n  async getThreadSentenceData(threadId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/threads/${threadId}/sentence-data`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 문장 데이터 조회 실패');\n      }\n      const result = await response.json();\n      return result || {\n        memos: {},\n        highlights: []\n      };\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 오류:', error);\n      // 실패 시 빈 데이터 반환\n      return {\n        memos: {},\n        highlights: []\n      };\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n}\nexport const sentenceApi = new SentenceApi();\n\n// 로컬 스토리지 백업 시스템\nclass LocalBackupService {\n  constructor() {\n    this.MEMOS_KEY = 'sentence_memos_backup';\n    this.HIGHLIGHTS_KEY = 'sentence_highlights_backup';\n  }\n  // 메모 백업\n  saveMemo(sentenceId, content) {\n    try {\n      const memos = this.getAllMemos();\n      memos[sentenceId] = content;\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 백업 실패:', error);\n    }\n  }\n\n  // 메모 삭제\n  deleteMemo(sentenceId) {\n    try {\n      const memos = this.getAllMemos();\n      delete memos[sentenceId];\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 삭제 실패:', error);\n    }\n  }\n\n  // 모든 메모 조회\n  getAllMemos() {\n    try {\n      const stored = localStorage.getItem(this.MEMOS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 메모 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 하이라이트 백업\n  saveHighlight(sentenceId, threadId) {\n    try {\n      const highlights = this.getAllHighlights();\n      if (!highlights[threadId]) {\n        highlights[threadId] = [];\n      }\n      if (!highlights[threadId].includes(sentenceId)) {\n        highlights[threadId].push(sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 백업 실패:', error);\n    }\n  }\n\n  // 하이라이트 삭제\n  deleteHighlight(sentenceId) {\n    try {\n      const highlights = this.getAllHighlights();\n      for (const threadId in highlights) {\n        highlights[threadId] = highlights[threadId].filter(id => id !== sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 삭제 실패:', error);\n    }\n  }\n\n  // 모든 하이라이트 조회\n  getAllHighlights() {\n    try {\n      const stored = localStorage.getItem(this.HIGHLIGHTS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 하이라이트 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  getThreadHighlights(threadId) {\n    try {\n      const highlights = this.getAllHighlights();\n      return highlights[threadId] || [];\n    } catch (error) {\n      console.warn('스레드 하이라이트 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 스레드별 데이터 조회 (백엔드와 동일한 형식)\n  getThreadSentenceData(threadId) {\n    return {\n      memos: this.getAllMemos(),\n      highlights: this.getThreadHighlights(threadId)\n    };\n  }\n}\nconst localBackup = new LocalBackupService();","map":{"version":3,"names":["API_BASE_URL","SentenceApi","saveSentencesToVault","request","console","log","JSON","stringify","response","fetch","method","headers","body","status","ok","Object","fromEntries","entries","errorData","json","e","errorText","text","error","Error","detail","result","name","message","includes","getVaultSentences","deleteVaultSentence","sentenceId","createOrUpdateMemo","getMemo","deleteMemo","success","createHighlight","deleteHighlight","getThreadSentenceData","threadId","memos","highlights","getAllMemos","getAllHighlights","getThreadHighlights","sentenceApi","LocalBackupService","constructor","MEMOS_KEY","HIGHLIGHTS_KEY","saveMemo","content","localStorage","setItem","warn","stored","getItem","parse","saveHighlight","push","filter","id","localBackup"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/api/sentenceApi.ts"],"sourcesContent":["import { API_BASE_URL } from '../../shared/api/chatApi';\n\nexport interface SentenceVaultItem {\n  id: string;\n  sentence: string;\n  source_message_id: string;\n  source_conversation_id?: string;\n  created_at: string;\n  tags: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface SentenceVaultRequest {\n  sentences: string[];\n  source_message_id: string;\n  source_conversation_id?: string;\n  tags?: string[];\n}\n\nexport interface SentenceVaultResponse {\n  success: boolean;\n  message: string;\n  saved_items: SentenceVaultItem[];\n}\n\nexport interface SentenceMemo {\n  id: string;\n  sentence_id: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SentenceMemoRequest {\n  sentence_id: string;\n  content: string;\n}\n\nexport interface SentenceMemoResponse {\n  success: boolean;\n  message: string;\n  memo?: SentenceMemo;\n}\n\nexport interface SentenceHighlight {\n  id: string;\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n  created_at: string;\n}\n\nexport interface SentenceHighlightRequest {\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n}\n\nexport interface SentenceHighlightResponse {\n  success: boolean;\n  message: string;\n  highlight?: SentenceHighlight;\n}\n\nexport interface ThreadSentenceData {\n  memos: Record<string, string>;\n  highlights: string[];\n}\n\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request: SentenceVaultRequest): Promise<SentenceVaultResponse> {\n    try {\n      console.log('=== 저장고 저장 시작 ===');\n      console.log('요청 데이터:', JSON.stringify(request, null, 2));\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      \n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n      console.log('응답 헤더:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          const errorText = await response.text();\n          console.error('JSON 파싱 실패, 원시 오류 응답:', errorText);\n          throw new Error(`서버 오류 (${response.status}): ${errorText}`);\n        }\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || `서버 오류 (${response.status})`);\n      }\n\n      const result = await response.json();\n      console.log('성공 응답:', JSON.stringify(result, null, 2));\n      console.log('=== 저장고 저장 완료 ===');\n      return result;\n    } catch (error: any) {\n      console.error('저장고 저장 오류:', error);\n      \n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');\n      }\n      \n      throw error;\n    }\n  }\n\n  async getVaultSentences(): Promise<SentenceVaultItem[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteVaultSentence(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request: SentenceMemoRequest): Promise<SentenceMemoResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async getMemo(sentenceId: string): Promise<SentenceMemo | null> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n\n      if (response.status === 404) {\n        return null;\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteMemo(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '메모가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request: SentenceHighlightRequest): Promise<SentenceHighlightResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteHighlight(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '하이라이트가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 스레드별 메모와 하이라이트 데이터 불러오기\n  async getThreadSentenceData(threadId: string): Promise<ThreadSentenceData> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/threads/${threadId}/sentence-data`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 문장 데이터 조회 실패');\n      }\n\n      const result = await response.json();\n      return result || { memos: {}, highlights: [] };\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 오류:', error);\n      // 실패 시 빈 데이터 반환\n      return { memos: {}, highlights: [] };\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos(): Promise<Record<string, string>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights(): Promise<Record<string, string[]>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n}\n\nexport const sentenceApi = new SentenceApi();\n\n// 로컬 스토리지 백업 시스템\nclass LocalBackupService {\n  private readonly MEMOS_KEY = 'sentence_memos_backup';\n  private readonly HIGHLIGHTS_KEY = 'sentence_highlights_backup';\n\n  // 메모 백업\n  saveMemo(sentenceId: string, content: string): void {\n    try {\n      const memos = this.getAllMemos();\n      memos[sentenceId] = content;\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 백업 실패:', error);\n    }\n  }\n\n  // 메모 삭제\n  deleteMemo(sentenceId: string): void {\n    try {\n      const memos = this.getAllMemos();\n      delete memos[sentenceId];\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 삭제 실패:', error);\n    }\n  }\n\n  // 모든 메모 조회\n  getAllMemos(): Record<string, string> {\n    try {\n      const stored = localStorage.getItem(this.MEMOS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 메모 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 하이라이트 백업\n  saveHighlight(sentenceId: string, threadId: string): void {\n    try {\n      const highlights = this.getAllHighlights();\n      if (!highlights[threadId]) {\n        highlights[threadId] = [];\n      }\n      if (!highlights[threadId].includes(sentenceId)) {\n        highlights[threadId].push(sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 백업 실패:', error);\n    }\n  }\n\n  // 하이라이트 삭제\n  deleteHighlight(sentenceId: string): void {\n    try {\n      const highlights = this.getAllHighlights();\n      for (const threadId in highlights) {\n        highlights[threadId] = highlights[threadId].filter(id => id !== sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 삭제 실패:', error);\n    }\n  }\n\n  // 모든 하이라이트 조회\n  getAllHighlights(): Record<string, string[]> {\n    try {\n      const stored = localStorage.getItem(this.HIGHLIGHTS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 하이라이트 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  getThreadHighlights(threadId: string): string[] {\n    try {\n      const highlights = this.getAllHighlights();\n      return highlights[threadId] || [];\n    } catch (error) {\n      console.warn('스레드 하이라이트 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 스레드별 데이터 조회 (백엔드와 동일한 형식)\n  getThreadSentenceData(threadId: string): ThreadSentenceData {\n    return {\n      memos: this.getAllMemos(),\n      highlights: this.getThreadHighlights(threadId)\n    };\n  }\n}\n\nconst localBackup = new LocalBackupService(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}