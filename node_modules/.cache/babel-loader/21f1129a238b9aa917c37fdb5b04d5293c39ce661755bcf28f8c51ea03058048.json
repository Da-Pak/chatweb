{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\ChatArea.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from './TrainingCategoryView';\nimport InterpretationView from './InterpretationView';\nimport ProceedView from './ProceedView';\nimport SentenceView from './SentenceView';\nimport PersonaAdminPanel from './PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport { MainArea, ChatContent, EmptyState, EmptyStateTitle, EmptyStateText } from '../styles/GlobalStyle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatArea = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onSwitchConversationMode\n}) => {\n  _s();\n  var _personas$currentConv, _personas$currentConv2, _personas$currentConv3;\n  const chatContentRef = useRef(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n\n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 훈습 관련 상태\n  const [threads, setThreads] = useState([]);\n  const [proceedContent, setProceedContent] = useState('');\n  const [sentenceContent, setSentenceContent] = useState('');\n  const [selectedThreadId, setSelectedThreadId] = useState(null);\n\n  // 선택된 스레드 ID 추출\n  useEffect(() => {\n    if (selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.includes('-thread-')) {\n      const threadId = selectedConversationItem.split('-thread-')[1];\n      setSelectedThreadId(threadId);\n    } else {\n      setSelectedThreadId(null);\n    }\n  }, [selectedConversationItem]);\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages, globalMessages, isLoading]);\n\n  // 훈습 데이터 로딩\n  useEffect(() => {\n    const loadTrainingData = async () => {\n      if (!(currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.personaId)) return;\n      try {\n        // 스레드 데이터 로드 (항상 필요)\n        const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n        if (threadsResponse.data) {\n          setThreads(threadsResponse.data);\n        }\n\n        // 나아가기/문장 데이터는 필요할 때만 로드 (성능 개선)\n        if (selectedConversationItem === 'proceed' && !proceedContent) {\n          try {\n            var _proceedResponse$data;\n            // 기존 나아가기 데이터 조회 (새로 생성하지 않음)\n            const proceedResponse = await chatApi.getProceedContent(currentInterpretation.personaId);\n            if ((_proceedResponse$data = proceedResponse.data) !== null && _proceedResponse$data !== void 0 && _proceedResponse$data.proceed_content) {\n              setProceedContent(proceedResponse.data.proceed_content);\n            } else {\n              var _newProceedResponse$d;\n              // 기존 데이터가 없으면 생성\n              const newProceedResponse = await chatApi.generateProceed({\n                persona_id: currentInterpretation.personaId,\n                interpretation_content: currentInterpretation.content\n              });\n              if ((_newProceedResponse$d = newProceedResponse.data) !== null && _newProceedResponse$d !== void 0 && _newProceedResponse$d.proceed_content) {\n                setProceedContent(newProceedResponse.data.proceed_content);\n              }\n            }\n          } catch (error) {\n            console.warn('나아가기 데이터 로드 실패:', error);\n          }\n        }\n        if (selectedConversationItem === 'sentence' && !sentenceContent) {\n          try {\n            var _sentenceResponse$dat;\n            // 기존 문장 데이터 조회 (새로 생성하지 않음)\n            const sentenceResponse = await chatApi.getSentenceContent(currentInterpretation.personaId);\n            if ((_sentenceResponse$dat = sentenceResponse.data) !== null && _sentenceResponse$dat !== void 0 && _sentenceResponse$dat.sentence_content) {\n              setSentenceContent(sentenceResponse.data.sentence_content);\n            } else {\n              var _newSentenceResponse$;\n              // 기존 데이터가 없으면 생성\n              const newSentenceResponse = await chatApi.generateSentence({\n                persona_id: currentInterpretation.personaId,\n                interpretation_content: currentInterpretation.content\n              });\n              if ((_newSentenceResponse$ = newSentenceResponse.data) !== null && _newSentenceResponse$ !== void 0 && _newSentenceResponse$.sentence_content) {\n                setSentenceContent(newSentenceResponse.data.sentence_content);\n              }\n            }\n          } catch (error) {\n            console.warn('문장 데이터 로드 실패:', error);\n          }\n        }\n      } catch (error) {\n        console.error('스레드 데이터 로드 실패:', error);\n      }\n    };\n    loadTrainingData();\n  }, [currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId, selectedConversationItem]);\n  const handleSendMessage = async message => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex, newContent) => {\n    if (!currentInterpretation) return false;\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString()\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, newContent);\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant',\n              content: response.data.response,\n              timestamp: response.data.timestamp\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant',\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString()\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n\n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant',\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString()\n          };\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse]\n          };\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex, newContent) => {\n    if (!selectedConversation || !currentConversation) return false;\n    try {\n      var _result$data;\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      if ((_result$data = result.data) !== null && _result$data !== void 0 && _result$data.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        console.log('메시지가 수정되고 새로운 AI 응답이 생성되었습니다:', {\n          conversation: result.data.updated_conversation,\n          newResponse: result.data.new_response\n        });\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n  const getHeaderTitle = () => {\n    if (selectedConversation && currentConversation) {\n      const persona = personas[currentConversation.persona_id];\n      return `${persona === null || persona === void 0 ? void 0 : persona.name}과의 대화`;\n    }\n    return '다중 페르소나 채팅';\n  };\n  const getHeaderSubtitle = () => {\n    if (selectedConversation && currentConversation) {\n      return `${currentConversation.messages.length}개의 메시지`;\n    }\n    return '모든 페르소나와 대화하거나 개별 페르소나를 선택하세요';\n  };\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    const latestMessage = globalMessages[globalMessages.length - 1];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'user',\n          content: latestMessage.user_message,\n          timestamp: latestMessage.timestamp\n        },\n        personas: personas,\n        showActionButtons: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), latestMessage.responses.map(response => /*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'assistant',\n          content: response.content,\n          timestamp: response.timestamp,\n          persona_id: response.persona_id,\n          persona_name: response.persona_name\n        },\n        personas: personas,\n        showActionButtons: true\n      }, `${latestMessage.id}_${response.persona_id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 342,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            color: '#666',\n            marginBottom: '8px'\n          },\n          children: \"\\uD83D\\uDCA1 \\uAC01 \\uD398\\uB974\\uC18C\\uB098\\uC640 \\uAC1C\\uBCC4\\uC801\\uC73C\\uB85C \\uB300\\uD654\\uB97C \\uC774\\uC5B4\\uAC00\\uB824\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 364,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '13px',\n            color: '#888'\n          },\n          children: \"\\uC67C\\uCABD \\uC0AC\\uC774\\uB4DC\\uBC14\\uC5D0\\uC11C \\uD398\\uB974\\uC18C\\uB098\\uB97C \\uC120\\uD0DD\\uD558\\uAC70\\uB098, \\uD2B9\\uC815 \\uB300\\uD654\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 367,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 356,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this);\n  };\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n    return currentConversation.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      personas: personas,\n      showActionButtons: true,\n      onCopy: () => {\n        // 메시지 내용 복사\n        navigator.clipboard.writeText(message.content).then(() => {\n          console.log('메시지가 복사되었습니다');\n        }).catch(err => {\n          console.error('복사 실패:', err);\n        });\n      },\n      onEdit: message.role === 'user' ? () => setEditingMessageIndex(index) : undefined,\n      onEditSave: message.role === 'user' ? async newContent => {\n        const success = await handleEditConversationMessage(index, newContent);\n        if (success) {\n          setEditingMessageIndex(null); // 편집 완료 시 편집 모드 해제\n        }\n        return success;\n      } : undefined,\n      onEditCancel: () => setEditingMessageIndex(null),\n      isEditing: editingMessageIndex === index,\n      onSunAction: () => console.log('해 버튼 - 향후 구현'),\n      onPersonAction: () => console.log('나 버튼 - 향후 구현'),\n      onDocumentAction: () => console.log('문 버튼 - 향후 구현')\n    }, `${currentConversation.id}_${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 379,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEmptyState = () => /*#__PURE__*/_jsxDEV(EmptyState, {\n    children: [/*#__PURE__*/_jsxDEV(EmptyStateTitle, {\n      children: \"\\uC0C8\\uB85C\\uC6B4 \\uB300\\uD654\\uB97C \\uC2DC\\uC791\\uD574\\uBCF4\\uC138\\uC694!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 411,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmptyStateText, {\n      children: Object.keys(personas).length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\uC544\\uB798\\uC5D0 \\uC9C8\\uBB38\\uC744 \\uC785\\uB825\\uD558\\uBA74 \", Object.keys(personas).length, \"\\uAC1C\\uC758 \\uD398\\uB974\\uC18C\\uB098\\uAC00\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 64\n        }, this), \"\\uAC01\\uAC01 \\uB2E4\\uB978 \\uAD00\\uC810\\uC5D0\\uC11C \\uB2F5\\uBCC0\\uD574\\uB4DC\\uB9BD\\uB2C8\\uB2E4.\"]\n      }, void 0, true) : '페르소나 정보를 불러오는 중입니다...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 412,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 410,\n    columnNumber: 5\n  }, this);\n\n  // 모드 전환 핸들러\n  const handleSwitchToMode = mode => {\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(mode);\n    }\n  };\n\n  // 나아가기 채팅 핸들러 추가\n  const handleProceedChat = async message => {\n    if (!currentInterpretation) return false;\n    try {\n      const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, `나아가기와 관련하여: ${message}`);\n      if (response.data) {\n        setThreads(prev => [...prev, {\n          thread_type: 'proceed',\n          persona_id: currentInterpretation.personaId,\n          persona_name: currentInterpretation.personaName,\n          content: message,\n          timestamp: response.data.timestamp\n        }, {\n          role: 'assistant',\n          content: response.data.response,\n          timestamp: response.data.timestamp\n        }]);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      return false;\n    }\n  };\n\n  // 문장 채팅 핸들러 추가\n  const handleSentenceChat = async message => {\n    if (!currentInterpretation) return false;\n    try {\n      const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, `문장과 관련하여: ${message}`);\n      if (response.data) {\n        setThreads(prev => [...prev, {\n          thread_type: 'sentence',\n          persona_id: currentInterpretation.personaId,\n          persona_name: currentInterpretation.personaName,\n          content: message,\n          timestamp: response.data.timestamp\n        }, {\n          role: 'assistant',\n          content: response.data.response,\n          timestamp: response.data.timestamp\n        }]);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      return false;\n    }\n  };\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uD574\\uC11D \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 40\n    }, this);\n    return /*#__PURE__*/_jsxDEV(InterpretationView, {\n      interpretation: currentInterpretation.content,\n      personaName: currentInterpretation.personaName,\n      onSendMessage: handleSendMessage,\n      onEditMessage: handleEditInterpretationMessage,\n      isLoading: isLoading,\n      messages: currentInterpretation.messages,\n      onSwitchToMode: handleSwitchToMode\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 507,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 나아가기 뷰 렌더링\n  const renderProceedView = () => {\n    if (!currentInterpretation) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uD574\\uC11D \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 521,\n      columnNumber: 40\n    }, this);\n    const personaId = currentInterpretation.personaId;\n    const personaName = currentInterpretation.personaName;\n\n    // 스레드 ID가 있으면 스레드 모드\n    if (selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('proceed-thread-')) {\n      const threadId = selectedConversationItem.replace('proceed-thread-', '');\n      return /*#__PURE__*/_jsxDEV(ProceedView, {\n        personaId: personaId,\n        personaName: personaName,\n        proceedContent: proceedContent || '',\n        threads: threads.filter(t => t.thread_type === 'proceed'),\n        onThreadUpdate: setThreads,\n        selectedThreadId: threadId,\n        onSwitchToMode: handleSwitchToMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 530,\n        columnNumber: 9\n      }, this);\n    }\n\n    // 일반 채팅 모드\n    return /*#__PURE__*/_jsxDEV(ProceedView, {\n      personaId: personaId,\n      personaName: personaName,\n      proceedContent: proceedContent || '',\n      threads: threads.filter(t => t.thread_type === 'proceed'),\n      onThreadUpdate: setThreads,\n      onSwitchToMode: handleSwitchToMode,\n      onSendMessage: handleProceedChat,\n      isLoading: isLoading,\n      messages: threads.filter(t => t.thread_type === 'proceed')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 544,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 문장 뷰 렌더링\n  const renderSentenceView = () => {\n    if (!currentInterpretation) return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"\\uD574\\uC11D \\uB370\\uC774\\uD130\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 560,\n      columnNumber: 40\n    }, this);\n    const personaId = currentInterpretation.personaId;\n    const personaName = currentInterpretation.personaName;\n\n    // 스레드 ID가 있으면 스레드 모드\n    if (selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('sentence-thread-')) {\n      const threadId = selectedConversationItem.replace('sentence-thread-', '');\n      return /*#__PURE__*/_jsxDEV(SentenceView, {\n        personaId: personaId,\n        personaName: personaName,\n        sentenceContent: sentenceContent || '',\n        threads: threads.filter(t => t.thread_type === 'sentence'),\n        onThreadUpdate: setThreads,\n        selectedThreadId: threadId,\n        onSwitchToMode: handleSwitchToMode\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this);\n    }\n\n    // 일반 채팅 모드\n    return /*#__PURE__*/_jsxDEV(SentenceView, {\n      personaId: personaId,\n      personaName: personaName,\n      sentenceContent: sentenceContent || '',\n      threads: threads.filter(t => t.thread_type === 'sentence'),\n      onThreadUpdate: setThreads,\n      onSwitchToMode: handleSwitchToMode,\n      onSendMessage: handleSentenceChat,\n      isLoading: isLoading,\n      messages: threads.filter(t => t.thread_type === 'sentence')\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 583,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(MainArea, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 600,\n      columnNumber: 11\n    }, this), selectedPersonaItem === 'training' ? /*#__PURE__*/_jsxDEV(TrainingCategoryView, {\n      personas: personas,\n      onSelectPersona: onSelectPersona || (() => {}),\n      onInterpretationComplete: onInterpretationComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 610,\n      columnNumber: 9\n    }, this) : selectedPersonaItem === 'admin' ? /*#__PURE__*/_jsxDEV(PersonaAdminPanel, {\n      onClose: () => {\n        // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n        if (onSelectPersona) {\n          onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 616,\n      columnNumber: 9\n    }, this) : currentInterpretation && selectedConversationItem === 'interpretation' ?\n    // 해석 모드일 때 InterpretationView 사용\n    renderInterpretationView() : currentInterpretation && (selectedConversationItem === 'proceed' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('proceed-thread-')) ?\n    // 나아가기 모드일 때 ProceedView 사용\n    renderProceedView() : currentInterpretation && (selectedConversationItem === 'sentence' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('sentence-thread-')) ?\n    // 문장 모드일 때 SentenceView 사용\n    renderSentenceView() : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatContent, {\n        ref: chatContentRef,\n        children: [!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState(), !selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses(), selectedConversation && renderConversation(), isLoading && (selectedConversation && currentConversation ? /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: (_personas$currentConv = personas[currentConversation.persona_id]) === null || _personas$currentConv === void 0 ? void 0 : _personas$currentConv.name,\n          personaColor: (_personas$currentConv2 = personas[currentConversation.persona_id]) === null || _personas$currentConv2 === void 0 ? void 0 : _personas$currentConv2.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 648,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"AI\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 653,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 635,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        disabled: isLoading || Object.keys(personas).length === 0,\n        placeholder: selectedConversation && currentConversation ? `${(_personas$currentConv3 = personas[currentConversation.persona_id]) === null || _personas$currentConv3 === void 0 ? void 0 : _personas$currentConv3.name}에게 메시지를 보내세요...` : \"모든 페르소나에게 질문해보세요...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 661,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 598,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatArea, \"/jqOYjV261Mtrh86PwzZ/hJbVkU=\");\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Message","MessageInput","TrainingCategoryView","InterpretationView","ProceedView","SentenceView","PersonaAdminPanel","LoadingMessage","chatApi","MainArea","ChatContent","EmptyState","EmptyStateTitle","EmptyStateText","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","selectedConversation","conversations","personas","globalMessages","isLoading","error","onSendInitialMessage","onContinueConversation","onClearError","selectedPersonaItem","onSelectPersona","onInterpretationComplete","selectedConversationItem","currentInterpretation","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","_s","_personas$currentConv","_personas$currentConv2","_personas$currentConv3","chatContentRef","currentConversation","editingMessageIndex","setEditingMessageIndex","threads","setThreads","proceedContent","setProceedContent","sentenceContent","setSentenceContent","selectedThreadId","setSelectedThreadId","includes","threadId","split","current","scrollTop","scrollHeight","messages","loadTrainingData","personaId","threadsResponse","getPersonaThreads","data","_proceedResponse$data","proceedResponse","getProceedContent","proceed_content","_newProceedResponse$d","newProceedResponse","generateProceed","persona_id","interpretation_content","content","console","warn","_sentenceResponse$dat","sentenceResponse","getSentenceContent","sentence_content","_newSentenceResponse$","newSentenceResponse","generateSentence","handleSendMessage","message","handleEditInterpretationMessage","messageIndex","newContent","updatedMessages","length","timestamp","Date","toISOString","filteredMessages","slice","response","chatWithInterpretation","aiResponse","role","updatedInterpretation","personaName","apiError","handleEditConversationMessage","_result$data","result","editMessage","success","updated_conversation","log","conversation","newResponse","new_response","getHeaderTitle","persona","name","getHeaderSubtitle","renderInitialResponses","latestMessage","children","user_message","showActionButtons","fileName","_jsxFileName","lineNumber","columnNumber","responses","map","persona_name","id","style","margin","padding","backgroundColor","borderRadius","border","textAlign","fontSize","color","marginBottom","renderConversation","index","onCopy","navigator","clipboard","writeText","then","catch","err","onEdit","undefined","onEditSave","onEditCancel","isEditing","onSunAction","onPersonAction","onDocumentAction","renderEmptyState","Object","keys","handleSwitchToMode","mode","handleProceedChat","prev","thread_type","handleSentenceChat","renderInterpretationView","interpretation","onSendMessage","onEditMessage","onSwitchToMode","renderProceedView","startsWith","replace","filter","t","onThreadUpdate","renderSentenceView","height","borderBottom","background","onClose","ref","personaColor","disabled","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/ChatArea.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Conversation, Persona, GlobalMessage, TrainingThread } from '../types';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from './TrainingCategoryView';\nimport InterpretationView from './InterpretationView';\nimport ProceedView from './ProceedView';\nimport SentenceView from './SentenceView';\nimport PersonaAdminPanel from './PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport {\n  MainArea,\n  ChatHeader,\n  ChatHeaderTitle,\n  ChatContent,\n  LoadingSpinner,\n  ErrorMessage,\n  EmptyState,\n  EmptyStateTitle,\n  EmptyStateText,\n} from '../styles/GlobalStyle';\n\ninterface ChatAreaProps {\n  selectedConversation: string | null;\n  conversations: Record<string, Conversation>;\n  personas: Record<string, Persona>;\n  globalMessages: GlobalMessage[];\n  isLoading: boolean;\n  error: string | null;\n  onSendInitialMessage: (message: string) => Promise<boolean>;\n  onContinueConversation: (conversationId: string, message: string) => Promise<boolean>;\n  onClearError: () => void;\n  selectedPersonaItem?: string | null; // 훈습 모드 확인용\n  onSelectPersona?: (personaId: string) => void; // 페르소나 선택 핸들러\n  onInterpretationComplete: (personaId: string, interpretation: string) => void; // 해석 완료 핸들러\n  selectedConversationItem?: string | null; // 선택된 대화 항목\n  currentInterpretation?: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null;\n  onInterpretationMessage: (message: string) => Promise<boolean>; // 해석 채팅 메시지 핸들러\n  onUpdateInterpretation?: (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => void; // 해석 업데이트 핸들러\n  onUpdateConversation?: (updatedConversation: any) => void; // 대화 업데이트 핸들러\n  onSwitchConversationMode?: (mode: string) => void; // 대화 모드 전환 핸들러\n}\n\nconst ChatArea: React.FC<ChatAreaProps> = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onSwitchConversationMode,\n}) => {\n  const chatContentRef = useRef<HTMLDivElement>(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n  \n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 훈습 관련 상태\n  const [threads, setThreads] = useState<TrainingThread[]>([]);\n  const [proceedContent, setProceedContent] = useState<string>('');\n  const [sentenceContent, setSentenceContent] = useState<string>('');\n  const [selectedThreadId, setSelectedThreadId] = useState<string | null>(null);\n\n  // 선택된 스레드 ID 추출\n  useEffect(() => {\n    if (selectedConversationItem?.includes('-thread-')) {\n      const threadId = selectedConversationItem.split('-thread-')[1];\n      setSelectedThreadId(threadId);\n    } else {\n      setSelectedThreadId(null);\n    }\n  }, [selectedConversationItem]);\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation?.messages, globalMessages, isLoading]);\n\n  // 훈습 데이터 로딩\n  useEffect(() => {\n    const loadTrainingData = async () => {\n      if (!currentInterpretation?.personaId) return;\n\n      try {\n        // 스레드 데이터 로드 (항상 필요)\n        const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n        if (threadsResponse.data) {\n          setThreads(threadsResponse.data);\n        }\n\n        // 나아가기/문장 데이터는 필요할 때만 로드 (성능 개선)\n        if (selectedConversationItem === 'proceed' && !proceedContent) {\n          try {\n            // 기존 나아가기 데이터 조회 (새로 생성하지 않음)\n            const proceedResponse = await chatApi.getProceedContent(currentInterpretation.personaId);\n            if (proceedResponse.data?.proceed_content) {\n              setProceedContent(proceedResponse.data.proceed_content);\n            } else {\n              // 기존 데이터가 없으면 생성\n              const newProceedResponse = await chatApi.generateProceed({\n                persona_id: currentInterpretation.personaId,\n                interpretation_content: currentInterpretation.content\n              });\n              if (newProceedResponse.data?.proceed_content) {\n                setProceedContent(newProceedResponse.data.proceed_content);\n              }\n            }\n          } catch (error) {\n            console.warn('나아가기 데이터 로드 실패:', error);\n          }\n        }\n\n        if (selectedConversationItem === 'sentence' && !sentenceContent) {\n          try {\n            // 기존 문장 데이터 조회 (새로 생성하지 않음)\n            const sentenceResponse = await chatApi.getSentenceContent(currentInterpretation.personaId);\n            if (sentenceResponse.data?.sentence_content) {\n              setSentenceContent(sentenceResponse.data.sentence_content);\n            } else {\n              // 기존 데이터가 없으면 생성\n              const newSentenceResponse = await chatApi.generateSentence({\n                persona_id: currentInterpretation.personaId,\n                interpretation_content: currentInterpretation.content\n              });\n              if (newSentenceResponse.data?.sentence_content) {\n                setSentenceContent(newSentenceResponse.data.sentence_content);\n              }\n            }\n          } catch (error) {\n            console.warn('문장 데이터 로드 실패:', error);\n          }\n        }\n      } catch (error) {\n        console.error('스레드 데이터 로드 실패:', error);\n      }\n    };\n\n    loadTrainingData();\n  }, [currentInterpretation?.personaId, selectedConversationItem]);\n\n  const handleSendMessage = async (message: string) => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString(),\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(\n            currentInterpretation.personaId,\n            newContent\n          );\n\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: response.data.response,\n              timestamp: response.data.timestamp,\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString(),\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n          \n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant' as const,\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse],\n          };\n\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!selectedConversation || !currentConversation) return false;\n\n    try {\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      \n      if (result.data?.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        \n        console.log('메시지가 수정되고 새로운 AI 응답이 생성되었습니다:', {\n          conversation: result.data.updated_conversation,\n          newResponse: result.data.new_response\n        });\n        \n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n\n  const getHeaderTitle = () => {\n    if (selectedConversation && currentConversation) {\n      const persona = personas[currentConversation.persona_id];\n      return `${persona?.name}과의 대화`;\n    }\n    return '다중 페르소나 채팅';\n  };\n\n  const getHeaderSubtitle = () => {\n    if (selectedConversation && currentConversation) {\n      return `${currentConversation.messages.length}개의 메시지`;\n    }\n    return '모든 페르소나와 대화하거나 개별 페르소나를 선택하세요';\n  };\n\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    \n    const latestMessage = globalMessages[globalMessages.length - 1];\n    \n    return (\n      <div>\n        {/* 사용자 질문 */}\n        <Message\n          message={{\n            role: 'user',\n            content: latestMessage.user_message,\n            timestamp: latestMessage.timestamp,\n          }}\n          personas={personas}\n          showActionButtons={false}\n        />\n        \n        {/* 모든 페르소나 응답 */}\n        {latestMessage.responses.map((response) => (\n          <Message\n            key={`${latestMessage.id}_${response.persona_id}`}\n            message={{\n              role: 'assistant',\n              content: response.content,\n              timestamp: response.timestamp,\n              persona_id: response.persona_id,\n              persona_name: response.persona_name,\n            }}\n            personas={personas}\n            showActionButtons={true}\n          />\n        ))}\n        \n        <div style={{\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center',\n        }}>\n          <div style={{ fontSize: '14px', color: '#666', marginBottom: '8px' }}>\n            💡 각 페르소나와 개별적으로 대화를 이어가려면\n          </div>\n          <div style={{ fontSize: '13px', color: '#888' }}>\n            왼쪽 사이드바에서 페르소나를 선택하거나, 특정 대화를 선택하세요\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n\n    return currentConversation.messages.map((message, index) => (\n      <Message\n        key={`${currentConversation.id}_${index}`}\n        message={message}\n        personas={personas}\n        showActionButtons={true}\n        onCopy={() => {\n          // 메시지 내용 복사\n          navigator.clipboard.writeText(message.content).then(() => {\n            console.log('메시지가 복사되었습니다');\n          }).catch(err => {\n            console.error('복사 실패:', err);\n          });\n        }}\n        onEdit={message.role === 'user' ? () => setEditingMessageIndex(index) : undefined}\n        onEditSave={message.role === 'user' ? async (newContent) => {\n          const success = await handleEditConversationMessage(index, newContent);\n          if (success) {\n            setEditingMessageIndex(null); // 편집 완료 시 편집 모드 해제\n          }\n          return success;\n        } : undefined}\n        onEditCancel={() => setEditingMessageIndex(null)}\n        isEditing={editingMessageIndex === index}\n        onSunAction={() => console.log('해 버튼 - 향후 구현')}\n        onPersonAction={() => console.log('나 버튼 - 향후 구현')}\n        onDocumentAction={() => console.log('문 버튼 - 향후 구현')}\n      />\n    ));\n  };\n\n  const renderEmptyState = () => (\n    <EmptyState>\n      <EmptyStateTitle>새로운 대화를 시작해보세요!</EmptyStateTitle>\n      <EmptyStateText>\n        {Object.keys(personas).length > 0 ? (\n          <>\n            아래에 질문을 입력하면 {Object.keys(personas).length}개의 페르소나가<br />\n            각각 다른 관점에서 답변해드립니다.\n          </>\n        ) : (\n          '페르소나 정보를 불러오는 중입니다...'\n        )}\n      </EmptyStateText>\n    </EmptyState>\n  );\n\n  // 모드 전환 핸들러\n  const handleSwitchToMode = (mode: 'interpretation' | 'proceed' | 'sentence') => {\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(mode);\n    }\n  };\n\n  // 나아가기 채팅 핸들러 추가\n  const handleProceedChat = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    try {\n      const response = await chatApi.chatWithInterpretation(\n        currentInterpretation.personaId,\n        `나아가기와 관련하여: ${message}`\n      );\n\n      if (response.data) {\n        setThreads(prev => [\n          ...prev,\n          {\n            thread_type: 'proceed',\n            persona_id: currentInterpretation.personaId,\n            persona_name: currentInterpretation.personaName,\n            content: message,\n            timestamp: response.data.timestamp,\n          },\n          {\n            role: 'assistant',\n            content: response.data.response,\n            timestamp: response.data.timestamp,\n          }\n        ]);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      return false;\n    }\n  };\n\n  // 문장 채팅 핸들러 추가\n  const handleSentenceChat = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    try {\n      const response = await chatApi.chatWithInterpretation(\n        currentInterpretation.personaId,\n        `문장과 관련하여: ${message}`\n      );\n\n      if (response.data) {\n        setThreads(prev => [\n          ...prev,\n          {\n            thread_type: 'sentence',\n            persona_id: currentInterpretation.personaId,\n            persona_name: currentInterpretation.personaName,\n            content: message,\n            timestamp: response.data.timestamp,\n          },\n          {\n            role: 'assistant',\n            content: response.data.response,\n            timestamp: response.data.timestamp,\n          }\n        ]);\n        return true;\n      }\n      return false;\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      return false;\n    }\n  };\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return <div>해석 데이터가 없습니다.</div>;\n    \n    return (\n      <InterpretationView\n        interpretation={currentInterpretation.content}\n        personaName={currentInterpretation.personaName}\n        onSendMessage={handleSendMessage}\n        onEditMessage={handleEditInterpretationMessage}\n        isLoading={isLoading}\n        messages={currentInterpretation.messages}\n        onSwitchToMode={handleSwitchToMode}\n      />\n    );\n  };\n\n  // 나아가기 뷰 렌더링\n  const renderProceedView = () => {\n    if (!currentInterpretation) return <div>해석 데이터가 없습니다.</div>;\n    \n    const personaId = currentInterpretation.personaId;\n    const personaName = currentInterpretation.personaName;\n    \n    // 스레드 ID가 있으면 스레드 모드\n    if (selectedConversationItem?.startsWith('proceed-thread-')) {\n      const threadId = selectedConversationItem.replace('proceed-thread-', '');\n      return (\n        <ProceedView\n          personaId={personaId}\n          personaName={personaName}\n          proceedContent={proceedContent || ''}\n          threads={threads.filter(t => t.thread_type === 'proceed')}\n          onThreadUpdate={setThreads}\n          selectedThreadId={threadId}\n          onSwitchToMode={handleSwitchToMode}\n        />\n      );\n    }\n    \n    // 일반 채팅 모드\n    return (\n      <ProceedView\n        personaId={personaId}\n        personaName={personaName}\n        proceedContent={proceedContent || ''}\n        threads={threads.filter(t => t.thread_type === 'proceed')}\n        onThreadUpdate={setThreads}\n        onSwitchToMode={handleSwitchToMode}\n        onSendMessage={handleProceedChat}\n        isLoading={isLoading}\n        messages={threads.filter(t => t.thread_type === 'proceed')}\n      />\n    );\n  };\n\n  // 문장 뷰 렌더링\n  const renderSentenceView = () => {\n    if (!currentInterpretation) return <div>해석 데이터가 없습니다.</div>;\n    \n    const personaId = currentInterpretation.personaId;\n    const personaName = currentInterpretation.personaName;\n    \n    // 스레드 ID가 있으면 스레드 모드\n    if (selectedConversationItem?.startsWith('sentence-thread-')) {\n      const threadId = selectedConversationItem.replace('sentence-thread-', '');\n      return (\n        <SentenceView\n          personaId={personaId}\n          personaName={personaName}\n          sentenceContent={sentenceContent || ''}\n          threads={threads.filter(t => t.thread_type === 'sentence')}\n          onThreadUpdate={setThreads}\n          selectedThreadId={threadId}\n          onSwitchToMode={handleSwitchToMode}\n        />\n      );\n    }\n    \n    // 일반 채팅 모드\n    return (\n      <SentenceView\n        personaId={personaId}\n        personaName={personaName}\n        sentenceContent={sentenceContent || ''}\n        threads={threads.filter(t => t.thread_type === 'sentence')}\n        onThreadUpdate={setThreads}\n        onSwitchToMode={handleSwitchToMode}\n        onSendMessage={handleSentenceChat}\n        isLoading={isLoading}\n        messages={threads.filter(t => t.thread_type === 'sentence')}\n      />\n    );\n  };\n\n  return (\n    <MainArea>\n      {/* 메인 영역 헤더 - 사이드바와 높이 맞춤 (80px) - 빈 공간 */}\n          <div style={{ \n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white',\n          }}>\n        {/* 빈 헤더 공간 */}\n          </div>\n\n      {/* 훈습 모드일 때 카테고리 뷰 표시 */}\n      {selectedPersonaItem === 'training' ? (\n        <TrainingCategoryView\n          personas={personas}\n          onSelectPersona={onSelectPersona || (() => {})}\n          onInterpretationComplete={onInterpretationComplete}\n        />\n      ) : selectedPersonaItem === 'admin' ? (\n        <PersonaAdminPanel \n          onClose={() => {\n            // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n            if (onSelectPersona) {\n              onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n            }\n          }}\n        />\n      ) : currentInterpretation && selectedConversationItem === 'interpretation' ? (\n        // 해석 모드일 때 InterpretationView 사용\n        renderInterpretationView()\n      ) : currentInterpretation && (selectedConversationItem === 'proceed' || selectedConversationItem?.startsWith('proceed-thread-')) ? (\n        // 나아가기 모드일 때 ProceedView 사용\n        renderProceedView()\n      ) : currentInterpretation && (selectedConversationItem === 'sentence' || selectedConversationItem?.startsWith('sentence-thread-')) ? (\n        // 문장 모드일 때 SentenceView 사용\n        renderSentenceView()\n      ) : (\n        <>\n      <ChatContent ref={chatContentRef}>\n        {/* {error && (\n          <ErrorMessage onClick={onClearError}>\n            {error} (클릭하여 닫기)\n          </ErrorMessage>\n        )} */}\n\n            {!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState()}\n            {!selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses()}\n        {selectedConversation && renderConversation()}\n\n        {isLoading && (\n          selectedConversation && currentConversation ? (\n            <LoadingMessage \n              personaName={personas[currentConversation.persona_id]?.name}\n              personaColor={personas[currentConversation.persona_id]?.color}\n            />\n          ) : (\n            <LoadingMessage \n              personaName=\"AI\"\n              personaColor=\"#666\"\n            />\n          )\n        )}\n      </ChatContent>\n\n      <MessageInput\n        onSendMessage={handleSendMessage}\n        disabled={isLoading || Object.keys(personas).length === 0}\n        placeholder={\n          selectedConversation && currentConversation\n            ? `${personas[currentConversation.persona_id]?.name}에게 메시지를 보내세요...`\n            : \"모든 페르소나에게 질문해보세요...\"\n        }\n      />\n        </>\n      )}\n    </MainArea>\n  );\n};\n\nexport default ChatArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}