{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{useState,useEffect,useCallback}from'react';import{chatApi}from'../api/chatApi';const initialState={personas:{},globalMessages:[],conversations:{},selectedConversation:null,selectedPersona:null,isLoading:false};export const useChat=()=>{const[state,setState]=useState(initialState);const[error,setError]=useState(null);// 페르소나 정보 로드\nconst loadPersonas=useCallback(async()=>{const result=await chatApi.getPersonas();if(result.data){setState(prev=>_objectSpread(_objectSpread({},prev),{},{personas:result.data}));}else{setError(result.error||'페르소나 정보를 불러올 수 없습니다.');}},[]);// 글로벌 메시지 로드\nconst loadGlobalMessages=useCallback(async()=>{const result=await chatApi.getGlobalMessages();if(result.data){setState(prev=>_objectSpread(_objectSpread({},prev),{},{globalMessages:result.data}));}},[]);// 대화 목록 로드\nconst loadConversations=useCallback(async()=>{const result=await chatApi.getAllConversations();if(result.data){const conversationsMap=result.data.reduce((acc,conv)=>{acc[conv.id]=conv;return acc;},{});setState(prev=>_objectSpread(_objectSpread({},prev),{},{conversations:conversationsMap}));}},[]);// 초기 메시지 전송 (모든 페르소나 응답)\nconst sendInitialMessage=useCallback(async content=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{isLoading:true}));setError(null);try{const result=await chatApi.sendInitialMessage(content);if(result.data){// 글로벌 메시지 추가\nconst newGlobalMessage={id:result.data.message_id,user_message:content,responses:result.data.responses,timestamp:new Date().toISOString()};setState(prev=>_objectSpread(_objectSpread({},prev),{},{globalMessages:[...prev.globalMessages,newGlobalMessage],isLoading:false}));// 각 페르소나에 대한 대화 생성\nresult.data.responses.forEach(response=>{const conversationId=\"\".concat(result.data.message_id,\"_\").concat(response.persona_id);const newConversation={id:conversationId,persona_id:response.persona_id,messages:[{role:'user',content:content,timestamp:new Date().toISOString()},{role:'assistant',content:response.content,timestamp:response.timestamp,persona_id:response.persona_id,persona_name:response.persona_name}],created_at:new Date().toISOString()};setState(prev=>_objectSpread(_objectSpread({},prev),{},{conversations:_objectSpread(_objectSpread({},prev.conversations),{},{[conversationId]:newConversation})}));});return true;}else{setError(result.error||'메시지 전송에 실패했습니다.');setState(prev=>_objectSpread(_objectSpread({},prev),{},{isLoading:false}));return false;}}catch(err){setError('메시지 전송 중 오류가 발생했습니다.');setState(prev=>_objectSpread(_objectSpread({},prev),{},{isLoading:false}));return false;}},[]);// 특정 페르소나와 대화 이어가기\nconst continueConversation=useCallback(async(conversationId,message)=>{const conversation=state.conversations[conversationId];if(!conversation){setError('대화를 찾을 수 없습니다.');return false;}setState(prev=>_objectSpread(_objectSpread({},prev),{},{isLoading:true}));setError(null);try{const result=await chatApi.continueConversation(conversation.persona_id,message,conversationId);if(result.data){// 새 메시지들을 대화에 추가\nconst userMessage={role:'user',content:message,timestamp:new Date().toISOString()};const assistantMessage={role:'assistant',content:result.data.content,timestamp:result.data.timestamp,persona_id:result.data.persona_id,persona_name:result.data.persona_name};setState(prev=>_objectSpread(_objectSpread({},prev),{},{conversations:_objectSpread(_objectSpread({},prev.conversations),{},{[conversationId]:_objectSpread(_objectSpread({},prev.conversations[conversationId]),{},{messages:[...prev.conversations[conversationId].messages,userMessage,assistantMessage]})}),isLoading:false}));return true;}else{setError(result.error||'대화 이어가기에 실패했습니다.');setState(prev=>_objectSpread(_objectSpread({},prev),{},{isLoading:false}));return false;}}catch(err){setError('대화 이어가기 중 오류가 발생했습니다.');setState(prev=>_objectSpread(_objectSpread({},prev),{},{isLoading:false}));return false;}},[state.conversations]);// 대화 업데이트\nconst updateConversation=useCallback((conversationId,updatedConversation)=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{conversations:_objectSpread(_objectSpread({},prev.conversations),{},{[conversationId]:updatedConversation})}));},[]);// 대화 선택\nconst selectConversation=useCallback(conversationId=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{selectedConversation:conversationId}));},[]);// 페르소나 선택\nconst selectPersona=useCallback(personaId=>{setState(prev=>_objectSpread(_objectSpread({},prev),{},{selectedPersona:personaId}));},[]);// 에러 클리어\nconst clearError=useCallback(()=>{setError(null);},[]);// 특정 페르소나의 대화 목록 가져오기\nconst getPersonaConversations=useCallback(personaId=>{return Object.values(state.conversations).filter(conv=>conv.persona_id===personaId);},[state.conversations]);// 현재 선택된 대화 가져오기\nconst getCurrentConversation=useCallback(()=>{return state.selectedConversation?state.conversations[state.selectedConversation]:null;},[state.selectedConversation,state.conversations]);// 초기 로드\nuseEffect(()=>{loadPersonas();loadGlobalMessages();loadConversations();},[loadPersonas,loadGlobalMessages,loadConversations]);return{// State\npersonas:state.personas,globalMessages:state.globalMessages,conversations:state.conversations,selectedConversation:state.selectedConversation,selectedPersona:state.selectedPersona,isLoading:state.isLoading,error,// Actions\nsendInitialMessage,continueConversation,updateConversation,selectConversation,selectPersona,clearError,loadPersonas,loadGlobalMessages,loadConversations,// Computed\ngetPersonaConversations,getCurrentConversation};};","map":{"version":3,"names":["useState","useEffect","useCallback","chatApi","initialState","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","useChat","state","setState","error","setError","loadPersonas","result","getPersonas","data","prev","_objectSpread","loadGlobalMessages","getGlobalMessages","loadConversations","getAllConversations","conversationsMap","reduce","acc","conv","id","sendInitialMessage","content","newGlobalMessage","message_id","user_message","responses","timestamp","Date","toISOString","forEach","response","conversationId","concat","persona_id","newConversation","messages","role","persona_name","created_at","err","continueConversation","message","conversation","userMessage","assistantMessage","updateConversation","updatedConversation","selectConversation","selectPersona","personaId","clearError","getPersonaConversations","Object","values","filter","getCurrentConversation"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/shared/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { ChatState, GlobalMessage, Conversation } from '../types';\r\nimport { chatApi } from '../api/chatApi';\r\n\r\nconst initialState: ChatState = {\r\n  personas: {},\r\n  globalMessages: [],\r\n  conversations: {},\r\n  selectedConversation: null,\r\n  selectedPersona: null,\r\n  isLoading: false,\r\n};\r\n\r\nexport const useChat = () => {\r\n  const [state, setState] = useState<ChatState>(initialState);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 페르소나 정보 로드\r\n  const loadPersonas = useCallback(async () => {\r\n    const result = await chatApi.getPersonas();\r\n    if (result.data) {\r\n      setState(prev => ({ ...prev, personas: result.data! }));\r\n    } else {\r\n      setError(result.error || '페르소나 정보를 불러올 수 없습니다.');\r\n    }\r\n  }, []);\r\n\r\n  // 글로벌 메시지 로드\r\n  const loadGlobalMessages = useCallback(async () => {\r\n    const result = await chatApi.getGlobalMessages();\r\n    if (result.data) {\r\n      setState(prev => ({ ...prev, globalMessages: result.data! }));\r\n    }\r\n  }, []);\r\n\r\n  // 대화 목록 로드\r\n  const loadConversations = useCallback(async () => {\r\n    const result = await chatApi.getAllConversations();\r\n    if (result.data) {\r\n      const conversationsMap = result.data!.reduce((acc, conv) => {\r\n        acc[conv.id] = conv;\r\n        return acc;\r\n      }, {} as Record<string, Conversation>);\r\n      setState(prev => ({ ...prev, conversations: conversationsMap }));\r\n    }\r\n  }, []);\r\n\r\n  // 초기 메시지 전송 (모든 페르소나 응답)\r\n  const sendInitialMessage = useCallback(async (content: string) => {\r\n    setState(prev => ({ ...prev, isLoading: true }));\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await chatApi.sendInitialMessage(content);\r\n      if (result.data) {\r\n        // 글로벌 메시지 추가\r\n        const newGlobalMessage: GlobalMessage = {\r\n          id: result.data.message_id,\r\n          user_message: content,\r\n          responses: result.data.responses,\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          globalMessages: [...prev.globalMessages, newGlobalMessage],\r\n          isLoading: false,\r\n        }));\r\n\r\n        // 각 페르소나에 대한 대화 생성\r\n        result.data.responses.forEach(response => {\r\n          const conversationId = `${result.data!.message_id}_${response.persona_id}`;\r\n          const newConversation: Conversation = {\r\n            id: conversationId,\r\n            persona_id: response.persona_id,\r\n            messages: [\r\n              {\r\n                role: 'user',\r\n                content: content,\r\n                timestamp: new Date().toISOString(),\r\n              },\r\n              {\r\n                role: 'assistant',\r\n                content: response.content,\r\n                timestamp: response.timestamp,\r\n                persona_id: response.persona_id,\r\n                persona_name: response.persona_name,\r\n              },\r\n            ],\r\n            created_at: new Date().toISOString(),\r\n          };\r\n\r\n          setState(prev => ({\r\n            ...prev,\r\n            conversations: {\r\n              ...prev.conversations,\r\n              [conversationId]: newConversation,\r\n            },\r\n          }));\r\n        });\r\n\r\n        return true;\r\n      } else {\r\n        setError(result.error || '메시지 전송에 실패했습니다.');\r\n        setState(prev => ({ ...prev, isLoading: false }));\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      setError('메시지 전송 중 오류가 발생했습니다.');\r\n      setState(prev => ({ ...prev, isLoading: false }));\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // 특정 페르소나와 대화 이어가기\r\n  const continueConversation = useCallback(async (\r\n    conversationId: string,\r\n    message: string\r\n  ) => {\r\n    const conversation = state.conversations[conversationId];\r\n    if (!conversation) {\r\n      setError('대화를 찾을 수 없습니다.');\r\n      return false;\r\n    }\r\n\r\n    setState(prev => ({ ...prev, isLoading: true }));\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await chatApi.continueConversation(\r\n        conversation.persona_id,\r\n        message,\r\n        conversationId\r\n      );\r\n\r\n      if (result.data) {\r\n        // 새 메시지들을 대화에 추가\r\n        const userMessage: any = {\r\n          role: 'user',\r\n          content: message,\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        const assistantMessage: any = {\r\n          role: 'assistant',\r\n          content: result.data.content,\r\n          timestamp: result.data.timestamp,\r\n          persona_id: result.data.persona_id,\r\n          persona_name: result.data.persona_name,\r\n        };\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          conversations: {\r\n            ...prev.conversations,\r\n            [conversationId]: {\r\n              ...prev.conversations[conversationId],\r\n              messages: [\r\n                ...prev.conversations[conversationId].messages,\r\n                userMessage,\r\n                assistantMessage,\r\n              ],\r\n            },\r\n          },\r\n          isLoading: false,\r\n        }));\r\n\r\n        return true;\r\n      } else {\r\n        setError(result.error || '대화 이어가기에 실패했습니다.');\r\n        setState(prev => ({ ...prev, isLoading: false }));\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      setError('대화 이어가기 중 오류가 발생했습니다.');\r\n      setState(prev => ({ ...prev, isLoading: false }));\r\n      return false;\r\n    }\r\n  }, [state.conversations]);\r\n\r\n  // 대화 업데이트\r\n  const updateConversation = useCallback((conversationId: string, updatedConversation: Conversation) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      conversations: {\r\n        ...prev.conversations,\r\n        [conversationId]: updatedConversation,\r\n      },\r\n    }));\r\n  }, []);\r\n\r\n  // 대화 선택\r\n  const selectConversation = useCallback((conversationId: string | null) => {\r\n    setState(prev => ({ ...prev, selectedConversation: conversationId }));\r\n  }, []);\r\n\r\n  // 페르소나 선택\r\n  const selectPersona = useCallback((personaId: string | null) => {\r\n    setState(prev => ({ ...prev, selectedPersona: personaId }));\r\n  }, []);\r\n\r\n  // 에러 클리어\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  // 특정 페르소나의 대화 목록 가져오기\r\n  const getPersonaConversations = useCallback((personaId: string) => {\r\n    return Object.values(state.conversations).filter(\r\n      conv => conv.persona_id === personaId\r\n    );\r\n  }, [state.conversations]);\r\n\r\n  // 현재 선택된 대화 가져오기\r\n  const getCurrentConversation = useCallback(() => {\r\n    return state.selectedConversation \r\n      ? state.conversations[state.selectedConversation]\r\n      : null;\r\n  }, [state.selectedConversation, state.conversations]);\r\n\r\n  // 초기 로드\r\n  useEffect(() => {\r\n    loadPersonas();\r\n    loadGlobalMessages();\r\n    loadConversations();\r\n  }, [loadPersonas, loadGlobalMessages, loadConversations]);\r\n\r\n  return {\r\n    // State\r\n    personas: state.personas,\r\n    globalMessages: state.globalMessages,\r\n    conversations: state.conversations,\r\n    selectedConversation: state.selectedConversation,\r\n    selectedPersona: state.selectedPersona,\r\n    isLoading: state.isLoading,\r\n    error,\r\n\r\n    // Actions\r\n    sendInitialMessage,\r\n    continueConversation,\r\n    updateConversation,\r\n    selectConversation,\r\n    selectPersona,\r\n    clearError,\r\n    loadPersonas,\r\n    loadGlobalMessages,\r\n    loadConversations,\r\n\r\n    // Computed\r\n    getPersonaConversations,\r\n    getCurrentConversation,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}