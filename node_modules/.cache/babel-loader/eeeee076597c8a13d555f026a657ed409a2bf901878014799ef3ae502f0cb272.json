{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const chatApi = {\n  // 페르소나 정보 가져오기\n  async getPersonas() {\n    try {\n      const response = await api.get('/personas');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || '페르소나 정보를 가져오는데 실패했습니다.'\n      };\n    }\n  },\n  // 초기 채팅 (모든 페르소나 응답)\n  async sendInitialMessage(content) {\n    try {\n      const response = await api.post('/chat/initial', {\n        content\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || '메시지 전송에 실패했습니다.'\n      };\n    }\n  },\n  // 특정 페르소나와 대화 이어가기\n  async continueConversation(persona_id, user_message, conversation_id) {\n    try {\n      const response = await api.post('/chat/continue', {\n        persona_id,\n        user_message,\n        conversation_id\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || '대화 이어가기에 실패했습니다.'\n      };\n    }\n  },\n  // 특정 대화 기록 가져오기\n  async getConversation(conversation_id) {\n    try {\n      const response = await api.get(`/conversations/${conversation_id}`);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || '대화 기록을 가져오는데 실패했습니다.'\n      };\n    }\n  },\n  // 모든 대화 기록 가져오기\n  async getAllConversations() {\n    try {\n      const response = await api.get('/conversations');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || '대화 목록을 가져오는데 실패했습니다.'\n      };\n    }\n  },\n  // 전체 메시지 기록 가져오기\n  async getGlobalMessages() {\n    try {\n      const response = await api.get('/messages');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.detail) || '메시지 기록을 가져오는데 실패했습니다.'\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","chatApi","getPersonas","response","get","data","error","_error$response","_error$response$data","detail","sendInitialMessage","content","post","_error$response2","_error$response2$data","continueConversation","persona_id","user_message","conversation_id","_error$response3","_error$response3$data","getConversation","_error$response4","_error$response4$data","getAllConversations","_error$response5","_error$response5$data","getGlobalMessages","_error$response6","_error$response6$data"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/api/chatApi.ts"],"sourcesContent":["import axios from 'axios';\r\nimport { \r\n  Persona, PersonaResponse, Conversation, GlobalMessage, ApiResponse,\r\n  InterpretationStatus, InterpretationResponse, InterpretationRequest\r\n} from '../types';\r\n\r\nconst API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\r\n\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n  headers: {\r\n    'Content-Type': 'application/json',\r\n  },\r\n});\r\n\r\nexport const chatApi = {\r\n  // 페르소나 정보 가져오기\r\n  async getPersonas(): Promise<ApiResponse<Record<string, Persona>>> {\r\n    try {\r\n      const response = await api.get('/personas');\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '페르소나 정보를 가져오는데 실패했습니다.' };\r\n    }\r\n  },\r\n\r\n  // 초기 채팅 (모든 페르소나 응답)\r\n  async sendInitialMessage(content: string): Promise<ApiResponse<{\r\n    message_id: string;\r\n    responses: PersonaResponse[];\r\n  }>> {\r\n    try {\r\n      const response = await api.post('/chat/initial', { content });\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '메시지 전송에 실패했습니다.' };\r\n    }\r\n  },\r\n\r\n  // 특정 페르소나와 대화 이어가기\r\n  async continueConversation(\r\n    persona_id: string,\r\n    user_message: string,\r\n    conversation_id: string\r\n  ): Promise<ApiResponse<PersonaResponse>> {\r\n    try {\r\n      const response = await api.post('/chat/continue', {\r\n        persona_id,\r\n        user_message,\r\n        conversation_id,\r\n      });\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '대화 이어가기에 실패했습니다.' };\r\n    }\r\n  },\r\n\r\n  // 특정 대화 기록 가져오기\r\n  async getConversation(conversation_id: string): Promise<ApiResponse<Conversation>> {\r\n    try {\r\n      const response = await api.get(`/conversations/${conversation_id}`);\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '대화 기록을 가져오는데 실패했습니다.' };\r\n    }\r\n  },\r\n\r\n  // 모든 대화 기록 가져오기\r\n  async getAllConversations(): Promise<ApiResponse<Conversation[]>> {\r\n    try {\r\n      const response = await api.get('/conversations');\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '대화 목록을 가져오는데 실패했습니다.' };\r\n    }\r\n  },\r\n\r\n  // 전체 메시지 기록 가져오기\r\n  async getGlobalMessages(): Promise<ApiResponse<GlobalMessage[]>> {\r\n    try {\r\n      const response = await api.get('/messages');\r\n      return { data: response.data };\r\n    } catch (error: any) {\r\n      return { error: error.response?.data?.detail || '메시지 기록을 가져오는데 실패했습니다.' };\r\n    }\r\n  },\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}