{"ast":null,"code":"import { API_BASE_URL } from '../../shared/api/chatApi';\n// 로컬 스토리지 백업 시스템\nclass LocalBackupService {\n  constructor() {\n    this.MEMOS_KEY = 'sentence_memos_backup';\n    this.HIGHLIGHTS_KEY = 'sentence_highlights_backup';\n  }\n  // 메모 백업\n  saveMemo(sentenceId, content) {\n    try {\n      const memos = this.getAllMemos();\n      memos[sentenceId] = content;\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 백업 실패:', error);\n    }\n  }\n\n  // 메모 삭제\n  deleteMemo(sentenceId) {\n    try {\n      const memos = this.getAllMemos();\n      delete memos[sentenceId];\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 삭제 실패:', error);\n    }\n  }\n\n  // 모든 메모 조회\n  getAllMemos() {\n    try {\n      const stored = localStorage.getItem(this.MEMOS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 메모 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 하이라이트 백업\n  saveHighlight(sentenceId, threadId) {\n    try {\n      const highlights = this.getAllHighlights();\n      if (!highlights[threadId]) {\n        highlights[threadId] = [];\n      }\n      if (!highlights[threadId].includes(sentenceId)) {\n        highlights[threadId].push(sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 백업 실패:', error);\n    }\n  }\n\n  // 하이라이트 삭제\n  deleteHighlight(sentenceId) {\n    try {\n      const highlights = this.getAllHighlights();\n      for (const threadId in highlights) {\n        highlights[threadId] = highlights[threadId].filter(id => id !== sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 삭제 실패:', error);\n    }\n  }\n\n  // 모든 하이라이트 조회\n  getAllHighlights() {\n    try {\n      const stored = localStorage.getItem(this.HIGHLIGHTS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 하이라이트 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  getThreadHighlights(threadId) {\n    try {\n      const highlights = this.getAllHighlights();\n      return highlights[threadId] || [];\n    } catch (error) {\n      console.warn('스레드 하이라이트 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 스레드별 데이터 조회 (백엔드와 동일한 형식)\n  getThreadSentenceData(threadId) {\n    return {\n      memos: this.getAllMemos(),\n      highlights: this.getThreadHighlights(threadId)\n    };\n  }\n}\nconst localBackup = new LocalBackupService();\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request) {\n    try {\n      console.log('=== 저장고 저장 시작 ===');\n      console.log('요청 데이터:', JSON.stringify(request, null, 2));\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n      console.log('응답 헤더:', Object.fromEntries(response.headers.entries()));\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          const errorText = await response.text();\n          console.error('JSON 파싱 실패, 원시 오류 응답:', errorText);\n          throw new Error(`서버 오류 (${response.status}): ${errorText}`);\n        }\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || `서버 오류 (${response.status})`);\n      }\n      const result = await response.json();\n      console.log('성공 응답:', JSON.stringify(result, null, 2));\n      console.log('=== 저장고 저장 완료 ===');\n      return result;\n    } catch (error) {\n      console.error('저장고 저장 오류:', error);\n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');\n      }\n      throw error;\n    }\n  }\n  async getVaultSentences() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteVaultSentence(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n      if (response.status === 404) {\n        return null;\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '메모가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n  async deleteHighlight(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '하이라이트가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n}\nexport const sentenceApi = new SentenceApi();","map":{"version":3,"names":["API_BASE_URL","LocalBackupService","constructor","MEMOS_KEY","HIGHLIGHTS_KEY","saveMemo","sentenceId","content","memos","getAllMemos","localStorage","setItem","JSON","stringify","error","console","warn","deleteMemo","stored","getItem","parse","saveHighlight","threadId","highlights","getAllHighlights","includes","push","deleteHighlight","filter","id","getThreadHighlights","getThreadSentenceData","localBackup","SentenceApi","saveSentencesToVault","request","log","response","fetch","method","headers","body","status","ok","Object","fromEntries","entries","errorData","json","e","errorText","text","Error","detail","result","name","message","getVaultSentences","deleteVaultSentence","createOrUpdateMemo","getMemo","success","createHighlight","sentenceApi"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/api/sentenceApi.ts"],"sourcesContent":["import { API_BASE_URL } from '../../shared/api/chatApi';\n\nexport interface SentenceVaultItem {\n  id: string;\n  sentence: string;\n  source_message_id: string;\n  source_conversation_id?: string;\n  created_at: string;\n  tags: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface SentenceVaultRequest {\n  sentences: string[];\n  source_message_id: string;\n  source_conversation_id?: string;\n  tags?: string[];\n}\n\nexport interface SentenceVaultResponse {\n  success: boolean;\n  message: string;\n  saved_items: SentenceVaultItem[];\n}\n\nexport interface SentenceMemo {\n  id: string;\n  sentence_id: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SentenceMemoRequest {\n  sentence_id: string;\n  content: string;\n}\n\nexport interface SentenceMemoResponse {\n  success: boolean;\n  message: string;\n  memo?: SentenceMemo;\n}\n\nexport interface SentenceHighlight {\n  id: string;\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n  created_at: string;\n}\n\nexport interface SentenceHighlightRequest {\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n}\n\nexport interface SentenceHighlightResponse {\n  success: boolean;\n  message: string;\n  highlight?: SentenceHighlight;\n}\n\nexport interface ThreadSentenceData {\n  memos: Record<string, string>;\n  highlights: string[];\n}\n\n// 로컬 스토리지 백업 시스템\nclass LocalBackupService {\n  private readonly MEMOS_KEY = 'sentence_memos_backup';\n  private readonly HIGHLIGHTS_KEY = 'sentence_highlights_backup';\n\n  // 메모 백업\n  saveMemo(sentenceId: string, content: string): void {\n    try {\n      const memos = this.getAllMemos();\n      memos[sentenceId] = content;\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 백업 실패:', error);\n    }\n  }\n\n  // 메모 삭제\n  deleteMemo(sentenceId: string): void {\n    try {\n      const memos = this.getAllMemos();\n      delete memos[sentenceId];\n      localStorage.setItem(this.MEMOS_KEY, JSON.stringify(memos));\n    } catch (error) {\n      console.warn('로컬 메모 삭제 실패:', error);\n    }\n  }\n\n  // 모든 메모 조회\n  getAllMemos(): Record<string, string> {\n    try {\n      const stored = localStorage.getItem(this.MEMOS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 메모 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 하이라이트 백업\n  saveHighlight(sentenceId: string, threadId: string): void {\n    try {\n      const highlights = this.getAllHighlights();\n      if (!highlights[threadId]) {\n        highlights[threadId] = [];\n      }\n      if (!highlights[threadId].includes(sentenceId)) {\n        highlights[threadId].push(sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 백업 실패:', error);\n    }\n  }\n\n  // 하이라이트 삭제\n  deleteHighlight(sentenceId: string): void {\n    try {\n      const highlights = this.getAllHighlights();\n      for (const threadId in highlights) {\n        highlights[threadId] = highlights[threadId].filter(id => id !== sentenceId);\n      }\n      localStorage.setItem(this.HIGHLIGHTS_KEY, JSON.stringify(highlights));\n    } catch (error) {\n      console.warn('로컬 하이라이트 삭제 실패:', error);\n    }\n  }\n\n  // 모든 하이라이트 조회\n  getAllHighlights(): Record<string, string[]> {\n    try {\n      const stored = localStorage.getItem(this.HIGHLIGHTS_KEY);\n      return stored ? JSON.parse(stored) : {};\n    } catch (error) {\n      console.warn('로컬 하이라이트 조회 실패:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  getThreadHighlights(threadId: string): string[] {\n    try {\n      const highlights = this.getAllHighlights();\n      return highlights[threadId] || [];\n    } catch (error) {\n      console.warn('스레드 하이라이트 조회 실패:', error);\n      return [];\n    }\n  }\n\n  // 스레드별 데이터 조회 (백엔드와 동일한 형식)\n  getThreadSentenceData(threadId: string): ThreadSentenceData {\n    return {\n      memos: this.getAllMemos(),\n      highlights: this.getThreadHighlights(threadId)\n    };\n  }\n}\n\nconst localBackup = new LocalBackupService();\n\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request: SentenceVaultRequest): Promise<SentenceVaultResponse> {\n    try {\n      console.log('=== 저장고 저장 시작 ===');\n      console.log('요청 데이터:', JSON.stringify(request, null, 2));\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      \n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n      console.log('응답 헤더:', Object.fromEntries(response.headers.entries()));\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          const errorText = await response.text();\n          console.error('JSON 파싱 실패, 원시 오류 응답:', errorText);\n          throw new Error(`서버 오류 (${response.status}): ${errorText}`);\n        }\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || `서버 오류 (${response.status})`);\n      }\n\n      const result = await response.json();\n      console.log('성공 응답:', JSON.stringify(result, null, 2));\n      console.log('=== 저장고 저장 완료 ===');\n      return result;\n    } catch (error: any) {\n      console.error('저장고 저장 오류:', error);\n      \n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');\n      }\n      \n      throw error;\n    }\n  }\n\n  async getVaultSentences(): Promise<SentenceVaultItem[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteVaultSentence(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request: SentenceMemoRequest): Promise<SentenceMemoResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async getMemo(sentenceId: string): Promise<SentenceMemo | null> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n\n      if (response.status === 404) {\n        return null;\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteMemo(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '메모가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request: SentenceHighlightRequest): Promise<SentenceHighlightResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteHighlight(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '하이라이트가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos(): Promise<Record<string, string>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights(): Promise<Record<string, string[]>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n}\n\nexport const sentenceApi = new SentenceApi(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}