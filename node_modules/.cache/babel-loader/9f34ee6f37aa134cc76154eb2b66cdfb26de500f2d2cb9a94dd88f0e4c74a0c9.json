{"ast":null,"code":"import axios from 'axios';\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\nexport const chatApi = {\n  // 페르소나 정보 가져오기\n  async getPersonas() {\n    try {\n      const response = await api.get('/personas');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response, _error$response$data;\n      return {\n        error: ((_error$response = error.response) === null || _error$response === void 0 ? void 0 : (_error$response$data = _error$response.data) === null || _error$response$data === void 0 ? void 0 : _error$response$data.detail) || '페르소나 정보를 가져오는데 실패했습니다.'\n      };\n    }\n  },\n  // 해석 상태 조회\n  async getInterpretationStatus() {\n    try {\n      const response = await api.get('/interpretations/status');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response2, _error$response2$data;\n      return {\n        error: ((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : (_error$response2$data = _error$response2.data) === null || _error$response2$data === void 0 ? void 0 : _error$response2$data.detail) || '해석 상태 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 해석 생성\n  async generateInterpretation(request) {\n    try {\n      const response = await api.post('/interpretations/generate', request);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response3, _error$response3$data;\n      return {\n        error: ((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : (_error$response3$data = _error$response3.data) === null || _error$response3$data === void 0 ? void 0 : _error$response3$data.detail) || '해석 생성에 실패했습니다.'\n      };\n    }\n  },\n  // 해석 조회\n  async getInterpretation(personaId) {\n    try {\n      const response = await api.get(`/interpretations/${personaId}`);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response4, _error$response4$data;\n      return {\n        error: ((_error$response4 = error.response) === null || _error$response4 === void 0 ? void 0 : (_error$response4$data = _error$response4.data) === null || _error$response4$data === void 0 ? void 0 : _error$response4$data.detail) || '해석 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 초기 채팅 (모든 페르소나 응답)\n  async sendInitialMessage(content) {\n    try {\n      const response = await api.post('/chat/initial', {\n        content\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response5, _error$response5$data;\n      return {\n        error: ((_error$response5 = error.response) === null || _error$response5 === void 0 ? void 0 : (_error$response5$data = _error$response5.data) === null || _error$response5$data === void 0 ? void 0 : _error$response5$data.detail) || '메시지 전송에 실패했습니다.'\n      };\n    }\n  },\n  // 특정 페르소나와 대화 이어가기\n  async continueConversation(persona_id, user_message, conversation_id) {\n    try {\n      const response = await api.post('/chat/continue', {\n        persona_id,\n        user_message,\n        conversation_id\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response6, _error$response6$data;\n      return {\n        error: ((_error$response6 = error.response) === null || _error$response6 === void 0 ? void 0 : (_error$response6$data = _error$response6.data) === null || _error$response6$data === void 0 ? void 0 : _error$response6$data.detail) || '대화 이어가기에 실패했습니다.'\n      };\n    }\n  },\n  // 특정 대화 기록 가져오기\n  async getConversation(conversation_id) {\n    try {\n      const response = await api.get(`/conversations/${conversation_id}`);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response7, _error$response7$data;\n      return {\n        error: ((_error$response7 = error.response) === null || _error$response7 === void 0 ? void 0 : (_error$response7$data = _error$response7.data) === null || _error$response7$data === void 0 ? void 0 : _error$response7$data.detail) || '대화 기록을 가져오는데 실패했습니다.'\n      };\n    }\n  },\n  // 모든 대화 기록 가져오기\n  async getAllConversations() {\n    try {\n      const response = await api.get('/conversations');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response8, _error$response8$data;\n      return {\n        error: ((_error$response8 = error.response) === null || _error$response8 === void 0 ? void 0 : (_error$response8$data = _error$response8.data) === null || _error$response8$data === void 0 ? void 0 : _error$response8$data.detail) || '대화 목록을 가져오는데 실패했습니다.'\n      };\n    }\n  },\n  // 전체 메시지 기록 가져오기\n  async getGlobalMessages() {\n    try {\n      const response = await api.get('/messages');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response9, _error$response9$data;\n      return {\n        error: ((_error$response9 = error.response) === null || _error$response9 === void 0 ? void 0 : (_error$response9$data = _error$response9.data) === null || _error$response9$data === void 0 ? void 0 : _error$response9$data.detail) || '메시지 기록을 가져오는데 실패했습니다.'\n      };\n    }\n  },\n  // 메시지 수정\n  async editMessage(conversationId, messageIndex, newContent) {\n    try {\n      const response = await api.put(`/conversations/${conversationId}/messages/${messageIndex}`, {\n        new_content: newContent\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response0, _error$response0$data;\n      return {\n        error: ((_error$response0 = error.response) === null || _error$response0 === void 0 ? void 0 : (_error$response0$data = _error$response0.data) === null || _error$response0$data === void 0 ? void 0 : _error$response0$data.detail) || '메시지 수정에 실패했습니다.'\n      };\n    }\n  },\n  // 스레드 메시지 수정\n  async editThreadMessage(threadId, messageIndex, newContent) {\n    try {\n      const response = await api.put(`/threads/${threadId}/messages/${messageIndex}`, {\n        new_content: newContent\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response1, _error$response1$data;\n      return {\n        error: ((_error$response1 = error.response) === null || _error$response1 === void 0 ? void 0 : (_error$response1$data = _error$response1.data) === null || _error$response1$data === void 0 ? void 0 : _error$response1$data.detail) || '스레드 메시지 수정에 실패했습니다.'\n      };\n    }\n  },\n  // 모든 페르소나의 자동 해석 생성\n  async generateAllInterpretations() {\n    try {\n      const response = await api.post('/interpretations/generate-all');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response10, _error$response10$dat;\n      return {\n        error: ((_error$response10 = error.response) === null || _error$response10 === void 0 ? void 0 : (_error$response10$dat = _error$response10.data) === null || _error$response10$dat === void 0 ? void 0 : _error$response10$dat.detail) || '전체 해석 생성에 실패했습니다.'\n      };\n    }\n  },\n  // 해석된 내용을 기반으로 페르소나와 대화\n  async chatWithInterpretation(personaId, message) {\n    try {\n      const response = await api.post('/interpretations/chat-with-interpretation', {\n        persona_id: personaId,\n        user_message: message\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response11, _error$response11$dat;\n      return {\n        error: ((_error$response11 = error.response) === null || _error$response11 === void 0 ? void 0 : (_error$response11$dat = _error$response11.data) === null || _error$response11$dat === void 0 ? void 0 : _error$response11$dat.detail) || '해석 기반 채팅에 실패했습니다.'\n      };\n    }\n  },\n  // 컨텍스트 기반 범용 채팅 (해석/나아가기/문장 모두 지원)\n  async chatWithContext(personaId, message, contextType, contextContent, threadId) {\n    try {\n      const response = await api.post('/chat/with-context', {\n        persona_id: personaId,\n        user_message: message,\n        context_type: contextType,\n        context_content: contextContent,\n        thread_id: threadId\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response12, _error$response12$dat;\n      return {\n        error: ((_error$response12 = error.response) === null || _error$response12 === void 0 ? void 0 : (_error$response12$dat = _error$response12.data) === null || _error$response12$dat === void 0 ? void 0 : _error$response12$dat.detail) || '컨텍스트 기반 채팅에 실패했습니다.'\n      };\n    }\n  },\n  // ========== 새로운 기능: 나아가기, 문장, 상호작용 기록 ==========\n\n  // 나아가기 생성\n  async generateProceed(request) {\n    try {\n      const response = await api.post('/proceed/generate', request);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response13, _error$response13$dat;\n      return {\n        error: ((_error$response13 = error.response) === null || _error$response13 === void 0 ? void 0 : (_error$response13$dat = _error$response13.data) === null || _error$response13$dat === void 0 ? void 0 : _error$response13$dat.detail) || '나아가기 생성에 실패했습니다.'\n      };\n    }\n  },\n  // 문장 생성\n  async generateSentence(request) {\n    try {\n      const response = await api.post('/sentence/generate', request);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response14, _error$response14$dat;\n      return {\n        error: ((_error$response14 = error.response) === null || _error$response14 === void 0 ? void 0 : (_error$response14$dat = _error$response14.data) === null || _error$response14$dat === void 0 ? void 0 : _error$response14$dat.detail) || '문장 생성에 실패했습니다.'\n      };\n    }\n  },\n  // 나아가기 내용 조회\n  async getProceedContent(personaId) {\n    const response = await fetch(`${API_BASE_URL}/proceed/${personaId}`);\n    if (response.ok) {\n      const data = await response.json();\n      return {\n        data\n      };\n    } else {\n      const errorText = await response.text();\n      return {\n        error: errorText\n      };\n    }\n  },\n  // 문장 내용 조회\n  async getSentenceContent(personaId) {\n    const response = await fetch(`${API_BASE_URL}/sentence/${personaId}`);\n    if (response.ok) {\n      const data = await response.json();\n      return {\n        data\n      };\n    } else {\n      const errorText = await response.text();\n      return {\n        error: errorText\n      };\n    }\n  },\n  // 특정 페르소나의 모든 스레드 조회\n  async getPersonaThreads(personaId) {\n    try {\n      const response = await api.get(`/threads/${personaId}`);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response15, _error$response15$dat;\n      return {\n        error: ((_error$response15 = error.response) === null || _error$response15 === void 0 ? void 0 : (_error$response15$dat = _error$response15.data) === null || _error$response15$dat === void 0 ? void 0 : _error$response15$dat.detail) || '스레드 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 특정 페르소나의 특정 타입 스레드 조회\n  async getPersonaThreadsByType(personaId, threadType) {\n    try {\n      const response = await api.get(`/threads/${personaId}/${threadType}`);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response16, _error$response16$dat;\n      return {\n        error: ((_error$response16 = error.response) === null || _error$response16 === void 0 ? void 0 : (_error$response16$dat = _error$response16.data) === null || _error$response16$dat === void 0 ? void 0 : _error$response16$dat.detail) || '스레드 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 스레드와 채팅\n  async chatWithThread(request) {\n    try {\n      const response = await api.post('/threads/chat', request);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response17, _error$response17$dat;\n      return {\n        error: ((_error$response17 = error.response) === null || _error$response17 === void 0 ? void 0 : (_error$response17$dat = _error$response17.data) === null || _error$response17$dat === void 0 ? void 0 : _error$response17$dat.detail) || '스레드 채팅에 실패했습니다.'\n      };\n    }\n  },\n  // 모든 상호작용 기록 조회\n  async getAllInteractionRecords() {\n    try {\n      const response = await api.get('/interaction-records');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response18, _error$response18$dat;\n      return {\n        error: ((_error$response18 = error.response) === null || _error$response18 === void 0 ? void 0 : (_error$response18$dat = _error$response18.data) === null || _error$response18$dat === void 0 ? void 0 : _error$response18$dat.detail) || '상호작용 기록 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 특정 페르소나의 상호작용 기록 조회\n  async getInteractionRecord(personaId) {\n    try {\n      const response = await api.get(`/interaction-records/${personaId}`);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response19, _error$response19$dat;\n      return {\n        error: ((_error$response19 = error.response) === null || _error$response19 === void 0 ? void 0 : (_error$response19$dat = _error$response19.data) === null || _error$response19$dat === void 0 ? void 0 : _error$response19$dat.detail) || '상호작용 기록 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 해석 생성과 동시에 나아가기, 문장도 자동 생성\n  async generateInterpretationWithExtras(request) {\n    try {\n      const response = await api.post('/interpretations/generate-with-extras', request);\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response20, _error$response20$dat;\n      return {\n        error: ((_error$response20 = error.response) === null || _error$response20 === void 0 ? void 0 : (_error$response20$dat = _error$response20.data) === null || _error$response20$dat === void 0 ? void 0 : _error$response20$dat.detail) || '해석 및 추가 기능 생성에 실패했습니다.'\n      };\n    }\n  },\n  async deleteThread(threadId) {\n    console.log('=== deleteThread API 호출 시작 ===');\n    console.log('threadId:', threadId);\n    console.log('API_BASE_URL:', API_BASE_URL);\n    try {\n      const url = `${API_BASE_URL}/threads/${threadId}`;\n      console.log('요청 URL:', url);\n\n      // 타임아웃 설정 (10초)\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n      const response = await fetch(url, {\n        method: 'DELETE',\n        signal: controller.signal,\n        headers: {\n          'Content-Type': 'application/json'\n        }\n      });\n      clearTimeout(timeoutId);\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n      if (response.ok) {\n        const data = await response.json();\n        console.log('응답 데이터:', data);\n        return {\n          data\n        };\n      } else {\n        const errorText = await response.text();\n        console.error('HTTP 오류 응답:', errorText);\n        return {\n          error: `서버 오류 (${response.status}): ${errorText}`\n        };\n      }\n    } catch (error) {\n      var _error$message, _error$message2;\n      console.error('네트워크 오류:', error);\n      if (error.name === 'AbortError') {\n        return {\n          error: '요청 시간 초과: 서버 응답이 너무 늦습니다.'\n        };\n      } else if ((_error$message = error.message) !== null && _error$message !== void 0 && _error$message.includes('Failed to fetch') || (_error$message2 = error.message) !== null && _error$message2 !== void 0 && _error$message2.includes('fetch')) {\n        return {\n          error: '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.'\n        };\n      } else {\n        return {\n          error: `네트워크 오류: ${error.message || error}`\n        };\n      }\n    }\n  },\n  // 현재 내용을 나아가기로 저장 (생성하지 않고 그대로 저장)\n  async saveCurrentAsProceed(personaId, content) {\n    try {\n      const response = await api.post('/proceed/save', {\n        persona_id: personaId,\n        content: content\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response21, _error$response21$dat;\n      return {\n        error: ((_error$response21 = error.response) === null || _error$response21 === void 0 ? void 0 : (_error$response21$dat = _error$response21.data) === null || _error$response21$dat === void 0 ? void 0 : _error$response21$dat.detail) || '나아가기 저장에 실패했습니다.'\n      };\n    }\n  },\n  // 현재 내용을 문장으로 저장 (생성하지 않고 그대로 저장)\n  async saveCurrentAsSentence(personaId, content) {\n    try {\n      const response = await api.post('/sentence/save', {\n        persona_id: personaId,\n        content: content\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response22, _error$response22$dat;\n      return {\n        error: ((_error$response22 = error.response) === null || _error$response22 === void 0 ? void 0 : (_error$response22$dat = _error$response22.data) === null || _error$response22$dat === void 0 ? void 0 : _error$response22$dat.detail) || '문장 저장에 실패했습니다.'\n      };\n    }\n  },\n  // 현재 내용을 해석에 추가 저장 (생성하지 않고 그대로 저장)\n  async saveCurrentAsInterpretation(personaId, content) {\n    try {\n      const response = await api.post('/interpretations/save', {\n        persona_id: personaId,\n        content: content\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response23, _error$response23$dat;\n      return {\n        error: ((_error$response23 = error.response) === null || _error$response23 === void 0 ? void 0 : (_error$response23$dat = _error$response23.data) === null || _error$response23$dat === void 0 ? void 0 : _error$response23$dat.detail) || '해석 저장에 실패했습니다.'\n      };\n    }\n  },\n  // ========== 언어화 기능 ==========\n\n  // 언어화 채팅\n  async chatWithVerbalization(userMessage, threadId) {\n    try {\n      const response = await api.post('/verbalization/chat', {\n        user_message: userMessage,\n        thread_id: threadId\n      });\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response24, _error$response24$dat;\n      return {\n        error: ((_error$response24 = error.response) === null || _error$response24 === void 0 ? void 0 : (_error$response24$dat = _error$response24.data) === null || _error$response24$dat === void 0 ? void 0 : _error$response24$dat.detail) || '언어화 채팅에 실패했습니다.'\n      };\n    }\n  },\n  // 모든 언어화 스레드 조회\n  async getVerbalizationThreads() {\n    try {\n      const response = await api.get('/verbalization/threads');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response25, _error$response25$dat;\n      return {\n        error: ((_error$response25 = error.response) === null || _error$response25 === void 0 ? void 0 : (_error$response25$dat = _error$response25.data) === null || _error$response25$dat === void 0 ? void 0 : _error$response25$dat.detail) || '언어화 스레드 조회에 실패했습니다.'\n      };\n    }\n  },\n  // 새 언어화 스레드 생성\n  async createNewVerbalizationThread() {\n    try {\n      const response = await api.post('/verbalization/new-thread');\n      return {\n        data: response.data\n      };\n    } catch (error) {\n      var _error$response26, _error$response26$dat;\n      return {\n        error: ((_error$response26 = error.response) === null || _error$response26 === void 0 ? void 0 : (_error$response26$dat = _error$response26.data) === null || _error$response26$dat === void 0 ? void 0 : _error$response26$dat.detail) || '새 언어화 스레드 생성에 실패했습니다.'\n      };\n    }\n  }\n};","map":{"version":3,"names":["axios","API_BASE_URL","process","env","REACT_APP_API_URL","api","create","baseURL","headers","chatApi","getPersonas","response","get","data","error","_error$response","_error$response$data","detail","getInterpretationStatus","_error$response2","_error$response2$data","generateInterpretation","request","post","_error$response3","_error$response3$data","getInterpretation","personaId","_error$response4","_error$response4$data","sendInitialMessage","content","_error$response5","_error$response5$data","continueConversation","persona_id","user_message","conversation_id","_error$response6","_error$response6$data","getConversation","_error$response7","_error$response7$data","getAllConversations","_error$response8","_error$response8$data","getGlobalMessages","_error$response9","_error$response9$data","editMessage","conversationId","messageIndex","newContent","put","new_content","_error$response0","_error$response0$data","editThreadMessage","threadId","_error$response1","_error$response1$data","generateAllInterpretations","_error$response10","_error$response10$dat","chatWithInterpretation","message","_error$response11","_error$response11$dat","chatWithContext","contextType","contextContent","context_type","context_content","thread_id","_error$response12","_error$response12$dat","generateProceed","_error$response13","_error$response13$dat","generateSentence","_error$response14","_error$response14$dat","getProceedContent","fetch","ok","json","errorText","text","getSentenceContent","getPersonaThreads","_error$response15","_error$response15$dat","getPersonaThreadsByType","threadType","_error$response16","_error$response16$dat","chatWithThread","_error$response17","_error$response17$dat","getAllInteractionRecords","_error$response18","_error$response18$dat","getInteractionRecord","_error$response19","_error$response19$dat","generateInterpretationWithExtras","_error$response20","_error$response20$dat","deleteThread","console","log","url","controller","AbortController","timeoutId","setTimeout","abort","method","signal","clearTimeout","status","_error$message","_error$message2","name","includes","saveCurrentAsProceed","_error$response21","_error$response21$dat","saveCurrentAsSentence","_error$response22","_error$response22$dat","saveCurrentAsInterpretation","_error$response23","_error$response23$dat","chatWithVerbalization","userMessage","_error$response24","_error$response24$dat","getVerbalizationThreads","_error$response25","_error$response25$dat","createNewVerbalizationThread","_error$response26","_error$response26$dat"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/shared/api/chatApi.ts"],"sourcesContent":["import axios from 'axios';\nimport { \n  Persona, PersonaResponse, Conversation, GlobalMessage, ApiResponse,\n  InterpretationStatus, InterpretationResponse, InterpretationRequest,\n  ProceedRequest, ProceedResponse, SentenceRequest, SentenceResponse,\n  TrainingThread, InteractionRecord, ThreadChatRequest, ThreadChatResponse,\n  GenerateWithExtrasResponse\n} from '../types';\n\nexport const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:8000';\n\nconst api = axios.create({\n  baseURL: API_BASE_URL,\n  headers: {\n    'Content-Type': 'application/json',\n  },\n});\n\nexport const chatApi = {\n  // 페르소나 정보 가져오기\n  async getPersonas(): Promise<ApiResponse<Record<string, Persona>>> {\n    try {\n      const response = await api.get('/personas');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '페르소나 정보를 가져오는데 실패했습니다.' };\n    }\n  },\n\n  // 해석 상태 조회\n  async getInterpretationStatus(): Promise<ApiResponse<InterpretationStatus[]>> {\n    try {\n      const response = await api.get('/interpretations/status');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '해석 상태 조회에 실패했습니다.' };\n    }\n  },\n\n  // 해석 생성\n  async generateInterpretation(request: InterpretationRequest): Promise<ApiResponse<InterpretationResponse>> {\n    try {\n      const response = await api.post('/interpretations/generate', request);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '해석 생성에 실패했습니다.' };\n    }\n  },\n\n  // 해석 조회\n  async getInterpretation(personaId: string): Promise<ApiResponse<InterpretationResponse>> {\n    try {\n      const response = await api.get(`/interpretations/${personaId}`);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '해석 조회에 실패했습니다.' };\n    }\n  },\n\n  // 초기 채팅 (모든 페르소나 응답)\n  async sendInitialMessage(content: string): Promise<ApiResponse<{\n    message_id: string;\n    responses: PersonaResponse[];\n  }>> {\n    try {\n      const response = await api.post('/chat/initial', { content });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '메시지 전송에 실패했습니다.' };\n    }\n  },\n\n  // 특정 페르소나와 대화 이어가기\n  async continueConversation(\n    persona_id: string,\n    user_message: string,\n    conversation_id: string\n  ): Promise<ApiResponse<PersonaResponse>> {\n    try {\n      const response = await api.post('/chat/continue', {\n        persona_id,\n        user_message,\n        conversation_id,\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '대화 이어가기에 실패했습니다.' };\n    }\n  },\n\n  // 특정 대화 기록 가져오기\n  async getConversation(conversation_id: string): Promise<ApiResponse<Conversation>> {\n    try {\n      const response = await api.get(`/conversations/${conversation_id}`);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '대화 기록을 가져오는데 실패했습니다.' };\n    }\n  },\n\n  // 모든 대화 기록 가져오기\n  async getAllConversations(): Promise<ApiResponse<Conversation[]>> {\n    try {\n      const response = await api.get('/conversations');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '대화 목록을 가져오는데 실패했습니다.' };\n    }\n  },\n\n  // 전체 메시지 기록 가져오기\n  async getGlobalMessages(): Promise<ApiResponse<GlobalMessage[]>> {\n    try {\n      const response = await api.get('/messages');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '메시지 기록을 가져오는데 실패했습니다.' };\n    }\n  },\n\n  // 메시지 수정\n  async editMessage(\n    conversationId: string,\n    messageIndex: number,\n    newContent: string\n  ): Promise<ApiResponse<{ \n    success: boolean; \n    message: string; \n    updated_conversation?: Conversation;\n    new_response?: PersonaResponse;\n  }>> {\n    try {\n      const response = await api.put(`/conversations/${conversationId}/messages/${messageIndex}`, {\n        new_content: newContent\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '메시지 수정에 실패했습니다.' };\n    }\n  },\n\n  // 스레드 메시지 수정\n  async editThreadMessage(\n    threadId: string,\n    messageIndex: number,\n    newContent: string\n  ): Promise<ApiResponse<{ \n    success: boolean; \n    message: string; \n    updated_thread?: TrainingThread;\n  }>> {\n    try {\n      const response = await api.put(`/threads/${threadId}/messages/${messageIndex}`, {\n        new_content: newContent\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '스레드 메시지 수정에 실패했습니다.' };\n    }\n  },\n\n  // 모든 페르소나의 자동 해석 생성\n  async generateAllInterpretations(): Promise<ApiResponse<{\n    message: string;\n    interpretations: InterpretationResponse[];\n    total_count: number;\n  }>> {\n    try {\n      const response = await api.post('/interpretations/generate-all');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '전체 해석 생성에 실패했습니다.' };\n    }\n  },\n\n  // 해석된 내용을 기반으로 페르소나와 대화\n  async chatWithInterpretation(\n    personaId: string,\n    message: string\n  ): Promise<ApiResponse<{\n    persona_id: string;\n    persona_name: string;\n    user_message: string;\n    response: string;\n    interpretation_used: boolean;\n    timestamp: string;\n  }>> {\n    try {\n      const response = await api.post('/interpretations/chat-with-interpretation', {\n        persona_id: personaId,\n        user_message: message\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '해석 기반 채팅에 실패했습니다.' };\n    }\n  },\n\n  // 컨텍스트 기반 범용 채팅 (해석/나아가기/문장 모두 지원)\n  async chatWithContext(\n    personaId: string,\n    message: string,\n    contextType: 'interpretation' | 'proceed' | 'sentence',\n    contextContent?: string,\n    threadId?: string\n  ): Promise<ApiResponse<{\n    persona_id: string;\n    persona_name: string;\n    user_message: string;\n    response: string;\n    context_type: string;\n    context_used: boolean;\n    is_first_message: boolean;\n    conversation_id: string;\n    timestamp: string;\n  }>> {\n    try {\n      const response = await api.post('/chat/with-context', {\n        persona_id: personaId,\n        user_message: message,\n        context_type: contextType,\n        context_content: contextContent,\n        thread_id: threadId\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '컨텍스트 기반 채팅에 실패했습니다.' };\n    }\n  },\n\n  // ========== 새로운 기능: 나아가기, 문장, 상호작용 기록 ==========\n\n  // 나아가기 생성\n  async generateProceed(request: ProceedRequest): Promise<ApiResponse<ProceedResponse>> {\n    try {\n      const response = await api.post('/proceed/generate', request);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '나아가기 생성에 실패했습니다.' };\n    }\n  },\n\n  // 문장 생성\n  async generateSentence(request: SentenceRequest): Promise<ApiResponse<SentenceResponse>> {\n    try {\n      const response = await api.post('/sentence/generate', request);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '문장 생성에 실패했습니다.' };\n    }\n  },\n\n  // 나아가기 내용 조회\n  async getProceedContent(personaId: string): Promise<ApiResponse<{ proceed_content: string }>> {\n    const response = await fetch(`${API_BASE_URL}/proceed/${personaId}`);\n\n    if (response.ok) {\n      const data = await response.json();\n      return { data };\n    } else {\n      const errorText = await response.text();\n      return { error: errorText };\n    }\n  },\n\n  // 문장 내용 조회\n  async getSentenceContent(personaId: string): Promise<ApiResponse<{ sentence_content: string }>> {\n    const response = await fetch(`${API_BASE_URL}/sentence/${personaId}`);\n\n    if (response.ok) {\n      const data = await response.json();\n      return { data };\n    } else {\n      const errorText = await response.text();\n      return { error: errorText };\n    }\n  },\n\n  // 특정 페르소나의 모든 스레드 조회\n  async getPersonaThreads(personaId: string): Promise<ApiResponse<TrainingThread[]>> {\n    try {\n      const response = await api.get(`/threads/${personaId}`);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '스레드 조회에 실패했습니다.' };\n    }\n  },\n\n  // 특정 페르소나의 특정 타입 스레드 조회\n  async getPersonaThreadsByType(personaId: string, threadType: string): Promise<ApiResponse<TrainingThread[]>> {\n    try {\n      const response = await api.get(`/threads/${personaId}/${threadType}`);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '스레드 조회에 실패했습니다.' };\n    }\n  },\n\n  // 스레드와 채팅\n  async chatWithThread(request: ThreadChatRequest): Promise<ApiResponse<ThreadChatResponse>> {\n    try {\n      const response = await api.post('/threads/chat', request);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '스레드 채팅에 실패했습니다.' };\n    }\n  },\n\n  // 모든 상호작용 기록 조회\n  async getAllInteractionRecords(): Promise<ApiResponse<InteractionRecord[]>> {\n    try {\n      const response = await api.get('/interaction-records');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '상호작용 기록 조회에 실패했습니다.' };\n    }\n  },\n\n  // 특정 페르소나의 상호작용 기록 조회\n  async getInteractionRecord(personaId: string): Promise<ApiResponse<InteractionRecord>> {\n    try {\n      const response = await api.get(`/interaction-records/${personaId}`);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '상호작용 기록 조회에 실패했습니다.' };\n    }\n  },\n\n  // 해석 생성과 동시에 나아가기, 문장도 자동 생성\n  async generateInterpretationWithExtras(request: InterpretationRequest): Promise<ApiResponse<GenerateWithExtrasResponse>> {\n    try {\n      const response = await api.post('/interpretations/generate-with-extras', request);\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '해석 및 추가 기능 생성에 실패했습니다.' };\n    }\n  },\n\n  async deleteThread(threadId: string): Promise<ApiResponse<{ success: boolean; message: string }>> {\n    console.log('=== deleteThread API 호출 시작 ===');\n    console.log('threadId:', threadId);\n    console.log('API_BASE_URL:', API_BASE_URL);\n    \n    try {\n      const url = `${API_BASE_URL}/threads/${threadId}`;\n      console.log('요청 URL:', url);\n      \n      // 타임아웃 설정 (10초)\n      const controller = new AbortController();\n      const timeoutId = setTimeout(() => controller.abort(), 10000);\n      \n      const response = await fetch(url, {\n      method: 'DELETE',\n        signal: controller.signal,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n    });\n      \n      clearTimeout(timeoutId);\n      \n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n\n    if (response.ok) {\n      const data = await response.json();\n        console.log('응답 데이터:', data);\n      return { data };\n    } else {\n      const errorText = await response.text();\n        console.error('HTTP 오류 응답:', errorText);\n        return { error: `서버 오류 (${response.status}): ${errorText}` };\n      }\n    } catch (error: any) {\n      console.error('네트워크 오류:', error);\n      \n      if (error.name === 'AbortError') {\n        return { error: '요청 시간 초과: 서버 응답이 너무 늦습니다.' };\n      } else if (error.message?.includes('Failed to fetch') || error.message?.includes('fetch')) {\n        return { error: '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.' };\n      } else {\n        return { error: `네트워크 오류: ${error.message || error}` };\n      }\n    }\n  },\n\n  // 현재 내용을 나아가기로 저장 (생성하지 않고 그대로 저장)\n  async saveCurrentAsProceed(personaId: string, content: string): Promise<ApiResponse<ProceedResponse>> {\n    try {\n      const response = await api.post('/proceed/save', {\n        persona_id: personaId,\n        content: content\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '나아가기 저장에 실패했습니다.' };\n    }\n  },\n\n  // 현재 내용을 문장으로 저장 (생성하지 않고 그대로 저장)\n  async saveCurrentAsSentence(personaId: string, content: string): Promise<ApiResponse<SentenceResponse>> {\n    try {\n      const response = await api.post('/sentence/save', {\n        persona_id: personaId,\n        content: content\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '문장 저장에 실패했습니다.' };\n    }\n  },\n\n  // 현재 내용을 해석에 추가 저장 (생성하지 않고 그대로 저장)\n  async saveCurrentAsInterpretation(personaId: string, content: string): Promise<ApiResponse<InterpretationResponse>> {\n    try {\n      const response = await api.post('/interpretations/save', {\n        persona_id: personaId,\n        content: content\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '해석 저장에 실패했습니다.' };\n    }\n  },\n\n  // ========== 언어화 기능 ==========\n\n  // 언어화 채팅\n  async chatWithVerbalization(\n    userMessage: string,\n    threadId?: string\n  ): Promise<ApiResponse<ThreadChatResponse>> {\n    try {\n      const response = await api.post('/verbalization/chat', {\n        user_message: userMessage,\n        thread_id: threadId\n      });\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '언어화 채팅에 실패했습니다.' };\n    }\n  },\n\n  // 모든 언어화 스레드 조회\n  async getVerbalizationThreads(): Promise<ApiResponse<TrainingThread[]>> {\n    try {\n      const response = await api.get('/verbalization/threads');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '언어화 스레드 조회에 실패했습니다.' };\n    }\n  },\n\n  // 새 언어화 스레드 생성\n  async createNewVerbalizationThread(): Promise<ApiResponse<TrainingThread>> {\n    try {\n      const response = await api.post('/verbalization/new-thread');\n      return { data: response.data };\n    } catch (error: any) {\n      return { error: error.response?.data?.detail || '새 언어화 스레드 생성에 실패했습니다.' };\n    }\n  },\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}