{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import TrainingChatView from'../../shared/components/TrainingChatView';import{chatApi}from'../../shared/api/chatApi';import{jsx as _jsx}from\"react/jsx-runtime\";const ProceedView=_ref=>{var _selectedThread$messa;let{personaId,personaName,proceedContent,threads,onThreadUpdate,onSwitchToMode,onGenerateNewInterpretation,selectedThread:propSelectedThread}=_ref;const[selectedThread,setSelectedThread]=useState(propSelectedThread||null);const[isLoading,setIsLoading]=useState(false);const[localThreads,setLocalThreads]=useState(threads);// 나아가기 타입의 스레드만 필터링\nconst proceedThreads=localThreads.filter(thread=>thread.thread_type==='proceed');useEffect(()=>{setLocalThreads(threads);},[threads]);// propSelectedThread가 변경되면 선택된 스레드 업데이트\nuseEffect(()=>{if(propSelectedThread){setSelectedThread(propSelectedThread);}else{// 첫 번째 나아가기 스레드를 자동 선택\nconst firstProceedThread=threads.find(t=>t.thread_type==='proceed');if(firstProceedThread&&!selectedThread){setSelectedThread(firstProceedThread);}}},[propSelectedThread,threads]);const handleSendMessage=async message=>{if(!selectedThread)return false;setIsLoading(true);try{const response=await chatApi.chatWithThread({thread_id:selectedThread.id,user_message:message});if(response.data&&response.data.response){// 스레드 업데이트\nconst updatedThreads=localThreads.map(t=>t.id===selectedThread.id?_objectSpread(_objectSpread({},t),{},{messages:[...t.messages,{role:'user',content:message,timestamp:new Date().toISOString()},response.data.response],updated_at:new Date().toISOString()}):t);setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);// 선택된 스레드 업데이트\nconst updatedThread=updatedThreads.find(t=>t.id===selectedThread.id);if(updatedThread){setSelectedThread(updatedThread);}setIsLoading(false);return true;}else{setIsLoading(false);return false;}}catch(error){console.error('나아가기 채팅 오류:',error);setIsLoading(false);return false;}};const handleEditMessage=async(messageIndex,newContent)=>{if(!selectedThread)return false;setIsLoading(true);try{// 메시지 수정 후 새로운 응답 생성\nconst updatedMessages=[...selectedThread.messages];if(messageIndex>=0&&messageIndex<updatedMessages.length){// 수정된 메시지 업데이트\nupdatedMessages[messageIndex]=_objectSpread(_objectSpread({},updatedMessages[messageIndex]),{},{content:newContent,timestamp:new Date().toISOString()});// 수정된 메시지 이후의 모든 메시지들 제거\nconst filteredMessages=updatedMessages.slice(0,messageIndex+1);// 새로운 AI 응답 생성\nconst response=await chatApi.chatWithThread({thread_id:selectedThread.id,user_message:newContent});if(response.data&&response.data.response){const newMessages=[...filteredMessages,response.data.response];// 스레드 업데이트\nconst updatedThreads=localThreads.map(t=>t.id===selectedThread.id?_objectSpread(_objectSpread({},t),{},{messages:newMessages,updated_at:new Date().toISOString()}):t);setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);// 선택된 스레드 업데이트\nconst updatedThread=updatedThreads.find(t=>t.id===selectedThread.id);if(updatedThread){setSelectedThread(updatedThread);}setIsLoading(false);return true;}}setIsLoading(false);return false;}catch(error){console.error('나아가기 메시지 수정 실패:',error);setIsLoading(false);return false;}};const handleGenerateNewProceed=async()=>{if(!selectedThread||selectedThread.messages.length===0){if(onGenerateNewInterpretation){onGenerateNewInterpretation();}return;}setIsLoading(true);try{// 현재 스레드의 최신 assistant 메시지를 기반으로 새로운 나아가기 생성\nconst latestAssistantMessage=[...selectedThread.messages].reverse().find(msg=>msg.role==='assistant');if(latestAssistantMessage){const response=await chatApi.generateProceed({persona_id:personaId,interpretation_content:latestAssistantMessage.content});if(response.data&&response.data.proceed_content){// 스레드 목록 새로고침\ntry{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){const updatedThreads=threadsResponse.data;setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);// 새로 생성된 나아가기 스레드 선택\nconst newProceedThread=updatedThreads.filter(t=>t.thread_type==='proceed').sort((a,b)=>new Date(b.created_at).getTime()-new Date(a.created_at).getTime())[0];if(newProceedThread){setSelectedThread(newProceedThread);}}}catch(refreshError){console.error('스레드 새로고침 실패:',refreshError);}}}}catch(error){console.error('나아가기 생성 오류:',error);}finally{setIsLoading(false);}};const handleSwitchToMode=mode=>{if(onSwitchToMode){onSwitchToMode(mode);}};// 현재 선택된 스레드의 메시지들 또는 빈 배열\nconst currentMessages=(selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages)||[];// 첫 번째 나아가기 내용 (스레드가 없거나 메시지가 없는 경우)\nconst displayContent=(selectedThread===null||selectedThread===void 0?void 0:(_selectedThread$messa=selectedThread.messages.find(m=>m.role==='assistant'))===null||_selectedThread$messa===void 0?void 0:_selectedThread$messa.content)||proceedContent;return/*#__PURE__*/_jsx(TrainingChatView,{personaId:personaId,personaName:personaName,contextContent:displayContent,contextType:\"proceed\",messages:currentMessages,isLoading:isLoading,onSendMessage:handleSendMessage,onEditMessage:handleEditMessage,onGenerateNewContent:handleGenerateNewProceed,onSwitchToMode:handleSwitchToMode});};export default ProceedView;","map":{"version":3,"names":["React","useState","useEffect","TrainingChatView","chatApi","jsx","_jsx","ProceedView","_ref","_selectedThread$messa","personaId","personaName","proceedContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","proceedThreads","filter","thread","thread_type","firstProceedThread","find","t","handleSendMessage","message","response","chatWithThread","thread_id","id","user_message","data","updatedThreads","map","_objectSpread","messages","role","content","timestamp","Date","toISOString","updated_at","updatedThread","error","console","handleEditMessage","messageIndex","newContent","updatedMessages","length","filteredMessages","slice","newMessages","handleGenerateNewProceed","latestAssistantMessage","reverse","msg","generateProceed","persona_id","interpretation_content","proceed_content","threadsResponse","getPersonaThreads","newProceedThread","sort","a","b","created_at","getTime","refreshError","handleSwitchToMode","mode","currentMessages","displayContent","m","contextContent","contextType","onSendMessage","onEditMessage","onGenerateNewContent"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/ProceedView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TrainingChatView from '../../shared/components/TrainingChatView';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\n\ninterface ProceedViewProps {\n  personaId: string;\n  personaName: string;\n  proceedContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'sentence') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n}\n\nconst ProceedView: React.FC<ProceedViewProps> = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n\n  // 나아가기 타입의 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 나아가기 스레드를 자동 선택\n      const firstProceedThread = threads.find(t => t.thread_type === 'proceed');\n      if (firstProceedThread && !selectedThread) {\n        setSelectedThread(firstProceedThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    if (!selectedThread) return false;\n\n    setIsLoading(true);\n    try {\n      const response = await chatApi.chatWithThread({\n        thread_id: selectedThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.response) {\n        // 스레드 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id \n            ? {\n                ...t,\n                messages: [...t.messages, \n                  {\n                    role: 'user' as const,\n                    content: message,\n                    timestamp: new Date().toISOString()\n                  },\n                  response.data!.response\n                ],\n                updated_at: new Date().toISOString()\n              }\n            : t\n        );\n        \n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        // 선택된 스레드 업데이트\n        const updatedThread = updatedThreads.find(t => t.id === selectedThread.id);\n        if (updatedThread) {\n          setSelectedThread(updatedThread);\n        }\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!selectedThread) return false;\n\n    setIsLoading(true);\n    try {\n      // 메시지 수정 후 새로운 응답 생성\n      const updatedMessages = [...selectedThread.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString(),\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 새로운 AI 응답 생성\n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThread.id,\n          user_message: newContent\n        });\n\n        if (response.data && response.data.response) {\n          const newMessages = [...filteredMessages, response.data.response];\n          \n          // 스레드 업데이트\n          const updatedThreads = localThreads.map(t => \n            t.id === selectedThread.id \n              ? { ...t, messages: newMessages, updated_at: new Date().toISOString() }\n              : t\n          );\n          \n          setLocalThreads(updatedThreads);\n          onThreadUpdate(updatedThreads);\n          \n          // 선택된 스레드 업데이트\n          const updatedThread = updatedThreads.find(t => t.id === selectedThread.id);\n          if (updatedThread) {\n            setSelectedThread(updatedThread);\n          }\n          \n          setIsLoading(false);\n          return true;\n        }\n      }\n      \n      setIsLoading(false);\n      return false;\n    } catch (error) {\n      console.error('나아가기 메시지 수정 실패:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleGenerateNewProceed = async () => {\n    if (!selectedThread || selectedThread.messages.length === 0) {\n      if (onGenerateNewInterpretation) {\n        onGenerateNewInterpretation();\n      }\n      return;\n    }\n    \n    setIsLoading(true);\n    try {\n      // 현재 스레드의 최신 assistant 메시지를 기반으로 새로운 나아가기 생성\n      const latestAssistantMessage = [...selectedThread.messages]\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n      if (latestAssistantMessage) {\n        const response = await chatApi.generateProceed({\n          persona_id: personaId,\n          interpretation_content: latestAssistantMessage.content\n        });\n\n        if (response.data && response.data.proceed_content) {\n          // 스레드 목록 새로고침\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 나아가기 스레드 선택\n              const newProceedThread = updatedThreads\n                .filter(t => t.thread_type === 'proceed')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n              if (newProceedThread) {\n                setSelectedThread(newProceedThread);\n              }\n            }\n          } catch (refreshError) {\n            console.error('스레드 새로고침 실패:', refreshError);\n          }\n        }\n      }\n    } catch (error) {\n      console.error('나아가기 생성 오류:', error);\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  const handleSwitchToMode = (mode: 'interpretation' | 'proceed' | 'sentence') => {\n    if (onSwitchToMode) {\n      onSwitchToMode(mode as 'interpretation' | 'sentence');\n    }\n  };\n\n  // 현재 선택된 스레드의 메시지들 또는 빈 배열\n  const currentMessages = selectedThread?.messages || [];\n\n  // 첫 번째 나아가기 내용 (스레드가 없거나 메시지가 없는 경우)\n  const displayContent = selectedThread?.messages.find(m => m.role === 'assistant')?.content || proceedContent;\n\n  return (\n    <TrainingChatView\n      personaId={personaId}\n      personaName={personaName}\n      contextContent={displayContent}\n      contextType=\"proceed\"\n      messages={currentMessages}\n      isLoading={isLoading}\n      onSendMessage={handleSendMessage}\n      onEditMessage={handleEditMessage}\n      onGenerateNewContent={handleGenerateNewProceed}\n      onSwitchToMode={handleSwitchToMode}\n    />\n  );\n};\n\nexport default ProceedView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}