{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useEffect, useCallback } from 'react';\nexport const useBrowserHistory = ({\n  selectedPersonaItem,\n  selectedConversationItem,\n  currentPersonaId,\n  currentPersonaName,\n  onNavigateBack\n}) => {\n  _s();\n  // URL을 현재 상태에 맞게 업데이트\n  const updateURL = useCallback(state => {\n    const params = new URLSearchParams();\n    if (state.selectedPersonaItem) {\n      params.set('persona', state.selectedPersonaItem);\n    }\n    if (state.selectedConversationItem) {\n      params.set('conversation', state.selectedConversationItem);\n    }\n    if (state.personaId) {\n      params.set('personaId', state.personaId);\n    }\n    const newURL = params.toString() ? `${window.location.pathname}?${params.toString()}` : window.location.pathname;\n\n    // 현재 상태를 히스토리에 푸시\n    window.history.pushState(state, '', newURL);\n  }, []);\n\n  // 페이지 네비게이션 함수\n  const navigateTo = useCallback(newState => {\n    updateURL(newState);\n  }, [updateURL]);\n\n  // 브라우저 뒤로가기/앞으로가기 이벤트 처리\n  useEffect(() => {\n    const handlePopState = event => {\n      console.log('=== 브라우저 뒤로가기 감지 ===');\n      console.log('이벤트 상태:', event.state);\n      if (event.state) {\n        // 저장된 상태로 복원\n        onNavigateBack(event.state);\n      } else {\n        // 초기 상태로 복원 (홈페이지)\n        onNavigateBack({\n          selectedPersonaItem: null,\n          selectedConversationItem: null\n        });\n      }\n    };\n\n    // popstate 이벤트 리스너 등록\n    window.addEventListener('popstate', handlePopState);\n    return () => {\n      window.removeEventListener('popstate', handlePopState);\n    };\n  }, [onNavigateBack]);\n\n  // 현재 상태가 변경될 때마다 URL 업데이트\n  useEffect(() => {\n    const currentState = {\n      selectedPersonaItem,\n      selectedConversationItem,\n      personaId: currentPersonaId,\n      personaName: currentPersonaName\n    };\n\n    // 초기 로드 시에는 replace 사용, 이후에는 push 사용\n    if (window.history.state === null) {\n      window.history.replaceState(currentState, '', window.location.href);\n    } else {\n      // 상태가 실제로 변경된 경우에만 히스토리에 추가\n      const previousState = window.history.state;\n      const hasChanged = (previousState === null || previousState === void 0 ? void 0 : previousState.selectedPersonaItem) !== selectedPersonaItem || (previousState === null || previousState === void 0 ? void 0 : previousState.selectedConversationItem) !== selectedConversationItem || (previousState === null || previousState === void 0 ? void 0 : previousState.personaId) !== currentPersonaId;\n      if (hasChanged) {\n        updateURL(currentState);\n      }\n    }\n  }, [selectedPersonaItem, selectedConversationItem, currentPersonaId, currentPersonaName, updateURL]);\n\n  // URL에서 초기 상태 파싱\n  const parseInitialState = useCallback(() => {\n    const params = new URLSearchParams(window.location.search);\n    return {\n      selectedPersonaItem: params.get('persona'),\n      selectedConversationItem: params.get('conversation'),\n      personaId: params.get('personaId') || undefined,\n      personaName: undefined // 이름은 ID로부터 조회 필요\n    };\n  }, []);\n  return {\n    navigateTo,\n    parseInitialState\n  };\n};\n_s(useBrowserHistory, \"VxBE/sUHHJ1Y2rgIFbH/8BrUTO0=\");","map":{"version":3,"names":["useEffect","useCallback","useBrowserHistory","selectedPersonaItem","selectedConversationItem","currentPersonaId","currentPersonaName","onNavigateBack","_s","updateURL","state","params","URLSearchParams","set","personaId","newURL","toString","window","location","pathname","history","pushState","navigateTo","newState","handlePopState","event","console","log","addEventListener","removeEventListener","currentState","personaName","replaceState","href","previousState","hasChanged","parseInitialState","search","get","undefined"],"sources":["C:/Users/sungh/Desktop/chat_work_ver4/frontend/src/features/shared/hooks/useBrowserHistory.ts"],"sourcesContent":["import { useEffect, useCallback } from 'react';\r\n\r\ninterface HistoryState {\r\n  selectedPersonaItem: string | null;\r\n  selectedConversationItem: string | null;\r\n  personaId?: string;\r\n  personaName?: string;\r\n}\r\n\r\ninterface UseBrowserHistoryProps {\r\n  selectedPersonaItem: string | null;\r\n  selectedConversationItem: string | null;\r\n  currentPersonaId?: string;\r\n  currentPersonaName?: string;\r\n  onNavigateBack: (state: HistoryState) => void;\r\n}\r\n\r\nexport const useBrowserHistory = ({\r\n  selectedPersonaItem,\r\n  selectedConversationItem,\r\n  currentPersonaId,\r\n  currentPersonaName,\r\n  onNavigateBack\r\n}: UseBrowserHistoryProps) => {\r\n  \r\n  // URL을 현재 상태에 맞게 업데이트\r\n  const updateURL = useCallback((state: HistoryState) => {\r\n    const params = new URLSearchParams();\r\n    \r\n    if (state.selectedPersonaItem) {\r\n      params.set('persona', state.selectedPersonaItem);\r\n    }\r\n    \r\n    if (state.selectedConversationItem) {\r\n      params.set('conversation', state.selectedConversationItem);\r\n    }\r\n    \r\n    if (state.personaId) {\r\n      params.set('personaId', state.personaId);\r\n    }\r\n    \r\n    const newURL = params.toString() \r\n      ? `${window.location.pathname}?${params.toString()}`\r\n      : window.location.pathname;\r\n    \r\n    // 현재 상태를 히스토리에 푸시\r\n    window.history.pushState(state, '', newURL);\r\n  }, []);\r\n\r\n  // 페이지 네비게이션 함수\r\n  const navigateTo = useCallback((newState: HistoryState) => {\r\n    updateURL(newState);\r\n  }, [updateURL]);\r\n\r\n  // 브라우저 뒤로가기/앞으로가기 이벤트 처리\r\n  useEffect(() => {\r\n    const handlePopState = (event: PopStateEvent) => {\r\n      console.log('=== 브라우저 뒤로가기 감지 ===');\r\n      console.log('이벤트 상태:', event.state);\r\n      \r\n      if (event.state) {\r\n        // 저장된 상태로 복원\r\n        onNavigateBack(event.state);\r\n      } else {\r\n        // 초기 상태로 복원 (홈페이지)\r\n        onNavigateBack({\r\n          selectedPersonaItem: null,\r\n          selectedConversationItem: null\r\n        });\r\n      }\r\n    };\r\n\r\n    // popstate 이벤트 리스너 등록\r\n    window.addEventListener('popstate', handlePopState);\r\n\r\n    return () => {\r\n      window.removeEventListener('popstate', handlePopState);\r\n    };\r\n  }, [onNavigateBack]);\r\n\r\n  // 현재 상태가 변경될 때마다 URL 업데이트\r\n  useEffect(() => {\r\n    const currentState: HistoryState = {\r\n      selectedPersonaItem,\r\n      selectedConversationItem,\r\n      personaId: currentPersonaId,\r\n      personaName: currentPersonaName\r\n    };\r\n\r\n    // 초기 로드 시에는 replace 사용, 이후에는 push 사용\r\n    if (window.history.state === null) {\r\n      window.history.replaceState(currentState, '', window.location.href);\r\n    } else {\r\n      // 상태가 실제로 변경된 경우에만 히스토리에 추가\r\n      const previousState = window.history.state;\r\n      const hasChanged = \r\n        previousState?.selectedPersonaItem !== selectedPersonaItem ||\r\n        previousState?.selectedConversationItem !== selectedConversationItem ||\r\n        previousState?.personaId !== currentPersonaId;\r\n\r\n      if (hasChanged) {\r\n        updateURL(currentState);\r\n      }\r\n    }\r\n  }, [selectedPersonaItem, selectedConversationItem, currentPersonaId, currentPersonaName, updateURL]);\r\n\r\n  // URL에서 초기 상태 파싱\r\n  const parseInitialState = useCallback((): HistoryState => {\r\n    const params = new URLSearchParams(window.location.search);\r\n    \r\n    return {\r\n      selectedPersonaItem: params.get('persona'),\r\n      selectedConversationItem: params.get('conversation'),\r\n      personaId: params.get('personaId') || undefined,\r\n      personaName: undefined // 이름은 ID로부터 조회 필요\r\n    };\r\n  }, []);\r\n\r\n  return {\r\n    navigateTo,\r\n    parseInitialState\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}