{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useEffect,useRef,useState}from'react';import Message from'./Message';import MessageInput from'./MessageInput';import TrainingCategoryView from'../../training/components/TrainingCategoryView';import InterpretationView from'../../training/components/InterpretationView';import ProceedView from'../../training/components/ProceedView';import SentenceView from'../../training/components/SentenceView';import PersonaAdminPanel from'../../admin/components/PersonaAdminPanel';import LoadingMessage from'./LoadingMessage';import{chatApi}from'../api/chatApi';import{MainArea,ChatContent,EmptyState,EmptyStateTitle,EmptyStateText}from'../styles/GlobalStyle';import InteractionHistoryView from'../../training/components/InteractionHistoryView';import RecentInteractionsView from'../components/RecentInteractionsView';import VerbalizationView from'../../verbalization/components/VerbalizationView';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const ChatArea=_ref=>{var _personas$currentConv,_personas$currentConv2,_personas$currentConv3;let{selectedConversation,conversations,personas,globalMessages,isLoading,error,onSendInitialMessage,onContinueConversation,onClearError,selectedPersonaItem,onSelectPersona,onInterpretationComplete,selectedConversationItem,currentInterpretation,onInterpretationMessage,onUpdateInterpretation,onUpdateConversation,onSwitchConversationMode,onRefreshConversationSidebar,recentInteractionsProps,verbalizationProps}=_ref;const chatContentRef=useRef(null);const currentConversation=selectedConversation?conversations[selectedConversation]:null;// 편집 상태 관리\nconst[editingMessageIndex,setEditingMessageIndex]=useState(null);// 훈습 관련 상태\nconst[threads,setThreads]=useState([]);const[proceedContent,setProceedContent]=useState('');const[sentenceContent,setSentenceContent]=useState('');const[interactionRecords,setInteractionRecords]=useState([]);// 메시지가 추가될 때마다 스크롤을 맨 아래로\nuseEffect(()=>{if(chatContentRef.current){chatContentRef.current.scrollTop=chatContentRef.current.scrollHeight;}},[currentConversation===null||currentConversation===void 0?void 0:currentConversation.messages,globalMessages,isLoading]);// 훈습 데이터 로딩을 더 정확하게 수정\nuseEffect(()=>{const loadTrainingData=async()=>{if(!(currentInterpretation!==null&&currentInterpretation!==void 0&&currentInterpretation.personaId))return;try{// 스레드 데이터 로드\nconst threadsResponse=await chatApi.getPersonaThreads(currentInterpretation.personaId);if(threadsResponse.data){setThreads(threadsResponse.data);// 나아가기와 문장 스레드에서 콘텐츠 추출\nconst proceedThread=threadsResponse.data.find(t=>t.thread_type==='proceed');const sentenceThread=threadsResponse.data.find(t=>t.thread_type==='sentence');if(proceedThread&&proceedThread.messages.length>0){const firstProceedMessage=proceedThread.messages.find(m=>m.role==='assistant');if(firstProceedMessage){setProceedContent(firstProceedMessage.content);}}if(sentenceThread&&sentenceThread.messages.length>0){const firstSentenceMessage=sentenceThread.messages.find(m=>m.role==='assistant');if(firstSentenceMessage){setSentenceContent(firstSentenceMessage.content);}}}}catch(error){console.error('훈습 데이터 로드 실패:',error);}};loadTrainingData();},[currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaId]);// 스레드 업데이트 시 콘텐츠도 업데이트\nuseEffect(()=>{const proceedThread=threads.find(t=>t.thread_type==='proceed');const sentenceThread=threads.find(t=>t.thread_type==='sentence');if(proceedThread&&proceedThread.messages.length>0){const firstProceedMessage=proceedThread.messages.find(m=>m.role==='assistant');if(firstProceedMessage){setProceedContent(firstProceedMessage.content);}}if(sentenceThread&&sentenceThread.messages.length>0){const firstSentenceMessage=sentenceThread.messages.find(m=>m.role==='assistant');if(firstSentenceMessage){setSentenceContent(firstSentenceMessage.content);}}},[threads]);// 상호작용 기록 로드\nuseEffect(()=>{const loadInteractionRecords=async()=>{try{const recordsResponse=await chatApi.getAllInteractionRecords();if(recordsResponse.data){setInteractionRecords(recordsResponse.data);}}catch(error){console.error('상호작용 기록 로드 실패:',error);}};loadInteractionRecords();},[currentInterpretation,threads]);// threads나 currentInterpretation이 변경될 때마다 새로고침\nconst handleSendMessage=async message=>{if(selectedConversation){// 기존 대화에 메시지 추가\nreturn await onContinueConversation(selectedConversation,message);}else if(currentInterpretation){// 해석 모드에서는 해석 관련 메시지 전송\nreturn await onInterpretationMessage(message);}else{// 새로운 대화 시작\nreturn await onSendInitialMessage(message);}};// 해석 메시지 수정 핸들러\nconst handleEditInterpretationMessage=async(messageIndex,newContent)=>{if(!currentInterpretation)return false;try{// 메시지 수정 - 수정 후 새로운 응답 자동 생성\nconst updatedMessages=[...currentInterpretation.messages];if(messageIndex>=0&&messageIndex<updatedMessages.length){// 수정된 메시지 업데이트\nupdatedMessages[messageIndex]=_objectSpread(_objectSpread({},updatedMessages[messageIndex]),{},{content:newContent,timestamp:new Date().toISOString()});// 수정된 메시지 이후의 모든 메시지들 제거\nconst filteredMessages=updatedMessages.slice(0,messageIndex+1);// 백엔드 API를 통해 새로운 AI 응답 생성\ntry{const response=await chatApi.chatWithInterpretation(currentInterpretation.personaId,newContent);if(response.data){const aiResponse={role:'assistant',content:response.data.response,timestamp:response.data.timestamp};const updatedInterpretation=_objectSpread(_objectSpread({},currentInterpretation),{},{messages:[...filteredMessages,aiResponse]});// 상위 컴포넌트에 업데이트 알림\nif(onUpdateInterpretation){onUpdateInterpretation(updatedInterpretation);}return true;}else{// API 호출 실패 시 로컬에서 임시 응답 생성\nconst aiResponse={role:'assistant',content:\"\".concat(currentInterpretation.personaName,\"\\uC758 \\uAD00\\uC810\\uC5D0\\uC11C \\uC218\\uC815\\uB41C \\uBA54\\uC2DC\\uC9C0\\uC5D0 \\uB300\\uD574 \\uC0C8\\uB86D\\uAC8C \\uC751\\uB2F5\\uB4DC\\uB9AC\\uACA0\\uC2B5\\uB2C8\\uB2E4.\\n\\n\\\"\").concat(newContent,\"\\\"\\uC5D0 \\uB300\\uD574 \\uBD84\\uC11D\\uD574\\uBCF4\\uBA74, \\uC774\\uB294 \\uC774\\uC804\\uACFC\\uB294 \\uB2E4\\uB978 \\uB9E5\\uB77D\\uC744 \\uC81C\\uC2DC\\uD558\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC218\\uC815\\uB41C \\uB0B4\\uC6A9\\uC744 \\uBC14\\uD0D5\\uC73C\\uB85C \\uC0C8\\uB85C\\uC6B4 \\uD574\\uC11D\\uACFC \\uD1B5\\uCC30\\uC744 \\uC81C\\uACF5\\uD558\\uACA0\\uC2B5\\uB2C8\\uB2E4.\"),timestamp:new Date().toISOString()};const updatedInterpretation=_objectSpread(_objectSpread({},currentInterpretation),{},{messages:[...filteredMessages,aiResponse]});if(onUpdateInterpretation){onUpdateInterpretation(updatedInterpretation);}return true;}}catch(apiError){console.error('해석 API 호출 실패:',apiError);// API 호출 실패 시 로컬에서 임시 응답 생성\nconst aiResponse={role:'assistant',content:\"\".concat(currentInterpretation.personaName,\"\\uC758 \\uAD00\\uC810\\uC5D0\\uC11C \\uC218\\uC815\\uB41C \\uBA54\\uC2DC\\uC9C0\\uC5D0 \\uB300\\uD574 \\uC0C8\\uB86D\\uAC8C \\uC751\\uB2F5\\uB4DC\\uB9AC\\uACA0\\uC2B5\\uB2C8\\uB2E4.\\n\\n\\\"\").concat(newContent,\"\\\"\\uC5D0 \\uB300\\uD574 \\uBD84\\uC11D\\uD574\\uBCF4\\uBA74, \\uC774\\uB294 \\uC774\\uC804\\uACFC\\uB294 \\uB2E4\\uB978 \\uB9E5\\uB77D\\uC744 \\uC81C\\uC2DC\\uD558\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4. \\uC218\\uC815\\uB41C \\uB0B4\\uC6A9\\uC744 \\uBC14\\uD0D5\\uC73C\\uB85C \\uC0C8\\uB85C\\uC6B4 \\uD574\\uC11D\\uACFC \\uD1B5\\uCC30\\uC744 \\uC81C\\uACF5\\uD558\\uACA0\\uC2B5\\uB2C8\\uB2E4.\"),timestamp:new Date().toISOString()};const updatedInterpretation=_objectSpread(_objectSpread({},currentInterpretation),{},{messages:[...filteredMessages,aiResponse]});if(onUpdateInterpretation){onUpdateInterpretation(updatedInterpretation);}return true;}}return false;}catch(error){console.error('해석 메시지 수정 실패:',error);return false;}};// 일반 대화 메시지 수정 핸들러\nconst handleEditConversationMessage=async(messageIndex,newContent)=>{if(!selectedConversation||!currentConversation)return false;try{var _result$data;const result=await chatApi.editMessage(selectedConversation,messageIndex,newContent);if((_result$data=result.data)!==null&&_result$data!==void 0&&_result$data.success&&result.data.updated_conversation){// 수정된 대화 정보로 즉시 UI 업데이트\nif(onUpdateConversation){onUpdateConversation(result.data.updated_conversation);}return true;}else{console.error('메시지 수정 실패:',result.error);return false;}}catch(error){console.error('메시지 수정 요청 실패:',error);return false;}};const renderInitialResponses=()=>{if(!globalMessages.length)return null;const latestMessage=globalMessages[globalMessages.length-1];return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(Message,{message:{role:'user',content:latestMessage.user_message,timestamp:latestMessage.timestamp},personas:personas,showActionButtons:false}),latestMessage.responses.map(response=>/*#__PURE__*/_jsx(Message,{message:{role:'assistant',content:response.content,timestamp:response.timestamp,persona_id:response.persona_id,persona_name:response.persona_name},personas:personas,showActionButtons:true},\"\".concat(latestMessage.id,\"_\").concat(response.persona_id))),/*#__PURE__*/_jsxs(\"div\",{style:{margin:'20px 0',padding:'16px',backgroundColor:'#f8f8f8',borderRadius:'8px',border:'none',textAlign:'center'},children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'14px',color:'#666',marginBottom:'8px'},children:\"\\uD83D\\uDCA1 \\uAC01 \\uD398\\uB974\\uC18C\\uB098\\uC640 \\uAC1C\\uBCC4\\uC801\\uC73C\\uB85C \\uB300\\uD654\\uB97C \\uC774\\uC5B4\\uAC00\\uB824\\uBA74\"}),/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'13px',color:'#888'},children:\"\\uC67C\\uCABD \\uC0AC\\uC774\\uB4DC\\uBC14\\uC5D0\\uC11C \\uD398\\uB974\\uC18C\\uB098\\uB97C \\uC120\\uD0DD\\uD558\\uAC70\\uB098, \\uD2B9\\uC815 \\uB300\\uD654\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"})]})]});};const renderConversation=()=>{if(!currentConversation)return null;return currentConversation.messages.map((message,index)=>/*#__PURE__*/_jsx(Message,{message:message,personas:personas,showActionButtons:true,onCopy:()=>{navigator.clipboard.writeText(message.content);},onEdit:message.role==='user'?()=>setEditingMessageIndex(index):undefined,onEditSave:message.role==='user'?async newContent=>{const success=await handleEditConversationMessage(index,newContent);if(success){setEditingMessageIndex(null);}return success;}:undefined,onEditCancel:()=>setEditingMessageIndex(null),isEditing:editingMessageIndex===index,onSunAction:()=>{},onPersonAction:()=>{},onDocumentAction:()=>{}},\"\".concat(currentConversation.id,\"_\").concat(index)));};const renderEmptyState=()=>/*#__PURE__*/_jsxs(EmptyState,{children:[/*#__PURE__*/_jsx(EmptyStateTitle,{children:\"\\uC0C8\\uB85C\\uC6B4 \\uB300\\uD654\\uB97C \\uC2DC\\uC791\\uD574\\uBCF4\\uC138\\uC694!\"}),/*#__PURE__*/_jsx(EmptyStateText,{children:Object.keys(personas).length>0?/*#__PURE__*/_jsxs(_Fragment,{children:[\"\\uC544\\uB798\\uC5D0 \\uC9C8\\uBB38\\uC744 \\uC785\\uB825\\uD558\\uBA74 \",Object.keys(personas).length,\"\\uAC1C\\uC758 \\uD398\\uB974\\uC18C\\uB098\\uAC00\",/*#__PURE__*/_jsx(\"br\",{}),\"\\uAC01\\uAC01 \\uB2E4\\uB978 \\uAD00\\uC810\\uC5D0\\uC11C \\uB2F5\\uBCC0\\uD574\\uB4DC\\uB9BD\\uB2C8\\uB2E4.\"]}):'페르소나 정보를 불러오는 중입니다...'})]});// 모드 전환 핸들러\nconst handleSwitchToMode=mode=>{if(onSwitchConversationMode){onSwitchConversationMode(mode);}};// 새로운 해석 생성 핸들러\nconst handleGenerateNewInterpretation=async()=>{if(!(currentInterpretation!==null&&currentInterpretation!==void 0&&currentInterpretation.personaId))return;try{// 새로운 해석을 생성하고 완료 콜백 호출\nonInterpretationComplete(currentInterpretation.personaId,'새로운 해석을 생성합니다...');}catch(error){console.error('새로운 해석 생성 실패:',error);}};// 선택된 스레드 추출\nconst getSelectedThread=conversationItem=>{if(!conversationItem||!conversationItem.includes('-thread-'))return null;const threadId=conversationItem.split('-thread-')[1];return threads.find(thread=>thread.id===threadId)||null;};// 스레드 새로고침 함수\nconst handleRefreshThreads=async()=>{if(!(currentInterpretation!==null&&currentInterpretation!==void 0&&currentInterpretation.personaId))return;try{console.log('=== 스레드 새로고침 시작 ===');console.log('personaId:',currentInterpretation.personaId);// 1. 스레드 정보 새로고침\nconst threadsResponse=await chatApi.getPersonaThreads(currentInterpretation.personaId);if(threadsResponse.data){const updatedThreads=threadsResponse.data;setThreads(updatedThreads);console.log('스레드 업데이트 완료:',updatedThreads.length,'개');// 콘텐츠 업데이트\nconst proceedThread=updatedThreads.find(t=>t.thread_type==='proceed');const sentenceThread=updatedThreads.find(t=>t.thread_type==='sentence');if(proceedThread&&proceedThread.messages.length>0){const firstProceedMessage=proceedThread.messages.find(m=>m.role==='assistant');if(firstProceedMessage){setProceedContent(firstProceedMessage.content);}}if(sentenceThread&&sentenceThread.messages.length>0){const firstSentenceMessage=sentenceThread.messages.find(m=>m.role==='assistant');if(firstSentenceMessage){setSentenceContent(firstSentenceMessage.content);}}}// 2. 해석 내용도 새로고침 (중요!)\ntry{console.log('해석 내용 새로고침 시작...');const interpretationResponse=await chatApi.getInterpretation(currentInterpretation.personaId);if(interpretationResponse.data){console.log('해석 내용 업데이트:',interpretationResponse.data.interpretation.substring(0,100)+'...');// 해석 내용 업데이트\nconst updatedInterpretation=_objectSpread(_objectSpread({},currentInterpretation),{},{content:interpretationResponse.data.interpretation});if(onUpdateInterpretation){onUpdateInterpretation(updatedInterpretation);console.log('해석 내용 업데이트 완료');}}}catch(interpretationError){console.warn('해석 내용 새로고침 실패:',interpretationError);}// 3. 상호작용 기록도 새로고침 (해석 저장이 반영되도록)\ntry{console.log('상호작용 기록 새로고침 시작...');const interactionResponse=await chatApi.getAllInteractionRecords();if(interactionResponse.data){setInteractionRecords(interactionResponse.data);console.log('상호작용 기록 업데이트 완료:',interactionResponse.data.length,'개');}}catch(interactionError){console.warn('상호작용 기록 새로고침 실패:',interactionError);}// 4. ConversationSidebar 새로고침\nif(onRefreshConversationSidebar){console.log('ConversationSidebar 새로고침 트리거...');onRefreshConversationSidebar();}console.log('=== 스레드 새로고침 완료 ===');}catch(error){console.error('스레드 새로고침 실패:',error);}};// 해석 뷰 렌더링\nconst renderInterpretationView=()=>{var _selectedThread;if(!currentInterpretation)return null;// 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\nlet selectedThread=getSelectedThread(selectedConversationItem);const isInterpretationThread=selectedConversationItem===null||selectedConversationItem===void 0?void 0:selectedConversationItem.startsWith('interpretation-thread-');// 스레드가 선택되지 않았으면 가장 최신 해석 스레드를 찾아서 사용 (나아가기와 동일)\nif(!selectedThread){const interpretationThreads=threads.filter(thread=>thread.thread_type==='interpretation');if(interpretationThreads.length>0){selectedThread=interpretationThreads.sort((a,b)=>new Date(b.created_at).getTime()-new Date(a.created_at).getTime())[0];console.log('가장 최신 해석 스레드 자동 선택:',selectedThread.id);}}// 사용할 메시지들 결정: 해석 스레드가 선택되었으면 해당 스레드의 메시지 사용\nconst messagesToShow=isInterpretationThread&&selectedThread?selectedThread.messages:currentInterpretation.messages;// 사용할 해석 내용 결정: 해석 스레드가 선택되었으면 해당 스레드의 content 사용\nconst interpretationContent=isInterpretationThread&&selectedThread?selectedThread.content||(selectedThread.messages.length>0?selectedThread.messages[0].content:currentInterpretation.content):currentInterpretation.content;console.log('해석 뷰 렌더링:',{isInterpretationThread,selectedThreadId:(_selectedThread=selectedThread)===null||_selectedThread===void 0?void 0:_selectedThread.id,messageCount:messagesToShow.length,contentPreview:interpretationContent.substring(0,100)+'...'});return/*#__PURE__*/_jsx(InterpretationView,{interpretation:interpretationContent,personaName:currentInterpretation.personaName,onSendMessage:onInterpretationMessage,onEditMessage:handleEditInterpretationMessage,isLoading:isLoading,messages:messagesToShow,onGenerateNewInterpretation:handleGenerateNewInterpretation,onSwitchToMode:handleSwitchToMode,personaId:currentInterpretation.personaId,onRefreshThreads:handleRefreshThreads,selectedThread:selectedThread});};// 나아가기 뷰 렌더링\nconst renderProceedView=()=>{if(!currentInterpretation)return null;const selectedThread=getSelectedThread(selectedConversationItem);return/*#__PURE__*/_jsx(ProceedView,{personaId:currentInterpretation.personaId,personaName:currentInterpretation.personaName,proceedContent:proceedContent||'나아가기를 생성하고 있습니다...',threads:threads,onThreadUpdate:updatedThreads=>{setThreads(updatedThreads);// 스레드 업데이트 시 콘텐츠도 업데이트\nconst proceedThread=updatedThreads.find(t=>t.thread_type==='proceed');if(proceedThread&&proceedThread.messages.length>0){const firstProceedMessage=proceedThread.messages.find(m=>m.role==='assistant');if(firstProceedMessage){setProceedContent(firstProceedMessage.content);}}// ConversationSidebar 새로고침\nif(onRefreshConversationSidebar){onRefreshConversationSidebar();}},onSwitchToMode:handleSwitchToMode,onGenerateNewInterpretation:handleGenerateNewInterpretation,selectedThread:selectedThread,onRefreshThreads:handleRefreshThreads});};// 문장 뷰 렌더링\nconst renderSentenceView=()=>{if(!currentInterpretation)return null;const selectedThread=getSelectedThread(selectedConversationItem);return/*#__PURE__*/_jsx(SentenceView,{personaId:currentInterpretation.personaId,personaName:currentInterpretation.personaName,sentenceContent:sentenceContent||'문장을 생성하고 있습니다...',threads:threads,onThreadUpdate:updatedThreads=>{setThreads(updatedThreads);// 스레드 업데이트 시 콘텐츠도 업데이트\nconst sentenceThread=updatedThreads.find(t=>t.thread_type==='sentence');if(sentenceThread&&sentenceThread.messages.length>0){const firstSentenceMessage=sentenceThread.messages.find(m=>m.role==='assistant');if(firstSentenceMessage){setSentenceContent(firstSentenceMessage.content);}}// ConversationSidebar 새로고침\nif(onRefreshConversationSidebar){onRefreshConversationSidebar();}},onSwitchToMode:handleSwitchToMode,onGenerateNewInterpretation:handleGenerateNewInterpretation,selectedThread:selectedThread,onRefreshThreads:handleRefreshThreads});};// 상호작용 기록 뷰 렌더링\nconst renderInteractionHistoryView=()=>{if(!currentInterpretation)return null;return/*#__PURE__*/_jsx(InteractionHistoryView,{personaId:currentInterpretation.personaId,personaName:currentInterpretation.personaName,allInteractionRecords:interactionRecords,onThreadSelect:handleInteractionThreadSelect,onSwitchToMode:handleSwitchToMode,onGenerateNewInterpretation:handleGenerateNewInterpretation});};// 상호작용 기록에서 스레드 선택 핸들러\nconst handleInteractionThreadSelect=thread=>{// 해당 스레드의 모드로 전환하고 스레드 선택\nif(onSwitchConversationMode){onSwitchConversationMode(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));}};return/*#__PURE__*/_jsxs(MainArea,{children:[/*#__PURE__*/_jsx(\"div\",{style:{height:'80px',borderBottom:'1px solid #ddd',background:'white'}}),selectedPersonaItem==='training'?/*#__PURE__*/_jsx(TrainingCategoryView,{personas:personas,onSelectPersona:onSelectPersona||(()=>{}),onInterpretationComplete:onInterpretationComplete}):selectedPersonaItem==='recent'?/*#__PURE__*/// 최근 상호작용 모드일 때 RecentInteractionsView 표시\n_jsx(RecentInteractionsView,{personas:(recentInteractionsProps===null||recentInteractionsProps===void 0?void 0:recentInteractionsProps.personas)||{},onSelectPersona:(recentInteractionsProps===null||recentInteractionsProps===void 0?void 0:recentInteractionsProps.onSelectPersona)||(()=>{}),onThreadSelect:(recentInteractionsProps===null||recentInteractionsProps===void 0?void 0:recentInteractionsProps.onThreadSelect)||(()=>{}),selectedThreadId:selectedConversationItem!==null&&selectedConversationItem!==void 0&&selectedConversationItem.startsWith('recent-thread-')?selectedConversationItem.split('-')[2]:undefined,selectedPersonaId:selectedConversationItem!==null&&selectedConversationItem!==void 0&&selectedConversationItem.startsWith('recent-thread-')?selectedConversationItem.split('-')[3]:undefined}):selectedPersonaItem==='verbalization'?/*#__PURE__*/// 언어화 모드일 때 VerbalizationView 표시\n_jsx(VerbalizationView,{selectedThread:(verbalizationProps===null||verbalizationProps===void 0?void 0:verbalizationProps.selectedThread)||null,threads:(verbalizationProps===null||verbalizationProps===void 0?void 0:verbalizationProps.threads)||[],onThreadUpdate:(verbalizationProps===null||verbalizationProps===void 0?void 0:verbalizationProps.onThreadUpdate)||(()=>{}),onCreateNewThread:(verbalizationProps===null||verbalizationProps===void 0?void 0:verbalizationProps.onCreateNewThread)||(async()=>{})}):selectedPersonaItem==='admin'?/*#__PURE__*/_jsx(PersonaAdminPanel,{onClose:()=>{// 관리 모드 종료 시 PersonaSidebar로 돌아가기\nif(onSelectPersona){onSelectPersona('');// 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n}}}):currentInterpretation&&(selectedConversationItem==='proceed'||selectedConversationItem!==null&&selectedConversationItem!==void 0&&selectedConversationItem.startsWith('proceed-thread-'))?// 나아가기 모드일 때 ProceedView 사용\nrenderProceedView():currentInterpretation&&(selectedConversationItem==='sentence'||selectedConversationItem!==null&&selectedConversationItem!==void 0&&selectedConversationItem.startsWith('sentence-thread-'))?// 문장 모드일 때 SentenceView 사용\nrenderSentenceView():currentInterpretation&&(selectedConversationItem==='interpretation'||selectedConversationItem!==null&&selectedConversationItem!==void 0&&selectedConversationItem.startsWith('interpretation-thread-'))?// 해석 모드일 때 InterpretationView 사용\nrenderInterpretationView():currentInterpretation&&selectedConversationItem==='interaction_history'?// 상호작용 기록 모드일 때 InteractionHistoryView 사용\nrenderInteractionHistoryView():/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsxs(ChatContent,{ref:chatContentRef,children:[!selectedConversation&&!currentInterpretation&&globalMessages.length===0&&renderEmptyState(),!selectedConversation&&!currentInterpretation&&globalMessages.length>0&&renderInitialResponses(),selectedConversation&&renderConversation(),isLoading&&(selectedConversation&&currentConversation?/*#__PURE__*/_jsx(LoadingMessage,{personaName:(_personas$currentConv=personas[currentConversation.persona_id])===null||_personas$currentConv===void 0?void 0:_personas$currentConv.name,personaColor:(_personas$currentConv2=personas[currentConversation.persona_id])===null||_personas$currentConv2===void 0?void 0:_personas$currentConv2.color}):/*#__PURE__*/_jsx(LoadingMessage,{personaName:\"AI\",personaColor:\"#666\"}))]}),/*#__PURE__*/_jsx(MessageInput,{onSendMessage:handleSendMessage,disabled:isLoading||Object.keys(personas).length===0,placeholder:selectedConversation&&currentConversation?\"\".concat((_personas$currentConv3=personas[currentConversation.persona_id])===null||_personas$currentConv3===void 0?void 0:_personas$currentConv3.name,\"\\uC5D0\\uAC8C \\uBA54\\uC2DC\\uC9C0\\uB97C \\uBCF4\\uB0B4\\uC138\\uC694...\"):\"모든 페르소나에게 질문해보세요...\"})]})]});};export default ChatArea;","map":{"version":3,"names":["React","useEffect","useRef","useState","Message","MessageInput","TrainingCategoryView","InterpretationView","ProceedView","SentenceView","PersonaAdminPanel","LoadingMessage","chatApi","MainArea","ChatContent","EmptyState","EmptyStateTitle","EmptyStateText","InteractionHistoryView","RecentInteractionsView","VerbalizationView","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","ChatArea","_ref","_personas$currentConv","_personas$currentConv2","_personas$currentConv3","selectedConversation","conversations","personas","globalMessages","isLoading","error","onSendInitialMessage","onContinueConversation","onClearError","selectedPersonaItem","onSelectPersona","onInterpretationComplete","selectedConversationItem","currentInterpretation","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","verbalizationProps","chatContentRef","currentConversation","editingMessageIndex","setEditingMessageIndex","threads","setThreads","proceedContent","setProceedContent","sentenceContent","setSentenceContent","interactionRecords","setInteractionRecords","current","scrollTop","scrollHeight","messages","loadTrainingData","personaId","threadsResponse","getPersonaThreads","data","proceedThread","find","t","thread_type","sentenceThread","length","firstProceedMessage","m","role","content","firstSentenceMessage","console","loadInteractionRecords","recordsResponse","getAllInteractionRecords","handleSendMessage","message","handleEditInterpretationMessage","messageIndex","newContent","updatedMessages","_objectSpread","timestamp","Date","toISOString","filteredMessages","slice","response","chatWithInterpretation","aiResponse","updatedInterpretation","concat","personaName","apiError","handleEditConversationMessage","_result$data","result","editMessage","success","updated_conversation","renderInitialResponses","latestMessage","children","user_message","showActionButtons","responses","map","persona_id","persona_name","id","style","margin","padding","backgroundColor","borderRadius","border","textAlign","fontSize","color","marginBottom","renderConversation","index","onCopy","navigator","clipboard","writeText","onEdit","undefined","onEditSave","onEditCancel","isEditing","onSunAction","onPersonAction","onDocumentAction","renderEmptyState","Object","keys","handleSwitchToMode","mode","handleGenerateNewInterpretation","getSelectedThread","conversationItem","includes","threadId","split","thread","handleRefreshThreads","log","updatedThreads","interpretationResponse","getInterpretation","interpretation","substring","interpretationError","warn","interactionResponse","interactionError","renderInterpretationView","_selectedThread","selectedThread","isInterpretationThread","startsWith","interpretationThreads","filter","sort","a","b","created_at","getTime","messagesToShow","interpretationContent","selectedThreadId","messageCount","contentPreview","onSendMessage","onEditMessage","onGenerateNewInterpretation","onSwitchToMode","onRefreshThreads","renderProceedView","onThreadUpdate","renderSentenceView","renderInteractionHistoryView","allInteractionRecords","onThreadSelect","handleInteractionThreadSelect","height","borderBottom","background","selectedPersonaId","onCreateNewThread","onClose","ref","name","personaColor","disabled","placeholder"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/shared/components/ChatArea.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Conversation, Persona, GlobalMessage, TrainingThread, InteractionRecord } from '../types';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from '../../training/components/TrainingCategoryView';\nimport InterpretationView from '../../training/components/InterpretationView';\nimport ProceedView from '../../training/components/ProceedView';\nimport SentenceView from '../../training/components/SentenceView';\nimport PersonaAdminPanel from '../../admin/components/PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport {\n  MainArea,\n  ChatContent,\n  EmptyState,\n  EmptyStateTitle,\n  EmptyStateText,\n} from '../styles/GlobalStyle';\nimport InteractionHistoryView from '../../training/components/InteractionHistoryView';\nimport RecentInteractionsView from '../components/RecentInteractionsView';\nimport VerbalizationView from '../../verbalization/components/VerbalizationView';\n\ninterface ChatAreaProps {\n  selectedConversation: string | null;\n  conversations: Record<string, Conversation>;\n  personas: Record<string, Persona>;\n  globalMessages: GlobalMessage[];\n  isLoading: boolean;\n  error: string | null;\n  onSendInitialMessage: (message: string) => Promise<boolean>;\n  onContinueConversation: (conversationId: string, message: string) => Promise<boolean>;\n  onClearError: () => void;\n  selectedPersonaItem?: string | null; // 훈습 모드 확인용\n  onSelectPersona?: (personaId: string) => void; // 페르소나 선택 핸들러\n  onInterpretationComplete: (personaId: string, interpretation: string) => void; // 해석 완료 핸들러\n  selectedConversationItem?: string | null; // 선택된 대화 항목\n  currentInterpretation?: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null;\n  onInterpretationMessage: (message: string) => Promise<boolean>; // 해석 채팅 메시지 핸들러\n  onUpdateInterpretation?: (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => void; // 해석 업데이트 핸들러\n  onUpdateConversation?: (updatedConversation: any) => void; // 대화 업데이트 핸들러\n  onSwitchConversationMode?: (mode: string) => void; // 대화 모드 전환 핸들러\n  onRefreshConversationSidebar?: () => void; // ConversationSidebar 새로고침 핸들러\n  recentInteractionsProps?: {\n    personas: Record<string, Persona>;\n    onSelectPersona: (personaId: string) => void;\n    onThreadSelect: (thread: TrainingThread, personaId: string) => void;\n  }; // 최근 상호작용 관련 props\n  verbalizationProps?: {\n    selectedThread: TrainingThread | null;\n    threads: TrainingThread[];\n    onThreadUpdate: () => void;\n    onCreateNewThread: () => Promise<void>;\n  }; // 언어화 관련 props\n}\n\nconst ChatArea: React.FC<ChatAreaProps> = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onSwitchConversationMode,\n  onRefreshConversationSidebar,\n  recentInteractionsProps,\n  verbalizationProps,\n}) => {\n  const chatContentRef = useRef<HTMLDivElement>(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n  \n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 훈습 관련 상태\n  const [threads, setThreads] = useState<TrainingThread[]>([]);\n  const [proceedContent, setProceedContent] = useState<string>('');\n  const [sentenceContent, setSentenceContent] = useState<string>('');\n  const [interactionRecords, setInteractionRecords] = useState<InteractionRecord[]>([]);\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation?.messages, globalMessages, isLoading]);\n\n  // 훈습 데이터 로딩을 더 정확하게 수정\n  useEffect(() => {\n    const loadTrainingData = async () => {\n      if (!currentInterpretation?.personaId) return;\n\n      try {\n        // 스레드 데이터 로드\n        const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n        if (threadsResponse.data) {\n          setThreads(threadsResponse.data);\n          \n          // 나아가기와 문장 스레드에서 콘텐츠 추출\n          const proceedThread = threadsResponse.data.find(t => t.thread_type === 'proceed');\n          const sentenceThread = threadsResponse.data.find(t => t.thread_type === 'sentence');\n          \n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          \n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('훈습 데이터 로드 실패:', error);\n      }\n    };\n\n    loadTrainingData();\n  }, [currentInterpretation?.personaId]);\n\n  // 스레드 업데이트 시 콘텐츠도 업데이트\n  useEffect(() => {\n    const proceedThread = threads.find(t => t.thread_type === 'proceed');\n    const sentenceThread = threads.find(t => t.thread_type === 'sentence');\n    \n    if (proceedThread && proceedThread.messages.length > 0) {\n      const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n      if (firstProceedMessage) {\n        setProceedContent(firstProceedMessage.content);\n      }\n    }\n    \n    if (sentenceThread && sentenceThread.messages.length > 0) {\n      const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n      if (firstSentenceMessage) {\n        setSentenceContent(firstSentenceMessage.content);\n      }\n    }\n  }, [threads]);\n\n  // 상호작용 기록 로드\n  useEffect(() => {\n    const loadInteractionRecords = async () => {\n      try {\n        const recordsResponse = await chatApi.getAllInteractionRecords();\n        if (recordsResponse.data) {\n          setInteractionRecords(recordsResponse.data);\n        }\n      } catch (error) {\n        console.error('상호작용 기록 로드 실패:', error);\n      }\n    };\n\n    loadInteractionRecords();\n  }, [currentInterpretation, threads]); // threads나 currentInterpretation이 변경될 때마다 새로고침\n\n  const handleSendMessage = async (message: string) => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString(),\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(\n            currentInterpretation.personaId,\n            newContent\n          );\n\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: response.data.response,\n              timestamp: response.data.timestamp,\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString(),\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n          \n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant' as const,\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse],\n          };\n\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!selectedConversation || !currentConversation) return false;\n\n    try {\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      \n      if (result.data?.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        \n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n\n\n\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    \n    const latestMessage = globalMessages[globalMessages.length - 1];\n    \n    return (\n      <div>\n        {/* 사용자 질문 */}\n        <Message\n          message={{\n            role: 'user',\n            content: latestMessage.user_message,\n            timestamp: latestMessage.timestamp,\n          }}\n          personas={personas}\n          showActionButtons={false}\n        />\n        \n        {/* 모든 페르소나 응답 */}\n        {latestMessage.responses.map((response) => (\n          <Message\n            key={`${latestMessage.id}_${response.persona_id}`}\n            message={{\n              role: 'assistant',\n              content: response.content,\n              timestamp: response.timestamp,\n              persona_id: response.persona_id,\n              persona_name: response.persona_name,\n            }}\n            personas={personas}\n            showActionButtons={true}\n          />\n        ))}\n        \n        <div style={{\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center',\n        }}>\n          <div style={{ fontSize: '14px', color: '#666', marginBottom: '8px' }}>\n            💡 각 페르소나와 개별적으로 대화를 이어가려면\n          </div>\n          <div style={{ fontSize: '13px', color: '#888' }}>\n            왼쪽 사이드바에서 페르소나를 선택하거나, 특정 대화를 선택하세요\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n\n    return currentConversation.messages.map((message, index) => (\n      <Message\n        key={`${currentConversation.id}_${index}`}\n        message={message}\n        personas={personas}\n        showActionButtons={true}\n        onCopy={() => {\n          navigator.clipboard.writeText(message.content);\n        }}\n        onEdit={message.role === 'user' ? () => setEditingMessageIndex(index) : undefined}\n        onEditSave={message.role === 'user' ? async (newContent) => {\n          const success = await handleEditConversationMessage(index, newContent);\n                  if (success) {\n          setEditingMessageIndex(null);\n        }\n          return success;\n        } : undefined}\n        onEditCancel={() => setEditingMessageIndex(null)}\n        isEditing={editingMessageIndex === index}\n        onSunAction={() => {}}\n        onPersonAction={() => {}}\n        onDocumentAction={() => {}}\n      />\n    ));\n  };\n\n  const renderEmptyState = () => (\n    <EmptyState>\n      <EmptyStateTitle>새로운 대화를 시작해보세요!</EmptyStateTitle>\n      <EmptyStateText>\n        {Object.keys(personas).length > 0 ? (\n          <>\n            아래에 질문을 입력하면 {Object.keys(personas).length}개의 페르소나가<br />\n            각각 다른 관점에서 답변해드립니다.\n          </>\n        ) : (\n          '페르소나 정보를 불러오는 중입니다...'\n        )}\n      </EmptyStateText>\n    </EmptyState>\n  );\n\n  // 모드 전환 핸들러\n  const handleSwitchToMode = (mode: 'interpretation' | 'proceed' | 'sentence') => {\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(mode);\n    }\n  };\n\n  // 새로운 해석 생성 핸들러\n  const handleGenerateNewInterpretation = async () => {\n    if (!currentInterpretation?.personaId) return;\n    \n    try {\n      // 새로운 해석을 생성하고 완료 콜백 호출\n      onInterpretationComplete(currentInterpretation.personaId, '새로운 해석을 생성합니다...');\n    } catch (error) {\n      console.error('새로운 해석 생성 실패:', error);\n    }\n  };\n\n  // 선택된 스레드 추출\n  const getSelectedThread = (conversationItem: string | null | undefined): TrainingThread | null => {\n    if (!conversationItem || !conversationItem.includes('-thread-')) return null;\n    \n    const threadId = conversationItem.split('-thread-')[1];\n    return threads.find(thread => thread.id === threadId) || null;\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    if (!currentInterpretation?.personaId) return;\n    \n    try {\n      console.log('=== 스레드 새로고침 시작 ===');\n      console.log('personaId:', currentInterpretation.personaId);\n      \n      // 1. 스레드 정보 새로고침\n      const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setThreads(updatedThreads);\n        console.log('스레드 업데이트 완료:', updatedThreads.length, '개');\n        \n        // 콘텐츠 업데이트\n        const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n        const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n        \n        if (proceedThread && proceedThread.messages.length > 0) {\n          const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n          if (firstProceedMessage) {\n            setProceedContent(firstProceedMessage.content);\n          }\n        }\n        \n        if (sentenceThread && sentenceThread.messages.length > 0) {\n          const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n          if (firstSentenceMessage) {\n            setSentenceContent(firstSentenceMessage.content);\n          }\n        }\n      }\n      \n      // 2. 해석 내용도 새로고침 (중요!)\n      try {\n        console.log('해석 내용 새로고침 시작...');\n        const interpretationResponse = await chatApi.getInterpretation(currentInterpretation.personaId);\n        if (interpretationResponse.data) {\n          console.log('해석 내용 업데이트:', interpretationResponse.data.interpretation.substring(0, 100) + '...');\n          \n          // 해석 내용 업데이트\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            content: interpretationResponse.data.interpretation,\n          };\n          \n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n            console.log('해석 내용 업데이트 완료');\n          }\n        }\n      } catch (interpretationError) {\n        console.warn('해석 내용 새로고침 실패:', interpretationError);\n      }\n      \n      // 3. 상호작용 기록도 새로고침 (해석 저장이 반영되도록)\n      try {\n        console.log('상호작용 기록 새로고침 시작...');\n        const interactionResponse = await chatApi.getAllInteractionRecords();\n        if (interactionResponse.data) {\n          setInteractionRecords(interactionResponse.data);\n          console.log('상호작용 기록 업데이트 완료:', interactionResponse.data.length, '개');\n        }\n      } catch (interactionError) {\n        console.warn('상호작용 기록 새로고침 실패:', interactionError);\n      }\n      \n      // 4. ConversationSidebar 새로고침\n      if (onRefreshConversationSidebar) {\n        console.log('ConversationSidebar 새로고침 트리거...');\n        onRefreshConversationSidebar();\n      }\n      \n      console.log('=== 스레드 새로고침 완료 ===');\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return null;\n\n    // 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\n    let selectedThread = getSelectedThread(selectedConversationItem);\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    \n    // 스레드가 선택되지 않았으면 가장 최신 해석 스레드를 찾아서 사용 (나아가기와 동일)\n    if (!selectedThread) {\n      const interpretationThreads = threads.filter(thread => thread.thread_type === 'interpretation');\n      if (interpretationThreads.length > 0) {\n        selectedThread = interpretationThreads.sort((a, b) => \n          new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n        )[0];\n        console.log('가장 최신 해석 스레드 자동 선택:', selectedThread.id);\n      }\n    }\n    \n    // 사용할 메시지들 결정: 해석 스레드가 선택되었으면 해당 스레드의 메시지 사용\n    const messagesToShow = isInterpretationThread && selectedThread \n      ? selectedThread.messages \n      : currentInterpretation.messages;\n    \n    // 사용할 해석 내용 결정: 해석 스레드가 선택되었으면 해당 스레드의 content 사용\n    const interpretationContent = isInterpretationThread && selectedThread \n      ? (selectedThread.content || (selectedThread.messages.length > 0 ? selectedThread.messages[0].content : currentInterpretation.content))\n      : currentInterpretation.content;\n\n    console.log('해석 뷰 렌더링:', {\n      isInterpretationThread,\n      selectedThreadId: selectedThread?.id,\n      messageCount: messagesToShow.length,\n      contentPreview: interpretationContent.substring(0, 100) + '...'\n    });\n\n    return (\n      <InterpretationView\n        interpretation={interpretationContent}\n        personaName={currentInterpretation.personaName}\n        onSendMessage={onInterpretationMessage}\n        onEditMessage={handleEditInterpretationMessage}\n        isLoading={isLoading}\n        messages={messagesToShow}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        onSwitchToMode={handleSwitchToMode}\n        personaId={currentInterpretation.personaId}\n        onRefreshThreads={handleRefreshThreads}\n        selectedThread={selectedThread}\n      />\n    );\n  };\n\n  // 나아가기 뷰 렌더링\n  const renderProceedView = () => {\n    if (!currentInterpretation) return null;\n\n    const selectedThread = getSelectedThread(selectedConversationItem);\n\n    return (\n      <ProceedView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        proceedContent={proceedContent || '나아가기를 생성하고 있습니다...'}\n        threads={threads}\n        onThreadUpdate={(updatedThreads) => {\n          setThreads(updatedThreads);\n          // 스레드 업데이트 시 콘텐츠도 업데이트\n          const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          // ConversationSidebar 새로고침\n          if (onRefreshConversationSidebar) {\n            onRefreshConversationSidebar();\n          }\n        }}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        selectedThread={selectedThread}\n        onRefreshThreads={handleRefreshThreads}\n      />\n    );\n  };\n\n  // 문장 뷰 렌더링\n  const renderSentenceView = () => {\n    if (!currentInterpretation) return null;\n\n    const selectedThread = getSelectedThread(selectedConversationItem);\n\n    return (\n      <SentenceView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        sentenceContent={sentenceContent || '문장을 생성하고 있습니다...'}\n        threads={threads}\n        onThreadUpdate={(updatedThreads) => {\n          setThreads(updatedThreads);\n          // 스레드 업데이트 시 콘텐츠도 업데이트\n          const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n          // ConversationSidebar 새로고침\n          if (onRefreshConversationSidebar) {\n            onRefreshConversationSidebar();\n          }\n        }}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        selectedThread={selectedThread}\n        onRefreshThreads={handleRefreshThreads}\n      />\n    );\n  };\n\n  // 상호작용 기록 뷰 렌더링\n  const renderInteractionHistoryView = () => {\n    if (!currentInterpretation) return null;\n\n    return (\n      <InteractionHistoryView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        allInteractionRecords={interactionRecords}\n        onThreadSelect={handleInteractionThreadSelect}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n      />\n    );\n  };\n\n  // 상호작용 기록에서 스레드 선택 핸들러\n  const handleInteractionThreadSelect = (thread: TrainingThread) => {\n    // 해당 스레드의 모드로 전환하고 스레드 선택\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(`${thread.thread_type}-thread-${thread.id}`);\n    }\n  };\n\n  return (\n    <MainArea>\n      {/* 메인 영역 헤더 - 사이드바와 높이 맞춤 (80px) - 빈 공간 */}\n          <div style={{ \n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white',\n          }}>\n        {/* 빈 헤더 공간 */}\n          </div>\n\n      {/* 훈습 모드일 때 카테고리 뷰 표시 */}\n      {selectedPersonaItem === 'training' ? (\n        <TrainingCategoryView\n          personas={personas}\n          onSelectPersona={onSelectPersona || (() => {})}\n          onInterpretationComplete={onInterpretationComplete}\n        />\n      ) : selectedPersonaItem === 'recent' ? (\n        // 최근 상호작용 모드일 때 RecentInteractionsView 표시\n        <RecentInteractionsView\n          personas={recentInteractionsProps?.personas || {}}\n          onSelectPersona={recentInteractionsProps?.onSelectPersona || (() => {})}\n          onThreadSelect={recentInteractionsProps?.onThreadSelect || (() => {})}\n          selectedThreadId={\n            selectedConversationItem?.startsWith('recent-thread-') \n              ? selectedConversationItem.split('-')[2]\n              : undefined\n          }\n          selectedPersonaId={\n            selectedConversationItem?.startsWith('recent-thread-') \n              ? selectedConversationItem.split('-')[3]\n              : undefined\n          }\n        />\n      ) : selectedPersonaItem === 'verbalization' ? (\n        // 언어화 모드일 때 VerbalizationView 표시\n        <VerbalizationView\n          selectedThread={verbalizationProps?.selectedThread || null}\n          threads={verbalizationProps?.threads || []}\n          onThreadUpdate={verbalizationProps?.onThreadUpdate || (() => {})}\n          onCreateNewThread={verbalizationProps?.onCreateNewThread || (async () => {})}\n        />\n      ) : selectedPersonaItem === 'admin' ? (\n        <PersonaAdminPanel \n          onClose={() => {\n            // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n            if (onSelectPersona) {\n              onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n            }\n          }}\n        />\n      ) : currentInterpretation && (selectedConversationItem === 'proceed' || selectedConversationItem?.startsWith('proceed-thread-')) ? (\n        // 나아가기 모드일 때 ProceedView 사용\n        renderProceedView()\n      ) : currentInterpretation && (selectedConversationItem === 'sentence' || selectedConversationItem?.startsWith('sentence-thread-')) ? (\n        // 문장 모드일 때 SentenceView 사용\n        renderSentenceView()\n      ) : currentInterpretation && (selectedConversationItem === 'interpretation' || selectedConversationItem?.startsWith('interpretation-thread-')) ? (\n        // 해석 모드일 때 InterpretationView 사용\n        renderInterpretationView()\n      ) : currentInterpretation && selectedConversationItem === 'interaction_history' ? (\n        // 상호작용 기록 모드일 때 InteractionHistoryView 사용\n        renderInteractionHistoryView()\n      ) : (\n        <>\n      <ChatContent ref={chatContentRef}>\n        {/* {error && (\n          <ErrorMessage onClick={onClearError}>\n            {error} (클릭하여 닫기)\n          </ErrorMessage>\n        )} */}\n\n            {!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState()}\n            {!selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses()}\n        {selectedConversation && renderConversation()}\n\n        {isLoading && (\n          selectedConversation && currentConversation ? (\n            <LoadingMessage \n              personaName={personas[currentConversation.persona_id]?.name}\n              personaColor={personas[currentConversation.persona_id]?.color}\n            />\n          ) : (\n            <LoadingMessage \n              personaName=\"AI\"\n              personaColor=\"#666\"\n            />\n          )\n        )}\n      </ChatContent>\n\n      <MessageInput\n        onSendMessage={handleSendMessage}\n        disabled={isLoading || Object.keys(personas).length === 0}\n        placeholder={\n          selectedConversation && currentConversation\n            ? `${personas[currentConversation.persona_id]?.name}에게 메시지를 보내세요...`\n            : \"모든 페르소나에게 질문해보세요...\"\n        }\n      />\n        </>\n      )}\n    </MainArea>\n  );\n};\n\nexport default ChatArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}