{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useRef, useCallback, useEffect } from 'react';\n\n// Web Speech API의 타입 정의 (window 객체에 없을 수 있으므로)\n\nexport const useVoiceToText = onTranscriptReceived => {\n  _s();\n  const [status, setStatus] = useState(\"idle\");\n  const recognitionRef = useRef(null);\n  useEffect(() => {\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\n    if (!SpeechRecognition) {\n      console.error(\"이 브라우저는 Web Speech API를 지원하지 않습니다.\");\n      setStatus(\"error\");\n      return;\n    }\n    const recognition = new SpeechRecognition();\n    recognition.continuous = true; // 중간 결과도 계속 받음\n    recognition.interimResults = true; // 최종 결과가 아니어도 받음\n    recognition.lang = 'ko-KR'; // 한국어 설정\n\n    recognition.onresult = event => {\n      let interimTranscript = '';\n      let finalTranscript = '';\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\n        if (event.results[i].isFinal) {\n          finalTranscript += event.results[i][0].transcript;\n        } else {\n          interimTranscript += event.results[i][0].transcript;\n        }\n      }\n      onTranscriptReceived(finalTranscript || interimTranscript, finalTranscript ? true : false);\n    };\n    recognition.onerror = event => {\n      console.error(\"음성 인식 오류:\", event.error);\n      setStatus(\"error\");\n    };\n    recognition.onend = () => {\n      setStatus(\"idle\");\n    };\n    recognitionRef.current = recognition;\n  }, [onTranscriptReceived]);\n  const toggleRecording = useCallback(() => {\n    if (status === \"recording\") {\n      var _recognitionRef$curre;\n      (_recognitionRef$curre = recognitionRef.current) === null || _recognitionRef$curre === void 0 ? void 0 : _recognitionRef$curre.stop();\n    } else if (status === \"idle\") {\n      var _recognitionRef$curre2;\n      (_recognitionRef$curre2 = recognitionRef.current) === null || _recognitionRef$curre2 === void 0 ? void 0 : _recognitionRef$curre2.start();\n      setStatus(\"recording\");\n    }\n  }, [status]);\n  return {\n    status,\n    toggleRecording\n  };\n};\n_s(useVoiceToText, \"X9Y07Ck0Jbt1MyBxp7wlUaVj2Fk=\");","map":{"version":3,"names":["useState","useRef","useCallback","useEffect","useVoiceToText","onTranscriptReceived","_s","status","setStatus","recognitionRef","SpeechRecognition","window","webkitSpeechRecognition","console","error","recognition","continuous","interimResults","lang","onresult","event","interimTranscript","finalTranscript","i","resultIndex","results","length","isFinal","transcript","onerror","onend","current","toggleRecording","_recognitionRef$curre","stop","_recognitionRef$curre2","start"],"sources":["C:/Users/sungh/Desktop/chat_work_ver4/frontend/src/features/qa/hooks/useVoiceToText.ts"],"sourcesContent":["import { useState, useRef, useCallback, useEffect } from 'react';\r\n\r\n// Web Speech API의 타입 정의 (window 객체에 없을 수 있으므로)\r\ninterface CustomWindow extends Window {\r\n  SpeechRecognition: any;\r\n  webkitSpeechRecognition: any;\r\n}\r\n\r\ndeclare const window: CustomWindow;\r\n\r\nexport type RecordingStatus = \"idle\" | \"recording\" | \"error\";\r\n\r\nexport const useVoiceToText = (onTranscriptReceived: (transcript: string, isFinal: boolean) => void) => {\r\n  const [status, setStatus] = useState<RecordingStatus>(\"idle\");\r\n  const recognitionRef = useRef<any | null>(null);\r\n\r\n  useEffect(() => {\r\n    const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n    if (!SpeechRecognition) {\r\n      console.error(\"이 브라우저는 Web Speech API를 지원하지 않습니다.\");\r\n      setStatus(\"error\");\r\n      return;\r\n    }\r\n\r\n    const recognition = new SpeechRecognition();\r\n    recognition.continuous = true; // 중간 결과도 계속 받음\r\n    recognition.interimResults = true; // 최종 결과가 아니어도 받음\r\n    recognition.lang = 'ko-KR'; // 한국어 설정\r\n\r\n    recognition.onresult = (event: any) => {\r\n      let interimTranscript = '';\r\n      let finalTranscript = '';\r\n      for (let i = event.resultIndex; i < event.results.length; ++i) {\r\n        if (event.results[i].isFinal) {\r\n          finalTranscript += event.results[i][0].transcript;\r\n        } else {\r\n          interimTranscript += event.results[i][0].transcript;\r\n        }\r\n      }\r\n      onTranscriptReceived(finalTranscript || interimTranscript, finalTranscript ? true : false);\r\n    };\r\n\r\n    recognition.onerror = (event: any) => {\r\n      console.error(\"음성 인식 오류:\", event.error);\r\n      setStatus(\"error\");\r\n    };\r\n\r\n    recognition.onend = () => {\r\n      setStatus(\"idle\");\r\n    };\r\n\r\n    recognitionRef.current = recognition;\r\n  }, [onTranscriptReceived]);\r\n\r\n  const toggleRecording = useCallback(() => {\r\n    if (status === \"recording\") {\r\n      recognitionRef.current?.stop();\r\n    } else if (status === \"idle\") {\r\n      recognitionRef.current?.start();\r\n      setStatus(\"recording\");\r\n    }\r\n  }, [status]);\r\n\r\n  return { status, toggleRecording };\r\n}; "],"mappings":";AAAA,SAASA,QAAQ,EAAEC,MAAM,EAAEC,WAAW,EAAEC,SAAS,QAAQ,OAAO;;AAEhE;;AAUA,OAAO,MAAMC,cAAc,GAAIC,oBAAoE,IAAK;EAAAC,EAAA;EACtG,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGR,QAAQ,CAAkB,MAAM,CAAC;EAC7D,MAAMS,cAAc,GAAGR,MAAM,CAAa,IAAI,CAAC;EAE/CE,SAAS,CAAC,MAAM;IACd,MAAMO,iBAAiB,GAAGC,MAAM,CAACD,iBAAiB,IAAIC,MAAM,CAACC,uBAAuB;IACpF,IAAI,CAACF,iBAAiB,EAAE;MACtBG,OAAO,CAACC,KAAK,CAAC,oCAAoC,CAAC;MACnDN,SAAS,CAAC,OAAO,CAAC;MAClB;IACF;IAEA,MAAMO,WAAW,GAAG,IAAIL,iBAAiB,CAAC,CAAC;IAC3CK,WAAW,CAACC,UAAU,GAAG,IAAI,CAAC,CAAC;IAC/BD,WAAW,CAACE,cAAc,GAAG,IAAI,CAAC,CAAC;IACnCF,WAAW,CAACG,IAAI,GAAG,OAAO,CAAC,CAAC;;IAE5BH,WAAW,CAACI,QAAQ,GAAIC,KAAU,IAAK;MACrC,IAAIC,iBAAiB,GAAG,EAAE;MAC1B,IAAIC,eAAe,GAAG,EAAE;MACxB,KAAK,IAAIC,CAAC,GAAGH,KAAK,CAACI,WAAW,EAAED,CAAC,GAAGH,KAAK,CAACK,OAAO,CAACC,MAAM,EAAE,EAAEH,CAAC,EAAE;QAC7D,IAAIH,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAACI,OAAO,EAAE;UAC5BL,eAAe,IAAIF,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,UAAU;QACnD,CAAC,MAAM;UACLP,iBAAiB,IAAID,KAAK,CAACK,OAAO,CAACF,CAAC,CAAC,CAAC,CAAC,CAAC,CAACK,UAAU;QACrD;MACF;MACAvB,oBAAoB,CAACiB,eAAe,IAAID,iBAAiB,EAAEC,eAAe,GAAG,IAAI,GAAG,KAAK,CAAC;IAC5F,CAAC;IAEDP,WAAW,CAACc,OAAO,GAAIT,KAAU,IAAK;MACpCP,OAAO,CAACC,KAAK,CAAC,WAAW,EAAEM,KAAK,CAACN,KAAK,CAAC;MACvCN,SAAS,CAAC,OAAO,CAAC;IACpB,CAAC;IAEDO,WAAW,CAACe,KAAK,GAAG,MAAM;MACxBtB,SAAS,CAAC,MAAM,CAAC;IACnB,CAAC;IAEDC,cAAc,CAACsB,OAAO,GAAGhB,WAAW;EACtC,CAAC,EAAE,CAACV,oBAAoB,CAAC,CAAC;EAE1B,MAAM2B,eAAe,GAAG9B,WAAW,CAAC,MAAM;IACxC,IAAIK,MAAM,KAAK,WAAW,EAAE;MAAA,IAAA0B,qBAAA;MAC1B,CAAAA,qBAAA,GAAAxB,cAAc,CAACsB,OAAO,cAAAE,qBAAA,uBAAtBA,qBAAA,CAAwBC,IAAI,CAAC,CAAC;IAChC,CAAC,MAAM,IAAI3B,MAAM,KAAK,MAAM,EAAE;MAAA,IAAA4B,sBAAA;MAC5B,CAAAA,sBAAA,GAAA1B,cAAc,CAACsB,OAAO,cAAAI,sBAAA,uBAAtBA,sBAAA,CAAwBC,KAAK,CAAC,CAAC;MAC/B5B,SAAS,CAAC,WAAW,CAAC;IACxB;EACF,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC;EAEZ,OAAO;IAAEA,MAAM;IAAEyB;EAAgB,CAAC;AACpC,CAAC;AAAC1B,EAAA,CApDWF,cAAc","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}