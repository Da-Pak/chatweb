{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\InterpretationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\nimport { useSentenceData } from '../../shared/hooks/useSentenceData';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst InterpretationView = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n  selectedThread: propSelectedThread\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const sentenceDataHook = useSentenceData();\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 선택된 스레드 변경 시 처리 (나아가기와 동일)\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 해석 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (나아가기와 동일한 방식)\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('=== 해석 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n\n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n\n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      console.log('=== 해석 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    console.log('=== 해석 메모 저장 디버깅 ===');\n    console.log('문장 ID:', sentenceId);\n    console.log('메모 내용:', memo);\n    console.log('페르소나 ID:', personaId);\n    console.log('selectedThread:', selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id);\n\n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp,, sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages) {\n      const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    console.log('추출된 문장 내용:', sentenceContent);\n\n    // 스레드 ID 결정 로직 개선\n    let threadIdToUse = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id;\n\n    // 스레드가 없는 경우 폴백 로직\n    if (!threadIdToUse) {\n      // 해석 기반 대화인 경우 기본 스레드 ID 생성\n      if (interpretation) {\n        threadIdToUse = `interpretation_chat_${personaId}`;\n      } else {\n        console.warn('스레드 ID를 결정할 수 없음, 메모 저장 중단');\n        throw new Error('스레드 정보를 찾을 수 없습니다');\n      }\n    }\n    console.log('최종 스레드 ID:', threadIdToUse);\n    try {\n      // 직접 API 호출로 sentence_content도 함께 전달\n      // useSentenceData 훅은 sentence_content를 지원하지 않으므로 직접 호출\n      await sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        thread_id: threadIdToUse,\n        thread_type: 'interpretation',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `interpretation_${personaId}`,\n        // 백엔드 자동 저장을 위한 추가 정보\n        tags: ['interpretation', ...(personaId ? [personaId] : [])],\n        source_conversation_id: threadIdToUse,\n        source_thread_id: threadIdToUse\n      });\n\n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      console.log('해석 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('해석 메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error; // SelectableSentence에서 에러 처리할 수 있도록\n    }\n    console.log('=== 해석 메모 저장 디버깅 끝 ===');\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 기존 로직을 useSentenceMenu 훅으로 교체\n  const sentenceMenuActions = useSentenceMenu({\n    personaId: personaId || '',\n    threadType: 'interpretation',\n    selectedThread,\n    memos,\n    highlightedSentences,\n    setMemos,\n    setHighlightedSentences\n  });\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp,, sentenceIndex] = id.split('_');\n      const message = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    // 새로운 통합된 메뉴 액션 사용\n    await sentenceMenuActions.handleMenuAction(action, selectedIds, selectedTexts, messageInputRef);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async messageContent => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    console.log('messageContent:', messageContent.substring(0, 100) + '...');\n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    if (!messageContent) {\n      console.error('저장할 메시지 내용이 없습니다');\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: messageContent.length,\n        contentPreview: messageContent.substring(0, 100) + '...'\n      });\n\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      console.log('API 응답:', response);\n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    console.log('=== handleSunAction 완료 ===');\n  };\n  const handlePersonAction = async messageContent => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async messageContent => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 494,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCAC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 502,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 503,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 504,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 501,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#6c757d',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 527,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#6c757d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 562,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 499,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: onSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 해석에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: interpretation,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: messages,\n          onRefreshThreads: onRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 570,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 569,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 498,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: interpretation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 588,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 493,\n    columnNumber: 5\n  }, this);\n};\n_s(InterpretationView, \"To8bIknQA6eGHDr2d1OpVn3XWpY=\", false, function () {\n  return [useSentenceData, useSentenceMenu];\n});\n_c7 = InterpretationView;\nexport default InterpretationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"InterpretationView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","useSentenceMenu","useSentenceData","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","InterpretationView","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","onRefreshThreads","selectedThread","propSelectedThread","_s","setSelectedThread","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","sentenceDataHook","current","scrollTop","scrollHeight","console","log","id","loadThreadSentenceData","threadId","data","getThreadSentenceData","Object","keys","length","highlights","error","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","timestamp","sentenceIndex","split","sentenceContent","find","m","sentences","content","map","s","trim","filter","parseInt","threadIdToUse","warn","Error","createOrUpdateMemo","sentence_id","thread_id","thread_type","sentence_content","source_message_id","tags","source_conversation_id","source_thread_id","handleDeleteMemo","newMemos","deleteMemo","catch","sentenceMenuActions","threadType","handleMenuAction","action","selectedIds","Array","from","selectedTexts","handleToggleSentenceMode","handleSunAction","substring","contentLength","contentPreview","chatApi","response","saveCurrentAsInterpretation","persona_id","String","handlePersonAction","saveCurrentAsProceed","handleDocumentAction","saveCurrentAsSentence","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","fontSize","marginBottom","marginTop","index","role","undefined","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\nimport { useSentenceData } from '../../shared/hooks/useSentenceData';\n\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n  onRefreshThreads?: () => void;\n  selectedThread?: TrainingThread | null; // 나아가기와 동일하게 추가\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\n\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  const sentenceDataHook = useSentenceData();\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 선택된 스레드 변경 시 처리 (나아가기와 동일)\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 해석 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (나아가기와 동일한 방식)\n  const loadThreadSentenceData = async (threadId: string) => {\n      try {\n      console.log('=== 해석 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n        \n      // 백엔드에서 스레드 데이터 로딩\n        const data = await sentenceApi.getThreadSentenceData(threadId);\n        \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n        \n      // 백엔드 데이터로 상태 설정\n          setMemos(data.memos);\n          setHighlightedSentences(new Set(data.highlights));\n        \n        console.log('=== 해석 스레드 데이터 로딩 완료 ===');\n      } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n        // 실패 시 빈 상태로 초기화\n        setMemos({});\n        setHighlightedSentences(new Set());\n      }\n    };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    console.log('=== 해석 메모 저장 디버깅 ===');\n    console.log('문장 ID:', sentenceId);\n    console.log('메모 내용:', memo);\n    console.log('페르소나 ID:', personaId);\n    console.log('selectedThread:', selectedThread?.id);\n    \n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp, , sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (selectedThread?.messages) {\n      const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    \n    console.log('추출된 문장 내용:', sentenceContent);\n    \n    // 스레드 ID 결정 로직 개선\n    let threadIdToUse = selectedThread?.id;\n    \n    // 스레드가 없는 경우 폴백 로직\n    if (!threadIdToUse) {\n      // 해석 기반 대화인 경우 기본 스레드 ID 생성\n      if (interpretation) {\n        threadIdToUse = `interpretation_chat_${personaId}`;\n      } else {\n        console.warn('스레드 ID를 결정할 수 없음, 메모 저장 중단');\n        throw new Error('스레드 정보를 찾을 수 없습니다');\n      }\n    }\n    \n    console.log('최종 스레드 ID:', threadIdToUse);\n    \n    try {\n      // 직접 API 호출로 sentence_content도 함께 전달\n      // useSentenceData 훅은 sentence_content를 지원하지 않으므로 직접 호출\n      await sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        thread_id: threadIdToUse,\n        thread_type: 'interpretation',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `interpretation_${personaId}`,\n        // 백엔드 자동 저장을 위한 추가 정보\n        tags: ['interpretation', ...(personaId ? [personaId] : [])],\n        source_conversation_id: threadIdToUse,\n        source_thread_id: threadIdToUse,\n      } as any);\n      \n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      console.log('해석 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('해석 메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error; // SelectableSentence에서 에러 처리할 수 있도록\n    }\n    \n    console.log('=== 해석 메모 저장 디버깅 끝 ===');\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 기존 로직을 useSentenceMenu 훅으로 교체\n  const sentenceMenuActions = useSentenceMenu({\n    personaId: personaId || '',\n    threadType: 'interpretation',\n    selectedThread,\n    memos,\n    highlightedSentences,\n    setMemos,\n    setHighlightedSentences\n  });\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, , sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    // 새로운 통합된 메뉴 액션 사용\n    await sentenceMenuActions.handleMenuAction(action, selectedIds, selectedTexts, messageInputRef);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    console.log('messageContent:', messageContent.substring(0, 100) + '...');\n    \n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    \n    if (!messageContent) {\n      console.error('저장할 메시지 내용이 없습니다');\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: messageContent.length,\n        contentPreview: messageContent.substring(0, 100) + '...'\n      });\n      \n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      \n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      console.log('API 응답:', response);\n      \n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    console.log('=== handleSunAction 완료 ===');\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\n              <div>해석에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#6c757d',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#6c757d\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={onSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 해석에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={interpretation}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={messages}\n            onRefreshThreads={onRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={interpretation}\n      />\n    </Container>\n  );\n};\n\nexport default InterpretationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}