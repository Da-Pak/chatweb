{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import SelectableMessage from'./SelectableMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import LoadingMessage from'../../shared/components/LoadingMessage';import{chatApi}from'../../shared/api/chatApi';import{sentenceApi}from'../api/sentenceApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const ChatSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n\"])));// 토스트 스타일 컴포넌트 추가\nconst Toast=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const ProceedView=_ref=>{let{personaId,personaName,proceedContent,threads,onThreadUpdate,onSwitchToMode,onGenerateNewInterpretation,selectedThread:propSelectedThread,onRefreshThreads}=_ref;const[selectedThread,setSelectedThread]=useState(propSelectedThread||null);const[isLoading,setIsLoading]=useState(false);const[localThreads,setLocalThreads]=useState(threads);const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');// 문장 선택 관련 상태\nconst[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});const[isSentenceModeActive,setIsSentenceModeActive]=useState(false);const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 나아가기 타입의 스레드만 필터링\nconst proceedThreads=localThreads.filter(thread=>thread.thread_type==='proceed');useEffect(()=>{setLocalThreads(threads);},[threads]);// propSelectedThread가 변경되면 선택된 스레드 업데이트\nuseEffect(()=>{if(propSelectedThread){setSelectedThread(propSelectedThread);}else{// 첫 번째 나아가기 스레드를 자동 선택\nconst firstProceedThread=threads.find(t=>t.thread_type==='proceed');if(firstProceedThread&&!selectedThread){setSelectedThread(firstProceedThread);}}},[propSelectedThread,threads]);useEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages]);// 스레드 데이터 불러오기 (메모/하이라이트)\nuseEffect(()=>{const loadThreadSentenceData=async()=>{if(!(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id))return;try{const data=await sentenceApi.getThreadSentenceData(selectedThread.id);setMemos(data.memos);setHighlightedSentences(new Set(data.highlights));}catch(error){console.error('스레드 문장 데이터 로딩 실패:',error);}};loadThreadSentenceData();},[selectedThread]);const handleSendMessage=async message=>{// 선택된 스레드가 없으면 기본 스레드 생성\nlet currentThread=selectedThread;if(!currentThread){// 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\nconst proceedThread=proceedThreads[0];if(proceedThread){currentThread=proceedThread;setSelectedThread(currentThread);}else{// 기본 스레드 생성 (UI용)\nconst defaultThread={id:\"proceed_default_\".concat(personaId),persona_id:personaId,thread_type:'proceed',content:proceedContent,messages:[{role:'assistant',content:proceedContent,timestamp:new Date().toISOString(),persona_id:personaId,persona_name:personaName}],created_at:new Date().toISOString(),updated_at:new Date().toISOString()};currentThread=defaultThread;setSelectedThread(currentThread);// 로컬 스레드 목록에도 추가\nconst updatedThreads=[...localThreads,defaultThread];setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);}}// 1. 사용자 메시지를 즉시 UI에 추가\nconst userMessage={role:'user',content:message,timestamp:new Date().toISOString()};const updatedThread=_objectSpread(_objectSpread({},currentThread),{},{messages:[...currentThread.messages,userMessage],updated_at:new Date().toISOString()});setSelectedThread(updatedThread);// 2. 로딩 상태 시작\nsetIsLoading(true);try{// 3. 백엔드 API 호출\nconsole.log('=== ProceedView API 호출 시작 ===');console.log('요청 데이터:',{thread_id:currentThread.id,user_message:message});const response=await chatApi.chatWithThread({thread_id:currentThread.id,user_message:message});console.log('=== API 응답 받음 ===');console.log('전체 응답:',response);console.log('response.data:',response.data);console.log('response.error:',response.error);if(response.data){console.log('응답 데이터 구조 분석:');console.log('- thread_id:',response.data.thread_id);console.log('- user_message:',response.data.user_message);console.log('- response:',response.data.response);console.log('- thread_updated_at:',response.data.thread_updated_at);if(response.data.response){console.log('응답 메시지 구조 분석:');console.log('- role:',response.data.response.role);console.log('- content:',response.data.response.content);console.log('- timestamp:',response.data.response.timestamp);console.log('- persona_id:',response.data.response.persona_id);console.log('- persona_name:',response.data.response.persona_name);}}if(response.data&&response.data.response){// 4. AI 응답을 UI에 추가\nconst assistantMessage={role:'assistant',content:response.data.response.content,timestamp:response.data.response.timestamp,persona_id:response.data.response.persona_id||personaId,persona_name:response.data.response.persona_name||personaName};console.log('생성된 assistant 메시지:',assistantMessage);const finalUpdatedThread=_objectSpread(_objectSpread({},updatedThread),{},{messages:[...updatedThread.messages,assistantMessage],updated_at:response.data.thread_updated_at||new Date().toISOString()});console.log('최종 업데이트된 스레드:',finalUpdatedThread);console.log('스레드 메시지 개수:',finalUpdatedThread.messages.length);setSelectedThread(finalUpdatedThread);// 5. 로컬 스레드 목록도 업데이트\nconst updatedThreads=localThreads.map(t=>t.id===currentThread.id?finalUpdatedThread:t);setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);console.log('=== UI 업데이트 완료 ===');setIsLoading(false);return true;}else{console.error('나아가기 채팅 응답 오류:',response);setIsLoading(false);return false;}}catch(error){console.error('나아가기 채팅 오류:',error);setIsLoading(false);return false;}};const formatTime=timestamp=>{return new Date(timestamp).toLocaleTimeString('ko-KR',{hour:'2-digit',minute:'2-digit'});};// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);showCopyToast('복사 실패');}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 관련 함수들\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};const handleEditMessage=async(messageIndex,newContent)=>{console.log('=== handleEditMessage 호출 ===');console.log('messageIndex:',messageIndex);console.log('newContent:',newContent);console.log('selectedThread:',selectedThread);console.log('selectedThread.messages:',selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages);if(!(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id)){console.log('스레드 ID가 없습니다');showCopyToast('스레드가 선택되지 않았습니다');return false;}console.log('스레드 ID:',selectedThread.id);console.log('요청할 API 정보:',{threadId:selectedThread.id,messageIndex,newContent:newContent.substring(0,100)+'...'});try{var _response$data;setIsLoading(true);// 백엔드 API 호출\nconst response=await chatApi.editThreadMessage(selectedThread.id,messageIndex,newContent);console.log('API 응답:',response);if((_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.success&&response.data.updated_thread){console.log('수정 성공, 스레드 업데이트 중...');// 스레드 업데이트\nsetSelectedThread(response.data.updated_thread);// 로컬 스레드 목록도 업데이트\nconst updatedThreads=localThreads.map(t=>t.id===selectedThread.id?response.data.updated_thread:t);setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);setEditingMessageIndex(null);showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');setIsLoading(false);return true;}else{console.error('메시지 수정 실패:',response.error);showCopyToast('메시지 수정에 실패했습니다');setIsLoading(false);return false;}}catch(error){console.error('메시지 수정 오류:',error);showCopyToast('메시지 수정 중 오류가 발생했습니다');setIsLoading(false);return false;}};const handleCancelEdit=()=>{setEditingMessageIndex(null);};// 문장 선택 관련 함수들\nconst handleToggleSelect=sentenceId=>{setSelectedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(sentenceId)){newSet.delete(sentenceId);}else{newSet.add(sentenceId);}return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{try{// 로컬 상태에서 메모 업데이트 (즉시 반영)\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));// 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\nsentenceApi.createOrUpdateMemo({sentence_id:sentenceId,content:memo}).catch(error=>{console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):',error);});}catch(error){console.error('메모 저장 실패:',error);showCopyToast('메모 저장에 실패했습니다');}};const handleDeleteMemo=async sentenceId=>{try{// 로컬 상태에서 메모 삭제\nsetMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});setHighlightedSentences(prev=>{const newSet=new Set(prev);newSet.delete(sentenceId);return newSet;});// 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\nsentenceApi.deleteMemo(sentenceId).catch(error=>{console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):',error);});showCopyToast('메모가 삭제되었습니다');}catch(error){console.error('메모 삭제 실패:',error);showCopyToast('메모 삭제에 실패했습니다');}};// 액션 핸들러들\nconst handleSunAction=async messageContent=>{// 전달받은 메시지 내용을 해석 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 해석 스레드에 저장\nconst response=await chatApi.saveCurrentAsInterpretation(personaId,messageContent);if(response.data){// 스레드 새로고침\nif(onRefreshThreads){onRefreshThreads();}showCopyToast('메시지가 해석 스레드에 저장되었습니다');}else{showCopyToast('해석 저장에 실패했습니다');}}catch(error){console.error('해석 저장 중 오류:',error);showCopyToast('해석 저장에 실패했습니다');}};const handlePersonAction=async messageContent=>{// 전달받은 메시지 내용을 나아가기 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\nconst response=await chatApi.saveCurrentAsProceed(personaId,messageContent);if(response.data){// 스레드 새로고침\nhandleRefreshThreads();showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');}else{showCopyToast('나아가기 저장에 실패했습니다');}}catch(error){console.error('나아가기 저장 중 오류:',error);showCopyToast('나아가기 저장에 실패했습니다');}};const handleDocumentAction=async messageContent=>{// 전달받은 메시지 내용을 문장 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 문장 스레드에 저장\nconst response=await chatApi.saveCurrentAsSentence(personaId,messageContent);if(response.data){// 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\nif(onThreadUpdate){try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){onThreadUpdate(threadsResponse.data);}}catch(error){console.error('스레드 새로고침 실패:',error);}}showCopyToast('메시지가 문장 스레드에 저장되었습니다');}else{showCopyToast('문장 저장에 실패했습니다');}}catch(error){console.error('문장 저장 중 오류:',error);showCopyToast('문장 저장에 실패했습니다');}};// 스레드 새로고침 함수\nconst handleRefreshThreads=async()=>{try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){const updatedThreads=threadsResponse.data;setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);// 새로 생성된 나아가기 스레드 선택\nconst newProceedThread=updatedThreads.filter(t=>t.thread_type==='proceed').sort((a,b)=>new Date(b.created_at).getTime()-new Date(a.created_at).getTime())[0];if(newProceedThread&&(!selectedThread||newProceedThread.id!==selectedThread.id)){setSelectedThread(newProceedThread);showCopyToast('새로운 나아가기가 생성되었습니다');}}}catch(error){console.error('스레드 새로고침 실패:',error);}};// FloatingActionButton 메뉴 액션 처리\nconst handleMenuAction=async action=>{const selectedIds=Array.from(selectedSentences);const selectedTexts=selectedIds.map(id=>{// sentenceId에서 실제 문장 텍스트를 찾아내는 로직\nconst[timestamp,messageIndex,sentenceIndex]=id.split('_');const message=selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n\\.]+/).map(s=>s.trim()).filter(s=>s.length>0);return sentences[parseInt(sentenceIndex)]||'';}return'';}).filter(text=>text.length>0);switch(action){case'sendToInput':if(messageInputRef.current&&selectedTexts.length>0){const formattedText=selectedTexts.map(text=>\"\\\"\".concat(text,\"\\\"\")).join(', ');messageInputRef.current.insertText(formattedText);}break;case'saveToVault':try{await sentenceApi.saveSentencesToVault({sentences:selectedTexts,source_message_id:\"proceed_\".concat(personaId),// 페르소나 ID 포함\nsource_conversation_id:selectedThread===null||selectedThread===void 0?void 0:selectedThread.id,tags:['proceed',personaId]});selectedIds.forEach(id=>{setHighlightedSentences(prev=>new Set(prev).add(id));});showCopyToast('저장고에 저장되었습니다');}catch(error){console.error('저장고 저장 실패:',error);showCopyToast('저장고 저장에 실패했습니다');}break;case'addMemo':if(selectedIds.length>0){// 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\nconst sortedIds=selectedIds.sort((a,b)=>{const[timestampA,,sentenceIndexA]=a.split('_');const[timestampB,,sentenceIndexB]=b.split('_');if(timestampA!==timestampB){return new Date(timestampA).getTime()-new Date(timestampB).getTime();}return parseInt(sentenceIndexA)-parseInt(sentenceIndexB);});const bottomSentenceId=sortedIds[sortedIds.length-1];// 가장 아래 문장에만 메모 생성 (즉시 반영)\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[bottomSentenceId]:''}));// 모든 선택된 문장에 하이라이트 추가\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.add(id));return newSet;});// 백엔드에 메모 저장 (가장 아래 문장만)\nsentenceApi.createOrUpdateMemo({sentence_id:bottomSentenceId,content:''}).catch(error=>{console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):',error);});// 백엔드에 모든 선택된 문장의 하이라이트 저장\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){selectedIds.forEach(id=>{sentenceApi.createHighlight({sentence_id:id,thread_id:selectedThread.id,thread_type:'proceed'}).catch(error=>{console.warn('백엔드 하이라이트 저장 실패:',error);});});}console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');}break;case'highlight':// 모든 선택된 문장에 하이라이트 적용/제거\nconsole.log('선택된 문장들:',selectedIds);// 현재 하이라이트된 문장들과 선택된 문장들을 비교\nconst currentlyHighlighted=selectedIds.filter(id=>highlightedSentences.has(id));const notHighlighted=selectedIds.filter(id=>!highlightedSentences.has(id));console.log('현재 하이라이트된 문장들:',currentlyHighlighted);console.log('아직 하이라이트되지 않은 문장들:',notHighlighted);// 하이라이트 상태를 한 번에 업데이트\nif(currentlyHighlighted.length>0){// 일부가 하이라이트되어 있으면 모두 제거\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.delete(id));return newSet;});// 백엔드에서 모든 하이라이트 삭제\nselectedIds.forEach(id=>{sentenceApi.deleteHighlight(id).catch(error=>{console.warn('백엔드 하이라이트 삭제 실패:',error);});});console.log('모든 선택된 문장의 하이라이트 제거');}else{// 모두 하이라이트되지 않았으면 모두 추가\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.add(id));return newSet;});// 백엔드에 모든 하이라이트 저장\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){selectedIds.forEach(id=>{sentenceApi.createHighlight({sentence_id:id,thread_id:selectedThread.id,thread_type:'proceed'}).catch(error=>{console.warn('백엔드 하이라이트 저장 실패:',error);});});}console.log('모든 선택된 문장에 하이라이트 추가');}break;case'copy':if(selectedTexts.length>0){await copyToClipboard(selectedTexts.join(' '),'선택된 문장이 복사되었습니다');}break;}// 모든 선택 해제\nsetSelectedSentences(new Set());};// 문장선택 모드 토글\nconst handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[!selectedThread||selectedThread.messages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'24px',marginBottom:'8px'},children:\"\\uD83C\\uDFAF\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'4px'},children:[personaName,\"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]})]}):selectedThread.messages.map((message,index)=>message.role==='user'?/*#__PURE__*/_jsx(Message,{message:_objectSpread(_objectSpread({},message),{},{persona_id:undefined,persona_name:undefined}),personas:{},showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onEdit:()=>handleStartEdit(index),isEditing:editingMessageIndex===index,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit},\"proceed_\".concat(index)):/*#__PURE__*/_jsx(SelectableMessage,{message:_objectSpread(_objectSpread({},message),{},{persona_id:'current_persona',persona_name:personaName}),personas:{current_persona:{name:personaName,description:'',color:'#ff9800',prompt:'',category:'',subcategory:''}},selectedSentences:isSentenceModeActive?selectedSentences:new Set(),highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:isSentenceModeActive?handleToggleSelect:()=>{},onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo,showSentenceSelector:isSentenceModeActive,showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onSunAction:messageContent=>handleSunAction(messageContent),onPersonAction:messageContent=>handlePersonAction(messageContent),onDocumentAction:messageContent=>handleDocumentAction(messageContent)},\"proceed_\".concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:personaName,personaColor:\"#ff9800\",customMessage:\"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:handleSendMessage,disabled:isLoading,placeholder:\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\"),onToggleSentenceMode:handleToggleSentenceMode,isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,currentInterpretation:(selectedThread===null||selectedThread===void 0?void 0:selectedThread.content)||proceedContent,personaId:personaId,onGenerateProceed:messageContent=>handlePersonAction(messageContent),onGenerateSentence:messageContent=>handleDocumentAction(messageContent),currentChatMessages:selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages,onRefreshThreads:handleRefreshThreads})})]}),/*#__PURE__*/_jsx(FloatingActionButton,{show:isSentenceModeActive&&selectedSentences.size>0,onMenuAction:handleMenuAction,personaId:personaId,currentInterpretation:proceedContent})]});};export default ProceedView;","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","ChatSection","_templateObject2","ChatMessages","_templateObject3","ChatInputSection","_templateObject4","EmptyChat","_templateObject5","Toast","_templateObject6","props","show","ProceedView","_ref","personaId","personaName","proceedContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","onRefreshThreads","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","proceedThreads","filter","thread","thread_type","firstProceedThread","find","t","current","scrollTop","scrollHeight","messages","loadThreadSentenceData","id","data","getThreadSentenceData","highlights","error","console","handleSendMessage","message","currentThread","proceedThread","defaultThread","concat","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","_objectSpread","log","thread_id","user_message","response","chatWithThread","thread_updated_at","assistantMessage","finalUpdatedThread","length","map","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","threadId","substring","_response$data","editThreadMessage","success","updated_thread","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleSunAction","saveCurrentAsInterpretation","handlePersonAction","saveCurrentAsProceed","handleRefreshThreads","handleDocumentAction","saveCurrentAsSentence","threadsResponse","getPersonaThreads","newProceedThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","Array","from","selectedTexts","sentenceIndex","split","m","sentences","s","trim","parseInt","formattedText","join","insertText","saveSentencesToVault","source_message_id","source_conversation_id","tags","forEach","sortedIds","timestampA","sentenceIndexA","timestampB","sentenceIndexB","bottomSentenceId","createHighlight","currentlyHighlighted","notHighlighted","deleteHighlight","handleToggleSentenceMode","children","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/ProceedView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface ProceedViewProps {\n  personaId: string;\n  personaName: string;\n  proceedContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'sentence') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n  onRefreshThreads?: () => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst ProceedView: React.FC<ProceedViewProps> = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 나아가기 타입의 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 나아가기 스레드를 자동 선택\n      const firstProceedThread = threads.find(t => t.thread_type === 'proceed');\n      if (firstProceedThread && !selectedThread) {\n        setSelectedThread(firstProceedThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트)\n  useEffect(() => {\n    const loadThreadSentenceData = async () => {\n      if (!selectedThread?.id) return;\n      \n      try {\n        const data = await sentenceApi.getThreadSentenceData(selectedThread.id);\n        \n        setMemos(data.memos);\n        setHighlightedSentences(new Set(data.highlights));\n      } catch (error) {\n        console.error('스레드 문장 데이터 로딩 실패:', error);\n      }\n    };\n\n    loadThreadSentenceData();\n  }, [selectedThread]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      console.log('=== ProceedView API 호출 시작 ===');\n      console.log('요청 데이터:', { thread_id: currentThread.id, user_message: message });\n      \n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      console.log('=== API 응답 받음 ===');\n      console.log('전체 응답:', response);\n      console.log('response.data:', response.data);\n      console.log('response.error:', response.error);\n\n      if (response.data) {\n        console.log('응답 데이터 구조 분석:');\n        console.log('- thread_id:', response.data.thread_id);\n        console.log('- user_message:', response.data.user_message);\n        console.log('- response:', response.data.response);\n        console.log('- thread_updated_at:', response.data.thread_updated_at);\n        \n        if (response.data.response) {\n          console.log('응답 메시지 구조 분석:');\n          console.log('- role:', response.data.response.role);\n          console.log('- content:', response.data.response.content);\n          console.log('- timestamp:', response.data.response.timestamp);\n          console.log('- persona_id:', response.data.response.persona_id);\n          console.log('- persona_name:', response.data.response.persona_name);\n        }\n      }\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        console.log('생성된 assistant 메시지:', assistantMessage);\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        console.log('최종 업데이트된 스레드:', finalUpdatedThread);\n        console.log('스레드 메시지 개수:', finalUpdatedThread.messages.length);\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        console.log('=== UI 업데이트 완료 ===');\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('나아가기 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    console.log('=== handleEditMessage 호출 ===');\n    console.log('messageIndex:', messageIndex);\n    console.log('newContent:', newContent);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread?.messages);\n    \n    if (!selectedThread?.id) {\n      console.log('스레드 ID가 없습니다');\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n\n    console.log('스레드 ID:', selectedThread.id);\n    console.log('요청할 API 정보:', {\n      threadId: selectedThread.id,\n      messageIndex,\n      newContent: newContent.substring(0, 100) + '...'\n    });\n\n    try {\n      setIsLoading(true);\n      \n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      \n      console.log('API 응답:', response);\n      \n      if (response.data?.success && response.data.updated_thread) {\n        console.log('수정 성공, 스레드 업데이트 중...');\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n        \n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id ? response.data!.updated_thread! : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n    setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n    return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n    setMemos(prev => {\n      const newMemos = { ...prev };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n      \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 나아가기 스레드 선택\n              const newProceedThread = updatedThreads\n                .filter(t => t.thread_type === 'proceed')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n                setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `proceed_${personaId}`, // 페르소나 ID 포함\n            source_conversation_id: selectedThread?.id,\n            tags: ['proceed', personaId]\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          \n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>🎯</div>\n              <div>나아가기에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#ff9800',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={(messageContent) => handleSunAction(messageContent)}\n                  onPersonAction={(messageContent) => handlePersonAction(messageContent)}\n                  onDocumentAction={(messageContent) => handleDocumentAction(messageContent)}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#ff9800\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 나아가기에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || proceedContent}\n            personaId={personaId}\n            onGenerateProceed={(messageContent: string) => handlePersonAction(messageContent)}\n            onGenerateSentence={(messageContent: string) => handleDocumentAction(messageContent)}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={proceedContent}\n      />\n    </Container>\n  );\n};\n\nexport default ProceedView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}