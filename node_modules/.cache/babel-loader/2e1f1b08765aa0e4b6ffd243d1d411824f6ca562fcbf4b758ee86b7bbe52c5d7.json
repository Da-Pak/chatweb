{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\verbalization\\\\components\\\\VerbalizationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n_c2 = HeaderSection;\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n_c3 = HeaderTitle;\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n_c4 = NewThreadButton;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c5 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c6 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c7 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n_c8 = EmptyChat;\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c9 = EmptyIcon;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c0 = Toast;\nconst VerbalizationView = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState([]);\n\n  // selectedThread가 변경될 때 localMessages 동기화\n  useEffect(() => {\n    if (selectedThread) {\n      setLocalMessages(selectedThread.messages || []);\n    } else {\n      setLocalMessages([]);\n    }\n  }, [selectedThread]);\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async message => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message.trim(),\n      timestamp: new Date().toISOString()\n    };\n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\n      const response = await chatApi.chatWithVerbalization(message, selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id // 스레드가 없으면 undefined 전달\n      );\n      console.log('API 응답 전체:', response);\n      console.log('응답 데이터:', response.data);\n      console.log('응답 에러:', response.error);\n      if (response.data) {\n        console.log('메시지 전송 성공');\n        console.log('응답 구조:', {\n          thread_id: response.data.thread_id,\n          user_message: response.data.user_message,\n          response: response.data.response,\n          thread_updated_at: response.data.thread_updated_at\n        });\n\n        // 3단계: AI 응답을 로컬 메시지에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_name: '언어화 도우미'\n        };\n        setLocalMessages(prev => [...prev, assistantMessage]);\n\n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n        // 스레드 목록과 선택된 스레드를 새로고침\n        await onThreadUpdate();\n\n        // 새로 생성된 스레드가 선택되도록 추가 처리\n        if (!selectedThread && response.data.thread_id) {\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\n          setTimeout(async () => {\n            await onThreadUpdate();\n          }, 100);\n        }\n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n\n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n\n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n\n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n\n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\n  const handleSunAction = () => {\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\n  };\n  const handlePersonAction = () => {\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\n  };\n  const handleDocumentAction = () => {\n    if (selectedThread && selectedThread.messages.length > 0) {\n      const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n      if (lastAssistantMessage) {\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\n      } else {\n        showCopyToast('복사할 응답이 없습니다');\n      }\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderSection, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderTitle, {\n        children: \"\\uC5B8\\uC5B4\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 330,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewThreadButton, {\n        onClick: handleCreateNewThread,\n        children: \"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 331,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 329,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [localMessages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(EmptyIcon, {\n            children: \"\\uD83D\\uDCAD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 341,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 343,\n                columnNumber: 59\n              }, this), \"\\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 343,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 345,\n              columnNumber: 23\n            }, this), \"\\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 347,\n              columnNumber: 23\n            }, this), \"\\uC5B4\\uB5A4 \\uAC83\\uC774\\uB4E0 \\uC88B\\uC2B5\\uB2C8\\uB2E4. \\uC9C0\\uAE08 \\uB290\\uB07C\\uACE0 \\uC788\\uB294 \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uD3B8\\uC548\\uD558\\uAC8C \\uB9D0\\uC500\\uD574 \\uC8FC\\uC138\\uC694.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 342,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 340,\n          columnNumber: 13\n        }, this) : localMessages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            role: message.role,\n            content: message.content,\n            timestamp: message.timestamp,\n            persona_id: message.role === 'assistant' ? 'verbalization' : undefined,\n            persona_name: message.role === 'assistant' ? '언어화 도우미' : undefined\n          },\n          personas: {} // 언어화에서는 페르소나 정보 불필요\n          ,\n          showActionButtons: false,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: message.role === 'user' ? () => handleStartEdit(index) : undefined,\n          onEditSave: message.role === 'user' ? async newContent => {\n            const success = await handleEditMessage(index, newContent);\n            if (success) {\n              setEditingMessageIndex(null);\n            }\n            return success;\n          } : undefined,\n          onEditCancel: () => handleCancelEdit(),\n          isEditing: editingMessageIndex === index,\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 353,\n          columnNumber: 15\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"\\uC5B8\\uC5B4\\uD654 \\uB3C4\\uC6B0\\uBBF8\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 384,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 338,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: \"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368 \\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 393,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 392,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 403,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 327,\n    columnNumber: 5\n  }, this);\n};\n_s(VerbalizationView, \"d6Z/XOsZMF6zLhs5ZyUf43QsVQk=\");\n_c1 = VerbalizationView;\nexport default VerbalizationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"HeaderSection\");\n$RefreshReg$(_c3, \"HeaderTitle\");\n$RefreshReg$(_c4, \"NewThreadButton\");\n$RefreshReg$(_c5, \"ChatSection\");\n$RefreshReg$(_c6, \"ChatMessages\");\n$RefreshReg$(_c7, \"ChatInputSection\");\n$RefreshReg$(_c8, \"EmptyChat\");\n$RefreshReg$(_c9, \"EmptyIcon\");\n$RefreshReg$(_c0, \"Toast\");\n$RefreshReg$(_c1, \"VerbalizationView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","chatApi","MessageInput","Message","LoadingMessage","jsxDEV","_jsxDEV","Container","div","_c","HeaderSection","_c2","HeaderTitle","h2","_c3","NewThreadButton","button","_c4","ChatSection","_c5","ChatMessages","_c6","ChatInputSection","_c7","EmptyChat","_c8","EmptyIcon","_c9","Toast","props","show","_c0","VerbalizationView","selectedThread","threads","onThreadUpdate","onCreateNewThread","_s","isLoading","setIsLoading","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","localMessages","setLocalMessages","messages","current","scrollTop","scrollHeight","handleSendMessage","message","trim","userMessage","role","content","timestamp","Date","toISOString","prev","console","log","response","chatWithVerbalization","id","data","error","thread_id","user_message","thread_updated_at","assistantMessage","persona_name","setTimeout","slice","showCopyToast","handleCreateNewThread","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleSunAction","handlePersonAction","proceedPrompt","insertText","handleDocumentAction","length","lastAssistantMessage","reverse","find","msg","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","map","index","persona_id","undefined","personas","showActionButtons","onCopy","onEdit","onEditSave","success","onEditCancel","isEditing","onSunAction","onPersonAction","onDocumentAction","personaName","personaColor","onSendMessage","disabled","placeholder","_c1","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/verbalization/components/VerbalizationView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TrainingThread } from '../../shared/types';\r\nimport { chatApi } from '../../shared/api/chatApi';\r\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\r\nimport Message from '../../shared/components/Message';\r\nimport LoadingMessage from '../../shared/components/LoadingMessage';\r\n\r\ninterface VerbalizationViewProps {\r\n  selectedThread: TrainingThread | null;\r\n  threads: TrainingThread[];\r\n  onThreadUpdate: () => void;\r\n  onCreateNewThread: () => Promise<void>;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background: white;\r\n`;\r\n\r\nconst HeaderSection = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background: #f8f9fa;\r\n`;\r\n\r\nconst HeaderTitle = styled.h2`\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  color: #343a40;\r\n  margin: 0;\r\n`;\r\n\r\nconst NewThreadButton = styled.button`\r\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 10px 20px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\r\n\r\n  &:hover {\r\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\r\n  }\r\n\r\n  &:active {\r\n    transform: translateY(0);\r\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\r\n  }\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n`;\r\n\r\nconst ChatInputSection = styled.div`\r\n  padding: 16px 20px;\r\n  border-top: none;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst EmptyChat = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #999;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  line-height: 1.6;\r\n`;\r\n\r\nconst EmptyIcon = styled.div`\r\n  font-size: 48px;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\n// 토스트 스타일 컴포넌트 추가\r\nconst Toast = styled.div<{ show: boolean }>`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  background: #6c757d;\r\n  color: white;\r\n  padding: 12px 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\r\n  transition: transform 0.3s ease;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst VerbalizationView: React.FC<VerbalizationViewProps> = ({\r\n  selectedThread,\r\n  threads,\r\n  onThreadUpdate,\r\n  onCreateNewThread\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\r\n  const messageInputRef = useRef<MessageInputRef>(null);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\r\n  \r\n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\r\n  const [localMessages, setLocalMessages] = useState<Array<{\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: string;\r\n    persona_name?: string;\r\n  }>>([]);\r\n\r\n  // selectedThread가 변경될 때 localMessages 동기화\r\n  useEffect(() => {\r\n    if (selectedThread) {\r\n      setLocalMessages(selectedThread.messages || []);\r\n    } else {\r\n      setLocalMessages([]);\r\n    }\r\n  }, [selectedThread]);\r\n\r\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\r\n  useEffect(() => {\r\n    if (chatMessagesRef.current) {\r\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\r\n    }\r\n  }, [localMessages, isLoading]);\r\n\r\n  // 메시지 전송 처리\r\n  const handleSendMessage = async (message: string): Promise<boolean> => {\r\n    if (!message.trim() || isLoading) return false;\r\n\r\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\r\n    const userMessage = {\r\n      role: 'user' as const,\r\n      content: message.trim(),\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n    \r\n    setLocalMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      console.log('=== 언어화 메시지 전송 ===');\r\n      console.log('selectedThread:', selectedThread);\r\n      console.log('message:', message);\r\n\r\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\r\n      const response = await chatApi.chatWithVerbalization(\r\n        message,\r\n        selectedThread?.id // 스레드가 없으면 undefined 전달\r\n      );\r\n\r\n      console.log('API 응답 전체:', response);\r\n      console.log('응답 데이터:', response.data);\r\n      console.log('응답 에러:', response.error);\r\n\r\n      if (response.data) {\r\n        console.log('메시지 전송 성공');\r\n        console.log('응답 구조:', {\r\n          thread_id: response.data.thread_id,\r\n          user_message: response.data.user_message,\r\n          response: response.data.response,\r\n          thread_updated_at: response.data.thread_updated_at\r\n        });\r\n        \r\n        // 3단계: AI 응답을 로컬 메시지에 추가\r\n        const assistantMessage = {\r\n          role: 'assistant' as const,\r\n          content: response.data.response.content,\r\n          timestamp: response.data.response.timestamp,\r\n          persona_name: '언어화 도우미',\r\n        };\r\n        \r\n        setLocalMessages(prev => [...prev, assistantMessage]);\r\n        \r\n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\r\n        // 스레드 목록과 선택된 스레드를 새로고침\r\n        await onThreadUpdate();\r\n        \r\n        // 새로 생성된 스레드가 선택되도록 추가 처리\r\n        if (!selectedThread && response.data.thread_id) {\r\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\r\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\r\n          setTimeout(async () => {\r\n            await onThreadUpdate();\r\n          }, 100);\r\n        }\r\n        \r\n        return true;\r\n      } else {\r\n        // 실패 시 사용자 메시지 제거\r\n        setLocalMessages(prev => prev.slice(0, -1));\r\n        console.error('메시지 전송 실패:', response.error);\r\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      // 오류 시 사용자 메시지 제거\r\n      setLocalMessages(prev => prev.slice(0, -1));\r\n      console.error('메시지 전송 오류:', error);\r\n      showCopyToast(`네트워크 오류: ${error}`);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 새 스레드 생성 처리\r\n  const handleCreateNewThread = async () => {\r\n    try {\r\n      console.log('=== 새 스레드 생성 시작 ===');\r\n      \r\n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\r\n      setLocalMessages([]);\r\n      \r\n      // 2단계: 새 스레드 생성\r\n      console.log('새 스레드 생성 중...');\r\n      \r\n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\r\n      await onCreateNewThread();\r\n      \r\n      // 4단계: 성공 메시지 표시\r\n      showCopyToast('새 대화가 시작되었습니다!');\r\n      \r\n      console.log('새 스레드 생성 및 선택 완료');\r\n    } catch (error) {\r\n      console.error('새 스레드 생성 오류:', error);\r\n      showCopyToast('새 대화 생성에 실패했습니다.');\r\n    }\r\n  };\r\n\r\n  // 토스트 메시지 표시 함수\r\n  const showCopyToast = (message: string) => {\r\n    setToastMessage(message);\r\n    setShowToast(true);\r\n    setTimeout(() => setShowToast(false), 3000);\r\n  };\r\n\r\n  // 텍스트 복사 유틸리티 함수\r\n  const copyToClipboard = async (text: string, successMessage: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      showCopyToast(successMessage);\r\n    } catch (error) {\r\n      console.error('복사 실패:', error);\r\n      showCopyToast('복사 실패');\r\n    }\r\n  };\r\n\r\n  // 메시지 복사 기능\r\n  const handleCopyMessage = async (messageContent: string) => {\r\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\r\n  };\r\n\r\n  // 메시지 수정 관련 함수들\r\n  const handleStartEdit = (messageIndex: number) => {\r\n    setEditingMessageIndex(messageIndex);\r\n  };\r\n\r\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\r\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\r\n    // 필요시 추후 구현\r\n    return false;\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingMessageIndex(null);\r\n  };\r\n\r\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\r\n  const handleSunAction = () => {\r\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\r\n  };\r\n\r\n  const handlePersonAction = () => {\r\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\r\n    if (messageInputRef.current) {\r\n      messageInputRef.current.insertText(proceedPrompt);\r\n    }\r\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\r\n  };\r\n\r\n  const handleDocumentAction = () => {\r\n    if (selectedThread && selectedThread.messages.length > 0) {\r\n      const lastAssistantMessage = selectedThread.messages\r\n        .slice()\r\n        .reverse()\r\n        .find(msg => msg.role === 'assistant');\r\n      \r\n      if (lastAssistantMessage) {\r\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\r\n      } else {\r\n        showCopyToast('복사할 응답이 없습니다');\r\n      }\r\n    }\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      {/* 헤더 */}\r\n      <HeaderSection>\r\n        <HeaderTitle>언어화</HeaderTitle>\r\n        <NewThreadButton onClick={handleCreateNewThread}>\r\n          새 대화 시작\r\n        </NewThreadButton>\r\n      </HeaderSection>\r\n\r\n      {/* 채팅 영역 */}\r\n      <ChatSection>\r\n        <ChatMessages ref={chatMessagesRef}>\r\n          {localMessages.length === 0 ? (\r\n            <EmptyChat>\r\n              <EmptyIcon>💭</EmptyIcon>\r\n              <div>\r\n                <strong>언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써<br />\r\n                그것을 인식하고 만들어 가는 것입니다.</strong>\r\n                <br /><br />\r\n                자유롭게 당신의 생각을 말로 내뱉으세요!\r\n                <br /><br />\r\n                어떤 것이든 좋습니다. 지금 느끼고 있는 감정이나 생각을 편안하게 말씀해 주세요.\r\n              </div>\r\n            </EmptyChat>\r\n          ) : (\r\n            localMessages.map((message, index) => (\r\n              <Message\r\n                key={index}\r\n                message={{\r\n                  role: message.role,\r\n                  content: message.content,\r\n                  timestamp: message.timestamp,\r\n                  persona_id: message.role === 'assistant' ? 'verbalization' : undefined,\r\n                  persona_name: message.role === 'assistant' ? '언어화 도우미' : undefined,\r\n                }}\r\n                personas={{}} // 언어화에서는 페르소나 정보 불필요\r\n                showActionButtons={false}\r\n                onCopy={() => handleCopyMessage(message.content)}\r\n                onEdit={message.role === 'user' ? () => handleStartEdit(index) : undefined}\r\n                onEditSave={message.role === 'user' ? async (newContent) => {\r\n                  const success = await handleEditMessage(index, newContent);\r\n                  if (success) {\r\n                    setEditingMessageIndex(null);\r\n                  }\r\n                  return success;\r\n                } : undefined}\r\n                onEditCancel={() => handleCancelEdit()}\r\n                isEditing={editingMessageIndex === index}\r\n                onSunAction={handleSunAction}\r\n                onPersonAction={handlePersonAction}\r\n                onDocumentAction={handleDocumentAction}\r\n              />\r\n            ))\r\n          )}\r\n          \r\n          {/* 로딩 메시지 */}\r\n          {isLoading && (\r\n            <LoadingMessage \r\n              personaName=\"언어화 도우미\"\r\n              personaColor=\"#666\"\r\n            />\r\n          )}\r\n        </ChatMessages>\r\n\r\n        {/* 입력창 */}\r\n        <ChatInputSection>\r\n          <MessageInput\r\n            ref={messageInputRef}\r\n            onSendMessage={handleSendMessage}\r\n            disabled={isLoading}\r\n            placeholder=\"언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써 그것을 인식하고 만들어 가는 것입니다. 자유롭게 당신의 생각을 말로 내뱉으세요!\"\r\n          />\r\n        </ChatInputSection>\r\n      </ChatSection>\r\n\r\n      {/* 토스트 메시지 */}\r\n      <Toast show={showToast}>\r\n        {toastMessage}\r\n      </Toast>\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default VerbalizationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}