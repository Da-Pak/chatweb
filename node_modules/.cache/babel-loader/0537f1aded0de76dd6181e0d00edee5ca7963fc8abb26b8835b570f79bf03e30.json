{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\MessageInput.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport { InputContainer, InputWrapper, MessageInputContainer, MessageInput as StyledMessageInput, SendButton, SentenceModeButton } from '../styles/GlobalStyle';\nimport { quickPhraseApi } from '../api/quickPhraseApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageInput = /*#__PURE__*/_s(/*#__PURE__*/forwardRef(_c = _s(({\n  onSendMessage,\n  disabled = false,\n  placeholder = \"메시지를 입력하세요...\",\n  onToggleSentenceMode,\n  isSentenceModeActive = false,\n  hasSelectedSentences = false\n}, ref) => {\n  _s();\n  const [message, setMessage] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const [quickPhrases, setQuickPhrases] = useState([]);\n  const textareaRef = useRef(null);\n\n  // ref를 통해 외부에서 텍스트 삽입 가능하도록 함\n  useImperativeHandle(ref, () => ({\n    insertText: text => {\n      setMessage(prev => prev + text);\n      // 텍스트 삽입 후 높이 조절\n      setTimeout(() => {\n        if (textareaRef.current) {\n          textareaRef.current.style.height = 'auto';\n          textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n          textareaRef.current.focus();\n        }\n      }, 0);\n    }\n  }));\n  const handleSubmit = async () => {\n    if (!message.trim() || disabled || isSending) return;\n    setIsSending(true);\n    const success = await onSendMessage(message.trim());\n    if (success) {\n      setMessage('');\n      // 텍스트영역 높이 초기화\n      if (textareaRef.current) {\n        textareaRef.current.style.height = 'auto';\n      }\n    }\n    setIsSending(false);\n  };\n  const handleKeyPress = e => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n  const handleChange = e => {\n    setMessage(e.target.value);\n\n    // 자동 높이 조절\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  };\n\n  // 컴포넌트가 마운트될 때 포커스 및 자주쓰는 문장 로드\n  useEffect(() => {\n    if (textareaRef.current && !disabled) {\n      textareaRef.current.focus();\n    }\n    loadQuickPhrases();\n  }, [disabled]);\n\n  // 자주쓰는 문장 로드\n  const loadQuickPhrases = async () => {\n    try {\n      const phrases = await quickPhraseApi.getQuickPhrases();\n      setQuickPhrases(phrases);\n    } catch (error) {\n      console.error('자주쓰는 문장 로드 실패:', error);\n    }\n  };\n\n  // 자주쓰는 문장 선택 시 입력창에 삽입\n  const handlePhraseSelect = text => {\n    setMessage(prev => prev + text);\n    // 텍스트 삽입 후 높이 조절\n    setTimeout(() => {\n      if (textareaRef.current) {\n        textareaRef.current.style.height = 'auto';\n        textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n        textareaRef.current.focus();\n      }\n    }, 0);\n  };\n  const isButtonDisabled = disabled || isSending || !message.trim();\n  return /*#__PURE__*/_jsxDEV(InputContainer, {\n    children: /*#__PURE__*/_jsxDEV(InputWrapper, {\n      children: [/*#__PURE__*/_jsxDEV(MessageInputContainer, {\n        children: [/*#__PURE__*/_jsxDEV(StyledMessageInput, {\n          ref: textareaRef,\n          value: message,\n          onChange: handleChange,\n          onKeyPress: handleKeyPress,\n          placeholder: placeholder,\n          disabled: disabled || isSending,\n          rows: 1\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 126,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(SendButton, {\n          onClick: handleSubmit,\n          disabled: isButtonDisabled,\n          title: isSending ? '전송 중...' : '전송',\n          children: isSending ? '⏳' : '↑'\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SentenceModeButton, {\n        isActive: isSentenceModeActive,\n        hasSelected: hasSelectedSentences,\n        onClick: onToggleSentenceMode,\n        title: \"\\uBB38\\uC7A5 \\uC120\\uD0DD \\uBAA8\\uB4DC\",\n        children: [\"\\uBB38\\uC7A5\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 149,\n          columnNumber: 13\n        }, this), \"\\uC120\\uD0DD\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 143,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n}, \"N4FmJDOZdLjDTjgdgCtGE2Gf4ZQ=\")), \"N4FmJDOZdLjDTjgdgCtGE2Gf4ZQ=\");\n_c2 = MessageInput;\nexport default MessageInput;\nvar _c, _c2;\n$RefreshReg$(_c, \"MessageInput$forwardRef\");\n$RefreshReg$(_c2, \"MessageInput\");","map":{"version":3,"names":["React","useState","useRef","useEffect","useImperativeHandle","forwardRef","InputContainer","InputWrapper","MessageInputContainer","MessageInput","StyledMessageInput","SendButton","SentenceModeButton","quickPhraseApi","jsxDEV","_jsxDEV","_s","_c","onSendMessage","disabled","placeholder","onToggleSentenceMode","isSentenceModeActive","hasSelectedSentences","ref","message","setMessage","isSending","setIsSending","quickPhrases","setQuickPhrases","textareaRef","insertText","text","prev","setTimeout","current","style","height","scrollHeight","focus","handleSubmit","trim","success","handleKeyPress","e","key","shiftKey","preventDefault","handleChange","target","value","loadQuickPhrases","phrases","getQuickPhrases","error","console","handlePhraseSelect","isButtonDisabled","children","onChange","onKeyPress","rows","fileName","_jsxFileName","lineNumber","columnNumber","onClick","title","isActive","hasSelected","_c2","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/MessageInput.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect, useImperativeHandle, forwardRef } from 'react';\nimport {\n  InputContainer,\n  InputWrapper,\n  MessageInputContainer,\n  MessageInput as StyledMessageInput,\n  SendButton,\n  SentenceModeButton,\n  ButtonGroup,\n} from '../styles/GlobalStyle';\nimport QuickPhraseButton from './QuickPhraseButton';\nimport { QuickPhrase, quickPhraseApi } from '../api/quickPhraseApi';\n\ninterface MessageInputProps {\n  onSendMessage: (message: string) => Promise<boolean>;\n  disabled?: boolean;\n  placeholder?: string;\n  onToggleSentenceMode?: () => void;\n  isSentenceModeActive?: boolean;\n  hasSelectedSentences?: boolean;\n}\n\nexport interface MessageInputRef {\n  insertText: (text: string) => void;\n}\n\nconst MessageInput = forwardRef<MessageInputRef, MessageInputProps>(({\n  onSendMessage,\n  disabled = false,\n  placeholder = \"메시지를 입력하세요...\",\n  onToggleSentenceMode,\n  isSentenceModeActive = false,\n  hasSelectedSentences = false,\n}, ref) => {\n  const [message, setMessage] = useState('');\n  const [isSending, setIsSending] = useState(false);\n  const [quickPhrases, setQuickPhrases] = useState<QuickPhrase[]>([]);\n  const textareaRef = useRef<HTMLTextAreaElement>(null);\n\n  // ref를 통해 외부에서 텍스트 삽입 가능하도록 함\n  useImperativeHandle(ref, () => ({\n    insertText: (text: string) => {\n      setMessage(prev => prev + text);\n      // 텍스트 삽입 후 높이 조절\n      setTimeout(() => {\n        if (textareaRef.current) {\n          textareaRef.current.style.height = 'auto';\n          textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n          textareaRef.current.focus();\n        }\n      }, 0);\n    }\n  }));\n\n  const handleSubmit = async () => {\n    if (!message.trim() || disabled || isSending) return;\n\n    setIsSending(true);\n    const success = await onSendMessage(message.trim());\n    \n    if (success) {\n      setMessage('');\n      // 텍스트영역 높이 초기화\n      if (textareaRef.current) {\n        textareaRef.current.style.height = 'auto';\n      }\n    }\n    \n    setIsSending(false);\n  };\n\n  const handleKeyPress = (e: React.KeyboardEvent) => {\n    if (e.key === 'Enter' && !e.shiftKey) {\n      e.preventDefault();\n      handleSubmit();\n    }\n  };\n\n  const handleChange = (e: React.ChangeEvent<HTMLTextAreaElement>) => {\n    setMessage(e.target.value);\n    \n    // 자동 높이 조절\n    if (textareaRef.current) {\n      textareaRef.current.style.height = 'auto';\n      textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n    }\n  };\n\n  // 컴포넌트가 마운트될 때 포커스 및 자주쓰는 문장 로드\n  useEffect(() => {\n    if (textareaRef.current && !disabled) {\n      textareaRef.current.focus();\n    }\n    loadQuickPhrases();\n  }, [disabled]);\n\n  // 자주쓰는 문장 로드\n  const loadQuickPhrases = async () => {\n    try {\n      const phrases = await quickPhraseApi.getQuickPhrases();\n      setQuickPhrases(phrases);\n    } catch (error) {\n      console.error('자주쓰는 문장 로드 실패:', error);\n    }\n  };\n\n  // 자주쓰는 문장 선택 시 입력창에 삽입\n  const handlePhraseSelect = (text: string) => {\n    setMessage(prev => prev + text);\n    // 텍스트 삽입 후 높이 조절\n    setTimeout(() => {\n      if (textareaRef.current) {\n        textareaRef.current.style.height = 'auto';\n        textareaRef.current.style.height = `${textareaRef.current.scrollHeight}px`;\n        textareaRef.current.focus();\n      }\n    }, 0);\n  };\n\n  const isButtonDisabled = disabled || isSending || !message.trim();\n\n  return (\n    <InputContainer>\n      <InputWrapper>\n        <MessageInputContainer>\n          <StyledMessageInput\n            ref={textareaRef}\n            value={message}\n            onChange={handleChange}\n            onKeyPress={handleKeyPress}\n            placeholder={placeholder}\n            disabled={disabled || isSending}\n            rows={1}\n          />\n          <SendButton\n            onClick={handleSubmit}\n            disabled={isButtonDisabled}\n            title={isSending ? '전송 중...' : '전송'}\n          >\n            {isSending ? '⏳' : '↑'}\n          </SendButton>\n        </MessageInputContainer>\n        <SentenceModeButton\n          isActive={isSentenceModeActive}\n          hasSelected={hasSelectedSentences}\n          onClick={onToggleSentenceMode}\n          title=\"문장 선택 모드\"\n        >\n          문장<br/>선택\n        </SentenceModeButton>\n      </InputWrapper>\n    </InputContainer>\n  );\n});\n\nexport default MessageInput; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}