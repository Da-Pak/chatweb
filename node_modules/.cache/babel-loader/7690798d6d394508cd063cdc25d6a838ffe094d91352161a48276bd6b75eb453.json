{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\TrainingChatView.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\n\n// ... (여기에 필요한 모든 props 인터페이스를 정의합니다)\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n// ... (ProceedView, SentenceView 등에서 공통으로 사용하던 모든 styled-components를 이곳으로 옮깁니다)\n_c = Container;\nconst TrainingChatView = ({\n  viewType,\n  personaId,\n  personaName,\n  initialContent,\n  threads,\n  selectedThread: propSelectedThread,\n  onThreadUpdate\n}) => {\n  // ... (ProceedView, SentenceView 등에서 공통으로 사용하던 모든 상태와 로직(useState, useEffect, 핸들러 함수 등)을 이곳으로 옮깁니다)\n\n  // viewType에 따라 동적으로 변경될 값들\n  const viewConfig = {\n    interpretation: {\n      color: '#6c757d',\n      title: '해석',\n      emptyText: '해석에 대해 더 자세히 질문해보세요'\n    },\n    proceed: {\n      color: '#ff9800',\n      title: '나아가기',\n      emptyText: '나아가기에 대해 더 자세히 질문해보세요'\n    },\n    sentence: {\n      color: '#4caf50',\n      title: '문장',\n      emptyText: '문장에 대해 더 자세히 질문해보세요'\n    }\n  };\n  const config = viewConfig[viewType];\n  return /*#__PURE__*/_jsxDEV(Container, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 64,\n    columnNumber: 5\n  }, this);\n};\n_c2 = TrainingChatView;\nexport default TrainingChatView;\nvar _c, _c2;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"TrainingChatView\");","map":{"version":3,"names":["React","styled","jsxDEV","_jsxDEV","Container","div","_c","TrainingChatView","viewType","personaId","personaName","initialContent","threads","selectedThread","propSelectedThread","onThreadUpdate","viewConfig","interpretation","color","title","emptyText","proceed","sentence","config","fileName","_jsxFileName","lineNumber","columnNumber","_c2","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/TrainingChatView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\r\nimport Message from '../../shared/components/Message';\r\nimport SelectableMessage from './SelectableMessage';\r\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\r\nimport LoadingMessage from '../../shared/components/LoadingMessage';\r\nimport { chatApi } from '../../shared/api/chatApi';\r\nimport { TrainingThread } from '../../shared/types';\r\nimport { sentenceApi } from '../api/sentenceApi';\r\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\r\n\r\n// ... (여기에 필요한 모든 props 인터페이스를 정의합니다)\r\ninterface TrainingChatViewProps {\r\n  viewType: 'interpretation' | 'proceed' | 'sentence';\r\n  personaId: string;\r\n  personaName: string;\r\n  initialContent: string;\r\n  threads: TrainingThread[];\r\n  selectedThread: TrainingThread | null;\r\n  onThreadUpdate: (threads: TrainingThread[]) => void;\r\n  onRefreshThreads?: () => void;\r\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed' | 'sentence') => void;\r\n  onGenerateNewInterpretation?: () => void;\r\n  onSendMessage?: (message: string) => Promise<boolean>;\r\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\r\n  isLoading: boolean;\r\n  messages?: Array<{\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: string;\r\n  }>;\r\n  // ... 기타 필요한 props\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background: white;\r\n`;\r\n// ... (ProceedView, SentenceView 등에서 공통으로 사용하던 모든 styled-components를 이곳으로 옮깁니다)\r\n\r\nconst TrainingChatView: React.FC<TrainingChatViewProps> = ({\r\n  viewType,\r\n  personaId,\r\n  personaName,\r\n  initialContent,\r\n  threads,\r\n  selectedThread: propSelectedThread,\r\n  onThreadUpdate,\r\n}) => {\r\n  // ... (ProceedView, SentenceView 등에서 공통으로 사용하던 모든 상태와 로직(useState, useEffect, 핸들러 함수 등)을 이곳으로 옮깁니다)\r\n\r\n  // viewType에 따라 동적으로 변경될 값들\r\n  const viewConfig = {\r\n    interpretation: { color: '#6c757d', title: '해석', emptyText: '해석에 대해 더 자세히 질문해보세요' },\r\n    proceed: { color: '#ff9800', title: '나아가기', emptyText: '나아가기에 대해 더 자세히 질문해보세요' },\r\n    sentence: { color: '#4caf50', title: '문장', emptyText: '문장에 대해 더 자세히 질문해보세요' },\r\n  };\r\n  const config = viewConfig[viewType];\r\n\r\n  return (\r\n    <Container>\r\n      {/* ... (공통 UI 렌더링 로직) */}\r\n      {/* 예시: <LoadingMessage personaColor={config.color} /> */}\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default TrainingChatView; "],"mappings":";AAAA,OAAOA,KAAK,MAAuC,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;;AAWtC;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAuBA,MAAMC,SAAS,GAAGH,MAAM,CAACI,GAAG;AAC5B;AACA;AACA;AACA;AACA,CAAC;AACD;AAAAC,EAAA,GANMF,SAAS;AAQf,MAAMG,gBAAiD,GAAGA,CAAC;EACzDC,QAAQ;EACRC,SAAS;EACTC,WAAW;EACXC,cAAc;EACdC,OAAO;EACPC,cAAc,EAAEC,kBAAkB;EAClCC;AACF,CAAC,KAAK;EACJ;;EAEA;EACA,MAAMC,UAAU,GAAG;IACjBC,cAAc,EAAE;MAAEC,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE,IAAI;MAAEC,SAAS,EAAE;IAAsB,CAAC;IACnFC,OAAO,EAAE;MAAEH,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE,MAAM;MAAEC,SAAS,EAAE;IAAwB,CAAC;IAChFE,QAAQ,EAAE;MAAEJ,KAAK,EAAE,SAAS;MAAEC,KAAK,EAAE,IAAI;MAAEC,SAAS,EAAE;IAAsB;EAC9E,CAAC;EACD,MAAMG,MAAM,GAAGP,UAAU,CAACR,QAAQ,CAAC;EAEnC,oBACEL,OAAA,CAACC,SAAS;IAAAoB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAGC,CAAC;AAEhB,CAAC;AAACC,GAAA,GAzBIrB,gBAAiD;AA2BvD,eAAeA,gBAAgB;AAAC,IAAAD,EAAA,EAAAsB,GAAA;AAAAC,YAAA,CAAAvB,EAAA;AAAAuB,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}