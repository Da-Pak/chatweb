{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\SelectableMessage.tsx\";\nimport React from 'react';\nimport styled from 'styled-components';\nimport { MessageContainer, MessageBubble, MessageInfo } from '../styles/GlobalStyle';\nimport SelectableSentence from './SelectableSentence';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst MessageContent = styled.div`\n  white-space: pre-line;\n  line-height: 1.6;\n`;\n_c = MessageContent;\nconst SelectableMessage = ({\n  message,\n  personas,\n  selectedSentences,\n  highlightedSentences,\n  memos,\n  onToggleSelect,\n  onMemoChange,\n  onDeleteMemo,\n  showSentenceSelector = true,\n  showActionButtons = false,\n  onCopy,\n  onSunAction,\n  onPersonAction,\n  onDocumentAction,\n  onEdit,\n  isEditing = false,\n  onEditSave,\n  onEditCancel\n}) => {\n  const isUser = message.role === 'user';\n  const persona = message.persona_id ? personas[message.persona_id] : null;\n  const formatTime = timestamp => {\n    const date = new Date(timestamp);\n    return date.toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 문장 분할 로직\n  const splitIntoSentences = text => {\n    // 엔터 또는 마침표 기준으로 분할하되, 빈 문장은 제외\n    return text.split(/[\\n\\.]+/).map(sentence => sentence.trim()).filter(sentence => sentence.length > 0);\n  };\n  const sentences = splitIntoSentences(message.content);\n  const generateSentenceId = (messageIndex, sentenceIndex) => {\n    return `${message.timestamp}_${messageIndex}_${sentenceIndex}`;\n  };\n  return /*#__PURE__*/_jsxDEV(MessageContainer, {\n    isUser: isUser,\n    children: [/*#__PURE__*/_jsxDEV(MessageBubble, {\n      isUser: isUser,\n      personaColor: persona === null || persona === void 0 ? void 0 : persona.color,\n      children: /*#__PURE__*/_jsxDEV(MessageContent, {\n        children: sentences.map((sentence, index) => {\n          const sentenceId = generateSentenceId(0, index); // messageIndex는 상위에서 전달받아야 함\n          return /*#__PURE__*/_jsxDEV(SelectableSentence, {\n            sentence: sentence,\n            sentenceId: sentenceId,\n            isSelected: selectedSentences.has(sentenceId),\n            isHighlighted: highlightedSentences.has(sentenceId),\n            hasMemo: !!memos[sentenceId],\n            memo: memos[sentenceId],\n            showSelector: showSentenceSelector,\n            onToggleSelect: onToggleSelect,\n            onMemoChange: onMemoChange,\n            onDeleteMemo: onDeleteMemo\n          }, sentenceId, false, {\n            fileName: _jsxFileName,\n            lineNumber: 90,\n            columnNumber: 15\n          }, this);\n        })\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MessageInfo, {\n      children: [/*#__PURE__*/_jsxDEV(\"span\", {\n        children: isUser ? '나' : message.persona_name || '어시스턴트'\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n        children: formatTime(message.timestamp)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 84,\n    columnNumber: 5\n  }, this);\n};\n_c2 = SelectableMessage;\nexport default SelectableMessage;\nvar _c, _c2;\n$RefreshReg$(_c, \"MessageContent\");\n$RefreshReg$(_c2, \"SelectableMessage\");","map":{"version":3,"names":["React","styled","MessageContainer","MessageBubble","MessageInfo","SelectableSentence","jsxDEV","_jsxDEV","MessageContent","div","_c","SelectableMessage","message","personas","selectedSentences","highlightedSentences","memos","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","showActionButtons","onCopy","onSunAction","onPersonAction","onDocumentAction","onEdit","isEditing","onEditSave","onEditCancel","isUser","role","persona","persona_id","formatTime","timestamp","date","Date","toLocaleTimeString","hour","minute","splitIntoSentences","text","split","map","sentence","trim","filter","length","sentences","content","generateSentenceId","messageIndex","sentenceIndex","children","personaColor","color","index","sentenceId","isSelected","has","isHighlighted","hasMemo","memo","showSelector","fileName","_jsxFileName","lineNumber","columnNumber","persona_name","_c2","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/SelectableMessage.tsx"],"sourcesContent":["import React from 'react';\r\nimport { Message as MessageType, Persona } from '../types';\r\nimport styled from 'styled-components';\r\nimport {\r\n  MessageContainer,\r\n  MessageBubble,\r\n  MessageInfo,\r\n} from '../styles/GlobalStyle';\r\nimport SelectableSentence from './SelectableSentence';\r\n\r\ninterface SelectableMessageProps {\r\n  message: MessageType;\r\n  personas: Record<string, Persona>;\r\n  selectedSentences: Set<string>;\r\n  highlightedSentences: Set<string>;\r\n  memos: Record<string, string>;\r\n  onToggleSelect: (sentenceId: string) => void;\r\n  onMemoChange: (sentenceId: string, memo: string) => void;\r\n  onDeleteMemo: (sentenceId: string) => void;\r\n  showSentenceSelector?: boolean;\r\n  showActionButtons?: boolean;\r\n  onCopy?: () => void;\r\n  onSunAction?: () => void;\r\n  onPersonAction?: () => void;\r\n  onDocumentAction?: () => void;\r\n  onEdit?: () => void;\r\n  isEditing?: boolean;\r\n  onEditSave?: (newContent: string) => void;\r\n  onEditCancel?: () => void;\r\n}\r\n\r\nconst MessageContent = styled.div`\r\n  white-space: pre-line;\r\n  line-height: 1.6;\r\n`;\r\n\r\nconst SelectableMessage: React.FC<SelectableMessageProps> = ({\r\n  message,\r\n  personas,\r\n  selectedSentences,\r\n  highlightedSentences,\r\n  memos,\r\n  onToggleSelect,\r\n  onMemoChange,\r\n  onDeleteMemo,\r\n  showSentenceSelector = true,\r\n  showActionButtons = false,\r\n  onCopy,\r\n  onSunAction,\r\n  onPersonAction,\r\n  onDocumentAction,\r\n  onEdit,\r\n  isEditing = false,\r\n  onEditSave,\r\n  onEditCancel\r\n}) => {\r\n  const isUser = message.role === 'user';\r\n  const persona = message.persona_id ? personas[message.persona_id] : null;\r\n  \r\n  const formatTime = (timestamp: string) => {\r\n    const date = new Date(timestamp);\r\n    return date.toLocaleTimeString('ko-KR', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n  };\r\n\r\n  // 문장 분할 로직\r\n  const splitIntoSentences = (text: string): string[] => {\r\n    // 엔터 또는 마침표 기준으로 분할하되, 빈 문장은 제외\r\n    return text\r\n      .split(/[\\n\\.]+/)\r\n      .map(sentence => sentence.trim())\r\n      .filter(sentence => sentence.length > 0);\r\n  };\r\n\r\n  const sentences = splitIntoSentences(message.content);\r\n\r\n  const generateSentenceId = (messageIndex: number, sentenceIndex: number): string => {\r\n    return `${message.timestamp}_${messageIndex}_${sentenceIndex}`;\r\n  };\r\n\r\n  return (\r\n    <MessageContainer isUser={isUser}>\r\n      <MessageBubble isUser={isUser} personaColor={persona?.color}>\r\n        <MessageContent>\r\n          {sentences.map((sentence, index) => {\r\n            const sentenceId = generateSentenceId(0, index); // messageIndex는 상위에서 전달받아야 함\r\n            return (\r\n              <SelectableSentence\r\n                key={sentenceId}\r\n                sentence={sentence}\r\n                sentenceId={sentenceId}\r\n                isSelected={selectedSentences.has(sentenceId)}\r\n                isHighlighted={highlightedSentences.has(sentenceId)}\r\n                hasMemo={!!memos[sentenceId]}\r\n                memo={memos[sentenceId]}\r\n                showSelector={showSentenceSelector}\r\n                onToggleSelect={onToggleSelect}\r\n                onMemoChange={onMemoChange}\r\n                onDeleteMemo={onDeleteMemo}\r\n              />\r\n            );\r\n          })}\r\n        </MessageContent>\r\n      </MessageBubble>\r\n      \r\n      <MessageInfo>\r\n        <span>{isUser ? '나' : (message.persona_name || '어시스턴트')}</span>\r\n        <span>{formatTime(message.timestamp)}</span>\r\n      </MessageInfo>\r\n    </MessageContainer>\r\n  );\r\n};\r\n\r\nexport default SelectableMessage; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}