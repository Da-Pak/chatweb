{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect,useCallback}from'react';import{useChat}from'../shared/hooks/useChat';import ConversationSidebar from'../shared/components/ConversationSidebar';import PersonaSidebar from'../shared/components/PersonaSidebar';import VaultView from'../vault/components/VaultView';import ChatArea from'../shared/components/ChatArea';import{GlobalStyle,AppContainer}from'../shared/styles/GlobalStyle';import{chatApi}from'../shared/api/chatApi';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{const[isPersonaSidebarCollapsed,setIsPersonaSidebarCollapsed]=useState(false);const[isConversationSidebarCollapsed,setIsConversationSidebarCollapsed]=useState(false);const[selectedPersonaItem,setSelectedPersonaItem]=useState(null);const[selectedConversationItem,setSelectedConversationItem]=useState(null);// ConversationSidebar 새로고침 트리거\nconst[conversationRefreshTrigger,setConversationRefreshTrigger]=useState(0);// 해석 관련 상태\nconst[currentInterpretation,setCurrentInterpretation]=useState(null);// 해석 모드 전용 로딩 상태\nconst[isInterpretationLoading,setIsInterpretationLoading]=useState(false);// 해석 저장소 (실제로는 백엔드에서 관리)\nconst[interpretationStore,setInterpretationStore]=useState({});// 언어화 관련 상태\nconst[verbalizationThreads,setVerbalizationThreads]=useState([]);const[selectedVerbalizationThread,setSelectedVerbalizationThread]=useState(null);const{// State\npersonas,globalMessages,conversations,selectedConversation,isLoading,error,// Actions\nsendInitialMessage,continueConversation,updateConversation,selectPersona,clearError}=useChat();// 페르소나 메뉴 아이템 선택 핸들러\nconst handleSelectPersonaItem=itemId=>{// 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\nconst actualItemId=itemId===''?null:itemId;setSelectedPersonaItem(actualItemId);// 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\nif(actualItemId!=='training'&&actualItemId!=='admin'&&actualItemId!=='vault'){setIsConversationSidebarCollapsed(false);}};// 대화 메뉴 아이템 선택 핸들러\nconst handleSelectConversationItem=itemId=>{setSelectedConversationItem(itemId);// 스레드 선택 시 해당 스레드 데이터 로드 처리\nif(itemId!==null&&itemId!==void 0&&itemId.includes('-thread-')){console.log('스레드 선택됨:',itemId);// 필요시 스레드별 추가 처리 로직\n}};// 저장고에서 페르소나로 이동 핸들러\nconst handleNavigateToPersona=(personaId,mode)=>{const persona=personas[personaId];if(!persona)return;// 해석이 있는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){setCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});}// 페르소나 선택 및 모드 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 저장고 모드 해제\nsetIsConversationSidebarCollapsed(false);// 해석 모드로 이동해야 하는지 확인\nconst shouldNavigateToInterpretation=sessionStorage.getItem('navigateToInterpretationMode');if(shouldNavigateToInterpretation==='true'){sessionStorage.removeItem('navigateToInterpretationMode');// 사용 후 제거\nsetSelectedConversationItem('interpretation');}else if(mode==='sentence'){setSelectedConversationItem('sentence');}};// 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\nconst handleNavigateToPersonaWithSentence=(personaId,mode,selectedSentence)=>{const persona=personas[personaId];if(!persona)return;// 해석이 있는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){setCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});}// 페르소나 선택 및 모드 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 저장고 모드 해제\nsetIsConversationSidebarCollapsed(false);// 문장 모드로 이동하면서 선택된 문장을 저장\nif(mode==='sentence'){setSelectedConversationItem('sentence');// 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\nsessionStorage.setItem('selectedSentenceForInput',selectedSentence);console.log('선택된 문장 저장됨:',selectedSentence);}};// 저장고에서 스레드로 이동 핸들러\nconst handleNavigateToThread=(threadId,threadType,interactionMessage)=>{console.log('=== 저장고에서 스레드로 이동 ===');console.log('threadId:',threadId);console.log('threadType:',threadType);console.log('interactionMessage:',interactionMessage);// 상호작용 메시지가 있으면 sessionStorage에 저장\nif(interactionMessage){sessionStorage.setItem('selectedSentenceForInput',interactionMessage);console.log('상호작용 메시지를 sessionStorage에 저장:',interactionMessage);}// 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n// 신형은 타임스탬프가 포함되어 있으므로 숫자가 끝에 있는지 확인\nconst isLegacyInterpretationId=threadId.startsWith('interpretation_')&&!threadId.includes('-')&&!/\\d{10,}$/.test(threadId);// 10자리 이상 숫자로 끝나지 않는 경우만 구형\nconsole.log('isLegacyInterpretationId:',isLegacyInterpretationId);console.log('타임스탬프 테스트:',/\\d{10,}$/.test(threadId));// 언어화 스레드인 경우\nif(threadType==='verbalization'){console.log('언어화 스레드로 이동');setSelectedPersonaItem('verbalization');setIsConversationSidebarCollapsed(false);// 해당 스레드를 찾아서 선택\nconst loadAndSelectThread=async()=>{try{const response=await chatApi.getVerbalizationThreads();if(response.data){const targetThread=response.data.find(thread=>thread.id===threadId);if(targetThread){console.log('타겟 언어화 스레드 찾음:',targetThread.id);setSelectedVerbalizationThread(targetThread);setVerbalizationThreads(response.data);}else{console.warn('타겟 언어화 스레드를 찾을 수 없음:',threadId);// 폴백: 첫 번째 스레드 선택\nif(response.data.length>0){setSelectedVerbalizationThread(response.data[0]);setVerbalizationThreads(response.data);}}}}catch(error){console.error('언어화 스레드 로딩 오류:',error);}// ConversationSidebar 새로고침\nsetConversationRefreshTrigger(prev=>prev+1);};loadAndSelectThread();return;}// 해석 타입인 경우 특별 처리\nif(threadType==='interpretation'){console.log('해석 타입 스레드 처리:',threadId);// 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\nconst extractPersonaIdFromThreadId=id=>{// interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\nconst parts=id.split('_');console.log('스레드 ID 파싱:',parts);if(parts.length>=2&&parts[0]==='interpretation'){const extractedPersonaId=parts[1];console.log('추출된 페르소나 ID:',extractedPersonaId);return extractedPersonaId;// 페르소나 ID 부분\n}return null;};const personaId=extractPersonaIdFromThreadId(threadId);console.log('최종 페르소나 ID:',personaId);console.log('페르소나 존재 여부:',personaId&&personas[personaId]);if(personaId&&personas[personaId]){const persona=personas[personaId];console.log('해석 스레드용 페르소나 찾음:',persona.name);// 해석이 있는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){setCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});}// 페르소나 선택 및 해석 모드로 이동\nselectPersona(personaId);setSelectedPersonaItem(null);// 저장고 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');console.log('해석 모드로 이동 완료');// ConversationSidebar 새로고침\nsetConversationRefreshTrigger(prev=>prev+1);return;}else{console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:',threadId);// 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n}}// 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\nconst loadAndNavigateToTrainingThread=async()=>{try{console.log('훈습 스레드 정보 로딩 중...');// 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\nlet foundThread=null;let foundPersonaId=null;for(const personaId of Object.keys(personas)){try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){const targetThread=threadsResponse.data.find(thread=>thread.id===threadId);if(targetThread){console.log('스레드를 찾음:',targetThread.id,'in persona:',personaId);foundThread=targetThread;foundPersonaId=personaId;break;}}}catch(error){console.warn(\"\\uD398\\uB974\\uC18C\\uB098 \".concat(personaId,\"\\uC758 \\uC2A4\\uB808\\uB4DC \\uB85C\\uB529 \\uC2E4\\uD328:\"),error);}}if(!foundThread||!foundPersonaId){console.error('해당 스레드를 찾을 수 없음:',threadId);alert('해당 스레드를 찾을 수 없습니다.');return;}const persona=personas[foundPersonaId];console.log('찾은 페르소나:',persona.name);// 해석이 있는지 확인\nconst existingInterpretation=interpretationStore[foundPersonaId];if(existingInterpretation){setCurrentInterpretation({personaId:foundPersonaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});}// 페르소나 선택 및 해당 스레드로 이동\nselectPersona(foundPersonaId);setSelectedPersonaItem(null);// 저장고 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(threadType,\"-thread-\").concat(threadId));console.log('훈습 스레드로 이동 완료:',\"\".concat(threadType,\"-thread-\").concat(threadId));// ConversationSidebar 새로고침\nsetConversationRefreshTrigger(prev=>prev+1);}catch(error){console.error('훈습 스레드 로딩 오류:',error);alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');}};loadAndNavigateToTrainingThread();};// 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\nconst handlePersonaSelection=personaId=>{const persona=personas[personaId];if(!persona)return;// 해석이 이미 존재하는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){// 1) 해석이 있으면 바로 채팅 모드로\nsetCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');}else{// 2) 해석이 없으면 생성 과정 진행\n// 팝업은 TrainingCategoryView에서 처리\n}};// 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\nconst handleInterpretationComplete=async(personaId,interpretation)=>{const persona=personas[personaId];// 해석을 저장소에 저장\nsetInterpretationStore(prev=>_objectSpread(_objectSpread({},prev),{},{[personaId]:interpretation}));// 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\nsetCurrentInterpretation({personaId,personaName:(persona===null||persona===void 0?void 0:persona.name)||'',content:interpretation,messages:[{role:'assistant',content:interpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');// ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\nsetConversationRefreshTrigger(prev=>prev+1);};// 해석 채팅 메시지 전송 핸들러\nconst handleInterpretationMessage=async message=>{if(!currentInterpretation)return false;// 해석 스레드가 선택되었는지 확인\nconst isInterpretationThread=selectedConversationItem===null||selectedConversationItem===void 0?void 0:selectedConversationItem.startsWith('interpretation-thread-');const selectedThreadId=isInterpretationThread&&selectedConversationItem?selectedConversationItem.split('-thread-')[1]:null;console.log('해석 메시지 전송:',{isInterpretationThread,selectedThreadId,selectedConversationItem});// 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\nconst userMessage={role:'user',content:message,timestamp:new Date().toISOString()};// 로딩 상태 시작\nsetIsInterpretationLoading(true);try{if(isInterpretationThread&&selectedThreadId){// 특정 해석 스레드와 채팅\nconsole.log('특정 해석 스레드와 채팅:',selectedThreadId);const response=await chatApi.chatWithThread({thread_id:selectedThreadId,user_message:message});if(response.data){// 현재 해석 상태의 메시지에 추가하지 않고, \n// ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\nsetIsInterpretationLoading(false);// 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\nsetConversationRefreshTrigger(prev=>prev+1);console.log('특정 해석 스레드 채팅 성공');return true;}else{console.error('해석 스레드 채팅 API 실패:',response.error);setIsInterpretationLoading(false);return false;}}else{// 기본 해석 기반 채팅 (기존 로직)\nconsole.log('기본 해석 기반 채팅');// 사용자 메시지를 currentInterpretation에 추가\nsetCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,userMessage]}):null);const response=await chatApi.chatWithInterpretation(currentInterpretation.personaId,message);if(response.data){const assistantMessage={role:'assistant',content:response.data.response,timestamp:response.data.timestamp};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,assistantMessage]}):null);setIsInterpretationLoading(false);return true;}else{// API 호출 실패 시 폴백\nconsole.error('해석 기반 채팅 API 실패:',response.error);const fallbackMessage={role:'assistant',content:\"\\uC8C4\\uC1A1\\uD569\\uB2C8\\uB2E4. \\uC77C\\uC2DC\\uC801\\uC73C\\uB85C \\uC751\\uB2F5 \\uC0DD\\uC131\\uC5D0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uC7A0\\uC2DC \\uD6C4 \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD574\\uC8FC\\uC138\\uC694.\",timestamp:new Date().toISOString()};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,fallbackMessage]}):null);setIsInterpretationLoading(false);return false;}}}catch(error){console.error('해석 채팅 오류:',error);// 에러 발생 시 폴백 메시지\nconst errorMessage={role:'assistant',content:\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uC5F0\\uACB0\\uC744 \\uD655\\uC778\\uD558\\uACE0 \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD574\\uC8FC\\uC138\\uC694.\",timestamp:new Date().toISOString()};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,errorMessage]}):null);setIsInterpretationLoading(false);return false;}};// 해석 업데이트 핸들러\nconst handleUpdateInterpretation=updatedInterpretation=>{setCurrentInterpretation(updatedInterpretation);};// 대화 업데이트 핸들러\nconst handleUpdateConversation=updatedConversation=>{if(selectedConversation){updateConversation(selectedConversation,updatedConversation);}};// 대화 모드 전환 핸들러\nconst handleSwitchConversationMode=mode=>{setSelectedConversationItem(mode);};// ConversationSidebar 새로고침 핸들러\nconst handleRefreshConversationSidebar=()=>{setConversationRefreshTrigger(prev=>prev+1);};// 최근 상호작용에서 페르소나 선택 핸들러\nconst handleRecentPersonaSelect=personaId=>{const persona=personas[personaId];if(!persona)return;// 해석이 이미 존재하는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){// 해석이 있으면 바로 해석 모드로\nsetCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 해석 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');}else{// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}};// 최근 상호작용에서 스레드 선택 핸들러\nconst handleRecentThreadSelect=async(thread,personaId)=>{console.log('=== 최근 상호작용 스레드 선택 ===');console.log('thread:',thread);console.log('personaId:',personaId);console.log('thread.thread_type:',thread.thread_type);// 언어화 스레드인 경우 언어화 모드로 전환\nif(personaId==='verbalization'||thread.thread_type==='verbalization'){console.log('언어화 스레드로 인식, 언어화 모드 전환');setSelectedPersonaItem('verbalization');setSelectedVerbalizationThread(thread);setIsConversationSidebarCollapsed(false);// ConversationSidebar가 업데이트되도록 트리거\nsetConversationRefreshTrigger(prev=>prev+1);return;}const persona=personas[personaId];if(!persona){console.error('페르소나를 찾을 수 없음:',personaId);return;}// 해석 스레드인 경우 실제 스레드 내용을 로딩\nif(thread.thread_type==='interpretation'){console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');try{// 해석 스레드의 실제 내용과 메시지들을 설정\nconst interpretationContent=thread.content||(thread.messages.length>0?thread.messages[0].content:'');setCurrentInterpretation({personaId,personaName:persona.name,content:interpretationContent,messages:thread.messages||[]});// 페르소나 선택 및 해당 스레드 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));console.log('해석 스레드 로딩 완료:',thread.id);}catch(error){console.error('해석 스레드 로딩 중 오류:',error);// 폴백으로 기존 해석 사용\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){setCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});}selectPersona(personaId);setSelectedPersonaItem(null);setIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));}return;}// 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){// 해석이 있으면 바로 해석 모드로\nsetCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 해당 스레드 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));}else{// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}};// 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\nconst toggleConversationSidebar=()=>{const newCollapsedState=!isConversationSidebarCollapsed;setIsConversationSidebarCollapsed(newCollapsedState);setIsPersonaSidebarCollapsed(newCollapsedState);};// 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\nconst togglePersonaSidebar=()=>{setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);};// 언어화 스레드 로드\nconst loadVerbalizationThreads=useCallback(async()=>{try{console.log('=== 언어화 스레드 로드 시작 ===');const response=await chatApi.getVerbalizationThreads();console.log('스레드 로드 응답:',response);if(response.data){console.log('로드된 스레드 개수:',response.data.length);setVerbalizationThreads(response.data);// 현재 선택된 스레드가 있는지 확인하고 업데이트\nif(selectedVerbalizationThread){const updatedSelectedThread=response.data.find(thread=>thread.id===selectedVerbalizationThread.id);if(updatedSelectedThread){console.log('기존 선택된 스레드 업데이트:',updatedSelectedThread.id);setSelectedVerbalizationThread(updatedSelectedThread);}else{console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');setSelectedVerbalizationThread(response.data[0]||null);}}else if(response.data.length>0){// 선택된 스레드가 없으면 첫 번째 스레드를 선택\nconsole.log('새로운 첫 번째 스레드 선택:',response.data[0].id);setSelectedVerbalizationThread(response.data[0]);}}console.log('=== 언어화 스레드 로드 완료 ===');}catch(error){console.error('언어화 스레드 로드 오류:',error);}},[selectedVerbalizationThread]);// 언어화 모드일 때 스레드 로드\nuseEffect(()=>{if(selectedPersonaItem==='verbalization'){loadVerbalizationThreads();}},[selectedPersonaItem,loadVerbalizationThreads]);// 언어화 스레드 업데이트 핸들러\nconst handleVerbalizationThreadUpdate=async()=>{console.log('=== 언어화 스레드 업데이트 요청 ===');const currentSelectedId=selectedVerbalizationThread===null||selectedVerbalizationThread===void 0?void 0:selectedVerbalizationThread.id;await loadVerbalizationThreads();// 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\nif(currentSelectedId){// loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n// 비동기 로직을 위해 setTimeout 사용\nsetTimeout(()=>{const response=chatApi.getVerbalizationThreads();response.then(res=>{if(res.data){const stillExists=res.data.find(thread=>thread.id===currentSelectedId);if(!stillExists){// 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\nif(res.data.length>0){setSelectedVerbalizationThread(res.data[0]);}else{setSelectedVerbalizationThread(null);}console.log('삭제된 스레드 감지, 선택 변경됨');}}});},100);}// ConversationSidebar도 새로고침하여 최근 상호작용에 반영\nsetConversationRefreshTrigger(prev=>prev+1);};// 새 언어화 스레드 생성 핸들러\nconst handleCreateNewVerbalizationThread=async()=>{try{console.log('=== 새 언어화 스레드 생성 시작 ===');const response=await chatApi.createNewVerbalizationThread();if(response.data){console.log('새 스레드 생성됨:',response.data.id);// 1단계: 새로 생성된 스레드를 즉시 선택\nsetSelectedVerbalizationThread(response.data);// 2단계: 스레드 목록에도 추가 (최신 순서로)\nsetVerbalizationThreads(prev=>[response.data,...prev]);// 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\nsetConversationRefreshTrigger(prev=>prev+1);console.log('새 스레드 선택 완료:',response.data.id);}else{console.error('새 스레드 생성 실패:',response.error);}}catch(error){console.error('새 언어화 스레드 생성 오류:',error);}};// ConversationSidebar 표시 여부 확인\nconst shouldShowConversationSidebar=selectedPersonaItem!=='training'&&selectedPersonaItem!=='admin'&&selectedPersonaItem!=='verbalization'&&selectedPersonaItem!=='vault'&&currentInterpretation||selectedPersonaItem==='recent'||selectedPersonaItem==='verbalization';return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GlobalStyle,{}),/*#__PURE__*/_jsxs(AppContainer,{children:[/*#__PURE__*/_jsx(PersonaSidebar,{selectedItem:selectedPersonaItem,onSelectItem:handleSelectPersonaItem,isCollapsed:isPersonaSidebarCollapsed,onToggle:shouldShowConversationSidebar?undefined:togglePersonaSidebar}),shouldShowConversationSidebar&&/*#__PURE__*/_jsx(ConversationSidebar,{selectedItem:selectedConversationItem,onSelectItem:handleSelectConversationItem,isCollapsed:isConversationSidebarCollapsed,onToggle:toggleConversationSidebar,selectedPersonaName:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaName,selectedPersonaId:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaId,refreshTrigger:conversationRefreshTrigger,mode:selectedPersonaItem==='recent'?'recent':selectedPersonaItem==='verbalization'?'verbalization':'persona',personas:selectedPersonaItem==='recent'?personas:undefined,verbalizationThreads:selectedPersonaItem==='verbalization'?verbalizationThreads:undefined,onSelectVerbalizationThread:selectedPersonaItem==='verbalization'?setSelectedVerbalizationThread:undefined,onRefreshTrigger:selectedPersonaItem==='verbalization'?handleVerbalizationThreadUpdate:undefined}),selectedPersonaItem==='vault'?/*#__PURE__*/_jsx(VaultView,{personas:personas,onNavigateToPersona:handleNavigateToPersona,onNavigateToThread:handleNavigateToThread,onNavigateToPersonaWithSentence:handleNavigateToPersonaWithSentence}):/*#__PURE__*/_jsx(ChatArea,{selectedConversation:selectedConversation,conversations:conversations,personas:personas,globalMessages:globalMessages,isLoading:currentInterpretation?isInterpretationLoading:isLoading,error:error,onSendInitialMessage:sendInitialMessage,onContinueConversation:continueConversation,onClearError:clearError,selectedPersonaItem:selectedPersonaItem,onSelectPersona:handlePersonaSelection,onInterpretationComplete:handleInterpretationComplete,selectedConversationItem:selectedConversationItem,currentInterpretation:currentInterpretation,onInterpretationMessage:handleInterpretationMessage,onUpdateInterpretation:handleUpdateInterpretation,onUpdateConversation:handleUpdateConversation,onSwitchConversationMode:handleSwitchConversationMode,onRefreshConversationSidebar:handleRefreshConversationSidebar,recentInteractionsProps:{personas,onSelectPersona:handleRecentPersonaSelect,onThreadSelect:handleRecentThreadSelect},verbalizationProps:{selectedThread:selectedVerbalizationThread,threads:verbalizationThreads,onThreadUpdate:handleVerbalizationThreadUpdate,onCreateNewThread:handleCreateNewVerbalizationThread}})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useCallback","useChat","ConversationSidebar","PersonaSidebar","VaultView","ChatArea","GlobalStyle","AppContainer","chatApi","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","isInterpretationLoading","setIsInterpretationLoading","interpretationStore","setInterpretationStore","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","personas","globalMessages","conversations","selectedConversation","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","console","log","handleNavigateToPersona","personaId","mode","persona","existingInterpretation","personaName","name","content","messages","role","timestamp","Date","toISOString","shouldNavigateToInterpretation","sessionStorage","getItem","removeItem","handleNavigateToPersonaWithSentence","selectedSentence","setItem","handleNavigateToThread","threadId","threadType","interactionMessage","isLegacyInterpretationId","startsWith","test","loadAndSelectThread","response","getVerbalizationThreads","data","targetThread","find","thread","id","warn","length","prev","extractPersonaIdFromThreadId","parts","split","extractedPersonaId","loadAndNavigateToTrainingThread","foundThread","foundPersonaId","Object","keys","threadsResponse","getPersonaThreads","concat","alert","handlePersonaSelection","handleInterpretationComplete","interpretation","_objectSpread","handleInterpretationMessage","message","isInterpretationThread","selectedThreadId","userMessage","chatWithThread","thread_id","user_message","chatWithInterpretation","assistantMessage","fallbackMessage","errorMessage","handleUpdateInterpretation","updatedInterpretation","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","thread_type","interpretationContent","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","loadVerbalizationThreads","updatedSelectedThread","handleVerbalizationThreadUpdate","currentSelectedId","setTimeout","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","children","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","onNavigateToPersona","onNavigateToThread","onNavigateToPersonaWithSentence","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","onThreadSelect","verbalizationProps","selectedThread","threads","onThreadUpdate","onCreateNewThread"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null>(null);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n  \n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualItemId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러\n  const handleNavigateToPersona = (personaId: string, mode: 'sentence') => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 해석 모드로 이동해야 하는지 확인\n    const shouldNavigateToInterpretation = sessionStorage.getItem('navigateToInterpretationMode');\n    if (shouldNavigateToInterpretation === 'true') {\n      sessionStorage.removeItem('navigateToInterpretationMode'); // 사용 후 제거\n      setSelectedConversationItem('interpretation');\n    } else if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId: string, mode: 'sentence', selectedSentence: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId: string, threadType: string, interactionMessage?: string) => {\n    console.log('=== 저장고에서 스레드로 이동 ===');\n    console.log('threadId:', threadId);\n    console.log('threadType:', threadType);\n    console.log('interactionMessage:', interactionMessage);\n    \n    // 상호작용 메시지가 있으면 sessionStorage에 저장\n    if (interactionMessage) {\n      sessionStorage.setItem('selectedSentenceForInput', interactionMessage);\n      console.log('상호작용 메시지를 sessionStorage에 저장:', interactionMessage);\n    }\n    \n    // 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n    // 신형은 타임스탬프가 포함되어 있으므로 숫자가 끝에 있는지 확인\n    const isLegacyInterpretationId = threadId.startsWith('interpretation_') && \n                                    !threadId.includes('-') && \n                                    !/\\d{10,}$/.test(threadId); // 10자리 이상 숫자로 끝나지 않는 경우만 구형\n    \n    console.log('isLegacyInterpretationId:', isLegacyInterpretationId);\n    console.log('타임스탬프 테스트:', /\\d{10,}$/.test(threadId));\n    \n    // 언어화 스레드인 경우\n    if (threadType === 'verbalization') {\n      console.log('언어화 스레드로 이동');\n      setSelectedPersonaItem('verbalization');\n      setIsConversationSidebarCollapsed(false);\n      \n      // 해당 스레드를 찾아서 선택\n      const loadAndSelectThread = async () => {\n        try {\n          const response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            const targetThread = response.data.find((thread: TrainingThread) => thread.id === threadId);\n            if (targetThread) {\n              console.log('타겟 언어화 스레드 찾음:', targetThread.id);\n              setSelectedVerbalizationThread(targetThread);\n              setVerbalizationThreads(response.data);\n            } else {\n              console.warn('타겟 언어화 스레드를 찾을 수 없음:', threadId);\n              // 폴백: 첫 번째 스레드 선택\n              if (response.data.length > 0) {\n                setSelectedVerbalizationThread(response.data[0]);\n                setVerbalizationThreads(response.data);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('언어화 스레드 로딩 오류:', error);\n        }\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      };\n      \n      loadAndSelectThread();\n      return;\n    }\n    \n\n    \n    // 해석 타입인 경우 특별 처리\n    if (threadType === 'interpretation') {\n      console.log('해석 타입 스레드 처리:', threadId);\n      \n      // 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\n      const extractPersonaIdFromThreadId = (id: string): string | null => {\n        // interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\n        const parts = id.split('_');\n        console.log('스레드 ID 파싱:', parts);\n        if (parts.length >= 2 && parts[0] === 'interpretation') {\n          const extractedPersonaId = parts[1];\n          console.log('추출된 페르소나 ID:', extractedPersonaId);\n          return extractedPersonaId;  // 페르소나 ID 부분\n        }\n        return null;\n      };\n      \n      const personaId = extractPersonaIdFromThreadId(threadId);\n      console.log('최종 페르소나 ID:', personaId);\n      console.log('페르소나 존재 여부:', personaId && personas[personaId]);\n      \n      if (personaId && personas[personaId]) {\n        const persona = personas[personaId];\n        console.log('해석 스레드용 페르소나 찾음:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        \n        console.log('해석 모드로 이동 완료');\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        return;\n      } else {\n        console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:', threadId);\n        // 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n      }\n    }\n    \n    // 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\n    const loadAndNavigateToTrainingThread = async () => {\n      try {\n        console.log('훈습 스레드 정보 로딩 중...');\n        \n        // 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\n        let foundThread = null;\n        let foundPersonaId = null;\n        \n        for (const personaId of Object.keys(personas)) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const targetThread = threadsResponse.data.find(thread => thread.id === threadId);\n              if (targetThread) {\n                console.log('스레드를 찾음:', targetThread.id, 'in persona:', personaId);\n                foundThread = targetThread;\n                foundPersonaId = personaId;\n                break;\n              }\n            }\n          } catch (error) {\n            console.warn(`페르소나 ${personaId}의 스레드 로딩 실패:`, error);\n          }\n        }\n        \n        if (!foundThread || !foundPersonaId) {\n          console.error('해당 스레드를 찾을 수 없음:', threadId);\n          alert('해당 스레드를 찾을 수 없습니다.');\n          return;\n        }\n        \n        const persona = personas[foundPersonaId];\n        console.log('찾은 페르소나:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[foundPersonaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: foundPersonaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해당 스레드로 이동\n        selectPersona(foundPersonaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n        \n        console.log('훈습 스레드로 이동 완료:', `${threadType}-thread-${threadId}`);\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n      } catch (error) {\n        console.error('훈습 스레드 로딩 오류:', error);\n        alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');\n      }\n    };\n    \n    loadAndNavigateToTrainingThread();\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n    \n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: persona?.name || '',\n      content: interpretation,\n      messages: [\n        {\n          role: 'assistant',\n          content: interpretation,\n          timestamp: new Date().toISOString(),\n        }\n      ],\n    });\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택되었는지 확인\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString(),\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        \n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n\n        if (response.data) {\n          // 현재 해석 상태의 메시지에 추가하지 않고, \n          // ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\n          setIsInterpretationLoading(false);\n          \n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅 (기존 로직)\n        console.log('기본 해석 기반 채팅');\n        \n        // 사용자 메시지를 currentInterpretation에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n\n      const response = await chatApi.chatWithInterpretation(\n        currentInterpretation.personaId,\n        message\n      );\n\n      if (response.data) {\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response,\n          timestamp: response.data.timestamp,\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, assistantMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return true;\n      } else {\n        // API 호출 실패 시 폴백\n        console.error('해석 기반 채팅 API 실패:', response.error);\n        const fallbackMessage = {\n          role: 'assistant' as const,\n          content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n          timestamp: new Date().toISOString(),\n        };\n\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, fallbackMessage],\n        } : null);\n\n        setIsInterpretationLoading(false);\n        return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      \n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant' as const,\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString(),\n      };\n\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n      } : null);\n\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    \n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      \n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || [],\n        });\n        \n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        \n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n        \n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = useCallback(async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(\n            thread => thread.id === selectedVerbalizationThread.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  }, [selectedVerbalizationThread]);\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem, loadVerbalizationThreads]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 영역 - 저장고 모드일 때는 저장고 뷰, 그 외에는 채팅 영역 */}\n        {selectedPersonaItem === 'vault' ? (\n          <VaultView\n            personas={personas}\n            onNavigateToPersona={handleNavigateToPersona}\n            onNavigateToThread={handleNavigateToThread}\n            onNavigateToPersonaWithSentence={handleNavigateToPersonaWithSentence}\n          />\n        ) : (\n        <ChatArea\n          selectedConversation={selectedConversation}\n          conversations={conversations}\n          personas={personas}\n          globalMessages={globalMessages}\n          isLoading={currentInterpretation ? isInterpretationLoading : isLoading}\n          error={error}\n          onSendInitialMessage={sendInitialMessage}\n          onContinueConversation={continueConversation}\n          onClearError={clearError}\n          selectedPersonaItem={selectedPersonaItem}\n          onSelectPersona={handlePersonaSelection}\n          onInterpretationComplete={handleInterpretationComplete}\n          selectedConversationItem={selectedConversationItem}\n          currentInterpretation={currentInterpretation}\n          onInterpretationMessage={handleInterpretationMessage}\n          onUpdateInterpretation={handleUpdateInterpretation}\n          onUpdateConversation={handleUpdateConversation}\n          onSwitchConversationMode={handleSwitchConversationMode}\n          onRefreshConversationSidebar={handleRefreshConversationSidebar}\n            recentInteractionsProps={{\n              personas,\n              onSelectPersona: handleRecentPersonaSelect,\n              onThreadSelect: handleRecentThreadSelect,\n            }}\n            verbalizationProps={{\n              selectedThread: selectedVerbalizationThread,\n              threads: verbalizationThreads,\n              onThreadUpdate: handleVerbalizationThreadUpdate,\n              onCreateNewThread: handleCreateNewVerbalizationThread,\n            }}\n        />\n        )}\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}