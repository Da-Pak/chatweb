{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import SelectableMessage from'./SelectableMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import LoadingMessage from'../../shared/components/LoadingMessage';import{chatApi}from'../../shared/api/chatApi';import{sentenceApi}from'../api/sentenceApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const ChatSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n\"])));// 토스트 스타일 컴포넌트 추가\nconst Toast=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const ProceedView=_ref=>{let{personaId,personaName,proceedContent,threads,onThreadUpdate,onSwitchToMode,onGenerateNewInterpretation,selectedThread:propSelectedThread,onRefreshThreads}=_ref;const[selectedThread,setSelectedThread]=useState(propSelectedThread||null);const[isLoading,setIsLoading]=useState(false);const[localThreads,setLocalThreads]=useState(threads);const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');// 문장 선택 관련 상태\nconst[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});const[isSentenceModeActive,setIsSentenceModeActive]=useState(false);const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 나아가기 스레드만 필터링\nconst proceedThreads=localThreads.filter(thread=>thread.thread_type==='proceed');useEffect(()=>{setLocalThreads(threads);},[threads]);// 선택된 스레드 변경 시 처리\nuseEffect(()=>{if(propSelectedThread){console.log('선택된 스레드 변경:',propSelectedThread.id);setSelectedThread(propSelectedThread);// 스레드별 문장 데이터 로딩\nloadThreadSentenceData(propSelectedThread.id);}},[propSelectedThread]);// 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\nconst loadThreadSentenceData=async threadId=>{try{console.log('=== 나아가기 스레드 데이터 로딩 시작 ===');console.log('스레드 ID:',threadId);// 백엔드에서 스레드 데이터 로딩\nconst data=await sentenceApi.getThreadSentenceData(threadId);console.log('로딩된 메모:',Object.keys(data.memos).length,'개');console.log('로딩된 하이라이트:',data.highlights.length,'개');// 백엔드 데이터로 상태 설정\nsetMemos(data.memos);setHighlightedSentences(new Set(data.highlights));console.log('=== 나아가기 스레드 데이터 로딩 완료 ===');}catch(error){console.error('스레드 문장 데이터 로딩 실패:',error);// 실패 시 빈 상태로 초기화\nsetMemos({});setHighlightedSentences(new Set());}};useEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages]);const handleSendMessage=async message=>{// 선택된 스레드가 없으면 기본 스레드 생성\nlet currentThread=selectedThread;if(!currentThread){// 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\nconst proceedThread=proceedThreads[0];if(proceedThread){currentThread=proceedThread;setSelectedThread(currentThread);}else{// 기본 스레드 생성 (UI용)\nconst defaultThread={id:\"proceed_default_\".concat(personaId),persona_id:personaId,thread_type:'proceed',content:proceedContent,messages:[{role:'assistant',content:proceedContent,timestamp:new Date().toISOString(),persona_id:personaId,persona_name:personaName}],created_at:new Date().toISOString(),updated_at:new Date().toISOString()};currentThread=defaultThread;setSelectedThread(currentThread);// 로컬 스레드 목록에도 추가\nconst updatedThreads=[...localThreads,defaultThread];setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);}}// 1. 사용자 메시지를 즉시 UI에 추가\nconst userMessage={role:'user',content:message,timestamp:new Date().toISOString()};const updatedThread=_objectSpread(_objectSpread({},currentThread),{},{messages:[...currentThread.messages,userMessage],updated_at:new Date().toISOString()});setSelectedThread(updatedThread);// 2. 로딩 상태 시작\nsetIsLoading(true);try{// 3. 백엔드 API 호출\nconsole.log('=== ProceedView API 호출 시작 ===');console.log('요청 데이터:',{thread_id:currentThread.id,user_message:message});const response=await chatApi.chatWithThread({thread_id:currentThread.id,user_message:message});console.log('=== API 응답 받음 ===');console.log('전체 응답:',response);console.log('response.data:',response.data);console.log('response.error:',response.error);if(response.data){console.log('응답 데이터 구조 분석:');console.log('- thread_id:',response.data.thread_id);console.log('- user_message:',response.data.user_message);console.log('- response:',response.data.response);console.log('- thread_updated_at:',response.data.thread_updated_at);if(response.data.response){console.log('응답 메시지 구조 분석:');console.log('- role:',response.data.response.role);console.log('- content:',response.data.response.content);console.log('- timestamp:',response.data.response.timestamp);console.log('- persona_id:',response.data.response.persona_id);console.log('- persona_name:',response.data.response.persona_name);}}if(response.data&&response.data.response){// 4. AI 응답을 UI에 추가\nconst assistantMessage={role:'assistant',content:response.data.response.content,timestamp:response.data.response.timestamp,persona_id:response.data.response.persona_id||personaId,persona_name:response.data.response.persona_name||personaName};console.log('생성된 assistant 메시지:',assistantMessage);const finalUpdatedThread=_objectSpread(_objectSpread({},updatedThread),{},{messages:[...updatedThread.messages,assistantMessage],updated_at:response.data.thread_updated_at||new Date().toISOString()});console.log('최종 업데이트된 스레드:',finalUpdatedThread);console.log('스레드 메시지 개수:',finalUpdatedThread.messages.length);setSelectedThread(finalUpdatedThread);// 5. 로컬 스레드 목록도 업데이트\nconst updatedThreads=localThreads.map(t=>t.id===currentThread.id?finalUpdatedThread:t);setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);console.log('=== UI 업데이트 완료 ===');setIsLoading(false);return true;}else{console.error('나아가기 채팅 응답 오류:',response);setIsLoading(false);return false;}}catch(error){console.error('나아가기 채팅 오류:',error);setIsLoading(false);return false;}};// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);showCopyToast('복사 실패');}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 관련 함수들\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};const handleEditMessage=async(messageIndex,newContent)=>{console.log('=== handleEditMessage 호출 ===');console.log('messageIndex:',messageIndex);console.log('newContent:',newContent);console.log('selectedThread:',selectedThread);console.log('selectedThread.messages:',selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages);if(!(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id)){console.log('스레드 ID가 없습니다');showCopyToast('스레드가 선택되지 않았습니다');return false;}console.log('스레드 ID:',selectedThread.id);console.log('요청할 API 정보:',{threadId:selectedThread.id,messageIndex,newContent:newContent.substring(0,100)+'...'});try{var _response$data;setIsLoading(true);// 백엔드 API 호출\nconst response=await chatApi.editThreadMessage(selectedThread.id,messageIndex,newContent);console.log('API 응답:',response);if((_response$data=response.data)!==null&&_response$data!==void 0&&_response$data.success&&response.data.updated_thread){console.log('수정 성공, 스레드 업데이트 중...');// 스레드 업데이트\nsetSelectedThread(response.data.updated_thread);// 로컬 스레드 목록도 업데이트\nconst updatedThreads=localThreads.map(t=>t.id===selectedThread.id?response.data.updated_thread:t);setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);setEditingMessageIndex(null);showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');setIsLoading(false);return true;}else{console.error('메시지 수정 실패:',response.error);showCopyToast('메시지 수정에 실패했습니다');setIsLoading(false);return false;}}catch(error){console.error('메시지 수정 오류:',error);showCopyToast('메시지 수정 중 오류가 발생했습니다');setIsLoading(false);return false;}};const handleCancelEdit=()=>{setEditingMessageIndex(null);};// 문장 선택 관련 함수들\nconst handleToggleSelect=sentenceId=>{setSelectedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(sentenceId)){newSet.delete(sentenceId);}else{newSet.add(sentenceId);}return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{// sentenceId로부터 실제 문장 내용 찾기\nconst[timestamp,,sentenceIndex]=sentenceId.split('_');let sentenceContent='';if(selectedThread!==null&&selectedThread!==void 0&&selectedThread.messages){const message=selectedThread.messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n.]+/).map(s=>s.trim()).filter(s=>s.length>0);sentenceContent=sentences[parseInt(sentenceIndex)]||'';}}try{// 백엔드 API 호출로 실제 저장\nawait sentenceApi.createOrUpdateMemo({sentence_id:sentenceId,thread_id:selectedThread===null||selectedThread===void 0?void 0:selectedThread.id,thread_type:'proceed',content:memo,sentence_content:sentenceContent,source_message_id:\"proceed_\".concat(personaId)});// 성공 시 로컬 상태도 업데이트\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));showCopyToast('메모가 저장되었습니다');}catch(error){console.error('메모 저장 실패:',error);showCopyToast('메모 저장에 실패했습니다');throw error;}};const handleDeleteMemo=async sentenceId=>{try{// 백엔드 API 호출\nawait sentenceApi.deleteMemo(sentenceId);// 성공 시 로컬 상태 업데이트\nsetMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});// 하이라이트도 제거\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);newSet.delete(sentenceId);return newSet;});showCopyToast('메모가 삭제되었습니다');}catch(error){console.error('메모 삭제 실패:',error);showCopyToast('메모 삭제에 실패했습니다');}};// 액션 핸들러들\nconst handleSunAction=async messageContent=>{// 전달받은 메시지 내용을 해석 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 해석 스레드에 저장\nconst response=await chatApi.saveCurrentAsInterpretation(personaId,messageContent);if(response.data){// 스레드 새로고침\nif(onRefreshThreads){onRefreshThreads();}showCopyToast('메시지가 해석 스레드에 저장되었습니다');}else{showCopyToast('해석 저장에 실패했습니다');}}catch(error){console.error('해석 저장 중 오류:',error);showCopyToast('해석 저장에 실패했습니다');}};const handlePersonAction=async messageContent=>{// 전달받은 메시지 내용을 나아가기 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\nconst response=await chatApi.saveCurrentAsProceed(personaId,messageContent);if(response.data){// 스레드 새로고침\nhandleRefreshThreads();showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');}else{showCopyToast('나아가기 저장에 실패했습니다');}}catch(error){console.error('나아가기 저장 중 오류:',error);showCopyToast('나아가기 저장에 실패했습니다');}};const handleDocumentAction=async messageContent=>{// 전달받은 메시지 내용을 문장 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 문장 스레드에 저장\nconst response=await chatApi.saveCurrentAsSentence(personaId,messageContent);if(response.data){// 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\nif(onThreadUpdate){try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){onThreadUpdate(threadsResponse.data);}}catch(error){console.error('스레드 새로고침 실패:',error);}}showCopyToast('메시지가 문장 스레드에 저장되었습니다');}else{showCopyToast('문장 저장에 실패했습니다');}}catch(error){console.error('문장 저장 중 오류:',error);showCopyToast('문장 저장에 실패했습니다');}};// 스레드 새로고침 함수\nconst handleRefreshThreads=async()=>{try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){const updatedThreads=threadsResponse.data;setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);// 새로 생성된 나아가기 스레드 선택\nconst newProceedThread=updatedThreads.filter(t=>t.thread_type==='proceed').sort((a,b)=>new Date(b.created_at).getTime()-new Date(a.created_at).getTime())[0];if(newProceedThread&&(!selectedThread||newProceedThread.id!==selectedThread.id)){setSelectedThread(newProceedThread);showCopyToast('새로운 나아가기가 생성되었습니다');}}}catch(error){console.error('스레드 새로고침 실패:',error);}};// FloatingActionButton 메뉴 액션 처리\nconst handleMenuAction=async action=>{const selectedIds=Array.from(selectedSentences);const selectedTexts=selectedIds.map(id=>{// sentenceId에서 실제 문장 텍스트를 찾아내는 로직\nconst[timestamp,,sentenceIndex]=id.split('_');const message=selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n.]+/).map(s=>s.trim()).filter(s=>s.length>0);return sentences[parseInt(sentenceIndex)]||'';}return'';}).filter(text=>text.length>0);switch(action){case'sendToInput':if(messageInputRef.current&&selectedTexts.length>0){const formattedText=selectedTexts.map(text=>\"\\\"\".concat(text,\"\\\"\")).join(', ');messageInputRef.current.insertText(formattedText);}break;case'saveToVault':try{// 선택된 문장들의 하이라이트/메모 상태 수집\nconst highlightStates=[];const highlightColors=[];const memoContents=[];for(const sentenceId of selectedIds){const isHighlighted=highlightedSentences.has(sentenceId);const memoContent=memos[sentenceId]||null;highlightStates.push(isHighlighted);highlightColors.push(isHighlighted?'yellow':null);memoContents.push(memoContent);}await sentenceApi.saveSentencesToVault({sentences:selectedTexts,source_message_id:\"proceed_\".concat(personaId),source_conversation_id:selectedThread===null||selectedThread===void 0?void 0:selectedThread.id,source_thread_id:selectedThread===null||selectedThread===void 0?void 0:selectedThread.id,source_thread_type:'proceed',source_sentence_ids:selectedIds,tags:['proceed',personaId],highlight_states:highlightStates,highlight_colors:highlightColors,memo_contents:memoContents});// 백엔드에 하이라이트도 저장 (기존 로직 유지)\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){for(const sentenceId of selectedIds){await sentenceApi.createHighlight({sentence_id:sentenceId,thread_id:selectedThread.id,thread_type:'proceed'});}}// 성공 시 로컬 상태 업데이트\nsetHighlightedSentences(prev=>new Set([...Array.from(prev),...selectedIds]));showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');}catch(error){console.error('저장고 저장 실패:',error);showCopyToast('저장고 저장에 실패했습니다');}break;case'addMemo':if(selectedIds.length>0){// 가장 아래에 있는 문장 ID 찾기\nconst sortedIds=selectedIds.sort((a,b)=>{const[timestampA,,sentenceIndexA]=a.split('_');const[timestampB,,sentenceIndexB]=b.split('_');if(timestampA!==timestampB){return new Date(timestampA).getTime()-new Date(timestampB).getTime();}return parseInt(sentenceIndexA)-parseInt(sentenceIndexB);});const bottomSentenceId=sortedIds[sortedIds.length-1];try{// 백엔드에 메모 생성 - 메모 저장고 정보 포함\nconst bottomSentenceText=selectedTexts[selectedTexts.length-1];await sentenceApi.createOrUpdateMemo({sentence_id:bottomSentenceId,thread_id:selectedThread===null||selectedThread===void 0?void 0:selectedThread.id,thread_type:'proceed',content:'',sentence_content:bottomSentenceText,source_message_id:\"proceed_\".concat(personaId)});// 백엔드에 하이라이트 저장\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){for(const sentenceId of selectedIds){await sentenceApi.createHighlight({sentence_id:sentenceId,thread_id:selectedThread.id,thread_type:'proceed'});}}// 성공 시 로컬 상태 업데이트\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[bottomSentenceId]:''}));setHighlightedSentences(prev=>new Set([...Array.from(prev),...selectedIds]));showCopyToast('메모와 하이라이트가 추가되었습니다');}catch(error){console.error('메모/하이라이트 추가 실패:',error);showCopyToast('메모/하이라이트 추가에 실패했습니다');}}break;case'highlight':if(selectedIds.length>0&&selectedThread!==null&&selectedThread!==void 0&&selectedThread.id){try{console.log('하이라이트 토글 시작:',selectedIds);// 현재 하이라이트된 문장들과 선택된 문장들을 비교\nconst currentlyHighlighted=selectedIds.filter(id=>highlightedSentences.has(id));const notHighlighted=selectedIds.filter(id=>!highlightedSentences.has(id));console.log('현재 하이라이트된 문장들:',currentlyHighlighted);console.log('아직 하이라이트되지 않은 문장들:',notHighlighted);if(currentlyHighlighted.length>0){// 일부가 하이라이트되어 있으면 모두 제거\nconsole.log('기존 하이라이트 제거 중...');// 로컬 상태에서 하이라이트 제거\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.delete(id));return newSet;});// 백엔드에서 하이라이트 삭제\nfor(const sentenceId of selectedIds){try{await sentenceApi.deleteHighlight(sentenceId);}catch(error){console.warn('백엔드 하이라이트 삭제 실패:',error);}}showCopyToast('하이라이트가 제거되었습니다');}else{// 모두 하이라이트되지 않았으면 모두 추가\nconsole.log('새 하이라이트 추가 중...');// 로컬 상태에 하이라이트 추가\nsetHighlightedSentences(prev=>new Set([...Array.from(prev),...selectedIds]));// 백엔드에 하이라이트 저장\nfor(const sentenceId of selectedIds){try{await sentenceApi.createHighlight({sentence_id:sentenceId,thread_id:selectedThread.id,thread_type:'proceed'});}catch(error){console.warn('백엔드 하이라이트 저장 실패:',error);}}showCopyToast('하이라이트가 추가되었습니다');}}catch(error){console.error('하이라이트 토글 실패:',error);showCopyToast('하이라이트 처리에 실패했습니다');}}break;case'copy':if(selectedTexts.length>0){await copyToClipboard(selectedTexts.join(' '),'선택된 문장이 복사되었습니다');}break;}// 모든 선택 해제\nsetSelectedSentences(new Set());};// 문장선택 모드 토글\nconst handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[!selectedThread||selectedThread.messages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'24px',marginBottom:'8px'},children:\"\\uD83C\\uDFAF\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'4px'},children:[personaName,\"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]})]}):selectedThread.messages.map((message,index)=>message.role==='user'?/*#__PURE__*/_jsx(Message,{message:_objectSpread(_objectSpread({},message),{},{persona_id:undefined,persona_name:undefined}),personas:{},showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onEdit:()=>handleStartEdit(index),isEditing:editingMessageIndex===index,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit},\"proceed_\".concat(index)):/*#__PURE__*/_jsx(SelectableMessage,{message:_objectSpread(_objectSpread({},message),{},{persona_id:'current_persona',persona_name:personaName}),personas:{current_persona:{name:personaName,description:'',color:'#ff9800',prompt:'',category:'',subcategory:''}},selectedSentences:isSentenceModeActive?selectedSentences:new Set(),highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:isSentenceModeActive?handleToggleSelect:()=>{},onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo,showSentenceSelector:isSentenceModeActive,showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onSunAction:messageContent=>handleSunAction(messageContent),onPersonAction:messageContent=>handlePersonAction(messageContent),onDocumentAction:messageContent=>handleDocumentAction(messageContent)},\"proceed_\".concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:personaName,personaColor:\"#ff9800\",customMessage:\"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:handleSendMessage,disabled:isLoading,placeholder:\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uB098\\uC544\\uAC00\\uAE30\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\"),onToggleSentenceMode:handleToggleSentenceMode,isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,currentInterpretation:(selectedThread===null||selectedThread===void 0?void 0:selectedThread.content)||proceedContent,personaId:personaId,onGenerateProceed:messageContent=>handlePersonAction(messageContent),onGenerateSentence:messageContent=>handleDocumentAction(messageContent),currentChatMessages:selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages,onRefreshThreads:handleRefreshThreads})})]}),/*#__PURE__*/_jsx(FloatingActionButton,{show:isSentenceModeActive&&selectedSentences.size>0,onMenuAction:handleMenuAction,personaId:personaId,currentInterpretation:proceedContent})]});};export default ProceedView;","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","ChatSection","_templateObject2","ChatMessages","_templateObject3","ChatInputSection","_templateObject4","EmptyChat","_templateObject5","Toast","_templateObject6","props","show","ProceedView","_ref","personaId","personaName","proceedContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","onRefreshThreads","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","proceedThreads","filter","thread","thread_type","console","log","id","loadThreadSentenceData","threadId","data","getThreadSentenceData","Object","keys","length","highlights","error","current","scrollTop","scrollHeight","messages","handleSendMessage","message","currentThread","proceedThread","defaultThread","concat","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","_objectSpread","thread_id","user_message","response","chatWithThread","thread_updated_at","assistantMessage","finalUpdatedThread","map","t","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","substring","_response$data","editThreadMessage","success","updated_thread","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","sentenceIndex","split","sentenceContent","find","m","sentences","s","trim","parseInt","createOrUpdateMemo","sentence_id","sentence_content","source_message_id","handleDeleteMemo","deleteMemo","newMemos","handleSunAction","saveCurrentAsInterpretation","handlePersonAction","saveCurrentAsProceed","handleRefreshThreads","handleDocumentAction","saveCurrentAsSentence","threadsResponse","getPersonaThreads","newProceedThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","Array","from","selectedTexts","formattedText","join","insertText","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","push","saveSentencesToVault","source_conversation_id","source_thread_id","source_thread_type","source_sentence_ids","tags","highlight_states","highlight_colors","memo_contents","createHighlight","sortedIds","timestampA","sentenceIndexA","timestampB","sentenceIndexB","bottomSentenceId","bottomSentenceText","currentlyHighlighted","notHighlighted","forEach","deleteHighlight","warn","handleToggleSentenceMode","children","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/ProceedView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface ProceedViewProps {\n  personaId: string;\n  personaName: string;\n  proceedContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'sentence') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n  onRefreshThreads?: () => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst ProceedView: React.FC<ProceedViewProps> = ({\n  personaId,\n  personaName,\n  proceedContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 나아가기 스레드만 필터링\n  const proceedThreads = localThreads.filter(thread => thread.thread_type === 'proceed');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // 선택된 스레드 변경 시 처리\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('=== 나아가기 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n      \n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n      \n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      \n      console.log('=== 나아가기 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 나아가기 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const proceedThread = proceedThreads[0];\n      if (proceedThread) {\n        currentThread = proceedThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `proceed_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'proceed',\n          content: proceedContent,\n          messages: [{\n            role: 'assistant',\n            content: proceedContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      console.log('=== ProceedView API 호출 시작 ===');\n      console.log('요청 데이터:', { thread_id: currentThread.id, user_message: message });\n      \n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      console.log('=== API 응답 받음 ===');\n      console.log('전체 응답:', response);\n      console.log('response.data:', response.data);\n      console.log('response.error:', response.error);\n\n      if (response.data) {\n        console.log('응답 데이터 구조 분석:');\n        console.log('- thread_id:', response.data.thread_id);\n        console.log('- user_message:', response.data.user_message);\n        console.log('- response:', response.data.response);\n        console.log('- thread_updated_at:', response.data.thread_updated_at);\n        \n        if (response.data.response) {\n          console.log('응답 메시지 구조 분석:');\n          console.log('- role:', response.data.response.role);\n          console.log('- content:', response.data.response.content);\n          console.log('- timestamp:', response.data.response.timestamp);\n          console.log('- persona_id:', response.data.response.persona_id);\n          console.log('- persona_name:', response.data.response.persona_name);\n        }\n      }\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        console.log('생성된 assistant 메시지:', assistantMessage);\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        console.log('최종 업데이트된 스레드:', finalUpdatedThread);\n        console.log('스레드 메시지 개수:', finalUpdatedThread.messages.length);\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        console.log('=== UI 업데이트 완료 ===');\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('나아가기 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('나아가기 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    console.log('=== handleEditMessage 호출 ===');\n    console.log('messageIndex:', messageIndex);\n    console.log('newContent:', newContent);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread.messages:', selectedThread?.messages);\n    \n    if (!selectedThread?.id) {\n      console.log('스레드 ID가 없습니다');\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n\n    console.log('스레드 ID:', selectedThread.id);\n    console.log('요청할 API 정보:', {\n      threadId: selectedThread.id,\n      messageIndex,\n      newContent: newContent.substring(0, 100) + '...'\n    });\n\n    try {\n      setIsLoading(true);\n      \n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      \n      console.log('API 응답:', response);\n      \n      if (response.data?.success && response.data.updated_thread) {\n        console.log('수정 성공, 스레드 업데이트 중...');\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n        \n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id ? response.data!.updated_thread! : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n    setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n    return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp, , sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (selectedThread?.messages) {\n      const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    \n    try {\n      // 백엔드 API 호출로 실제 저장\n      await sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        thread_id: selectedThread?.id,\n        thread_type: 'proceed',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `proceed_${personaId}`\n      });\n      \n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error;\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n      \n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      \n      // 하이라이트도 제거\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n      \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침 (문장 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 나아가기 스레드 선택\n              const newProceedThread = updatedThreads\n                .filter(t => t.thread_type === 'proceed')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newProceedThread && (!selectedThread || newProceedThread.id !== selectedThread.id)) {\n                setSelectedThread(newProceedThread);\n          showCopyToast('새로운 나아가기가 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, , sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `proceed_${personaId}`,\n            source_conversation_id: selectedThread?.id,\n            source_thread_id: selectedThread?.id,\n            source_thread_type: 'proceed',\n            source_sentence_ids: selectedIds,\n            tags: ['proceed', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          // 백엔드에 하이라이트도 저장 (기존 로직 유지)\n          if (selectedThread?.id) {\n            for (const sentenceId of selectedIds) {\n              await sentenceApi.createHighlight({\n                sentence_id: sentenceId,\n                thread_id: selectedThread.id,\n                thread_type: 'proceed'\n              });\n            }\n          }\n          \n          // 성공 시 로컬 상태 업데이트\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          \n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          try {\n            // 백엔드에 메모 생성 - 메모 저장고 정보 포함\n            const bottomSentenceText = selectedTexts[selectedTexts.length - 1];\n            await sentenceApi.createOrUpdateMemo({\n              sentence_id: bottomSentenceId,\n              thread_id: selectedThread?.id,\n              thread_type: 'proceed',\n              content: '',\n              sentence_content: bottomSentenceText,\n              source_message_id: `proceed_${personaId}`\n            });\n            \n            // 백엔드에 하이라이트 저장\n            if (selectedThread?.id) {\n              for (const sentenceId of selectedIds) {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: selectedThread.id,\n                  thread_type: 'proceed'\n                });\n              }\n            }\n            \n            // 성공 시 로컬 상태 업데이트\n            setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n            setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n            \n            showCopyToast('메모와 하이라이트가 추가되었습니다');\n          } catch (error) {\n            console.error('메모/하이라이트 추가 실패:', error);\n            showCopyToast('메모/하이라이트 추가에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'highlight':\n        if (selectedIds.length > 0 && selectedThread?.id) {\n          try {\n            console.log('하이라이트 토글 시작:', selectedIds);\n            \n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            \n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            \n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n              \n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n              \n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n              \n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n              \n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: selectedThread.id,\n                    thread_type: 'proceed'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>🎯</div>\n              <div>나아가기에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`proceed_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#ff9800',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={(messageContent) => handleSunAction(messageContent)}\n                  onPersonAction={(messageContent) => handlePersonAction(messageContent)}\n                  onDocumentAction={(messageContent) => handleDocumentAction(messageContent)}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#ff9800\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 나아가기에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || proceedContent}\n            personaId={personaId}\n            onGenerateProceed={(messageContent: string) => handlePersonAction(messageContent)}\n            onGenerateSentence={(messageContent: string) => handleDocumentAction(messageContent)}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={proceedContent}\n      />\n    </Container>\n  );\n};\n\nexport default ProceedView; "],"mappings":"gYAAA,MAAO,CAAAA,KAAK,EAAIC,QAAQ,CAAEC,MAAM,CAAEC,SAAS,KAAQ,OAAO,CAC1D,MAAO,CAAAC,MAAM,KAAM,mBAAmB,CACtC,MAAO,CAAAC,YAAY,KAA2B,sCAAsC,CACpF,MAAO,CAAAC,OAAO,KAAM,iCAAiC,CACrD,MAAO,CAAAC,iBAAiB,KAAM,qBAAqB,CACnD,MAAO,CAAAC,oBAAoB,KAAM,8CAA8C,CAC/E,MAAO,CAAAC,cAAc,KAAM,wCAAwC,CACnE,OAASC,OAAO,KAAQ,0BAA0B,CAElD,OAASC,WAAW,KAAQ,oBAAoB,CAAC,OAAAC,GAAA,IAAAC,IAAA,CAAAC,IAAA,IAAAC,KAAA,yBAcjD,KAAM,CAAAC,SAAS,CAAGZ,MAAM,CAACa,GAAG,CAAAC,eAAA,GAAAA,eAAA,CAAAC,sBAAA,8FAK3B,CAED,KAAM,CAAAC,WAAW,CAAGhB,MAAM,CAACa,GAAG,CAAAI,gBAAA,GAAAA,gBAAA,CAAAF,sBAAA,wFAK7B,CAED,KAAM,CAAAG,YAAY,CAAGlB,MAAM,CAACa,GAAG,CAAAM,gBAAA,GAAAA,gBAAA,CAAAJ,sBAAA,wHAO9B,CAED,KAAM,CAAAK,gBAAgB,CAAGpB,MAAM,CAACa,GAAG,CAAAQ,gBAAA,GAAAA,gBAAA,CAAAN,sBAAA,8EAIlC,CAED,KAAM,CAAAO,SAAS,CAAGtB,MAAM,CAACa,GAAG,CAAAU,gBAAA,GAAAA,gBAAA,CAAAR,sBAAA,kLAS3B,CAED;AACA,KAAM,CAAAS,KAAK,CAAGxB,MAAM,CAACa,GAAG,CAAAY,gBAAA,GAAAA,gBAAA,CAAAV,sBAAA,mTAUTW,KAAK,EAAIA,KAAK,CAACC,IAAI,CAAG,eAAe,CAAG,kBAAkB,CAIxE,CAED,KAAM,CAAAC,WAAuC,CAAGC,IAAA,EAU1C,IAV2C,CAC/CC,SAAS,CACTC,WAAW,CACXC,cAAc,CACdC,OAAO,CACPC,cAAc,CACdC,cAAc,CACdC,2BAA2B,CAC3BC,cAAc,CAAEC,kBAAkB,CAClCC,gBACF,CAAC,CAAAV,IAAA,CACC,KAAM,CAACQ,cAAc,CAAEG,iBAAiB,CAAC,CAAG3C,QAAQ,CAAwByC,kBAAkB,EAAI,IAAI,CAAC,CACvG,KAAM,CAACG,SAAS,CAAEC,YAAY,CAAC,CAAG7C,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAAC8C,YAAY,CAAEC,eAAe,CAAC,CAAG/C,QAAQ,CAAmBoC,OAAO,CAAC,CAC3E,KAAM,CAAAY,eAAe,CAAG/C,MAAM,CAAiB,IAAI,CAAC,CACpD,KAAM,CAAAgD,eAAe,CAAGhD,MAAM,CAAkB,IAAI,CAAC,CACrD,KAAM,CAACiD,SAAS,CAAEC,YAAY,CAAC,CAAGnD,QAAQ,CAAC,KAAK,CAAC,CACjD,KAAM,CAACoD,YAAY,CAAEC,eAAe,CAAC,CAAGrD,QAAQ,CAAC,EAAE,CAAC,CAEpD;AACA,KAAM,CAACsD,iBAAiB,CAAEC,oBAAoB,CAAC,CAAGvD,QAAQ,CAAc,GAAI,CAAAwD,GAAG,CAAC,CAAC,CAAC,CAClF,KAAM,CAACC,oBAAoB,CAAEC,uBAAuB,CAAC,CAAG1D,QAAQ,CAAc,GAAI,CAAAwD,GAAG,CAAC,CAAC,CAAC,CACxF,KAAM,CAACG,KAAK,CAAEC,QAAQ,CAAC,CAAG5D,QAAQ,CAAyB,CAAC,CAAC,CAAC,CAC9D,KAAM,CAAC6D,oBAAoB,CAAEC,uBAAuB,CAAC,CAAG9D,QAAQ,CAAC,KAAK,CAAC,CACvE,KAAM,CAAC+D,mBAAmB,CAAEC,sBAAsB,CAAC,CAAGhE,QAAQ,CAAgB,IAAI,CAAC,CAEnF;AACA,KAAM,CAAAiE,cAAc,CAAGnB,YAAY,CAACoB,MAAM,CAACC,MAAM,EAAIA,MAAM,CAACC,WAAW,GAAK,SAAS,CAAC,CAEtFlE,SAAS,CAAC,IAAM,CACd6C,eAAe,CAACX,OAAO,CAAC,CAC1B,CAAC,CAAE,CAACA,OAAO,CAAC,CAAC,CAEb;AACAlC,SAAS,CAAC,IAAM,CACd,GAAIuC,kBAAkB,CAAE,CACtB4B,OAAO,CAACC,GAAG,CAAC,aAAa,CAAE7B,kBAAkB,CAAC8B,EAAE,CAAC,CACjD5B,iBAAiB,CAACF,kBAAkB,CAAC,CAErC;AACA+B,sBAAsB,CAAC/B,kBAAkB,CAAC8B,EAAE,CAAC,CAC/C,CACF,CAAC,CAAE,CAAC9B,kBAAkB,CAAC,CAAC,CAExB;AACA,KAAM,CAAA+B,sBAAsB,CAAG,KAAO,CAAAC,QAAgB,EAAK,CACzD,GAAI,CACFJ,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CACzCD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEG,QAAQ,CAAC,CAEhC;AACA,KAAM,CAAAC,IAAI,CAAG,KAAM,CAAAhE,WAAW,CAACiE,qBAAqB,CAACF,QAAQ,CAAC,CAE9DJ,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEM,MAAM,CAACC,IAAI,CAACH,IAAI,CAACf,KAAK,CAAC,CAACmB,MAAM,CAAE,GAAG,CAAC,CAC3DT,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEI,IAAI,CAACK,UAAU,CAACD,MAAM,CAAE,GAAG,CAAC,CAEtD;AACAlB,QAAQ,CAACc,IAAI,CAACf,KAAK,CAAC,CACpBD,uBAAuB,CAAC,GAAI,CAAAF,GAAG,CAACkB,IAAI,CAACK,UAAU,CAAC,CAAC,CAEjDV,OAAO,CAACC,GAAG,CAAC,4BAA4B,CAAC,CAC3C,CAAE,MAAOU,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,mBAAmB,CAAEA,KAAK,CAAC,CACzC;AACApB,QAAQ,CAAC,CAAC,CAAC,CAAC,CACZF,uBAAuB,CAAC,GAAI,CAAAF,GAAG,CAAC,CAAC,CAAC,CACpC,CACF,CAAC,CAEDtD,SAAS,CAAC,IAAM,CACd,GAAI8C,eAAe,CAACiC,OAAO,CAAE,CAC3BjC,eAAe,CAACiC,OAAO,CAACC,SAAS,CAAGlC,eAAe,CAACiC,OAAO,CAACE,YAAY,CAC1E,CACF,CAAC,CAAE,CAAC3C,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE4C,QAAQ,CAAC,CAAC,CAE9B,KAAM,CAAAC,iBAAiB,CAAG,KAAO,CAAAC,OAAe,EAAuB,CACrE;AACA,GAAI,CAAAC,aAAa,CAAG/C,cAAc,CAClC,GAAI,CAAC+C,aAAa,CAAE,CAClB;AACA,KAAM,CAAAC,aAAa,CAAGvB,cAAc,CAAC,CAAC,CAAC,CACvC,GAAIuB,aAAa,CAAE,CACjBD,aAAa,CAAGC,aAAa,CAC7B7C,iBAAiB,CAAC4C,aAAa,CAAC,CAClC,CAAC,IAAM,CACL;AACA,KAAM,CAAAE,aAA6B,CAAG,CACpClB,EAAE,oBAAAmB,MAAA,CAAqBzD,SAAS,CAAE,CAClC0D,UAAU,CAAE1D,SAAS,CACrBmC,WAAW,CAAE,SAAS,CACtBwB,OAAO,CAAEzD,cAAc,CACvBiD,QAAQ,CAAE,CAAC,CACTS,IAAI,CAAE,WAAW,CACjBD,OAAO,CAAEzD,cAAc,CACvB2D,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACnCL,UAAU,CAAE1D,SAAS,CACrBgE,YAAY,CAAE/D,WAChB,CAAC,CAAC,CACFgE,UAAU,CAAE,GAAI,CAAAH,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,CACpCG,UAAU,CAAE,GAAI,CAAAJ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACrC,CAAC,CACDT,aAAa,CAAGE,aAAa,CAC7B9C,iBAAiB,CAAC4C,aAAa,CAAC,CAEhC;AACA,KAAM,CAAAa,cAAc,CAAG,CAAC,GAAGtD,YAAY,CAAE2C,aAAa,CAAC,CACvD1C,eAAe,CAACqD,cAAc,CAAC,CAC/B/D,cAAc,CAAC+D,cAAc,CAAC,CAChC,CACF,CAEA;AACA,KAAM,CAAAC,WAAW,CAAG,CAClBR,IAAI,CAAE,MAAe,CACrBD,OAAO,CAAEN,OAAO,CAChBQ,SAAS,CAAE,GAAI,CAAAC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CACpC,CAAC,CAED,KAAM,CAAAM,aAAa,CAAAC,aAAA,CAAAA,aAAA,IACdhB,aAAa,MAChBH,QAAQ,CAAE,CAAC,GAAGG,aAAa,CAACH,QAAQ,CAAEiB,WAAW,CAAC,CAClDF,UAAU,CAAE,GAAI,CAAAJ,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EACrC,CAEDrD,iBAAiB,CAAC2D,aAAa,CAAC,CAEhC;AACAzD,YAAY,CAAC,IAAI,CAAC,CAElB,GAAI,CACF;AACAwB,OAAO,CAACC,GAAG,CAAC,+BAA+B,CAAC,CAC5CD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAE,CAAEkC,SAAS,CAAEjB,aAAa,CAAChB,EAAE,CAAEkC,YAAY,CAAEnB,OAAQ,CAAC,CAAC,CAE9E,KAAM,CAAAoB,QAAQ,CAAG,KAAM,CAAAjG,OAAO,CAACkG,cAAc,CAAC,CAC5CH,SAAS,CAAEjB,aAAa,CAAChB,EAAE,CAC3BkC,YAAY,CAAEnB,OAChB,CAAC,CAAC,CAEFjB,OAAO,CAACC,GAAG,CAAC,mBAAmB,CAAC,CAChCD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAEoC,QAAQ,CAAC,CAC/BrC,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEoC,QAAQ,CAAChC,IAAI,CAAC,CAC5CL,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEoC,QAAQ,CAAC1B,KAAK,CAAC,CAE9C,GAAI0B,QAAQ,CAAChC,IAAI,CAAE,CACjBL,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAC5BD,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEoC,QAAQ,CAAChC,IAAI,CAAC8B,SAAS,CAAC,CACpDnC,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEoC,QAAQ,CAAChC,IAAI,CAAC+B,YAAY,CAAC,CAC1DpC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAEoC,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAAC,CAClDrC,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAEoC,QAAQ,CAAChC,IAAI,CAACkC,iBAAiB,CAAC,CAEpE,GAAIF,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAAE,CAC1BrC,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC,CAC5BD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEoC,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACb,IAAI,CAAC,CACnDxB,OAAO,CAACC,GAAG,CAAC,YAAY,CAAEoC,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACd,OAAO,CAAC,CACzDvB,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEoC,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACZ,SAAS,CAAC,CAC7DzB,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEoC,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACf,UAAU,CAAC,CAC/DtB,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAEoC,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACT,YAAY,CAAC,CACrE,CACF,CAEA,GAAIS,QAAQ,CAAChC,IAAI,EAAIgC,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAAE,CAC3C;AACA,KAAM,CAAAG,gBAAgB,CAAG,CACvBhB,IAAI,CAAE,WAAoB,CAC1BD,OAAO,CAAEc,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACd,OAAO,CACvCE,SAAS,CAAEY,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACZ,SAAS,CAC3CH,UAAU,CAAEe,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACf,UAAU,EAAI1D,SAAS,CAC1DgE,YAAY,CAAES,QAAQ,CAAChC,IAAI,CAACgC,QAAQ,CAACT,YAAY,EAAI/D,WACvD,CAAC,CAEDmC,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEuC,gBAAgB,CAAC,CAEnD,KAAM,CAAAC,kBAAkB,CAAAP,aAAA,CAAAA,aAAA,IACnBD,aAAa,MAChBlB,QAAQ,CAAE,CAAC,GAAGkB,aAAa,CAAClB,QAAQ,CAAEyB,gBAAgB,CAAC,CACvDV,UAAU,CAAEO,QAAQ,CAAChC,IAAI,CAACkC,iBAAiB,EAAI,GAAI,CAAAb,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC,CAAC,EACxE,CAED3B,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEwC,kBAAkB,CAAC,CAChDzC,OAAO,CAACC,GAAG,CAAC,aAAa,CAAEwC,kBAAkB,CAAC1B,QAAQ,CAACN,MAAM,CAAC,CAE9DnC,iBAAiB,CAACmE,kBAAkB,CAAC,CAErC;AACA,KAAM,CAAAV,cAAc,CAAGtD,YAAY,CAACiE,GAAG,CAACC,CAAC,EACvCA,CAAC,CAACzC,EAAE,GAAKgB,aAAa,CAAEhB,EAAE,CAAGuC,kBAAkB,CAAGE,CACpD,CAAC,CACDjE,eAAe,CAACqD,cAAc,CAAC,CAC/B/D,cAAc,CAAC+D,cAAc,CAAC,CAE9B/B,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC,CAEjCzB,YAAY,CAAC,KAAK,CAAC,CACnB,MAAO,KAAI,CACb,CAAC,IAAM,CACLwB,OAAO,CAACW,KAAK,CAAC,gBAAgB,CAAE0B,QAAQ,CAAC,CACzC7D,YAAY,CAAC,KAAK,CAAC,CACnB,MAAO,MAAK,CACd,CACF,CAAE,MAAOmC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,aAAa,CAAEA,KAAK,CAAC,CACnCnC,YAAY,CAAC,KAAK,CAAC,CACnB,MAAO,MAAK,CACd,CACF,CAAC,CAID;AACA,KAAM,CAAAoE,aAAa,CAAI3B,OAAe,EAAK,CACzCjC,eAAe,CAACiC,OAAO,CAAC,CACxBnC,YAAY,CAAC,IAAI,CAAC,CAClB+D,UAAU,CAAC,IAAM/D,YAAY,CAAC,KAAK,CAAC,CAAE,IAAI,CAAC,CAC7C,CAAC,CAED;AACA,KAAM,CAAAgE,eAAe,CAAG,KAAAA,CAAOC,IAAY,CAAEC,cAAsB,GAAK,CACtE,GAAI,CACF,KAAM,CAAAC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACJ,IAAI,CAAC,CACzCH,aAAa,CAACI,cAAc,CAAC,CAC/B,CAAE,MAAOrC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,QAAQ,CAAEA,KAAK,CAAC,CAC9BiC,aAAa,CAAC,OAAO,CAAC,CACxB,CACF,CAAC,CAED;AACA,KAAM,CAAAQ,iBAAiB,CAAG,KAAO,CAAAC,cAAsB,EAAK,CAC1D,KAAM,CAAAP,eAAe,CAACO,cAAc,CAAE,cAAc,CAAC,CACvD,CAAC,CAED;AACA,KAAM,CAAAC,eAAe,CAAIC,YAAoB,EAAK,CAChD5D,sBAAsB,CAAC4D,YAAY,CAAC,CACtC,CAAC,CAED,KAAM,CAAAC,iBAAiB,CAAG,KAAAA,CAAOD,YAAoB,CAAEE,UAAkB,GAAK,CAC5EzD,OAAO,CAACC,GAAG,CAAC,8BAA8B,CAAC,CAC3CD,OAAO,CAACC,GAAG,CAAC,eAAe,CAAEsD,YAAY,CAAC,CAC1CvD,OAAO,CAACC,GAAG,CAAC,aAAa,CAAEwD,UAAU,CAAC,CACtCzD,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAE9B,cAAc,CAAC,CAC9C6B,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAE9B,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE4C,QAAQ,CAAC,CAEjE,GAAI,EAAC5C,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE+B,EAAE,EAAE,CACvBF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC,CAC3B2C,aAAa,CAAC,iBAAiB,CAAC,CAChC,MAAO,MAAK,CACd,CAEA5C,OAAO,CAACC,GAAG,CAAC,SAAS,CAAE9B,cAAc,CAAC+B,EAAE,CAAC,CACzCF,OAAO,CAACC,GAAG,CAAC,aAAa,CAAE,CACzBG,QAAQ,CAAEjC,cAAc,CAAC+B,EAAE,CAC3BqD,YAAY,CACZE,UAAU,CAAEA,UAAU,CAACC,SAAS,CAAC,CAAC,CAAE,GAAG,CAAC,CAAG,KAC7C,CAAC,CAAC,CAEF,GAAI,KAAAC,cAAA,CACFnF,YAAY,CAAC,IAAI,CAAC,CAElB;AACA,KAAM,CAAA6D,QAAQ,CAAG,KAAM,CAAAjG,OAAO,CAACwH,iBAAiB,CAACzF,cAAc,CAAC+B,EAAE,CAAEqD,YAAY,CAAEE,UAAU,CAAC,CAE7FzD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAEoC,QAAQ,CAAC,CAEhC,GAAI,CAAAsB,cAAA,CAAAtB,QAAQ,CAAChC,IAAI,UAAAsD,cAAA,WAAbA,cAAA,CAAeE,OAAO,EAAIxB,QAAQ,CAAChC,IAAI,CAACyD,cAAc,CAAE,CAC1D9D,OAAO,CAACC,GAAG,CAAC,sBAAsB,CAAC,CACnC;AACA3B,iBAAiB,CAAC+D,QAAQ,CAAChC,IAAI,CAACyD,cAAc,CAAC,CAE/C;AACA,KAAM,CAAA/B,cAAc,CAAGtD,YAAY,CAACiE,GAAG,CAACC,CAAC,EACvCA,CAAC,CAACzC,EAAE,GAAK/B,cAAc,CAAC+B,EAAE,CAAGmC,QAAQ,CAAChC,IAAI,CAAEyD,cAAc,CAAInB,CAChE,CAAC,CACDjE,eAAe,CAACqD,cAAc,CAAC,CAC/B/D,cAAc,CAAC+D,cAAc,CAAC,CAElCpC,sBAAsB,CAAC,IAAI,CAAC,CACxBiD,aAAa,CAAC,2BAA2B,CAAC,CAC1CpE,YAAY,CAAC,KAAK,CAAC,CACvB,MAAO,KAAI,CACT,CAAC,IAAM,CACLwB,OAAO,CAACW,KAAK,CAAC,YAAY,CAAE0B,QAAQ,CAAC1B,KAAK,CAAC,CAC3CiC,aAAa,CAAC,gBAAgB,CAAC,CAC/BpE,YAAY,CAAC,KAAK,CAAC,CACnB,MAAO,MAAK,CACd,CACF,CAAE,MAAOmC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClCiC,aAAa,CAAC,qBAAqB,CAAC,CACpCpE,YAAY,CAAC,KAAK,CAAC,CACnB,MAAO,MAAK,CACd,CACF,CAAC,CAED,KAAM,CAAAuF,gBAAgB,CAAGA,CAAA,GAAM,CAC7BpE,sBAAsB,CAAC,IAAI,CAAC,CAC9B,CAAC,CAED;AACA,KAAM,CAAAqE,kBAAkB,CAAIC,UAAkB,EAAK,CACjD/E,oBAAoB,CAACgF,IAAI,EAAI,CAC3B,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAhF,GAAG,CAAC+E,IAAI,CAAC,CAC5B,GAAIC,MAAM,CAACC,GAAG,CAACH,UAAU,CAAC,CAAE,CAC1BE,MAAM,CAACE,MAAM,CAACJ,UAAU,CAAC,CAC3B,CAAC,IAAM,CACLE,MAAM,CAACG,GAAG,CAACL,UAAU,CAAC,CACxB,CACA,MAAO,CAAAE,MAAM,CACf,CAAC,CAAC,CACJ,CAAC,CAED,KAAM,CAAAI,gBAAgB,CAAG,KAAAA,CAAON,UAAkB,CAAEO,IAAY,GAAK,CACnE;AACA,KAAM,CAAC/C,SAAS,EAAIgD,aAAa,CAAC,CAAGR,UAAU,CAACS,KAAK,CAAC,GAAG,CAAC,CAC1D,GAAI,CAAAC,eAAe,CAAG,EAAE,CACxB,GAAIxG,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE4C,QAAQ,CAAE,CAC5B,KAAM,CAAAE,OAAO,CAAG9C,cAAc,CAAC4C,QAAQ,CAAC6D,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACpD,SAAS,GAAKA,SAAS,CAAC,CAC5E,GAAIR,OAAO,CAAE,CACX,KAAM,CAAA6D,SAAS,CAAG7D,OAAO,CAACM,OAAO,CAACmD,KAAK,CAAC,QAAQ,CAAC,CAAChC,GAAG,CAACqC,CAAC,EAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACnF,MAAM,CAACkF,CAAC,EAAIA,CAAC,CAACtE,MAAM,CAAG,CAAC,CAAC,CAC9FkE,eAAe,CAAGG,SAAS,CAACG,QAAQ,CAACR,aAAa,CAAC,CAAC,EAAI,EAAE,CAC5D,CACF,CAEA,GAAI,CACF;AACA,KAAM,CAAApI,WAAW,CAAC6I,kBAAkB,CAAC,CACnCC,WAAW,CAAElB,UAAU,CACvB9B,SAAS,CAAEhE,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE+B,EAAE,CAC7BH,WAAW,CAAE,SAAS,CACtBwB,OAAO,CAAEiD,IAAI,CACbY,gBAAgB,CAAET,eAAe,CACjCU,iBAAiB,YAAAhE,MAAA,CAAazD,SAAS,CACzC,CAAC,CAAC,CAEF;AACA2B,QAAQ,CAAC2E,IAAI,EAAAhC,aAAA,CAAAA,aAAA,IACRgC,IAAI,MACP,CAACD,UAAU,EAAGO,IAAI,EAClB,CAAC,CAEH5B,aAAa,CAAC,aAAa,CAAC,CAC9B,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjCiC,aAAa,CAAC,eAAe,CAAC,CAC9B,KAAM,CAAAjC,KAAK,CACb,CACF,CAAC,CAED,KAAM,CAAA2E,gBAAgB,CAAG,KAAO,CAAArB,UAAkB,EAAK,CACrD,GAAI,CACF;AACA,KAAM,CAAA5H,WAAW,CAACkJ,UAAU,CAACtB,UAAU,CAAC,CAExC;AACA1E,QAAQ,CAAC2E,IAAI,EAAI,CACf,KAAM,CAAAsB,QAAQ,CAAAtD,aAAA,IAAQgC,IAAI,CAAE,CAC5B,MAAO,CAAAsB,QAAQ,CAACvB,UAAU,CAAC,CAC3B,MAAO,CAAAuB,QAAQ,CACjB,CAAC,CAAC,CAEF;AACAnG,uBAAuB,CAAC6E,IAAI,EAAI,CAC9B,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAhF,GAAG,CAAC+E,IAAI,CAAC,CAC5BC,MAAM,CAACE,MAAM,CAACJ,UAAU,CAAC,CACzB,MAAO,CAAAE,MAAM,CACf,CAAC,CAAC,CAEFvB,aAAa,CAAC,aAAa,CAAC,CAC9B,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,WAAW,CAAEA,KAAK,CAAC,CACjCiC,aAAa,CAAC,eAAe,CAAC,CAChC,CACF,CAAC,CAED;AACA,KAAM,CAAA6C,eAAe,CAAG,KAAO,CAAApC,cAAsB,EAAK,CACxD;AACA,GAAI,CAACzF,SAAS,CAAE,OAEhB,GAAI,CAACyF,cAAc,CAAE,CACnBT,aAAa,CAAC,kBAAkB,CAAC,CACjC,OACF,CAEA,GAAI,CACF;AACA,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAjG,OAAO,CAACsJ,2BAA2B,CAAC9H,SAAS,CAAEyF,cAAc,CAAC,CAErF,GAAIhB,QAAQ,CAAChC,IAAI,CAAE,CACjB;AACA,GAAIhC,gBAAgB,CAAE,CACpBA,gBAAgB,CAAC,CAAC,CACpB,CACAuE,aAAa,CAAC,sBAAsB,CAAC,CACvC,CAAC,IAAM,CACLA,aAAa,CAAC,eAAe,CAAC,CAChC,CACF,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,aAAa,CAAEA,KAAK,CAAC,CACnCiC,aAAa,CAAC,eAAe,CAAC,CAChC,CACF,CAAC,CAED,KAAM,CAAA+C,kBAAkB,CAAG,KAAO,CAAAtC,cAAsB,EAAK,CAC3D;AACA,GAAI,CAACzF,SAAS,CAAE,OAEhB,GAAI,CAACyF,cAAc,CAAE,CACnBT,aAAa,CAAC,kBAAkB,CAAC,CACjC,OACF,CAEA,GAAI,CACF;AACA,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAjG,OAAO,CAACwJ,oBAAoB,CAAChI,SAAS,CAAEyF,cAAc,CAAC,CAE9E,GAAIhB,QAAQ,CAAChC,IAAI,CAAE,CACjB;AACAwF,oBAAoB,CAAC,CAAC,CACtBjD,aAAa,CAAC,wBAAwB,CAAC,CACzC,CAAC,IAAM,CACLA,aAAa,CAAC,iBAAiB,CAAC,CAClC,CACF,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,eAAe,CAAEA,KAAK,CAAC,CACrCiC,aAAa,CAAC,iBAAiB,CAAC,CAClC,CACF,CAAC,CAED,KAAM,CAAAkD,oBAAoB,CAAG,KAAO,CAAAzC,cAAsB,EAAK,CAC7D;AACA,GAAI,CAACzF,SAAS,CAAE,OAEhB,GAAI,CAACyF,cAAc,CAAE,CACnBT,aAAa,CAAC,kBAAkB,CAAC,CACjC,OACF,CAEA,GAAI,CACF;AACA,KAAM,CAAAP,QAAQ,CAAG,KAAM,CAAAjG,OAAO,CAAC2J,qBAAqB,CAACnI,SAAS,CAAEyF,cAAc,CAAC,CAE/E,GAAIhB,QAAQ,CAAChC,IAAI,CAAE,CACjB;AACA,GAAIrC,cAAc,CAAE,CAClB,GAAI,CACF,KAAM,CAAAgI,eAAe,CAAG,KAAM,CAAA5J,OAAO,CAAC6J,iBAAiB,CAACrI,SAAS,CAAC,CAClE,GAAIoI,eAAe,CAAC3F,IAAI,CAAE,CACxBrC,cAAc,CAACgI,eAAe,CAAC3F,IAAI,CAAC,CACtC,CACF,CAAE,MAAOM,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACtC,CACF,CACAiC,aAAa,CAAC,sBAAsB,CAAC,CACvC,CAAC,IAAM,CACLA,aAAa,CAAC,eAAe,CAAC,CAChC,CACF,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,aAAa,CAAEA,KAAK,CAAC,CACnCiC,aAAa,CAAC,eAAe,CAAC,CAChC,CACF,CAAC,CAED;AACA,KAAM,CAAAiD,oBAAoB,CAAG,KAAAA,CAAA,GAAY,CACjC,GAAI,CACF,KAAM,CAAAG,eAAe,CAAG,KAAM,CAAA5J,OAAO,CAAC6J,iBAAiB,CAACrI,SAAS,CAAC,CAClE,GAAIoI,eAAe,CAAC3F,IAAI,CAAE,CACxB,KAAM,CAAA0B,cAAc,CAAGiE,eAAe,CAAC3F,IAAI,CAC3C3B,eAAe,CAACqD,cAAc,CAAC,CAC/B/D,cAAc,CAAC+D,cAAc,CAAC,CAE9B;AACA,KAAM,CAAAmE,gBAAgB,CAAGnE,cAAc,CACpClC,MAAM,CAAC8C,CAAC,EAAIA,CAAC,CAAC5C,WAAW,GAAK,SAAS,CAAC,CACxCoG,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,GAAI,CAAA3E,IAAI,CAAC2E,CAAC,CAACxE,UAAU,CAAC,CAACyE,OAAO,CAAC,CAAC,CAAG,GAAI,CAAA5E,IAAI,CAAC0E,CAAC,CAACvE,UAAU,CAAC,CAACyE,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAE/F,GAAIJ,gBAAgB,GAAK,CAAC/H,cAAc,EAAI+H,gBAAgB,CAAChG,EAAE,GAAK/B,cAAc,CAAC+B,EAAE,CAAC,CAAE,CAChF5B,iBAAiB,CAAC4H,gBAAgB,CAAC,CACzCtD,aAAa,CAAC,mBAAmB,CAAC,CACpC,CACF,CACF,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACtC,CACF,CAAC,CAED;AACA,KAAM,CAAA4F,gBAAgB,CAAG,KAAO,CAAAC,MAAwE,EAAK,CAC3G,KAAM,CAAAC,WAAW,CAAGC,KAAK,CAACC,IAAI,CAAC1H,iBAAiB,CAAC,CACjD,KAAM,CAAA2H,aAAa,CAAGH,WAAW,CAAC/D,GAAG,CAACxC,EAAE,EAAI,CAC1C;AACA,KAAM,CAACuB,SAAS,EAAIgD,aAAa,CAAC,CAAGvE,EAAE,CAACwE,KAAK,CAAC,GAAG,CAAC,CAClD,KAAM,CAAAzD,OAAO,CAAG9C,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE4C,QAAQ,CAAC6D,IAAI,CAACC,CAAC,EAAIA,CAAC,CAACpD,SAAS,GAAKA,SAAS,CAAC,CAC7E,GAAIR,OAAO,CAAE,CACX,KAAM,CAAA6D,SAAS,CAAG7D,OAAO,CAACM,OAAO,CAACmD,KAAK,CAAC,QAAQ,CAAC,CAAChC,GAAG,CAACqC,CAAC,EAAIA,CAAC,CAACC,IAAI,CAAC,CAAC,CAAC,CAACnF,MAAM,CAACkF,CAAC,EAAIA,CAAC,CAACtE,MAAM,CAAG,CAAC,CAAC,CAC9F,MAAO,CAAAqE,SAAS,CAACG,QAAQ,CAACR,aAAa,CAAC,CAAC,EAAI,EAAE,CACjD,CACA,MAAO,EAAE,CACX,CAAC,CAAC,CAAC5E,MAAM,CAACkD,IAAI,EAAIA,IAAI,CAACtC,MAAM,CAAG,CAAC,CAAC,CAElC,OAAQ+F,MAAM,EACZ,IAAK,aAAa,CAChB,GAAI5H,eAAe,CAACgC,OAAO,EAAIgG,aAAa,CAACnG,MAAM,CAAG,CAAC,CAAE,CACvD,KAAM,CAAAoG,aAAa,CAAGD,aAAa,CAAClE,GAAG,CAACK,IAAI,OAAA1B,MAAA,CAAQ0B,IAAI,MAAG,CAAC,CAAC+D,IAAI,CAAC,IAAI,CAAC,CACvElI,eAAe,CAACgC,OAAO,CAACmG,UAAU,CAACF,aAAa,CAAC,CACnD,CACA,MAEF,IAAK,aAAa,CAChB,GAAI,CACF;AACA,KAAM,CAAAG,eAA0B,CAAG,EAAE,CACrC,KAAM,CAAAC,eAAkC,CAAG,EAAE,CAC7C,KAAM,CAAAC,YAA+B,CAAG,EAAE,CAE1C,IAAK,KAAM,CAAAjD,UAAU,GAAI,CAAAwC,WAAW,CAAE,CACpC,KAAM,CAAAU,aAAa,CAAG/H,oBAAoB,CAACgF,GAAG,CAACH,UAAU,CAAC,CAC1D,KAAM,CAAAmD,WAAW,CAAG9H,KAAK,CAAC2E,UAAU,CAAC,EAAI,IAAI,CAE7C+C,eAAe,CAACK,IAAI,CAACF,aAAa,CAAC,CACnCF,eAAe,CAACI,IAAI,CAACF,aAAa,CAAG,QAAQ,CAAG,IAAI,CAAC,CACrDD,YAAY,CAACG,IAAI,CAACD,WAAW,CAAC,CAChC,CAEA,KAAM,CAAA/K,WAAW,CAACiL,oBAAoB,CAAC,CACrCxC,SAAS,CAAE8B,aAAa,CACxBvB,iBAAiB,YAAAhE,MAAA,CAAazD,SAAS,CAAE,CACzC2J,sBAAsB,CAAEpJ,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE+B,EAAE,CAC1CsH,gBAAgB,CAAErJ,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE+B,EAAE,CACpCuH,kBAAkB,CAAE,SAAS,CAC7BC,mBAAmB,CAAEjB,WAAW,CAChCkB,IAAI,CAAE,CAAC,SAAS,CAAE/J,SAAS,CAAC,CAC5BgK,gBAAgB,CAAEZ,eAAe,CACjCa,gBAAgB,CAAEZ,eAAe,CACjCa,aAAa,CAAEZ,YACjB,CAAC,CAAC,CAEF;AACA,GAAI/I,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE+B,EAAE,CAAE,CACtB,IAAK,KAAM,CAAA+D,UAAU,GAAI,CAAAwC,WAAW,CAAE,CACpC,KAAM,CAAApK,WAAW,CAAC0L,eAAe,CAAC,CAChC5C,WAAW,CAAElB,UAAU,CACvB9B,SAAS,CAAEhE,cAAc,CAAC+B,EAAE,CAC5BH,WAAW,CAAE,SACf,CAAC,CAAC,CACJ,CACF,CAEA;AACAV,uBAAuB,CAAC6E,IAAI,EAAI,GAAI,CAAA/E,GAAG,CAAC,CAAC,GAAGuH,KAAK,CAACC,IAAI,CAACzC,IAAI,CAAC,CAAE,GAAGuC,WAAW,CAAC,CAAC,CAAC,CAE/E7D,aAAa,CAAC,+BAA+B,CAAC,CAChD,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,YAAY,CAAEA,KAAK,CAAC,CAClCiC,aAAa,CAAC,gBAAgB,CAAC,CACjC,CACA,MAEF,IAAK,SAAS,CACZ,GAAI6D,WAAW,CAAChG,MAAM,CAAG,CAAC,CAAE,CAC1B;AACA,KAAM,CAAAuH,SAAS,CAAGvB,WAAW,CAACN,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,CAC3C,KAAM,CAAC4B,UAAU,EAAIC,cAAc,CAAC,CAAG9B,CAAC,CAAC1B,KAAK,CAAC,GAAG,CAAC,CACnD,KAAM,CAACyD,UAAU,EAAIC,cAAc,CAAC,CAAG/B,CAAC,CAAC3B,KAAK,CAAC,GAAG,CAAC,CAEnD,GAAIuD,UAAU,GAAKE,UAAU,CAAE,CAC7B,MAAO,IAAI,CAAAzG,IAAI,CAACuG,UAAU,CAAC,CAAC3B,OAAO,CAAC,CAAC,CAAG,GAAI,CAAA5E,IAAI,CAACyG,UAAU,CAAC,CAAC7B,OAAO,CAAC,CAAC,CACxE,CACA,MAAO,CAAArB,QAAQ,CAACiD,cAAc,CAAC,CAAGjD,QAAQ,CAACmD,cAAc,CAAC,CAC5D,CAAC,CAAC,CAEF,KAAM,CAAAC,gBAAgB,CAAGL,SAAS,CAACA,SAAS,CAACvH,MAAM,CAAG,CAAC,CAAC,CAExD,GAAI,CACF;AACA,KAAM,CAAA6H,kBAAkB,CAAG1B,aAAa,CAACA,aAAa,CAACnG,MAAM,CAAG,CAAC,CAAC,CAClE,KAAM,CAAApE,WAAW,CAAC6I,kBAAkB,CAAC,CACnCC,WAAW,CAAEkD,gBAAgB,CAC7BlG,SAAS,CAAEhE,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE+B,EAAE,CAC7BH,WAAW,CAAE,SAAS,CACtBwB,OAAO,CAAE,EAAE,CACX6D,gBAAgB,CAAEkD,kBAAkB,CACpCjD,iBAAiB,YAAAhE,MAAA,CAAazD,SAAS,CACzC,CAAC,CAAC,CAEF;AACA,GAAIO,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE+B,EAAE,CAAE,CACtB,IAAK,KAAM,CAAA+D,UAAU,GAAI,CAAAwC,WAAW,CAAE,CACpC,KAAM,CAAApK,WAAW,CAAC0L,eAAe,CAAC,CAChC5C,WAAW,CAAElB,UAAU,CACvB9B,SAAS,CAAEhE,cAAc,CAAC+B,EAAE,CAC5BH,WAAW,CAAE,SACf,CAAC,CAAC,CACJ,CACF,CAEA;AACAR,QAAQ,CAAC2E,IAAI,EAAAhC,aAAA,CAAAA,aAAA,IAAUgC,IAAI,MAAE,CAACmE,gBAAgB,EAAG,EAAE,EAAG,CAAC,CACvDhJ,uBAAuB,CAAC6E,IAAI,EAAI,GAAI,CAAA/E,GAAG,CAAC,CAAC,GAAGuH,KAAK,CAACC,IAAI,CAACzC,IAAI,CAAC,CAAE,GAAGuC,WAAW,CAAC,CAAC,CAAC,CAE/E7D,aAAa,CAAC,oBAAoB,CAAC,CACrC,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,iBAAiB,CAAEA,KAAK,CAAC,CACvCiC,aAAa,CAAC,qBAAqB,CAAC,CACtC,CACF,CACA,MAEF,IAAK,WAAW,CACd,GAAI6D,WAAW,CAAChG,MAAM,CAAG,CAAC,EAAItC,cAAc,SAAdA,cAAc,WAAdA,cAAc,CAAE+B,EAAE,CAAE,CAChD,GAAI,CACFF,OAAO,CAACC,GAAG,CAAC,cAAc,CAAEwG,WAAW,CAAC,CAExC;AACA,KAAM,CAAA8B,oBAAoB,CAAG9B,WAAW,CAAC5G,MAAM,CAACK,EAAE,EAAId,oBAAoB,CAACgF,GAAG,CAAClE,EAAE,CAAC,CAAC,CACnF,KAAM,CAAAsI,cAAc,CAAG/B,WAAW,CAAC5G,MAAM,CAACK,EAAE,EAAI,CAACd,oBAAoB,CAACgF,GAAG,CAAClE,EAAE,CAAC,CAAC,CAE9EF,OAAO,CAACC,GAAG,CAAC,gBAAgB,CAAEsI,oBAAoB,CAAC,CACnDvI,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAEuI,cAAc,CAAC,CAEjD,GAAID,oBAAoB,CAAC9H,MAAM,CAAG,CAAC,CAAE,CACnC;AACAT,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC,CAE/B;AACAZ,uBAAuB,CAAC6E,IAAI,EAAI,CAC9B,KAAM,CAAAC,MAAM,CAAG,GAAI,CAAAhF,GAAG,CAAC+E,IAAI,CAAC,CAC5BuC,WAAW,CAACgC,OAAO,CAACvI,EAAE,EAAIiE,MAAM,CAACE,MAAM,CAACnE,EAAE,CAAC,CAAC,CAC5C,MAAO,CAAAiE,MAAM,CACf,CAAC,CAAC,CAEF;AACA,IAAK,KAAM,CAAAF,UAAU,GAAI,CAAAwC,WAAW,CAAE,CACpC,GAAI,CACF,KAAM,CAAApK,WAAW,CAACqM,eAAe,CAACzE,UAAU,CAAC,CAC/C,CAAE,MAAOtD,KAAK,CAAE,CACdX,OAAO,CAAC2I,IAAI,CAAC,kBAAkB,CAAEhI,KAAK,CAAC,CACzC,CACF,CAEAiC,aAAa,CAAC,gBAAgB,CAAC,CACjC,CAAC,IAAM,CACL;AACA5C,OAAO,CAACC,GAAG,CAAC,iBAAiB,CAAC,CAE9B;AACAZ,uBAAuB,CAAC6E,IAAI,EAAI,GAAI,CAAA/E,GAAG,CAAC,CAAC,GAAGuH,KAAK,CAACC,IAAI,CAACzC,IAAI,CAAC,CAAE,GAAGuC,WAAW,CAAC,CAAC,CAAC,CAE/E;AACA,IAAK,KAAM,CAAAxC,UAAU,GAAI,CAAAwC,WAAW,CAAE,CACpC,GAAI,CACF,KAAM,CAAApK,WAAW,CAAC0L,eAAe,CAAC,CAChC5C,WAAW,CAAElB,UAAU,CACvB9B,SAAS,CAAEhE,cAAc,CAAC+B,EAAE,CAC5BH,WAAW,CAAE,SACf,CAAC,CAAC,CACJ,CAAE,MAAOY,KAAK,CAAE,CACdX,OAAO,CAAC2I,IAAI,CAAC,kBAAkB,CAAEhI,KAAK,CAAC,CACzC,CACF,CAEAiC,aAAa,CAAC,gBAAgB,CAAC,CACjC,CACF,CAAE,MAAOjC,KAAK,CAAE,CACdX,OAAO,CAACW,KAAK,CAAC,cAAc,CAAEA,KAAK,CAAC,CACpCiC,aAAa,CAAC,kBAAkB,CAAC,CACnC,CACF,CACA,MAEF,IAAK,MAAM,CACT,GAAIgE,aAAa,CAACnG,MAAM,CAAG,CAAC,CAAE,CAC5B,KAAM,CAAAqC,eAAe,CAAC8D,aAAa,CAACE,IAAI,CAAC,GAAG,CAAC,CAAE,iBAAiB,CAAC,CACnE,CACA,MACJ,CAEA;AACA5H,oBAAoB,CAAC,GAAI,CAAAC,GAAG,CAAC,CAAC,CAAC,CACjC,CAAC,CAED;AACA,KAAM,CAAAyJ,wBAAwB,CAAGA,CAAA,GAAM,CACrCnJ,uBAAuB,CAACyE,IAAI,EAAI,CAACA,IAAI,CAAC,CACxC,CAAC,CAED,mBACEzH,KAAA,CAACC,SAAS,EAAAmM,QAAA,eACRtM,IAAA,CAACe,KAAK,EAACG,IAAI,CAAEoB,SAAU,CAAAgK,QAAA,CACpB9J,YAAY,CACR,CAAC,cAERtC,KAAA,CAACK,WAAW,EAAA+L,QAAA,eACVpM,KAAA,CAACO,YAAY,EAAC8L,GAAG,CAAEnK,eAAgB,CAAAkK,QAAA,EAChC,CAAC1K,cAAc,EAAIA,cAAc,CAAC4C,QAAQ,CAACN,MAAM,GAAK,CAAC,cACtDhE,KAAA,CAACW,SAAS,EAAAyL,QAAA,eACRtM,IAAA,QAAKwM,KAAK,CAAE,CAAEC,QAAQ,CAAE,MAAM,CAAEC,YAAY,CAAE,KAAM,CAAE,CAAAJ,QAAA,CAAC,cAAE,CAAK,CAAC,cAC/DtM,IAAA,QAAAsM,QAAA,CAAK,4GAAqB,CAAK,CAAC,cAChCpM,KAAA,QAAKsM,KAAK,CAAE,CAAEC,QAAQ,CAAE,MAAM,CAAEE,SAAS,CAAE,KAAM,CAAE,CAAAL,QAAA,EAChDhL,WAAW,CAAC,wEACf,EAAK,CAAC,EACG,CAAC,CAEZM,cAAc,CAAC4C,QAAQ,CAAC2B,GAAG,CAAC,CAACzB,OAAO,CAAEkI,KAAK,GACzClI,OAAO,CAACO,IAAI,GAAK,MAAM,cACrBjF,IAAA,CAACP,OAAO,EAENiF,OAAO,CAAAiB,aAAA,CAAAA,aAAA,IACFjB,OAAO,MACVK,UAAU,CAAE8H,SAAS,CACrBxH,YAAY,CAAEwH,SAAS,EACvB,CACFC,QAAQ,CAAE,CAAC,CAAE,CACbC,iBAAiB,CAAE,IAAK,CACxBC,MAAM,CAAEA,CAAA,GAAMnG,iBAAiB,CAACnC,OAAO,CAACM,OAAO,CAAE,CACjDiI,MAAM,CAAEA,CAAA,GAAMlG,eAAe,CAAC6F,KAAK,CAAE,CACrCM,SAAS,CAAE/J,mBAAmB,GAAKyJ,KAAM,CACzCO,UAAU,CAAGjG,UAAU,EAAKD,iBAAiB,CAAC2F,KAAK,CAAE1F,UAAU,CAAE,CACjEkG,YAAY,CAAE5F,gBAAiB,aAAA1C,MAAA,CAZf8H,KAAK,CAatB,CAAC,cAEF5M,IAAA,CAACN,iBAAiB,EAEhBgF,OAAO,CAAAiB,aAAA,CAAAA,aAAA,IACFjB,OAAO,MACVK,UAAU,CAAE,iBAAiB,CAC7BM,YAAY,CAAE/D,WAAW,EACzB,CACFwL,QAAQ,CAAE,CACRO,eAAe,CAAE,CACfC,IAAI,CAAEhM,WAAW,CACjBiM,WAAW,CAAE,EAAE,CACfC,KAAK,CAAE,SAAS,CAChBC,MAAM,CAAE,EAAE,CACVC,QAAQ,CAAE,EAAE,CACZC,WAAW,CAAE,EACf,CACF,CAAE,CACFjL,iBAAiB,CAAEO,oBAAoB,CAAGP,iBAAiB,CAAG,GAAI,CAAAE,GAAG,CAAC,CAAE,CACxEC,oBAAoB,CAAEA,oBAAqB,CAC3CE,KAAK,CAAEA,KAAM,CACb6K,cAAc,CAAE3K,oBAAoB,CAAGwE,kBAAkB,CAAG,IAAM,CAAC,CAAE,CACrEoG,YAAY,CAAE7F,gBAAiB,CAC/B8F,YAAY,CAAE/E,gBAAiB,CAC/BgF,oBAAoB,CAAE9K,oBAAqB,CAC3C8J,iBAAiB,CAAE,IAAK,CACxBC,MAAM,CAAEA,CAAA,GAAMnG,iBAAiB,CAACnC,OAAO,CAACM,OAAO,CAAE,CACjDgJ,WAAW,CAAGlH,cAAc,EAAKoC,eAAe,CAACpC,cAAc,CAAE,CACjEmH,cAAc,CAAGnH,cAAc,EAAKsC,kBAAkB,CAACtC,cAAc,CAAE,CACvEoH,gBAAgB,CAAGpH,cAAc,EAAKyC,oBAAoB,CAACzC,cAAc,CAAE,aAAAhC,MAAA,CA3B3D8H,KAAK,CA4BtB,CAEL,CACD,CAEA5K,SAAS,eACRhC,IAAA,CAACJ,cAAc,EACb0B,WAAW,CAAEA,WAAY,CACzB6M,YAAY,CAAC,SAAS,CACtBC,aAAa,CAAC,oCAAW,CAC1B,CACF,EACW,CAAC,cAEfpO,IAAA,CAACW,gBAAgB,EAAA2L,QAAA,cACftM,IAAA,CAACR,YAAY,EACX+M,GAAG,CAAElK,eAAgB,CACrBgM,aAAa,CAAE5J,iBAAkB,CACjC6J,QAAQ,CAAEtM,SAAU,CACpBuM,WAAW,IAAAzJ,MAAA,CAAKxD,WAAW,oGAAwB,CACnDkN,oBAAoB,CAAEnC,wBAAyB,CAC/CpJ,oBAAoB,CAAEA,oBAAqB,CAC3CwL,oBAAoB,CAAE/L,iBAAiB,CAACgM,IAAI,CAAG,CAAE,CACjDC,qBAAqB,CAAE,CAAA/M,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAEoD,OAAO,GAAIzD,cAAe,CACjEF,SAAS,CAAEA,SAAU,CACrBuN,iBAAiB,CAAG9H,cAAsB,EAAKsC,kBAAkB,CAACtC,cAAc,CAAE,CAClF+H,kBAAkB,CAAG/H,cAAsB,EAAKyC,oBAAoB,CAACzC,cAAc,CAAE,CACrFgI,mBAAmB,CAAElN,cAAc,SAAdA,cAAc,iBAAdA,cAAc,CAAE4C,QAAS,CAC9C1C,gBAAgB,CAAEwH,oBAAqB,CACxC,CAAC,CACc,CAAC,EACR,CAAC,cAEdtJ,IAAA,CAACL,oBAAoB,EACnBuB,IAAI,CAAE+B,oBAAoB,EAAIP,iBAAiB,CAACgM,IAAI,CAAG,CAAE,CACzDK,YAAY,CAAE/E,gBAAiB,CAC/B3I,SAAS,CAAEA,SAAU,CACrBsN,qBAAqB,CAAEpN,cAAe,CACvC,CAAC,EACO,CAAC,CAEhB,CAAC,CAED,cAAe,CAAAJ,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}