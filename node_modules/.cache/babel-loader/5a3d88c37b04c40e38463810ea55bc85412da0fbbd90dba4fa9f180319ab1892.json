{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\verbalization\\\\components\\\\VerbalizationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n_c2 = HeaderSection;\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n_c3 = HeaderTitle;\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n_c4 = NewThreadButton;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c5 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c6 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c7 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n_c8 = EmptyChat;\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c9 = EmptyIcon;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c0 = Toast;\nconst VerbalizationView = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  _s();\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n\n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n\n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState([]);\n\n  // selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\n  useEffect(() => {\n    if (selectedThread) {\n      setLocalMessages(selectedThread.messages || []);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    } else {\n      setLocalMessages([]);\n      // 스레드가 없으면 데이터 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  }, [selectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (메모/하이라이트)\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('=== 언어화 스레드 데이터 로딩 시작 ===', threadId);\n      const threadData = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 언어화 스레드 데이터:', threadData);\n\n      // 메모 설정\n      if (threadData.memos && Object.keys(threadData.memos).length > 0) {\n        setMemos(threadData.memos);\n        console.log('언어화 메모 설정됨:', Object.keys(threadData.memos).length, '개');\n      } else {\n        setMemos({});\n        console.log('언어화 메모 없음');\n      }\n\n      // 하이라이트 설정  \n      if (threadData.highlights && threadData.highlights.length > 0) {\n        setHighlightedSentences(new Set(threadData.highlights));\n        console.log('언어화 하이라이트 설정됨:', threadData.highlights.length, '개');\n      } else {\n        setHighlightedSentences(new Set());\n        console.log('언어화 하이라이트 없음');\n      }\n      console.log('=== 언어화 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async message => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message.trim(),\n      timestamp: new Date().toISOString()\n    };\n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\n      const response = await chatApi.chatWithVerbalization(message, selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id // 스레드가 없으면 undefined 전달\n      );\n      console.log('API 응답 전체:', response);\n      console.log('응답 데이터:', response.data);\n      console.log('응답 에러:', response.error);\n      if (response.data) {\n        console.log('메시지 전송 성공');\n        console.log('응답 구조:', {\n          thread_id: response.data.thread_id,\n          user_message: response.data.user_message,\n          response: response.data.response,\n          thread_updated_at: response.data.thread_updated_at\n        });\n\n        // 3단계: AI 응답을 로컬 메시지에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_name: '언어화 도우미'\n        };\n        setLocalMessages(prev => [...prev, assistantMessage]);\n\n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n        // 스레드 목록과 선택된 스레드를 새로고침\n        await onThreadUpdate();\n\n        // 새로 생성된 스레드가 선택되도록 추가 처리\n        if (!selectedThread && response.data.thread_id) {\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\n          setTimeout(async () => {\n            await onThreadUpdate();\n          }, 100);\n        }\n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n\n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n\n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n\n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n\n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\n  const handleSunAction = () => {\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\n  };\n  const handlePersonAction = () => {\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\n  };\n  const handleDocumentAction = () => {\n    if (selectedThread && selectedThread.messages.length > 0) {\n      const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n      if (lastAssistantMessage) {\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\n      } else {\n        showCopyToast('복사할 응답이 없습니다');\n      }\n    }\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      var _window$getSelection;\n      (_window$getSelection = window.getSelection()) === null || _window$getSelection === void 0 ? void 0 : _window$getSelection.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async action => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      case 'saveToVault':\n        // 언어화에서도 저장고 기능 제공\n        if (selectedText) {\n          try {\n            await sentenceApi.saveSentencesToVault({\n              sentences: [selectedText],\n              source_message_id: 'verbalization_chat',\n              source_conversation_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n              tags: ['verbalization']\n            });\n            showCopyToast('저장고에 저장되었습니다');\n          } catch (error) {\n            console.error('저장고 저장 실패:', error);\n            showCopyToast('저장고 저장에 실패했습니다');\n          }\n        }\n        break;\n      case 'addMemo':\n        // 언어화에서는 메모 기능 미제공\n        showCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');\n        break;\n      case 'highlight':\n        // 언어화에서는 하이라이트 기능 미제공\n        showCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');\n        break;\n    }\n\n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = event => {\n      const target = event.target;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = localMessages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n            tags: ['verbalization']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n\n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [bottomSentenceId]: ''\n          }));\n\n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n\n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'verbalization'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n\n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n\n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n\n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'verbalization'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(HeaderSection, {\n      children: [/*#__PURE__*/_jsxDEV(HeaderTitle, {\n        children: \"\\uC5B8\\uC5B4\\uD654\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 708,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewThreadButton, {\n        onClick: handleCreateNewThread,\n        children: \"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 707,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [localMessages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(EmptyIcon, {\n            children: \"\\uD83D\\uDCAD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 719,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n              children: [\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 721,\n                columnNumber: 59\n              }, this), \"\\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 721,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 723,\n              columnNumber: 23\n            }, this), \"\\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 17\n            }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 725,\n              columnNumber: 23\n            }, this), \"\\uC5B4\\uB5A4 \\uAC83\\uC774\\uB4E0 \\uC88B\\uC2B5\\uB2C8\\uB2E4. \\uC9C0\\uAE08 \\uB290\\uB07C\\uACE0 \\uC788\\uB294 \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uD3B8\\uC548\\uD558\\uAC8C \\uB9D0\\uC500\\uD574 \\uC8FC\\uC138\\uC694.\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 720,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 718,\n          columnNumber: 13\n        }, this) : localMessages.map((message, index) => isSentenceModeActive ? /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: message,\n          messageIndex: index,\n          personas: {},\n          selectedSentences: selectedSentences,\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: handleToggleSelect,\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo\n        }, `${message.role}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 732,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(Message, {\n          message: message,\n          personas: {} // 언어화에서는 페르소나 정보 불필요\n          ,\n          showActionButtons: true,\n          showThreeActionButtons: false,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: message.role === 'user' ? () => handleStartEdit(index) : undefined,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit,\n          isEditing: editingMessageIndex === index\n        }, `${message.role}-${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 745,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"\\uC5B8\\uC5B4\\uD654 \\uB3C4\\uC6B0\\uBBF8\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 763,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 716,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: \"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368 \\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          onToggleSentenceMode: handleToggleSentenceMode\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 771,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 715,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 785,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive ? selectedSentences.size > 0 : showFAB,\n      onMenuAction: isSentenceModeActive ? handleMenuAction : handleFABMenuAction,\n      personaId: \"verbalization\",\n      currentInterpretation: \"\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 790,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 705,\n    columnNumber: 5\n  }, this);\n};\n_s(VerbalizationView, \"y9wjXgjoW5mrfVqkbic1Ff0cSO8=\");\n_c1 = VerbalizationView;\nexport default VerbalizationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"HeaderSection\");\n$RefreshReg$(_c3, \"HeaderTitle\");\n$RefreshReg$(_c4, \"NewThreadButton\");\n$RefreshReg$(_c5, \"ChatSection\");\n$RefreshReg$(_c6, \"ChatMessages\");\n$RefreshReg$(_c7, \"ChatInputSection\");\n$RefreshReg$(_c8, \"EmptyChat\");\n$RefreshReg$(_c9, \"EmptyIcon\");\n$RefreshReg$(_c0, \"Toast\");\n$RefreshReg$(_c1, \"VerbalizationView\");","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","chatApi","MessageInput","Message","SelectableMessage","LoadingMessage","FloatingActionButton","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","HeaderSection","_c2","HeaderTitle","h2","_c3","NewThreadButton","button","_c4","ChatSection","_c5","ChatMessages","_c6","ChatInputSection","_c7","EmptyChat","_c8","EmptyIcon","_c9","Toast","props","show","_c0","VerbalizationView","selectedThread","threads","onThreadUpdate","onCreateNewThread","_s","isLoading","setIsLoading","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","isSentenceModeActive","setIsSentenceModeActive","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","selectedText","setSelectedText","showFAB","setShowFAB","localMessages","setLocalMessages","messages","loadThreadSentenceData","id","threadId","console","log","threadData","getThreadSentenceData","Object","keys","length","highlights","error","current","scrollTop","scrollHeight","handleSendMessage","message","trim","userMessage","role","content","timestamp","Date","toISOString","prev","response","chatWithVerbalization","data","thread_id","user_message","thread_updated_at","assistantMessage","persona_name","setTimeout","slice","showCopyToast","handleCreateNewThread","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleSunAction","handlePersonAction","proceedPrompt","insertText","handleDocumentAction","lastAssistantMessage","reverse","find","msg","handleTextSelection","selection","window","getSelection","toString","handleClearSelection","_window$getSelection","removeAllRanges","handleFABMenuAction","action","saveSentencesToVault","sentences","source_message_id","source_conversation_id","tags","chatElement","handleMouseUp","addEventListener","removeEventListener","handleClickOutside","event","target","contains","closest","document","handleToggleSelect","sentenceId","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","selectedIds","Array","from","selectedTexts","map","sentenceIndex","split","m","s","filter","parseInt","formattedText","join","forEach","sortedIds","sort","a","b","timestampA","sentenceIndexA","timestampB","sentenceIndexB","getTime","bottomSentenceId","createHighlight","thread_type","currentlyHighlighted","notHighlighted","deleteHighlight","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","ref","index","personas","onToggleSelect","onMemoChange","onDeleteMemo","showActionButtons","showThreeActionButtons","onCopy","onEdit","undefined","onEditSave","onEditCancel","isEditing","personaName","personaColor","onSendMessage","disabled","placeholder","hasSelectedSentences","size","onToggleSentenceMode","onMenuAction","personaId","currentInterpretation","_c1","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/verbalization/components/VerbalizationView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\nimport styled from 'styled-components';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from '../../training/components/SelectableMessage';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport { sentenceApi } from '../../training/api/sentenceApi';\n\ninterface VerbalizationViewProps {\n  selectedThread: TrainingThread | null;\n  threads: TrainingThread[];\n  onThreadUpdate: () => void;\n  onCreateNewThread: () => Promise<void>;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst HeaderSection = styled.div`\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n  padding: 20px;\n  border-bottom: 1px solid #e0e0e0;\n  background: #f8f9fa;\n`;\n\nconst HeaderTitle = styled.h2`\n  font-size: 24px;\n  font-weight: 700;\n  color: #343a40;\n  margin: 0;\n`;\n\nconst NewThreadButton = styled.button`\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\n  color: white;\n  border: none;\n  border-radius: 8px;\n  padding: 10px 20px;\n  font-size: 14px;\n  font-weight: 600;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n\n  &:hover {\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\n    transform: translateY(-1px);\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\n  }\n\n  &:active {\n    transform: translateY(0);\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n  line-height: 1.6;\n`;\n\nconst EmptyIcon = styled.div`\n  font-size: 48px;\n  margin-bottom: 16px;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst VerbalizationView: React.FC<VerbalizationViewProps> = ({\n  selectedThread,\n  threads,\n  onThreadUpdate,\n  onCreateNewThread\n}) => {\n  const [isLoading, setIsLoading] = useState(false);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장선택 관련 상태 추가\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  \n  // 텍스트 선택 관련 상태\n  const [selectedText, setSelectedText] = useState('');\n  const [showFAB, setShowFAB] = useState(false);\n  \n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\n  const [localMessages, setLocalMessages] = useState<Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n    persona_name?: string;\n  }>>([]);\n\n  // selectedThread가 변경될 때 localMessages 동기화 및 스레드 데이터 로딩\n  useEffect(() => {\n    if (selectedThread) {\n      setLocalMessages(selectedThread.messages || []);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    } else {\n      setLocalMessages([]);\n      // 스레드가 없으면 데이터 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  }, [selectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (메모/하이라이트)\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('=== 언어화 스레드 데이터 로딩 시작 ===', threadId);\n      \n      const threadData = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 언어화 스레드 데이터:', threadData);\n      \n      // 메모 설정\n      if (threadData.memos && Object.keys(threadData.memos).length > 0) {\n        setMemos(threadData.memos);\n        console.log('언어화 메모 설정됨:', Object.keys(threadData.memos).length, '개');\n      } else {\n        setMemos({});\n        console.log('언어화 메모 없음');\n      }\n      \n      // 하이라이트 설정  \n      if (threadData.highlights && threadData.highlights.length > 0) {\n        setHighlightedSentences(new Set(threadData.highlights));\n        console.log('언어화 하이라이트 설정됨:', threadData.highlights.length, '개');\n      } else {\n        setHighlightedSentences(new Set());\n        console.log('언어화 하이라이트 없음');\n      }\n      \n      console.log('=== 언어화 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [localMessages, isLoading]);\n\n  // 메시지 전송 처리\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    if (!message.trim() || isLoading) return false;\n\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message.trim(),\n      timestamp: new Date().toISOString(),\n    };\n    \n    setLocalMessages(prev => [...prev, userMessage]);\n    setIsLoading(true);\n\n    try {\n      console.log('=== 언어화 메시지 전송 ===');\n      console.log('selectedThread:', selectedThread);\n      console.log('message:', message);\n\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\n      const response = await chatApi.chatWithVerbalization(\n        message,\n        selectedThread?.id // 스레드가 없으면 undefined 전달\n      );\n\n      console.log('API 응답 전체:', response);\n      console.log('응답 데이터:', response.data);\n      console.log('응답 에러:', response.error);\n\n      if (response.data) {\n        console.log('메시지 전송 성공');\n        console.log('응답 구조:', {\n          thread_id: response.data.thread_id,\n          user_message: response.data.user_message,\n          response: response.data.response,\n          thread_updated_at: response.data.thread_updated_at\n        });\n        \n        // 3단계: AI 응답을 로컬 메시지에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_name: '언어화 도우미',\n        };\n        \n        setLocalMessages(prev => [...prev, assistantMessage]);\n        \n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n        // 스레드 목록과 선택된 스레드를 새로고침\n        await onThreadUpdate();\n        \n        // 새로 생성된 스레드가 선택되도록 추가 처리\n        if (!selectedThread && response.data.thread_id) {\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\n          setTimeout(async () => {\n            await onThreadUpdate();\n          }, 100);\n        }\n        \n        return true;\n      } else {\n        // 실패 시 사용자 메시지 제거\n        setLocalMessages(prev => prev.slice(0, -1));\n        console.error('메시지 전송 실패:', response.error);\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\n        return false;\n      }\n    } catch (error) {\n      // 오류 시 사용자 메시지 제거\n      setLocalMessages(prev => prev.slice(0, -1));\n      console.error('메시지 전송 오류:', error);\n      showCopyToast(`네트워크 오류: ${error}`);\n      return false;\n    } finally {\n      setIsLoading(false);\n    }\n  };\n\n  // 새 스레드 생성 처리\n  const handleCreateNewThread = async () => {\n    try {\n      console.log('=== 새 스레드 생성 시작 ===');\n      \n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\n      setLocalMessages([]);\n      \n      // 2단계: 새 스레드 생성\n      console.log('새 스레드 생성 중...');\n      \n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\n      await onCreateNewThread();\n      \n      // 4단계: 성공 메시지 표시\n      showCopyToast('새 대화가 시작되었습니다!');\n      \n      console.log('새 스레드 생성 및 선택 완료');\n    } catch (error) {\n      console.error('새 스레드 생성 오류:', error);\n      showCopyToast('새 대화 생성에 실패했습니다.');\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\n    // 필요시 추후 구현\n    return false;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\n  const handleSunAction = () => {\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\n  };\n\n  const handlePersonAction = () => {\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\n  };\n\n  const handleDocumentAction = () => {\n    if (selectedThread && selectedThread.messages.length > 0) {\n      const lastAssistantMessage = selectedThread.messages\n        .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n      if (lastAssistantMessage) {\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\n      } else {\n        showCopyToast('복사할 응답이 없습니다');\n      }\n    }\n  };\n\n  // 텍스트 선택 핸들러\n  const handleTextSelection = () => {\n    const selection = window.getSelection();\n    if (selection && selection.toString().trim()) {\n      const selectedText = selection.toString().trim();\n      setSelectedText(selectedText);\n      setShowFAB(true);\n    } else {\n      setSelectedText('');\n      setShowFAB(false);\n    }\n  };\n\n  // 선택 해제 핸들러\n  const handleClearSelection = () => {\n    setSelectedText('');\n    setShowFAB(false);\n    if (window.getSelection) {\n      window.getSelection()?.removeAllRanges();\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 핸들러\n  const handleFABMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedText) {\n          messageInputRef.current.insertText(selectedText);\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedText) {\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\n        }\n        break;\n      \n      case 'saveToVault':\n        // 언어화에서도 저장고 기능 제공\n        if (selectedText) {\n          try {\n            await sentenceApi.saveSentencesToVault({\n              sentences: [selectedText],\n              source_message_id: 'verbalization_chat',\n              source_conversation_id: selectedThread?.id,\n              tags: ['verbalization']\n            });\n            showCopyToast('저장고에 저장되었습니다');\n          } catch (error) {\n            console.error('저장고 저장 실패:', error);\n            showCopyToast('저장고 저장에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'addMemo':\n        // 언어화에서는 메모 기능 미제공\n        showCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');\n        break;\n      \n      case 'highlight':\n        // 언어화에서는 하이라이트 기능 미제공\n        showCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');\n        break;\n    }\n    \n    // 액션 실행 후 선택 해제\n    handleClearSelection();\n  };\n\n  // 채팅 메시지 영역에 이벤트 리스너 등록\n  useEffect(() => {\n    const chatElement = chatMessagesRef.current;\n    if (chatElement) {\n      const handleMouseUp = () => {\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\n      };\n\n      chatElement.addEventListener('mouseup', handleMouseUp);\n      chatElement.addEventListener('touchend', handleMouseUp);\n\n      return () => {\n        chatElement.removeEventListener('mouseup', handleMouseUp);\n        chatElement.removeEventListener('touchend', handleMouseUp);\n      };\n    }\n  }, []);\n\n  // 다른 곳 클릭 시 선택 해제\n  useEffect(() => {\n    const handleClickOutside = (event: MouseEvent) => {\n      const target = event.target as HTMLElement;\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\n        handleClearSelection();\n      }\n    };\n\n    document.addEventListener('mousedown', handleClickOutside);\n    return () => {\n      document.removeEventListener('mousedown', handleClickOutside);\n    };\n  }, []);\n\n  // 문장 선택 관련 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리 (문장선택 모드용)\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = localMessages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'verbalization_chat',\n            source_conversation_id: selectedThread?.id,\n            tags: ['verbalization']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'verbalization'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          \n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'verbalization'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      {/* 헤더 */}\n      <HeaderSection>\n        <HeaderTitle>언어화</HeaderTitle>\n        <NewThreadButton onClick={handleCreateNewThread}>\n          새 대화 시작\n        </NewThreadButton>\n      </HeaderSection>\n\n      {/* 채팅 영역 */}\n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {localMessages.length === 0 ? (\n            <EmptyChat>\n              <EmptyIcon>💭</EmptyIcon>\n              <div>\n                <strong>언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써<br />\n                그것을 인식하고 만들어 가는 것입니다.</strong>\n                <br /><br />\n                자유롭게 당신의 생각을 말로 내뱉으세요!\n                <br /><br />\n                어떤 것이든 좋습니다. 지금 느끼고 있는 감정이나 생각을 편안하게 말씀해 주세요.\n              </div>\n            </EmptyChat>\n          ) : (\n            localMessages.map((message, index) => (\n              isSentenceModeActive ? (\n                <SelectableMessage\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  messageIndex={index}\n                  personas={{}}\n                  selectedSentences={selectedSentences}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={handleToggleSelect}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                />\n              ) : (\n                <Message\n                  key={`${message.role}-${index}`}\n                  message={message}\n                  personas={{}} // 언어화에서는 페르소나 정보 불필요\n                  showActionButtons={true}\n                  showThreeActionButtons={false}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={message.role === 'user' ? () => handleStartEdit(index) : undefined}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                  isEditing={editingMessageIndex === index}\n                />\n              )\n            ))\n          )}\n          \n          {/* 로딩 메시지 */}\n          {isLoading && (\n            <LoadingMessage \n              personaName=\"언어화 도우미\"\n              personaColor=\"#666\"\n            />\n          )}\n        </ChatMessages>\n\n        {/* 입력창 */}\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder=\"언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써 그것을 인식하고 만들어 가는 것입니다. 자유롭게 당신의 생각을 말로 내뱉으세요!\"\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            onToggleSentenceMode={handleToggleSentenceMode}\n          />\n        </ChatInputSection>\n      </ChatSection>\n\n      {/* 토스트 메시지 */}\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n\n      {/* FloatingActionButton */}\n      <FloatingActionButton\n        show={isSentenceModeActive ? selectedSentences.size > 0 : showFAB}\n        onMenuAction={isSentenceModeActive ? handleMenuAction : handleFABMenuAction}\n        personaId=\"verbalization\"\n        currentInterpretation=\"\"\n      />\n    </Container>\n  );\n};\n\nexport default VerbalizationView; "],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,EAAEC,MAAM,QAAQ,OAAO;AAC1D,OAAOC,MAAM,MAAM,mBAAmB;AAEtC,SAASC,OAAO,QAAQ,0BAA0B;AAClD,OAAOC,YAAY,MAA2B,sCAAsC;AACpF,OAAOC,OAAO,MAAM,iCAAiC;AACrD,OAAOC,iBAAiB,MAAM,6CAA6C;AAC3E,OAAOC,cAAc,MAAM,wCAAwC;AACnE,OAAOC,oBAAoB,MAAM,8CAA8C;AAC/E,SAASC,WAAW,QAAQ,gCAAgC;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAS7D,MAAMC,SAAS,GAAGV,MAAM,CAACW,GAAG;AAC5B;AACA;AACA;AACA;AACA,CAAC;AAACC,EAAA,GALIF,SAAS;AAOf,MAAMG,aAAa,GAAGb,MAAM,CAACW,GAAG;AAChC;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACG,GAAA,GAPID,aAAa;AASnB,MAAME,WAAW,GAAGf,MAAM,CAACgB,EAAE;AAC7B;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GALIF,WAAW;AAOjB,MAAMG,eAAe,GAAGlB,MAAM,CAACmB,MAAM;AACrC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAtBIF,eAAe;AAwBrB,MAAMG,WAAW,GAAGrB,MAAM,CAACW,GAAG;AAC9B;AACA;AACA;AACA;AACA,CAAC;AAACW,GAAA,GALID,WAAW;AAOjB,MAAME,YAAY,GAAGvB,MAAM,CAACW,GAAG;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACa,GAAA,GAPID,YAAY;AASlB,MAAME,gBAAgB,GAAGzB,MAAM,CAACW,GAAG;AACnC;AACA;AACA;AACA,CAAC;AAACe,GAAA,GAJID,gBAAgB;AAMtB,MAAME,SAAS,GAAG3B,MAAM,CAACW,GAAG;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AAACiB,GAAA,GAVID,SAAS;AAYf,MAAME,SAAS,GAAG7B,MAAM,CAACW,GAAG;AAC5B;AACA;AACA,CAAC;;AAED;AAAAmB,GAAA,GALMD,SAAS;AAMf,MAAME,KAAK,GAAG/B,MAAM,CAACW,GAAsB;AAC3C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAeqB,KAAK,IAAIA,KAAK,CAACC,IAAI,GAAG,eAAe,GAAG,kBAAkB;AACzE;AACA;AACA;AACA,CAAC;AAACC,GAAA,GAdIH,KAAK;AAgBX,MAAMI,iBAAmD,GAAGA,CAAC;EAC3DC,cAAc;EACdC,OAAO;EACPC,cAAc;EACdC;AACF,CAAC,KAAK;EAAAC,EAAA;EACJ,MAAM,CAACC,SAAS,EAAEC,YAAY,CAAC,GAAG7C,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM8C,eAAe,GAAG5C,MAAM,CAAiB,IAAI,CAAC;EACpD,MAAM6C,eAAe,GAAG7C,MAAM,CAAkB,IAAI,CAAC;EACrD,MAAM,CAAC8C,SAAS,EAAEC,YAAY,CAAC,GAAGjD,QAAQ,CAAC,KAAK,CAAC;EACjD,MAAM,CAACkD,YAAY,EAAEC,eAAe,CAAC,GAAGnD,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACoD,mBAAmB,EAAEC,sBAAsB,CAAC,GAAGrD,QAAQ,CAAgB,IAAI,CAAC;;EAEnF;EACA,MAAM,CAACsD,oBAAoB,EAAEC,uBAAuB,CAAC,GAAGvD,QAAQ,CAAC,KAAK,CAAC;EACvE,MAAM,CAACwD,iBAAiB,EAAEC,oBAAoB,CAAC,GAAGzD,QAAQ,CAAc,IAAI0D,GAAG,CAAC,CAAC,CAAC;EAClF,MAAM,CAACC,oBAAoB,EAAEC,uBAAuB,CAAC,GAAG5D,QAAQ,CAAc,IAAI0D,GAAG,CAAC,CAAC,CAAC;EACxF,MAAM,CAACG,KAAK,EAAEC,QAAQ,CAAC,GAAG9D,QAAQ,CAAyB,CAAC,CAAC,CAAC;;EAE9D;EACA,MAAM,CAAC+D,YAAY,EAAEC,eAAe,CAAC,GAAGhE,QAAQ,CAAC,EAAE,CAAC;EACpD,MAAM,CAACiE,OAAO,EAAEC,UAAU,CAAC,GAAGlE,QAAQ,CAAC,KAAK,CAAC;;EAE7C;EACA,MAAM,CAACmE,aAAa,EAAEC,gBAAgB,CAAC,GAAGpE,QAAQ,CAK9C,EAAE,CAAC;;EAEP;EACAC,SAAS,CAAC,MAAM;IACd,IAAIsC,cAAc,EAAE;MAClB6B,gBAAgB,CAAC7B,cAAc,CAAC8B,QAAQ,IAAI,EAAE,CAAC;;MAE/C;MACAC,sBAAsB,CAAC/B,cAAc,CAACgC,EAAE,CAAC;IAC3C,CAAC,MAAM;MACLH,gBAAgB,CAAC,EAAE,CAAC;MACpB;MACAN,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZF,uBAAuB,CAAC,IAAIF,GAAG,CAAC,CAAC,CAAC;IACpC;EACF,CAAC,EAAE,CAACnB,cAAc,CAAC,CAAC;;EAEpB;EACA,MAAM+B,sBAAsB,GAAG,MAAOE,QAAgB,IAAK;IACzD,IAAI;MACFC,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAEF,QAAQ,CAAC;MAElD,MAAMG,UAAU,GAAG,MAAMjE,WAAW,CAACkE,qBAAqB,CAACJ,QAAQ,CAAC;MACpEC,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAEC,UAAU,CAAC;;MAE3C;MACA,IAAIA,UAAU,CAACd,KAAK,IAAIgB,MAAM,CAACC,IAAI,CAACH,UAAU,CAACd,KAAK,CAAC,CAACkB,MAAM,GAAG,CAAC,EAAE;QAChEjB,QAAQ,CAACa,UAAU,CAACd,KAAK,CAAC;QAC1BY,OAAO,CAACC,GAAG,CAAC,aAAa,EAAEG,MAAM,CAACC,IAAI,CAACH,UAAU,CAACd,KAAK,CAAC,CAACkB,MAAM,EAAE,GAAG,CAAC;MACvE,CAAC,MAAM;QACLjB,QAAQ,CAAC,CAAC,CAAC,CAAC;QACZW,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;MAC1B;;MAEA;MACA,IAAIC,UAAU,CAACK,UAAU,IAAIL,UAAU,CAACK,UAAU,CAACD,MAAM,GAAG,CAAC,EAAE;QAC7DnB,uBAAuB,CAAC,IAAIF,GAAG,CAACiB,UAAU,CAACK,UAAU,CAAC,CAAC;QACvDP,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEC,UAAU,CAACK,UAAU,CAACD,MAAM,EAAE,GAAG,CAAC;MAClE,CAAC,MAAM;QACLnB,uBAAuB,CAAC,IAAIF,GAAG,CAAC,CAAC,CAAC;QAClCe,OAAO,CAACC,GAAG,CAAC,cAAc,CAAC;MAC7B;MAEAD,OAAO,CAACC,GAAG,CAAC,2BAA2B,CAAC;IAC1C,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;MAC1C;MACAnB,QAAQ,CAAC,CAAC,CAAC,CAAC;MACZF,uBAAuB,CAAC,IAAIF,GAAG,CAAC,CAAC,CAAC;IACpC;EACF,CAAC;;EAED;EACAzD,SAAS,CAAC,MAAM;IACd,IAAI6C,eAAe,CAACoC,OAAO,EAAE;MAC3BpC,eAAe,CAACoC,OAAO,CAACC,SAAS,GAAGrC,eAAe,CAACoC,OAAO,CAACE,YAAY;IAC1E;EACF,CAAC,EAAE,CAACjB,aAAa,EAAEvB,SAAS,CAAC,CAAC;;EAE9B;EACA,MAAMyC,iBAAiB,GAAG,MAAOC,OAAe,IAAuB;IACrE,IAAI,CAACA,OAAO,CAACC,IAAI,CAAC,CAAC,IAAI3C,SAAS,EAAE,OAAO,KAAK;;IAE9C;IACA,MAAM4C,WAAW,GAAG;MAClBC,IAAI,EAAE,MAAe;MACrBC,OAAO,EAAEJ,OAAO,CAACC,IAAI,CAAC,CAAC;MACvBI,SAAS,EAAE,IAAIC,IAAI,CAAC,CAAC,CAACC,WAAW,CAAC;IACpC,CAAC;IAEDzB,gBAAgB,CAAC0B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEN,WAAW,CAAC,CAAC;IAChD3C,YAAY,CAAC,IAAI,CAAC;IAElB,IAAI;MACF4B,OAAO,CAACC,GAAG,CAAC,oBAAoB,CAAC;MACjCD,OAAO,CAACC,GAAG,CAAC,iBAAiB,EAAEnC,cAAc,CAAC;MAC9CkC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEY,OAAO,CAAC;;MAEhC;MACA,MAAMS,QAAQ,GAAG,MAAM3F,OAAO,CAAC4F,qBAAqB,CAClDV,OAAO,EACP/C,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgC,EAAE,CAAC;MACrB,CAAC;MAEDE,OAAO,CAACC,GAAG,CAAC,YAAY,EAAEqB,QAAQ,CAAC;MACnCtB,OAAO,CAACC,GAAG,CAAC,SAAS,EAAEqB,QAAQ,CAACE,IAAI,CAAC;MACrCxB,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAEqB,QAAQ,CAACd,KAAK,CAAC;MAErC,IAAIc,QAAQ,CAACE,IAAI,EAAE;QACjBxB,OAAO,CAACC,GAAG,CAAC,WAAW,CAAC;QACxBD,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAE;UACpBwB,SAAS,EAAEH,QAAQ,CAACE,IAAI,CAACC,SAAS;UAClCC,YAAY,EAAEJ,QAAQ,CAACE,IAAI,CAACE,YAAY;UACxCJ,QAAQ,EAAEA,QAAQ,CAACE,IAAI,CAACF,QAAQ;UAChCK,iBAAiB,EAAEL,QAAQ,CAACE,IAAI,CAACG;QACnC,CAAC,CAAC;;QAEF;QACA,MAAMC,gBAAgB,GAAG;UACvBZ,IAAI,EAAE,WAAoB;UAC1BC,OAAO,EAAEK,QAAQ,CAACE,IAAI,CAACF,QAAQ,CAACL,OAAO;UACvCC,SAAS,EAAEI,QAAQ,CAACE,IAAI,CAACF,QAAQ,CAACJ,SAAS;UAC3CW,YAAY,EAAE;QAChB,CAAC;QAEDlC,gBAAgB,CAAC0B,IAAI,IAAI,CAAC,GAAGA,IAAI,EAAEO,gBAAgB,CAAC,CAAC;;QAErD;QACA;QACA,MAAM5D,cAAc,CAAC,CAAC;;QAEtB;QACA,IAAI,CAACF,cAAc,IAAIwD,QAAQ,CAACE,IAAI,CAACC,SAAS,EAAE;UAC9CzB,OAAO,CAACC,GAAG,CAAC,wBAAwB,EAAEqB,QAAQ,CAACE,IAAI,CAACC,SAAS,CAAC;UAC9D;UACAK,UAAU,CAAC,YAAY;YACrB,MAAM9D,cAAc,CAAC,CAAC;UACxB,CAAC,EAAE,GAAG,CAAC;QACT;QAEA,OAAO,IAAI;MACb,CAAC,MAAM;QACL;QACA2B,gBAAgB,CAAC0B,IAAI,IAAIA,IAAI,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;QAC3C/B,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAEc,QAAQ,CAACd,KAAK,CAAC;QAC3CwB,aAAa,CAAC,cAAcV,QAAQ,CAACd,KAAK,EAAE,CAAC;QAC7C,OAAO,KAAK;MACd;IACF,CAAC,CAAC,OAAOA,KAAK,EAAE;MACd;MACAb,gBAAgB,CAAC0B,IAAI,IAAIA,IAAI,CAACU,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;MAC3C/B,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;MAClCwB,aAAa,CAAC,YAAYxB,KAAK,EAAE,CAAC;MAClC,OAAO,KAAK;IACd,CAAC,SAAS;MACRpC,YAAY,CAAC,KAAK,CAAC;IACrB;EACF,CAAC;;EAED;EACA,MAAM6D,qBAAqB,GAAG,MAAAA,CAAA,KAAY;IACxC,IAAI;MACFjC,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;;MAElC;MACAN,gBAAgB,CAAC,EAAE,CAAC;;MAEpB;MACAK,OAAO,CAACC,GAAG,CAAC,eAAe,CAAC;;MAE5B;MACA,MAAMhC,iBAAiB,CAAC,CAAC;;MAEzB;MACA+D,aAAa,CAAC,gBAAgB,CAAC;MAE/BhC,OAAO,CAACC,GAAG,CAAC,kBAAkB,CAAC;IACjC,CAAC,CAAC,OAAOO,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,cAAc,EAAEA,KAAK,CAAC;MACpCwB,aAAa,CAAC,kBAAkB,CAAC;IACnC;EACF,CAAC;;EAED;EACA,MAAMA,aAAa,GAAInB,OAAe,IAAK;IACzCnC,eAAe,CAACmC,OAAO,CAAC;IACxBrC,YAAY,CAAC,IAAI,CAAC;IAClBsD,UAAU,CAAC,MAAMtD,YAAY,CAAC,KAAK,CAAC,EAAE,IAAI,CAAC;EAC7C,CAAC;;EAED;EACA,MAAM0D,eAAe,GAAG,MAAAA,CAAOC,IAAY,EAAEC,cAAsB,KAAK;IACtE,IAAI;MACF,MAAMC,SAAS,CAACC,SAAS,CAACC,SAAS,CAACJ,IAAI,CAAC;MACzCH,aAAa,CAACI,cAAc,CAAC;IAC/B,CAAC,CAAC,OAAO5B,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,QAAQ,EAAEA,KAAK,CAAC;MAC9BwB,aAAa,CAAC,OAAO,CAAC;IACxB;EACF,CAAC;;EAED;EACA,MAAMQ,iBAAiB,GAAG,MAAOC,cAAsB,IAAK;IAC1D,MAAMP,eAAe,CAACO,cAAc,EAAE,cAAc,CAAC;EACvD,CAAC;;EAED;EACA,MAAMC,eAAe,GAAIC,YAAoB,IAAK;IAChD/D,sBAAsB,CAAC+D,YAAY,CAAC;EACtC,CAAC;EAED,MAAMC,iBAAiB,GAAG,MAAAA,CAAOD,YAAoB,EAAEE,UAAkB,KAAK;IAC5E;IACA;IACA,OAAO,KAAK;EACd,CAAC;EAED,MAAMC,gBAAgB,GAAGA,CAAA,KAAM;IAC7BlE,sBAAsB,CAAC,IAAI,CAAC;EAC9B,CAAC;;EAED;EACA,MAAMmE,eAAe,GAAGA,CAAA,KAAM;IAC5Bf,aAAa,CAAC,yBAAyB,CAAC;EAC1C,CAAC;EAED,MAAMgB,kBAAkB,GAAGA,CAAA,KAAM;IAC/B,MAAMC,aAAa,GAAG,+BAA+B;IACrD,IAAI3E,eAAe,CAACmC,OAAO,EAAE;MAC3BnC,eAAe,CAACmC,OAAO,CAACyC,UAAU,CAACD,aAAa,CAAC;IACnD;IACAjB,aAAa,CAAC,uBAAuB,CAAC;EACxC,CAAC;EAED,MAAMmB,oBAAoB,GAAGA,CAAA,KAAM;IACjC,IAAIrF,cAAc,IAAIA,cAAc,CAAC8B,QAAQ,CAACU,MAAM,GAAG,CAAC,EAAE;MACxD,MAAM8C,oBAAoB,GAAGtF,cAAc,CAAC8B,QAAQ,CACjDmC,KAAK,CAAC,CAAC,CACPsB,OAAO,CAAC,CAAC,CACTC,IAAI,CAACC,GAAG,IAAIA,GAAG,CAACvC,IAAI,KAAK,WAAW,CAAC;MAExC,IAAIoC,oBAAoB,EAAE;QACxBlB,eAAe,CAACkB,oBAAoB,CAACnC,OAAO,EAAE,iBAAiB,CAAC;MAClE,CAAC,MAAM;QACLe,aAAa,CAAC,cAAc,CAAC;MAC/B;IACF;EACF,CAAC;;EAED;EACA,MAAMwB,mBAAmB,GAAGA,CAAA,KAAM;IAChC,MAAMC,SAAS,GAAGC,MAAM,CAACC,YAAY,CAAC,CAAC;IACvC,IAAIF,SAAS,IAAIA,SAAS,CAACG,QAAQ,CAAC,CAAC,CAAC9C,IAAI,CAAC,CAAC,EAAE;MAC5C,MAAMxB,YAAY,GAAGmE,SAAS,CAACG,QAAQ,CAAC,CAAC,CAAC9C,IAAI,CAAC,CAAC;MAChDvB,eAAe,CAACD,YAAY,CAAC;MAC7BG,UAAU,CAAC,IAAI,CAAC;IAClB,CAAC,MAAM;MACLF,eAAe,CAAC,EAAE,CAAC;MACnBE,UAAU,CAAC,KAAK,CAAC;IACnB;EACF,CAAC;;EAED;EACA,MAAMoE,oBAAoB,GAAGA,CAAA,KAAM;IACjCtE,eAAe,CAAC,EAAE,CAAC;IACnBE,UAAU,CAAC,KAAK,CAAC;IACjB,IAAIiE,MAAM,CAACC,YAAY,EAAE;MAAA,IAAAG,oBAAA;MACvB,CAAAA,oBAAA,GAAAJ,MAAM,CAACC,YAAY,CAAC,CAAC,cAAAG,oBAAA,uBAArBA,oBAAA,CAAuBC,eAAe,CAAC,CAAC;IAC1C;EACF,CAAC;;EAED;EACA,MAAMC,mBAAmB,GAAG,MAAOC,MAAwE,IAAK;IAC9G,QAAQA,MAAM;MACZ,KAAK,aAAa;QAChB,IAAI3F,eAAe,CAACmC,OAAO,IAAInB,YAAY,EAAE;UAC3ChB,eAAe,CAACmC,OAAO,CAACyC,UAAU,CAAC5D,YAAY,CAAC;UAChD0C,aAAa,CAAC,uBAAuB,CAAC;QACxC;QACA;MAEF,KAAK,MAAM;QACT,IAAI1C,YAAY,EAAE;UAChB,MAAM4C,eAAe,CAAC5C,YAAY,EAAE,kBAAkB,CAAC;QACzD;QACA;MAEF,KAAK,aAAa;QAChB;QACA,IAAIA,YAAY,EAAE;UAChB,IAAI;YACF,MAAMrD,WAAW,CAACiI,oBAAoB,CAAC;cACrCC,SAAS,EAAE,CAAC7E,YAAY,CAAC;cACzB8E,iBAAiB,EAAE,oBAAoB;cACvCC,sBAAsB,EAAEvG,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgC,EAAE;cAC1CwE,IAAI,EAAE,CAAC,eAAe;YACxB,CAAC,CAAC;YACFtC,aAAa,CAAC,cAAc,CAAC;UAC/B,CAAC,CAAC,OAAOxB,KAAK,EAAE;YACdR,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;YAClCwB,aAAa,CAAC,gBAAgB,CAAC;UACjC;QACF;QACA;MAEF,KAAK,SAAS;QACZ;QACAA,aAAa,CAAC,yBAAyB,CAAC;QACxC;MAEF,KAAK,WAAW;QACd;QACAA,aAAa,CAAC,4BAA4B,CAAC;QAC3C;IACJ;;IAEA;IACA6B,oBAAoB,CAAC,CAAC;EACxB,CAAC;;EAED;EACArI,SAAS,CAAC,MAAM;IACd,MAAM+I,WAAW,GAAGlG,eAAe,CAACoC,OAAO;IAC3C,IAAI8D,WAAW,EAAE;MACf,MAAMC,aAAa,GAAGA,CAAA,KAAM;QAC1B1C,UAAU,CAAC0B,mBAAmB,EAAE,EAAE,CAAC,CAAC,CAAC;MACvC,CAAC;MAEDe,WAAW,CAACE,gBAAgB,CAAC,SAAS,EAAED,aAAa,CAAC;MACtDD,WAAW,CAACE,gBAAgB,CAAC,UAAU,EAAED,aAAa,CAAC;MAEvD,OAAO,MAAM;QACXD,WAAW,CAACG,mBAAmB,CAAC,SAAS,EAAEF,aAAa,CAAC;QACzDD,WAAW,CAACG,mBAAmB,CAAC,UAAU,EAAEF,aAAa,CAAC;MAC5D,CAAC;IACH;EACF,CAAC,EAAE,EAAE,CAAC;;EAEN;EACAhJ,SAAS,CAAC,MAAM;IACd,MAAMmJ,kBAAkB,GAAIC,KAAiB,IAAK;MAChD,MAAMC,MAAM,GAAGD,KAAK,CAACC,MAAqB;MAC1C;MACA,IAAIxG,eAAe,CAACoC,OAAO,IAAI,CAACpC,eAAe,CAACoC,OAAO,CAACqE,QAAQ,CAACD,MAAM,CAAC,IAAI,CAACA,MAAM,CAACE,OAAO,CAAC,YAAY,CAAC,EAAE;QACzGlB,oBAAoB,CAAC,CAAC;MACxB;IACF,CAAC;IAEDmB,QAAQ,CAACP,gBAAgB,CAAC,WAAW,EAAEE,kBAAkB,CAAC;IAC1D,OAAO,MAAM;MACXK,QAAQ,CAACN,mBAAmB,CAAC,WAAW,EAAEC,kBAAkB,CAAC;IAC/D,CAAC;EACH,CAAC,EAAE,EAAE,CAAC;;EAEN;EACA,MAAMM,kBAAkB,GAAIC,UAAkB,IAAK;IACjDlG,oBAAoB,CAACqC,IAAI,IAAI;MAC3B,MAAM8D,MAAM,GAAG,IAAIlG,GAAG,CAACoC,IAAI,CAAC;MAC5B,IAAI8D,MAAM,CAACC,GAAG,CAACF,UAAU,CAAC,EAAE;QAC1BC,MAAM,CAACE,MAAM,CAACH,UAAU,CAAC;MAC3B,CAAC,MAAM;QACLC,MAAM,CAACG,GAAG,CAACJ,UAAU,CAAC;MACxB;MACA,OAAOC,MAAM;IACf,CAAC,CAAC;EACJ,CAAC;EAED,MAAMI,gBAAgB,GAAG,MAAAA,CAAOL,UAAkB,EAAEM,IAAY,KAAK;IACnE,IAAI;MACF;MACAnG,QAAQ,CAACgC,IAAI,KAAK;QAChB,GAAGA,IAAI;QACP,CAAC6D,UAAU,GAAGM;MAChB,CAAC,CAAC,CAAC;;MAEH;MACAvJ,WAAW,CAACwJ,kBAAkB,CAAC;QAC7BC,WAAW,EAAER,UAAU;QACvBjE,OAAO,EAAEuE;MACX,CAAC,CAAC,CAACG,KAAK,CAACnF,KAAK,IAAI;QAChBR,OAAO,CAAC4F,IAAI,CAAC,2BAA2B,EAAEpF,KAAK,CAAC;MAClD,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOA,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjCwB,aAAa,CAAC,eAAe,CAAC;IAChC;EACF,CAAC;EAED,MAAM6D,gBAAgB,GAAG,MAAOX,UAAkB,IAAK;IACrD,IAAI;MACF;MACA7F,QAAQ,CAACgC,IAAI,IAAI;QACf,MAAMyE,QAAQ,GAAG;UAAE,GAAGzE;QAAK,CAAC;QAC5B,OAAOyE,QAAQ,CAACZ,UAAU,CAAC;QAC3B,OAAOY,QAAQ;MACjB,CAAC,CAAC;MACF3G,uBAAuB,CAACkC,IAAI,IAAI;QAC9B,MAAM8D,MAAM,GAAG,IAAIlG,GAAG,CAACoC,IAAI,CAAC;QAC5B8D,MAAM,CAACE,MAAM,CAACH,UAAU,CAAC;QACzB,OAAOC,MAAM;MACf,CAAC,CAAC;;MAEF;MACAlJ,WAAW,CAAC8J,UAAU,CAACb,UAAU,CAAC,CAACS,KAAK,CAACnF,KAAK,IAAI;QAChDR,OAAO,CAAC4F,IAAI,CAAC,2BAA2B,EAAEpF,KAAK,CAAC;MAClD,CAAC,CAAC;MAEFwB,aAAa,CAAC,aAAa,CAAC;IAC9B,CAAC,CAAC,OAAOxB,KAAK,EAAE;MACdR,OAAO,CAACQ,KAAK,CAAC,WAAW,EAAEA,KAAK,CAAC;MACjCwB,aAAa,CAAC,eAAe,CAAC;IAChC;EACF,CAAC;;EAED;EACA,MAAMgE,gBAAgB,GAAG,MAAO/B,MAAwE,IAAK;IAC3G,MAAMgC,WAAW,GAAGC,KAAK,CAACC,IAAI,CAACpH,iBAAiB,CAAC;IACjD,MAAMqH,aAAa,GAAGH,WAAW,CAACI,GAAG,CAACvG,EAAE,IAAI;MAC1C;MACA,MAAM,CAACoB,SAAS,EAAEyB,YAAY,EAAE2D,aAAa,CAAC,GAAGxG,EAAE,CAACyG,KAAK,CAAC,GAAG,CAAC;MAC9D,MAAM1F,OAAO,GAAGnB,aAAa,CAAC4D,IAAI,CAACkD,CAAC,IAAIA,CAAC,CAACtF,SAAS,KAAKA,SAAS,CAAC;MAClE,IAAIL,OAAO,EAAE;QACX,MAAMsD,SAAS,GAAGtD,OAAO,CAACI,OAAO,CAACsF,KAAK,CAAC,SAAS,CAAC,CAACF,GAAG,CAACI,CAAC,IAAIA,CAAC,CAAC3F,IAAI,CAAC,CAAC,CAAC,CAAC4F,MAAM,CAACD,CAAC,IAAIA,CAAC,CAACnG,MAAM,GAAG,CAAC,CAAC;QAC/F,OAAO6D,SAAS,CAACwC,QAAQ,CAACL,aAAa,CAAC,CAAC,IAAI,EAAE;MACjD;MACA,OAAO,EAAE;IACX,CAAC,CAAC,CAACI,MAAM,CAACvE,IAAI,IAAIA,IAAI,CAAC7B,MAAM,GAAG,CAAC,CAAC;IAElC,QAAQ2D,MAAM;MACZ,KAAK,aAAa;QAChB,IAAI3F,eAAe,CAACmC,OAAO,IAAI2F,aAAa,CAAC9F,MAAM,GAAG,CAAC,EAAE;UACvD,MAAMsG,aAAa,GAAGR,aAAa,CAACC,GAAG,CAAClE,IAAI,IAAI,IAAIA,IAAI,GAAG,CAAC,CAAC0E,IAAI,CAAC,IAAI,CAAC;UACvEvI,eAAe,CAACmC,OAAO,CAACyC,UAAU,CAAC0D,aAAa,CAAC;QACnD;QACA;MAEF,KAAK,aAAa;QAChB,IAAI;UACF,MAAM3K,WAAW,CAACiI,oBAAoB,CAAC;YACrCC,SAAS,EAAEiC,aAAa;YACxBhC,iBAAiB,EAAE,oBAAoB;YACvCC,sBAAsB,EAAEvG,cAAc,aAAdA,cAAc,uBAAdA,cAAc,CAAEgC,EAAE;YAC1CwE,IAAI,EAAE,CAAC,eAAe;UACxB,CAAC,CAAC;UACF2B,WAAW,CAACa,OAAO,CAAChH,EAAE,IAAI;YACxBX,uBAAuB,CAACkC,IAAI,IAAI,IAAIpC,GAAG,CAACoC,IAAI,CAAC,CAACiE,GAAG,CAACxF,EAAE,CAAC,CAAC;UACxD,CAAC,CAAC;UACFkC,aAAa,CAAC,cAAc,CAAC;QAC/B,CAAC,CAAC,OAAOxB,KAAK,EAAE;UACdR,OAAO,CAACQ,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;UAClCwB,aAAa,CAAC,gBAAgB,CAAC;QACjC;QACA;MAEF,KAAK,SAAS;QACZ,IAAIiE,WAAW,CAAC3F,MAAM,GAAG,CAAC,EAAE;UAC1B;UACA,MAAMyG,SAAS,GAAGd,WAAW,CAACe,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK;YAC3C,MAAM,CAACC,UAAU,GAAIC,cAAc,CAAC,GAAGH,CAAC,CAACV,KAAK,CAAC,GAAG,CAAC;YACnD,MAAM,CAACc,UAAU,GAAIC,cAAc,CAAC,GAAGJ,CAAC,CAACX,KAAK,CAAC,GAAG,CAAC;YAEnD,IAAIY,UAAU,KAAKE,UAAU,EAAE;cAC7B,OAAO,IAAIlG,IAAI,CAACgG,UAAU,CAAC,CAACI,OAAO,CAAC,CAAC,GAAG,IAAIpG,IAAI,CAACkG,UAAU,CAAC,CAACE,OAAO,CAAC,CAAC;YACxE;YACA,OAAOZ,QAAQ,CAACS,cAAc,CAAC,GAAGT,QAAQ,CAACW,cAAc,CAAC;UAC5D,CAAC,CAAC;UAEF,MAAME,gBAAgB,GAAGT,SAAS,CAACA,SAAS,CAACzG,MAAM,GAAG,CAAC,CAAC;;UAExD;UACAjB,QAAQ,CAACgC,IAAI,KAAK;YAAE,GAAGA,IAAI;YAAE,CAACmG,gBAAgB,GAAG;UAAG,CAAC,CAAC,CAAC;;UAEvD;UACArI,uBAAuB,CAACkC,IAAI,IAAI;YAC9B,MAAM8D,MAAM,GAAG,IAAIlG,GAAG,CAACoC,IAAI,CAAC;YAC5B4E,WAAW,CAACa,OAAO,CAAChH,EAAE,IAAIqF,MAAM,CAACG,GAAG,CAACxF,EAAE,CAAC,CAAC;YACzC,OAAOqF,MAAM;UACf,CAAC,CAAC;;UAEF;UACAlJ,WAAW,CAACwJ,kBAAkB,CAAC;YAC7BC,WAAW,EAAE8B,gBAAgB;YAC7BvG,OAAO,EAAE;UACX,CAAC,CAAC,CAAC0E,KAAK,CAACnF,KAAK,IAAI;YAChBR,OAAO,CAAC4F,IAAI,CAAC,2BAA2B,EAAEpF,KAAK,CAAC;UAClD,CAAC,CAAC;;UAEF;UACA,IAAI1C,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEgC,EAAE,EAAE;YACtBmG,WAAW,CAACa,OAAO,CAAChH,EAAE,IAAI;cACxB7D,WAAW,CAACwL,eAAe,CAAC;gBAC1B/B,WAAW,EAAE5F,EAAE;gBACf2B,SAAS,EAAE3D,cAAc,CAACgC,EAAE;gBAC5B4H,WAAW,EAAE;cACf,CAAC,CAAC,CAAC/B,KAAK,CAACnF,KAAK,IAAI;gBAChBR,OAAO,CAAC4F,IAAI,CAAC,kBAAkB,EAAEpF,KAAK,CAAC;cACzC,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;UAEAR,OAAO,CAACC,GAAG,CAAC,sCAAsC,CAAC;QACrD;QACA;MAEF,KAAK,WAAW;QACd;QACAD,OAAO,CAACC,GAAG,CAAC,UAAU,EAAEgG,WAAW,CAAC;;QAEpC;QACA,MAAM0B,oBAAoB,GAAG1B,WAAW,CAACS,MAAM,CAAC5G,EAAE,IAAIZ,oBAAoB,CAACkG,GAAG,CAACtF,EAAE,CAAC,CAAC;QACnF,MAAM8H,cAAc,GAAG3B,WAAW,CAACS,MAAM,CAAC5G,EAAE,IAAI,CAACZ,oBAAoB,CAACkG,GAAG,CAACtF,EAAE,CAAC,CAAC;QAE9EE,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAE0H,oBAAoB,CAAC;QACnD3H,OAAO,CAACC,GAAG,CAAC,oBAAoB,EAAE2H,cAAc,CAAC;;QAEjD;QACA,IAAID,oBAAoB,CAACrH,MAAM,GAAG,CAAC,EAAE;UACnC;UACAnB,uBAAuB,CAACkC,IAAI,IAAI;YAC9B,MAAM8D,MAAM,GAAG,IAAIlG,GAAG,CAACoC,IAAI,CAAC;YAC5B4E,WAAW,CAACa,OAAO,CAAChH,EAAE,IAAIqF,MAAM,CAACE,MAAM,CAACvF,EAAE,CAAC,CAAC;YAC5C,OAAOqF,MAAM;UACf,CAAC,CAAC;;UAEF;UACAc,WAAW,CAACa,OAAO,CAAChH,EAAE,IAAI;YACxB7D,WAAW,CAAC4L,eAAe,CAAC/H,EAAE,CAAC,CAAC6F,KAAK,CAACnF,KAAK,IAAI;cAC7CR,OAAO,CAAC4F,IAAI,CAAC,kBAAkB,EAAEpF,KAAK,CAAC;YACzC,CAAC,CAAC;UACJ,CAAC,CAAC;UAEFR,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACpC,CAAC,MAAM;UACL;UACAd,uBAAuB,CAACkC,IAAI,IAAI;YAC9B,MAAM8D,MAAM,GAAG,IAAIlG,GAAG,CAACoC,IAAI,CAAC;YAC5B4E,WAAW,CAACa,OAAO,CAAChH,EAAE,IAAIqF,MAAM,CAACG,GAAG,CAACxF,EAAE,CAAC,CAAC;YACzC,OAAOqF,MAAM;UACf,CAAC,CAAC;;UAEF;UACA,IAAIrH,cAAc,aAAdA,cAAc,eAAdA,cAAc,CAAEgC,EAAE,EAAE;YACtBmG,WAAW,CAACa,OAAO,CAAChH,EAAE,IAAI;cACxB7D,WAAW,CAACwL,eAAe,CAAC;gBAC1B/B,WAAW,EAAE5F,EAAE;gBACf2B,SAAS,EAAE3D,cAAc,CAACgC,EAAE;gBAC5B4H,WAAW,EAAE;cACf,CAAC,CAAC,CAAC/B,KAAK,CAACnF,KAAK,IAAI;gBAChBR,OAAO,CAAC4F,IAAI,CAAC,kBAAkB,EAAEpF,KAAK,CAAC;cACzC,CAAC,CAAC;YACJ,CAAC,CAAC;UACJ;UAEAR,OAAO,CAACC,GAAG,CAAC,qBAAqB,CAAC;QACpC;QACA;MAEF,KAAK,MAAM;QACT,IAAImG,aAAa,CAAC9F,MAAM,GAAG,CAAC,EAAE;UAC5B,MAAM4B,eAAe,CAACkE,aAAa,CAACS,IAAI,CAAC,GAAG,CAAC,EAAE,iBAAiB,CAAC;QACnE;QACA;IACJ;;IAEA;IACA7H,oBAAoB,CAAC,IAAIC,GAAG,CAAC,CAAC,CAAC;EACjC,CAAC;;EAED;EACA,MAAM6I,wBAAwB,GAAGA,CAAA,KAAM;IACrChJ,uBAAuB,CAACuC,IAAI,IAAI,CAACA,IAAI,CAAC;EACxC,CAAC;EAED,oBACElF,OAAA,CAACC,SAAS;IAAA2L,QAAA,gBAER5L,OAAA,CAACI,aAAa;MAAAwL,QAAA,gBACZ5L,OAAA,CAACM,WAAW;QAAAsL,QAAA,EAAC;MAAG;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAa,CAAC,eAC9BhM,OAAA,CAACS,eAAe;QAACwL,OAAO,EAAEnG,qBAAsB;QAAA8F,QAAA,EAAC;MAEjD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAiB,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACL,CAAC,eAGhBhM,OAAA,CAACY,WAAW;MAAAgL,QAAA,gBACV5L,OAAA,CAACc,YAAY;QAACoL,GAAG,EAAEhK,eAAgB;QAAA0J,QAAA,GAChCrI,aAAa,CAACY,MAAM,KAAK,CAAC,gBACzBnE,OAAA,CAACkB,SAAS;UAAA0K,QAAA,gBACR5L,OAAA,CAACoB,SAAS;YAAAwK,QAAA,EAAC;UAAE;YAAAC,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAW,CAAC,eACzBhM,OAAA;YAAA4L,QAAA,gBACE5L,OAAA;cAAA4L,QAAA,GAAQ,2KAAkC,eAAA5L,OAAA;gBAAA6L,QAAA,EAAAC,YAAA;gBAAAC,UAAA;gBAAAC,YAAA;cAAA,OAAK,CAAC,yGAC3B;YAAA;cAAAH,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAQ,CAAC,eAC9BhM,OAAA;cAAA6L,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAAAhM,OAAA;cAAA6L,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,+GAEZ,eAAAhM,OAAA;cAAA6L,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,eAAAhM,OAAA;cAAA6L,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAAK,CAAC,sNAEd;UAAA;YAAAH,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAK,CAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACG,CAAC,GAEZzI,aAAa,CAAC2G,GAAG,CAAC,CAACxF,OAAO,EAAEyH,KAAK,KAC/BzJ,oBAAoB,gBAClB1C,OAAA,CAACL,iBAAiB;UAEhB+E,OAAO,EAAEA,OAAQ;UACjB8B,YAAY,EAAE2F,KAAM;UACpBC,QAAQ,EAAE,CAAC,CAAE;UACbxJ,iBAAiB,EAAEA,iBAAkB;UACrCG,oBAAoB,EAAEA,oBAAqB;UAC3CE,KAAK,EAAEA,KAAM;UACboJ,cAAc,EAAEvD,kBAAmB;UACnCwD,YAAY,EAAElD,gBAAiB;UAC/BmD,YAAY,EAAE7C;QAAiB,GAT1B,GAAGhF,OAAO,CAACG,IAAI,IAAIsH,KAAK,EAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUhC,CAAC,gBAEFhM,OAAA,CAACN,OAAO;UAENgF,OAAO,EAAEA,OAAQ;UACjB0H,QAAQ,EAAE,CAAC,CAAE,CAAC;UAAA;UACdI,iBAAiB,EAAE,IAAK;UACxBC,sBAAsB,EAAE,KAAM;UAC9BC,MAAM,EAAEA,CAAA,KAAMrG,iBAAiB,CAAC3B,OAAO,CAACI,OAAO,CAAE;UACjD6H,MAAM,EAAEjI,OAAO,CAACG,IAAI,KAAK,MAAM,GAAG,MAAM0B,eAAe,CAAC4F,KAAK,CAAC,GAAGS,SAAU;UAC3EC,UAAU,EAAGnG,UAAU,IAAKD,iBAAiB,CAAC0F,KAAK,EAAEzF,UAAU,CAAE;UACjEoG,YAAY,EAAEnG,gBAAiB;UAC/BoG,SAAS,EAAEvK,mBAAmB,KAAK2J;QAAM,GATpC,GAAGzH,OAAO,CAACG,IAAI,IAAIsH,KAAK,EAAE;UAAAN,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAUhC,CAEJ,CACF,EAGAhK,SAAS,iBACRhC,OAAA,CAACJ,cAAc;UACboN,WAAW,EAAC,uCAAS;UACrBC,YAAY,EAAC;QAAM;UAAApB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OACpB,CACF;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACW,CAAC,eAGfhM,OAAA,CAACgB,gBAAgB;QAAA4K,QAAA,eACf5L,OAAA,CAACP,YAAY;UACXyM,GAAG,EAAE/J,eAAgB;UACrB+K,aAAa,EAAEzI,iBAAkB;UACjC0I,QAAQ,EAAEnL,SAAU;UACpBoL,WAAW,EAAC,6XAAiF;UAC7F1K,oBAAoB,EAAEA,oBAAqB;UAC3C2K,oBAAoB,EAAEzK,iBAAiB,CAAC0K,IAAI,GAAG,CAAE;UACjDC,oBAAoB,EAAE5B;QAAyB;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAChD;MAAC;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACc,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAGdhM,OAAA,CAACsB,KAAK;MAACE,IAAI,EAAEY,SAAU;MAAAwJ,QAAA,EACpBtJ;IAAY;MAAAuJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACR,CAAC,eAGRhM,OAAA,CAACH,oBAAoB;MACnB2B,IAAI,EAAEkB,oBAAoB,GAAGE,iBAAiB,CAAC0K,IAAI,GAAG,CAAC,GAAGjK,OAAQ;MAClEmK,YAAY,EAAE9K,oBAAoB,GAAGmH,gBAAgB,GAAGhC,mBAAoB;MAC5E4F,SAAS,EAAC,eAAe;MACzBC,qBAAqB,EAAC;IAAE;MAAA7B,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACzB,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACO,CAAC;AAEhB,CAAC;AAACjK,EAAA,CApqBIL,iBAAmD;AAAAiM,GAAA,GAAnDjM,iBAAmD;AAsqBzD,eAAeA,iBAAiB;AAAC,IAAAvB,EAAA,EAAAE,GAAA,EAAAG,GAAA,EAAAG,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAE,GAAA,EAAAI,GAAA,EAAAkM,GAAA;AAAAC,YAAA,CAAAzN,EAAA;AAAAyN,YAAA,CAAAvN,GAAA;AAAAuN,YAAA,CAAApN,GAAA;AAAAoN,YAAA,CAAAjN,GAAA;AAAAiN,YAAA,CAAA/M,GAAA;AAAA+M,YAAA,CAAA7M,GAAA;AAAA6M,YAAA,CAAA3M,GAAA;AAAA2M,YAAA,CAAAzM,GAAA;AAAAyM,YAAA,CAAAvM,GAAA;AAAAuM,YAAA,CAAAnM,GAAA;AAAAmM,YAAA,CAAAD,GAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}