{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\InteractionRecordView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ThreadListSection = styled.div`\n  flex: 0 0 200px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);\n  overflow-y: auto;\n`;\n_c2 = ThreadListSection;\nconst ThreadListTitle = styled.div`\n  padding: 16px 20px 8px;\n  font-size: 16px;\n  font-weight: 600;\n  color: #4a148c;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n_c3 = ThreadListTitle;\nconst ThreadList = styled.div`\n  padding: 0 16px 16px;\n  display: flex;\n  flex-direction: column;\n  gap: 8px;\n`;\n_c4 = ThreadList;\nconst ThreadItem = styled.div`\n  padding: 12px;\n  border-radius: 8px;\n  cursor: pointer;\n  transition: all 0.2s ease;\n  background: ${props => {\n  if (props.isSelected) {\n    return props.threadType === 'interpretation' ? '#6c757d' : props.threadType === 'proceed' ? '#ff9800' : '#4caf50';\n  }\n  return 'rgba(255, 255, 255, 0.8)';\n}};\n  color: ${props => props.isSelected ? 'white' : '#333'};\n  border: 1px solid ${props => {\n  if (props.isSelected) {\n    return props.threadType === 'interpretation' ? '#6c757d' : props.threadType === 'proceed' ? '#ff9800' : '#4caf50';\n  }\n  return 'rgba(255, 255, 255, 0.5)';\n}};\n  \n  &:hover {\n    background: ${props => {\n  if (props.isSelected) {\n    return props.threadType === 'interpretation' ? '#5a6268' : props.threadType === 'proceed' ? '#f57c00' : '#388e3c';\n  }\n  return 'rgba(255, 255, 255, 0.9)';\n}};\n    transform: translateY(-1px);\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\n  }\n`;\n_c5 = ThreadItem;\nconst ThreadTypeLabel = styled.div`\n  font-size: 10px;\n  font-weight: 500;\n  color: ${props => props.threadType === 'interpretation' ? '#6c757d' : props.threadType === 'proceed' ? '#ff9800' : '#4caf50'};\n  background: ${props => props.threadType === 'interpretation' ? 'rgba(108, 117, 125, 0.1)' : props.threadType === 'proceed' ? 'rgba(255, 152, 0, 0.1)' : 'rgba(76, 175, 80, 0.1)'};\n  border-radius: 4px;\n  padding: 2px 6px;\n  text-transform: uppercase;\n  letter-spacing: 0.5px;\n  margin-bottom: 4px;\n  display: inline-block;\n`;\n_c6 = ThreadTypeLabel;\nconst ThreadContent = styled.div`\n  font-size: 12px;\n  line-height: 1.4;\n  margin-bottom: 4px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: 2;\n  -webkit-box-orient: vertical;\n`;\n_c7 = ThreadContent;\nconst ThreadTime = styled.div`\n  font-size: 10px;\n  opacity: 0.7;\n`;\n_c8 = ThreadTime;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c9 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c0 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c1 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n_c10 = EmptyChat;\nconst EmptyThreadList = styled.div`\n  padding: 20px;\n  text-align: center;\n  color: #666;\n  font-size: 12px;\n`;\n\n// 토스트 스타일 컴포넌트\n_c11 = EmptyThreadList;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c12 = Toast;\nconst InteractionRecordView = ({\n  personaId,\n  personaName,\n  interactionRecord,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 스레드를 시간 순서대로 정렬 (최신이 위로)\n  const sortedThreads = localThreads.sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime());\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else if (sortedThreads.length > 0 && !selectedThread) {\n      // 첫 번째 스레드를 자동 선택 (가장 최신)\n      setSelectedThread(sortedThreads[0]);\n    }\n  }, [propSelectedThread, sortedThreads, selectedThread]);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n  const handleSendMessage = async message => {\n    if (!selectedThread) return false;\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...selectedThread,\n      messages: [...selectedThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setSelectedThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: selectedThread.id,\n        user_message: message\n      });\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        setSelectedThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === selectedThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('상호작용 기록 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('상호작용 기록 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n  const formatDate = timestamp => {\n    return new Date(timestamp).toLocaleDateString('ko-KR', {\n      month: 'short',\n      day: 'numeric',\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    setMemos(prev => ({\n      ...prev,\n      [sentenceId]: memo\n    }));\n  };\n  const handleDeleteMemo = async sentenceId => {\n    setMemos(prev => {\n      const newMemos = {\n        ...prev\n      };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || ''; // 기본값: 스레드 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || ''; // 기본값: 스레드 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    showCopyToast(`${action} 기능이 실행되었습니다`);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 스레드 선택 핸들러\n  const handleThreadSelect = thread => {\n    setSelectedThread(thread);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 500,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ThreadListSection, {\n      children: [/*#__PURE__*/_jsxDEV(ThreadListTitle, {\n        children: \"\\uD83D\\uDCCA \\uC0C1\\uD638\\uC791\\uC6A9 \\uAE30\\uB85D\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 505,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ThreadList, {\n        children: sortedThreads.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyThreadList, {\n          children: \"\\uC544\\uC9C1 \\uC0DD\\uC131\\uB41C \\uC2A4\\uB808\\uB4DC\\uAC00 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 511,\n          columnNumber: 13\n        }, this) : sortedThreads.map(thread => /*#__PURE__*/_jsxDEV(ThreadItem, {\n          isSelected: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id) === thread.id,\n          threadType: thread.thread_type,\n          onClick: () => handleThreadSelect(thread),\n          children: [/*#__PURE__*/_jsxDEV(ThreadTypeLabel, {\n            threadType: thread.thread_type,\n            children: thread.thread_type === 'interpretation' ? '해석' : thread.thread_type === 'proceed' ? '나아가기' : '문장'\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 522,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ThreadContent, {\n            children: thread.content\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 526,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(ThreadTime, {\n            children: formatDate(thread.created_at)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 529,\n            columnNumber: 17\n          }, this)]\n        }, thread.id, true, {\n          fileName: _jsxFileName,\n          lineNumber: 516,\n          columnNumber: 15\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 509,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 504,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCCA\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 542,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uC2A4\\uB808\\uB4DC\\uB97C \\uC120\\uD0DD\\uD558\\uC5EC \\uB300\\uD654\\uB97C \\uC2DC\\uC791\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 543,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 544,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 541,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `interaction_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 551,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#9c27b0',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `interaction_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 567,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#9c27b0\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 602,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 539,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading || !selectedThread,\n          placeholder: selectedThread ? `${personaName}에게 질문해보세요...` : \"스레드를 선택해주세요\",\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || '',\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 611,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 610,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 538,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || ''\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 633,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 499,\n    columnNumber: 5\n  }, this);\n};\n_s(InteractionRecordView, \"EbCB/tyxI5Zm8f3niCoWh3LJrFc=\");\n_c13 = InteractionRecordView;\nexport default InteractionRecordView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8, _c9, _c0, _c1, _c10, _c11, _c12, _c13;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ThreadListSection\");\n$RefreshReg$(_c3, \"ThreadListTitle\");\n$RefreshReg$(_c4, \"ThreadList\");\n$RefreshReg$(_c5, \"ThreadItem\");\n$RefreshReg$(_c6, \"ThreadTypeLabel\");\n$RefreshReg$(_c7, \"ThreadContent\");\n$RefreshReg$(_c8, \"ThreadTime\");\n$RefreshReg$(_c9, \"ChatSection\");\n$RefreshReg$(_c0, \"ChatMessages\");\n$RefreshReg$(_c1, \"ChatInputSection\");\n$RefreshReg$(_c10, \"EmptyChat\");\n$RefreshReg$(_c11, \"EmptyThreadList\");\n$RefreshReg$(_c12, \"Toast\");\n$RefreshReg$(_c13, \"InteractionRecordView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","jsxDEV","_jsxDEV","Container","div","_c","ThreadListSection","_c2","ThreadListTitle","_c3","ThreadList","_c4","ThreadItem","props","isSelected","threadType","_c5","ThreadTypeLabel","_c6","ThreadContent","_c7","ThreadTime","_c8","ChatSection","_c9","ChatMessages","_c0","ChatInputSection","_c1","EmptyChat","_c10","EmptyThreadList","_c11","Toast","show","_c12","InteractionRecordView","personaId","personaName","interactionRecord","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","sortedThreads","sort","a","b","Date","created_at","getTime","length","current","scrollTop","scrollHeight","messages","handleSendMessage","message","userMessage","role","content","timestamp","toISOString","updatedThread","updated_at","response","chatWithThread","thread_id","id","user_message","data","assistantMessage","persona_id","persona_name","finalUpdatedThread","thread_updated_at","updatedThreads","map","t","console","error","formatTime","toLocaleTimeString","hour","minute","formatDate","toLocaleDateString","month","day","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","handleDeleteMemo","newMemos","handleSunAction","handlePersonAction","proceedPrompt","insertText","contentToSave","lastAssistantMessage","slice","reverse","find","msg","saveCurrentAsProceed","handleRefreshThreads","handleDocumentAction","sentencePrompt","saveCurrentAsSentence","threadsResponse","getPersonaThreads","handleMenuAction","action","handleToggleSentenceMode","handleThreadSelect","thread","children","fileName","_jsxFileName","lineNumber","columnNumber","thread_type","onClick","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onRefreshThreads","onMenuAction","_c13","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/InteractionRecordView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\r\nimport Message from '../../shared/components/Message';\r\nimport SelectableMessage from './SelectableMessage';\r\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\r\nimport LoadingMessage from '../../shared/components/LoadingMessage';\r\nimport { sentenceApi } from '../api/sentenceApi';\r\nimport { chatApi } from '../../shared/api/chatApi';\r\nimport { TrainingThread, InteractionRecord } from '../../shared/types';\r\n\r\ninterface InteractionRecordViewProps {\r\n  personaId: string;\r\n  personaName: string;\r\n  interactionRecord: InteractionRecord | null;\r\n  threads: TrainingThread[];\r\n  onThreadUpdate: (threads: TrainingThread[]) => void;\r\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed' | 'sentence') => void;\r\n  onGenerateNewInterpretation?: () => void;\r\n  selectedThread?: TrainingThread | null;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background: white;\r\n`;\r\n\r\nconst ThreadListSection = styled.div`\r\n  flex: 0 0 200px;\r\n  border-bottom: 2px solid #e0e0e0;\r\n  background: linear-gradient(135deg, #f3e5f5 0%, #e1bee7 100%);\r\n  overflow-y: auto;\r\n`;\r\n\r\nconst ThreadListTitle = styled.div`\r\n  padding: 16px 20px 8px;\r\n  font-size: 16px;\r\n  font-weight: 600;\r\n  color: #4a148c;\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 8px;\r\n`;\r\n\r\nconst ThreadList = styled.div`\r\n  padding: 0 16px 16px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 8px;\r\n`;\r\n\r\nconst ThreadItem = styled.div<{ isSelected: boolean; threadType: 'interpretation' | 'proceed' | 'sentence' }>`\r\n  padding: 12px;\r\n  border-radius: 8px;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  background: ${props => {\r\n    if (props.isSelected) {\r\n      return props.threadType === 'interpretation' ? '#6c757d' : \r\n             props.threadType === 'proceed' ? '#ff9800' : '#4caf50';\r\n    }\r\n    return 'rgba(255, 255, 255, 0.8)';\r\n  }};\r\n  color: ${props => props.isSelected ? 'white' : '#333'};\r\n  border: 1px solid ${props => {\r\n    if (props.isSelected) {\r\n      return props.threadType === 'interpretation' ? '#6c757d' : \r\n             props.threadType === 'proceed' ? '#ff9800' : '#4caf50';\r\n    }\r\n    return 'rgba(255, 255, 255, 0.5)';\r\n  }};\r\n  \r\n  &:hover {\r\n    background: ${props => {\r\n      if (props.isSelected) {\r\n        return props.threadType === 'interpretation' ? '#5a6268' : \r\n               props.threadType === 'proceed' ? '#f57c00' : '#388e3c';\r\n      }\r\n      return 'rgba(255, 255, 255, 0.9)';\r\n    }};\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);\r\n  }\r\n`;\r\n\r\nconst ThreadTypeLabel = styled.div<{ threadType: 'interpretation' | 'proceed' | 'sentence' }>`\r\n  font-size: 10px;\r\n  font-weight: 500;\r\n  color: ${props => \r\n    props.threadType === 'interpretation' ? '#6c757d' : \r\n    props.threadType === 'proceed' ? '#ff9800' : '#4caf50'\r\n  };\r\n  background: ${props => \r\n    props.threadType === 'interpretation' ? 'rgba(108, 117, 125, 0.1)' : \r\n    props.threadType === 'proceed' ? 'rgba(255, 152, 0, 0.1)' : 'rgba(76, 175, 80, 0.1)'\r\n  };\r\n  border-radius: 4px;\r\n  padding: 2px 6px;\r\n  text-transform: uppercase;\r\n  letter-spacing: 0.5px;\r\n  margin-bottom: 4px;\r\n  display: inline-block;\r\n`;\r\n\r\nconst ThreadContent = styled.div`\r\n  font-size: 12px;\r\n  line-height: 1.4;\r\n  margin-bottom: 4px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n`;\r\n\r\nconst ThreadTime = styled.div`\r\n  font-size: 10px;\r\n  opacity: 0.7;\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n`;\r\n\r\nconst ChatInputSection = styled.div`\r\n  padding: 16px 20px;\r\n  border-top: none;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst EmptyChat = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #999;\r\n  font-size: 14px;\r\n  text-align: center;\r\n`;\r\n\r\nconst EmptyThreadList = styled.div`\r\n  padding: 20px;\r\n  text-align: center;\r\n  color: #666;\r\n  font-size: 12px;\r\n`;\r\n\r\n// 토스트 스타일 컴포넌트\r\nconst Toast = styled.div<{ show: boolean }>`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  background: #6c757d;\r\n  color: white;\r\n  padding: 12px 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\r\n  transition: transform 0.3s ease;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst InteractionRecordView: React.FC<InteractionRecordViewProps> = ({\r\n  personaId,\r\n  personaName,\r\n  interactionRecord,\r\n  threads,\r\n  onThreadUpdate,\r\n  onSwitchToMode,\r\n  onGenerateNewInterpretation,\r\n  selectedThread: propSelectedThread,\r\n}) => {\r\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\r\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\r\n  const messageInputRef = useRef<MessageInputRef>(null);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  \r\n  // 문장 선택 관련 상태\r\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\r\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\r\n  const [memos, setMemos] = useState<Record<string, string>>({});\r\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\r\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\r\n\r\n  // 스레드를 시간 순서대로 정렬 (최신이 위로)\r\n  const sortedThreads = localThreads.sort((a, b) => \r\n    new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\r\n  );\r\n\r\n  useEffect(() => {\r\n    setLocalThreads(threads);\r\n  }, [threads]);\r\n\r\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\r\n  useEffect(() => {\r\n    if (propSelectedThread) {\r\n      setSelectedThread(propSelectedThread);\r\n    } else if (sortedThreads.length > 0 && !selectedThread) {\r\n      // 첫 번째 스레드를 자동 선택 (가장 최신)\r\n      setSelectedThread(sortedThreads[0]);\r\n    }\r\n  }, [propSelectedThread, sortedThreads, selectedThread]);\r\n\r\n  useEffect(() => {\r\n    if (chatMessagesRef.current) {\r\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\r\n    }\r\n  }, [selectedThread?.messages]);\r\n\r\n  const handleSendMessage = async (message: string): Promise<boolean> => {\r\n    if (!selectedThread) return false;\r\n    \r\n    // 1. 사용자 메시지를 즉시 UI에 추가\r\n    const userMessage = {\r\n      role: 'user' as const,\r\n      content: message,\r\n      timestamp: new Date().toISOString()\r\n    };\r\n    \r\n    const updatedThread = {\r\n      ...selectedThread,\r\n      messages: [...selectedThread.messages, userMessage],\r\n      updated_at: new Date().toISOString()\r\n    };\r\n    \r\n    setSelectedThread(updatedThread);\r\n    \r\n    // 2. 로딩 상태 시작\r\n    setIsLoading(true);\r\n    \r\n    try {\r\n      // 3. 백엔드 API 호출\r\n      const response = await chatApi.chatWithThread({\r\n        thread_id: selectedThread.id,\r\n        user_message: message\r\n      });\r\n\r\n      if (response.data && response.data.response) {\r\n        // 4. AI 응답을 UI에 추가\r\n        const assistantMessage = {\r\n          role: 'assistant' as const,\r\n          content: response.data.response.content,\r\n          timestamp: response.data.response.timestamp,\r\n          persona_id: response.data.response.persona_id || personaId,\r\n          persona_name: response.data.response.persona_name || personaName\r\n        };\r\n\r\n        const finalUpdatedThread = {\r\n          ...updatedThread,\r\n          messages: [...updatedThread.messages, assistantMessage],\r\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\r\n        };\r\n        \r\n        setSelectedThread(finalUpdatedThread);\r\n        \r\n        // 5. 로컬 스레드 목록도 업데이트\r\n        const updatedThreads = localThreads.map(t => \r\n          t.id === selectedThread.id ? finalUpdatedThread : t\r\n        );\r\n        setLocalThreads(updatedThreads);\r\n        onThreadUpdate(updatedThreads);\r\n        \r\n        setIsLoading(false);\r\n        return true;\r\n      } else {\r\n        console.error('상호작용 기록 채팅 응답 오류:', response);\r\n        setIsLoading(false);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      console.error('상호작용 기록 채팅 오류:', error);\r\n      setIsLoading(false);\r\n      return false;\r\n    }\r\n  };\r\n\r\n  const formatTime = (timestamp: string) => {\r\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n  };\r\n\r\n  const formatDate = (timestamp: string) => {\r\n    return new Date(timestamp).toLocaleDateString('ko-KR', {\r\n      month: 'short',\r\n      day: 'numeric',\r\n      hour: '2-digit',\r\n      minute: '2-digit',\r\n    });\r\n  };\r\n\r\n  // 토스트 메시지 표시 함수\r\n  const showCopyToast = (message: string) => {\r\n    setToastMessage(message);\r\n    setShowToast(true);\r\n    setTimeout(() => setShowToast(false), 3000);\r\n  };\r\n\r\n  // 텍스트 복사 유틸리티 함수\r\n  const copyToClipboard = async (text: string, successMessage: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      showCopyToast(successMessage);\r\n    } catch (error) {\r\n      console.error('복사 실패:', error);\r\n      showCopyToast('복사 실패');\r\n    }\r\n  };\r\n\r\n  // 메시지 복사 기능\r\n  const handleCopyMessage = async (messageContent: string) => {\r\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\r\n  };\r\n\r\n  // 메시지 수정 관련 함수들\r\n  const handleStartEdit = (messageIndex: number) => {\r\n    setEditingMessageIndex(messageIndex);\r\n  };\r\n\r\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\r\n    setEditingMessageIndex(null);\r\n    showCopyToast('메시지가 수정되었습니다');\r\n    return true;\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingMessageIndex(null);\r\n  };\r\n\r\n  // 문장 선택 관련 함수들\r\n  const handleToggleSelect = (sentenceId: string) => {\r\n    setSelectedSentences(prev => {\r\n      const newSet = new Set(prev);\r\n      if (newSet.has(sentenceId)) {\r\n        newSet.delete(sentenceId);\r\n      } else {\r\n        newSet.add(sentenceId);\r\n      }\r\n      return newSet;\r\n    });\r\n  };\r\n\r\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\r\n    setMemos(prev => ({ ...prev, [sentenceId]: memo }));\r\n  };\r\n\r\n  const handleDeleteMemo = async (sentenceId: string) => {\r\n    setMemos(prev => {\r\n      const newMemos = { ...prev };\r\n      delete newMemos[sentenceId];\r\n      return newMemos;\r\n    });\r\n  };\r\n\r\n  // 액션 핸들러들\r\n  const handleSunAction = async () => {\r\n    if (onGenerateNewInterpretation) {\r\n      onGenerateNewInterpretation();\r\n    }\r\n  };\r\n\r\n  const handlePersonAction = async () => {\r\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\r\n    if (!personaId) return;\r\n    \r\n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\r\n    \r\n    // 입력창에 프롬프트 삽입\r\n    if (messageInputRef.current) {\r\n      messageInputRef.current.insertText(proceedPrompt);\r\n    }\r\n    \r\n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\r\n    \r\n    try {\r\n      // 현재 Assistant의 마지막 채팅 내용만 사용\r\n      let contentToSave = selectedThread?.content || ''; // 기본값: 스레드 내용\r\n      \r\n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\r\n        // Assistant의 마지막 메시지 찾기\r\n        const lastAssistantMessage = selectedThread.messages\r\n          .slice()\r\n          .reverse()\r\n          .find(msg => msg.role === 'assistant');\r\n        \r\n        if (lastAssistantMessage) {\r\n          contentToSave = lastAssistantMessage.content;\r\n        }\r\n      }\r\n      \r\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\r\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\r\n      \r\n      if (response.data) {\r\n        // 스레드 새로고침\r\n        handleRefreshThreads();\r\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\r\n      }\r\n    } catch (error) {\r\n      console.error('나아가기 저장 중 오류:', error);\r\n      showCopyToast('나아가기 저장에 실패했습니다');\r\n    }\r\n  };\r\n\r\n  const handleDocumentAction = async () => {\r\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\r\n    if (!personaId) return;\r\n    \r\n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\r\n    \r\n    // 입력창에 프롬프트 삽입\r\n    if (messageInputRef.current) {\r\n      messageInputRef.current.insertText(sentencePrompt);\r\n    }\r\n    \r\n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\r\n    \r\n    try {\r\n      // 현재 Assistant의 마지막 채팅 내용만 사용\r\n      let contentToSave = selectedThread?.content || ''; // 기본값: 스레드 내용\r\n      \r\n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\r\n        // Assistant의 마지막 메시지 찾기\r\n        const lastAssistantMessage = selectedThread.messages\r\n          .slice()\r\n          .reverse()\r\n          .find(msg => msg.role === 'assistant');\r\n        \r\n        if (lastAssistantMessage) {\r\n          contentToSave = lastAssistantMessage.content;\r\n        }\r\n      }\r\n      \r\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\r\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\r\n      \r\n      if (response.data) {\r\n        // 스레드 새로고침\r\n        handleRefreshThreads();\r\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\r\n      }\r\n    } catch (error) {\r\n      console.error('문장 저장 중 오류:', error);\r\n      showCopyToast('문장 저장에 실패했습니다');\r\n    }\r\n  };\r\n\r\n  // 스레드 새로고침 함수\r\n  const handleRefreshThreads = async () => {\r\n    try {\r\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\r\n      if (threadsResponse.data) {\r\n        const updatedThreads = threadsResponse.data;\r\n        setLocalThreads(updatedThreads);\r\n        onThreadUpdate(updatedThreads);\r\n      }\r\n    } catch (error) {\r\n      console.error('스레드 새로고침 실패:', error);\r\n    }\r\n  };\r\n\r\n  // FloatingActionButton 메뉴 액션 처리\r\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\r\n    showCopyToast(`${action} 기능이 실행되었습니다`);\r\n  };\r\n\r\n  // 문장선택 모드 토글\r\n  const handleToggleSentenceMode = () => {\r\n    setIsSentenceModeActive(prev => !prev);\r\n  };\r\n\r\n  // 스레드 선택 핸들러\r\n  const handleThreadSelect = (thread: TrainingThread) => {\r\n    setSelectedThread(thread);\r\n  };\r\n\r\n  return (\r\n    <Container>\r\n      <Toast show={showToast}>\r\n        {toastMessage}\r\n      </Toast>\r\n      \r\n      <ThreadListSection>\r\n        <ThreadListTitle>\r\n          📊 상호작용 기록\r\n        </ThreadListTitle>\r\n        \r\n        <ThreadList>\r\n          {sortedThreads.length === 0 ? (\r\n            <EmptyThreadList>\r\n              아직 생성된 스레드가 없습니다\r\n            </EmptyThreadList>\r\n          ) : (\r\n            sortedThreads.map((thread) => (\r\n              <ThreadItem\r\n                key={thread.id}\r\n                isSelected={selectedThread?.id === thread.id}\r\n                threadType={thread.thread_type}\r\n                onClick={() => handleThreadSelect(thread)}\r\n              >\r\n                <ThreadTypeLabel threadType={thread.thread_type}>\r\n                  {thread.thread_type === 'interpretation' ? '해석' : \r\n                   thread.thread_type === 'proceed' ? '나아가기' : '문장'}\r\n                </ThreadTypeLabel>\r\n                <ThreadContent>\r\n                  {thread.content}\r\n                </ThreadContent>\r\n                <ThreadTime>\r\n                  {formatDate(thread.created_at)}\r\n                </ThreadTime>\r\n              </ThreadItem>\r\n            ))\r\n          )}\r\n        </ThreadList>\r\n      </ThreadListSection>\r\n      \r\n      <ChatSection>\r\n        <ChatMessages ref={chatMessagesRef}>\r\n          {!selectedThread || selectedThread.messages.length === 0 ? (\r\n            <EmptyChat>\r\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>📊</div>\r\n              <div>스레드를 선택하여 대화를 시작해보세요</div>\r\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\r\n                {personaName}와 대화를 나눌 수 있습니다\r\n              </div>\r\n            </EmptyChat>\r\n          ) : (\r\n            selectedThread.messages.map((message, index) => \r\n              message.role === 'user' ? (\r\n                <Message\r\n                  key={`interaction_${index}`}\r\n                  message={{\r\n                    ...message,\r\n                    persona_id: undefined,\r\n                    persona_name: undefined,\r\n                  }}\r\n                  personas={{}}\r\n                  showActionButtons={true}\r\n                  onCopy={() => handleCopyMessage(message.content)}\r\n                  onEdit={() => handleStartEdit(index)}\r\n                  isEditing={editingMessageIndex === index}\r\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\r\n                  onEditCancel={handleCancelEdit}\r\n                />\r\n              ) : (\r\n                <SelectableMessage\r\n                  key={`interaction_${index}`}\r\n                  message={{\r\n                    ...message,\r\n                    persona_id: 'current_persona',\r\n                    persona_name: personaName,\r\n                  }}\r\n                  personas={{\r\n                    current_persona: {\r\n                      name: personaName,\r\n                      description: '',\r\n                      color: '#9c27b0',\r\n                      prompt: '',\r\n                      category: '',\r\n                      subcategory: ''\r\n                    }\r\n                  }}\r\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\r\n                  highlightedSentences={highlightedSentences}\r\n                  memos={memos}\r\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\r\n                  onMemoChange={handleMemoChange}\r\n                  onDeleteMemo={handleDeleteMemo}\r\n                  showSentenceSelector={isSentenceModeActive}\r\n                  showActionButtons={true}\r\n                  onCopy={() => handleCopyMessage(message.content)}\r\n                  onSunAction={handleSunAction}\r\n                  onPersonAction={handlePersonAction}\r\n                  onDocumentAction={handleDocumentAction}\r\n                />\r\n              )\r\n            )\r\n          )}\r\n          \r\n          {isLoading && (\r\n            <LoadingMessage \r\n              personaName={personaName}\r\n              personaColor=\"#9c27b0\"\r\n              customMessage=\"응답 생성중...\"\r\n            />\r\n          )}\r\n        </ChatMessages>\r\n\r\n        <ChatInputSection>\r\n          <MessageInput\r\n            ref={messageInputRef}\r\n            onSendMessage={handleSendMessage}\r\n            disabled={isLoading || !selectedThread}\r\n            placeholder={\r\n              selectedThread \r\n                ? `${personaName}에게 질문해보세요...`\r\n                : \"스레드를 선택해주세요\"\r\n            }\r\n            onToggleSentenceMode={handleToggleSentenceMode}\r\n            isSentenceModeActive={isSentenceModeActive}\r\n            hasSelectedSentences={selectedSentences.size > 0}\r\n            currentInterpretation={selectedThread?.content || ''}\r\n            personaId={personaId}\r\n            onGenerateProceed={handlePersonAction}\r\n            onGenerateSentence={handleDocumentAction}\r\n            currentChatMessages={selectedThread?.messages}\r\n            onRefreshThreads={handleRefreshThreads}\r\n          />\r\n        </ChatInputSection>\r\n      </ChatSection>\r\n      \r\n      <FloatingActionButton\r\n        show={isSentenceModeActive && selectedSentences.size > 0}\r\n        onMenuAction={handleMenuAction}\r\n        personaId={personaId}\r\n        currentInterpretation={selectedThread?.content || ''}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default InteractionRecordView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}