{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\SentenceView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst SentenceView = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // 선택된 스레드 변경 시 처리\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 + 로컬 스토리지 결합)\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('=== 문장 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n\n      // 로컬 스토리지에서 먼저 로드\n      const localMemos = loadMemosFromStorage();\n      const localHighlights = loadHighlightsFromStorage(threadId);\n      console.log('로컬 메모:', Object.keys(localMemos).length, '개');\n      console.log('로컬 하이라이트:', localHighlights.length, '개');\n\n      // 로컬 데이터로 즉시 설정\n      setMemos(localMemos);\n      setHighlightedSentences(new Set(localHighlights));\n\n      // 백엔드에서 추가 데이터 시도 (실패해도 로컬 데이터 유지)\n      try {\n        const serverData = await sentenceApi.getThreadSentenceData(threadId);\n        console.log('서버 메모:', Object.keys(serverData.memos).length, '개');\n        console.log('서버 하이라이트:', serverData.highlights.length, '개');\n\n        // 서버 데이터와 로컬 데이터 병합\n        const mergedMemos = {\n          ...localMemos,\n          ...serverData.memos\n        };\n        const mergedHighlights = Array.from(new Set([...localHighlights, ...serverData.highlights]));\n        setMemos(mergedMemos);\n        setHighlightedSentences(new Set(mergedHighlights));\n\n        // 병합된 데이터를 로컬에 다시 저장\n        saveMemosToStorage(mergedMemos);\n        saveHighlightsToStorage(threadId, mergedHighlights);\n        console.log('서버와 로컬 데이터 병합 완료');\n      } catch (serverError) {\n        console.warn('서버 데이터 로딩 실패, 로컬 데이터 사용:', serverError);\n      }\n      console.log('=== 문장 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 완전 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n  const handleSendMessage = async message => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n\n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setSelectedThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        setSelectedThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === currentThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (!(selectedThread !== null && selectedThread !== void 0 && selectedThread.id)) {\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n    try {\n      var _response$data;\n      setIsLoading(true);\n\n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && response.data.updated_thread) {\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n\n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === selectedThread.id ? response.data.updated_thread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      const newMemos = {\n        ...memos,\n        [sentenceId]: memo\n      };\n      setMemos(newMemos);\n\n      // 로컬 스토리지에도 저장\n      saveMemosToStorage(newMemos);\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      const newMemos = {\n        ...memos\n      };\n      delete newMemos[sentenceId];\n      setMemos(newMemos);\n\n      // 로컬 스토리지에도 반영\n      saveMemosToStorage(newMemos);\n\n      // 하이라이트도 제거하고 로컬 스토리지에 저장\n      const newHighlights = Array.from(highlightedSentences).filter(id => id !== sentenceId);\n      setHighlightedSentences(new Set(newHighlights));\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n        saveHighlightsToStorage(selectedThread.id, newHighlights);\n      }\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async messageContent => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n  const handlePersonAction = async messageContent => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async messageContent => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n\n        // 새로 생성된 문장 스레드 선택\n        const newSentenceThread = updatedThreads.filter(t => t.thread_type === 'sentence').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        if (newSentenceThread && (!selectedThread || newSentenceThread.id !== selectedThread.id)) {\n          setSelectedThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `sentence_${personaId}`,\n            // 페르소나 ID 포함\n            source_conversation_id: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.id,\n            tags: ['sentence', personaId]\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n\n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          const newMemos = {\n            ...memos,\n            [bottomSentenceId]: ''\n          };\n          setMemos(newMemos);\n          saveMemosToStorage(newMemos);\n\n          // 모든 선택된 문장에 하이라이트 추가\n          const currentHighlights = Array.from(highlightedSentences);\n          const newHighlights = Array.from(new Set([...currentHighlights, ...selectedIds]));\n          setHighlightedSentences(new Set(newHighlights));\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            saveHighlightsToStorage(selectedThread.id, newHighlights);\n          }\n\n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n\n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n\n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n\n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          const currentHighlights = Array.from(highlightedSentences);\n          const newHighlights = currentHighlights.filter(id => !selectedIds.includes(id));\n          setHighlightedSentences(new Set(newHighlights));\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            saveHighlightsToStorage(selectedThread.id, newHighlights);\n          }\n\n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          const currentHighlights = Array.from(highlightedSentences);\n          const newHighlights = Array.from(new Set([...currentHighlights, ...selectedIds]));\n          setHighlightedSentences(new Set(newHighlights));\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            saveHighlightsToStorage(selectedThread.id, newHighlights);\n          }\n\n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread !== null && selectedThread !== void 0 && selectedThread.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 704,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCDD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 712,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 713,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 714,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 711,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 721,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#4caf50',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 737,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#4caf50\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 772,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 709,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 문장에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || sentenceContent,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 781,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 780,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 708,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: sentenceContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 799,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 703,\n    columnNumber: 5\n  }, this);\n};\n_s(SentenceView, \"EbCB/tyxI5Zm8f3niCoWh3LJrFc=\");\n_c7 = SentenceView;\nexport default SentenceView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"SentenceView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","SentenceView","personaId","personaName","sentenceContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","onRefreshThreads","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","sentenceThreads","filter","thread","thread_type","console","log","id","loadThreadSentenceData","threadId","localMemos","loadMemosFromStorage","localHighlights","loadHighlightsFromStorage","Object","keys","length","serverData","getThreadSentenceData","highlights","mergedMemos","mergedHighlights","Array","from","saveMemosToStorage","saveHighlightsToStorage","serverError","warn","error","current","scrollTop","scrollHeight","messages","handleSendMessage","message","currentThread","sentenceThread","defaultThread","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","response","chatWithThread","thread_id","user_message","data","assistantMessage","finalUpdatedThread","thread_updated_at","map","t","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","_response$data","editThreadMessage","success","updated_thread","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","newMemos","createOrUpdateMemo","sentence_id","catch","handleDeleteMemo","newHighlights","deleteMemo","handleSunAction","saveCurrentAsInterpretation","handlePersonAction","saveCurrentAsProceed","threadsResponse","getPersonaThreads","handleDocumentAction","saveCurrentAsSentence","handleRefreshThreads","newSentenceThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","selectedTexts","sentenceIndex","split","find","m","sentences","s","trim","parseInt","formattedText","join","insertText","saveSentencesToVault","source_message_id","source_conversation_id","tags","forEach","sortedIds","timestampA","sentenceIndexA","timestampB","sentenceIndexB","bottomSentenceId","currentHighlights","createHighlight","currentlyHighlighted","includes","deleteHighlight","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/SentenceView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface SentenceViewProps {\n  personaId: string;\n  personaName: string;\n  sentenceContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n  onRefreshThreads?: () => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst SentenceView: React.FC<SentenceViewProps> = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n  onRefreshThreads,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // 선택된 스레드 변경 시 처리\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 + 로컬 스토리지 결합)\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('=== 문장 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n      \n      // 로컬 스토리지에서 먼저 로드\n      const localMemos = loadMemosFromStorage();\n      const localHighlights = loadHighlightsFromStorage(threadId);\n      \n      console.log('로컬 메모:', Object.keys(localMemos).length, '개');\n      console.log('로컬 하이라이트:', localHighlights.length, '개');\n      \n      // 로컬 데이터로 즉시 설정\n      setMemos(localMemos);\n      setHighlightedSentences(new Set(localHighlights));\n      \n      // 백엔드에서 추가 데이터 시도 (실패해도 로컬 데이터 유지)\n      try {\n        const serverData = await sentenceApi.getThreadSentenceData(threadId);\n        console.log('서버 메모:', Object.keys(serverData.memos).length, '개');\n        console.log('서버 하이라이트:', serverData.highlights.length, '개');\n        \n        // 서버 데이터와 로컬 데이터 병합\n        const mergedMemos = { ...localMemos, ...serverData.memos };\n        const mergedHighlights = Array.from(new Set([...localHighlights, ...serverData.highlights]));\n        \n        setMemos(mergedMemos);\n        setHighlightedSentences(new Set(mergedHighlights));\n        \n        // 병합된 데이터를 로컬에 다시 저장\n        saveMemosToStorage(mergedMemos);\n        saveHighlightsToStorage(threadId, mergedHighlights);\n        \n        console.log('서버와 로컬 데이터 병합 완료');\n      } catch (serverError) {\n        console.warn('서버 데이터 로딩 실패, 로컬 데이터 사용:', serverError);\n      }\n      \n      console.log('=== 문장 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 완전 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (!selectedThread?.id) {\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(selectedThread.id, messageIndex, newContent);\n      \n      if (response.data?.success && response.data.updated_thread) {\n        // 스레드 업데이트\n        setSelectedThread(response.data.updated_thread);\n        \n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === selectedThread.id ? response.data!.updated_thread! : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n    setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n    return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      const newMemos = {\n        ...memos,\n        [sentenceId]: memo\n      };\n      setMemos(newMemos);\n      \n      // 로컬 스토리지에도 저장\n      saveMemosToStorage(newMemos);\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      const newMemos = { ...memos };\n      delete newMemos[sentenceId];\n      setMemos(newMemos);\n      \n      // 로컬 스토리지에도 반영\n      saveMemosToStorage(newMemos);\n      \n      // 하이라이트도 제거하고 로컬 스토리지에 저장\n      const newHighlights = Array.from(highlightedSentences).filter(id => id !== sentenceId);\n      setHighlightedSentences(new Set(newHighlights));\n      if (selectedThread?.id) {\n        saveHighlightsToStorage(selectedThread.id, newHighlights);\n      }\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n          \n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 문장 스레드 선택\n              const newSentenceThread = updatedThreads\n                .filter(t => t.thread_type === 'sentence')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newSentenceThread && (!selectedThread || newSentenceThread.id !== selectedThread.id)) {\n                setSelectedThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `sentence_${personaId}`, // 페르소나 ID 포함\n            source_conversation_id: selectedThread?.id,\n            tags: ['sentence', personaId]\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          const newMemos = { ...memos, [bottomSentenceId]: '' };\n          setMemos(newMemos);\n          saveMemosToStorage(newMemos);\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          const currentHighlights = Array.from(highlightedSentences);\n          const newHighlights = Array.from(new Set([...currentHighlights, ...selectedIds]));\n          setHighlightedSentences(new Set(newHighlights));\n          if (selectedThread?.id) {\n            saveHighlightsToStorage(selectedThread.id, newHighlights);\n          }\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        \n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          const currentHighlights = Array.from(highlightedSentences);\n          const newHighlights = currentHighlights.filter(id => !selectedIds.includes(id));\n          setHighlightedSentences(new Set(newHighlights));\n          if (selectedThread?.id) {\n            saveHighlightsToStorage(selectedThread.id, newHighlights);\n          }\n          \n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          \n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          const currentHighlights = Array.from(highlightedSentences);\n          const newHighlights = Array.from(new Set([...currentHighlights, ...selectedIds]));\n          setHighlightedSentences(new Set(newHighlights));\n          if (selectedThread?.id) {\n            saveHighlightsToStorage(selectedThread.id, newHighlights);\n          }\n          \n          // 백엔드에 모든 하이라이트 저장\n          if (selectedThread?.id) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: selectedThread.id,\n                thread_type: 'sentence'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>📝</div>\n              <div>문장에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#4caf50',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#4caf50\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 문장에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || sentenceContent}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={sentenceContent}\n      />\n    </Container>\n  );\n};\n\nexport default SentenceView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}