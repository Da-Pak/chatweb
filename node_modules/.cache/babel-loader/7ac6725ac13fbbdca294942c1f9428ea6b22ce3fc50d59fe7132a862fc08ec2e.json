{"ast":null,"code":"import { API_BASE_URL } from '../../shared/api/chatApi';\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getVaultSentences() {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteVaultSentence(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE'\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify(request)\n      });\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n      if (response.status === 404) {\n        return null;\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n  async deleteMemo(sentenceId) {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE'\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return {\n          success: true,\n          message: '메모가 이미 삭제되었습니다'\n        };\n      }\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n}\nexport const sentenceApi = new SentenceApi();","map":{"version":3,"names":["API_BASE_URL","SentenceApi","saveSentencesToVault","request","response","fetch","method","headers","body","JSON","stringify","ok","errorData","json","Error","detail","error","console","getVaultSentences","deleteVaultSentence","sentenceId","createOrUpdateMemo","getMemo","status","result","deleteMemo","success","message","sentenceApi"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/api/sentenceApi.ts"],"sourcesContent":["import { API_BASE_URL } from '../../shared/api/chatApi';\r\n\r\nexport interface SentenceVaultItem {\r\n  id: string;\r\n  sentence: string;\r\n  source_message_id: string;\r\n  source_conversation_id?: string;\r\n  created_at: string;\r\n  tags: string[];\r\n  metadata?: Record<string, any>;\r\n}\r\n\r\nexport interface SentenceVaultRequest {\r\n  sentences: string[];\r\n  source_message_id: string;\r\n  source_conversation_id?: string;\r\n  tags?: string[];\r\n}\r\n\r\nexport interface SentenceVaultResponse {\r\n  success: boolean;\r\n  message: string;\r\n  saved_items: SentenceVaultItem[];\r\n}\r\n\r\nexport interface SentenceMemo {\r\n  id: string;\r\n  sentence_id: string;\r\n  content: string;\r\n  created_at: string;\r\n  updated_at: string;\r\n}\r\n\r\nexport interface SentenceMemoRequest {\r\n  sentence_id: string;\r\n  content: string;\r\n}\r\n\r\nexport interface SentenceMemoResponse {\r\n  success: boolean;\r\n  message: string;\r\n  memo?: SentenceMemo;\r\n}\r\n\r\nexport interface SentenceHighlight {\r\n  id: string;\r\n  sentence_id: string;\r\n  thread_id: string;\r\n  thread_type: string;\r\n  created_at: string;\r\n}\r\n\r\nexport interface SentenceHighlightRequest {\r\n  sentence_id: string;\r\n  thread_id: string;\r\n  thread_type: string;\r\n}\r\n\r\nexport interface SentenceHighlightResponse {\r\n  success: boolean;\r\n  message: string;\r\n  highlight?: SentenceHighlight;\r\n}\r\n\r\nexport interface ThreadSentenceData {\r\n  memos: Record<string, string>;\r\n  highlights: string[];\r\n}\r\n\r\nclass SentenceApi {\r\n  // 저장고 관련 API\r\n  async saveSentencesToVault(request: SentenceVaultRequest): Promise<SentenceVaultResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '저장고 저장 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('저장고 저장 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getVaultSentences(): Promise<SentenceVaultItem[]> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '저장고 조회 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('저장고 조회 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteVaultSentence(sentenceId: string): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '문장 삭제 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('문장 삭제 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  // 메모 관련 API\r\n  async createOrUpdateMemo(request: SentenceMemoRequest): Promise<SentenceMemoResponse> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/memos`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json',\r\n        },\r\n        body: JSON.stringify(request),\r\n      });\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '메모 저장 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('메모 저장 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async getMemo(sentenceId: string): Promise<SentenceMemo | null> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\r\n\r\n      if (response.status === 404) {\r\n        return null;\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '메모 조회 실패');\r\n      }\r\n\r\n      const result = await response.json();\r\n      return result || null;\r\n    } catch (error) {\r\n      console.error('메모 조회 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n\r\n  async deleteMemo(sentenceId: string): Promise<{ success: boolean; message: string }> {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\r\n        method: 'DELETE',\r\n      });\r\n\r\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\r\n      if (response.status === 404) {\r\n        return { success: true, message: '메모가 이미 삭제되었습니다' };\r\n      }\r\n\r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.detail || '메모 삭제 실패');\r\n      }\r\n\r\n      return await response.json();\r\n    } catch (error) {\r\n      console.error('메모 삭제 오류:', error);\r\n      throw error;\r\n    }\r\n  }\r\n}\r\n\r\nexport const sentenceApi = new SentenceApi(); "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}