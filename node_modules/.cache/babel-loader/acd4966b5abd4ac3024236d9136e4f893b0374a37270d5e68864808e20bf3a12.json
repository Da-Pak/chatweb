{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\shared\\\\components\\\\ChatArea.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from '../../training/components/TrainingCategoryView';\nimport InterpretationView from '../../training/components/InterpretationView';\nimport ProceedView from '../../training/components/ProceedView';\nimport SentenceView from '../../training/components/SentenceView';\nimport PersonaAdminPanel from '../../admin/components/PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport { MainArea, ChatContent, EmptyState, EmptyStateTitle, EmptyStateText } from '../styles/GlobalStyle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatArea = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onSwitchConversationMode,\n  onRefreshConversationSidebar\n}) => {\n  _s();\n  var _personas$currentConv, _personas$currentConv2, _personas$currentConv3;\n  const chatContentRef = useRef(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n\n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 훈습 관련 상태\n  const [threads, setThreads] = useState([]);\n  const [proceedContent, setProceedContent] = useState('');\n  const [sentenceContent, setSentenceContent] = useState('');\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages, globalMessages, isLoading]);\n\n  // 훈습 데이터 로딩을 더 정확하게 수정\n  useEffect(() => {\n    const loadTrainingData = async () => {\n      if (!(currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.personaId)) return;\n      try {\n        // 스레드 데이터 로드\n        const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n        if (threadsResponse.data) {\n          setThreads(threadsResponse.data);\n\n          // 나아가기와 문장 스레드에서 콘텐츠 추출\n          const proceedThread = threadsResponse.data.find(t => t.thread_type === 'proceed');\n          const sentenceThread = threadsResponse.data.find(t => t.thread_type === 'sentence');\n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('훈습 데이터 로드 실패:', error);\n      }\n    };\n    loadTrainingData();\n  }, [currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId]);\n\n  // 스레드 업데이트 시 콘텐츠도 업데이트\n  useEffect(() => {\n    const proceedThread = threads.find(t => t.thread_type === 'proceed');\n    const sentenceThread = threads.find(t => t.thread_type === 'sentence');\n    if (proceedThread && proceedThread.messages.length > 0) {\n      const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n      if (firstProceedMessage) {\n        setProceedContent(firstProceedMessage.content);\n      }\n    }\n    if (sentenceThread && sentenceThread.messages.length > 0) {\n      const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n      if (firstSentenceMessage) {\n        setSentenceContent(firstSentenceMessage.content);\n      }\n    }\n  }, [threads]);\n  const handleSendMessage = async message => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex, newContent) => {\n    if (!currentInterpretation) return false;\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString()\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, newContent);\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant',\n              content: response.data.response,\n              timestamp: response.data.timestamp\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant',\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString()\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n\n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant',\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString()\n          };\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse]\n          };\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex, newContent) => {\n    if (!selectedConversation || !currentConversation) return false;\n    try {\n      var _result$data;\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      if ((_result$data = result.data) !== null && _result$data !== void 0 && _result$data.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n  const getHeaderTitle = () => {\n    if (selectedConversation && currentConversation) {\n      const persona = personas[currentConversation.persona_id];\n      return `${persona === null || persona === void 0 ? void 0 : persona.name}과의 대화`;\n    }\n    return '다중 페르소나 채팅';\n  };\n  const getHeaderSubtitle = () => {\n    if (selectedConversation && currentConversation) {\n      return `${currentConversation.messages.length}개의 메시지`;\n    }\n    return '모든 페르소나와 대화하거나 개별 페르소나를 선택하세요';\n  };\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    const latestMessage = globalMessages[globalMessages.length - 1];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'user',\n          content: latestMessage.user_message,\n          timestamp: latestMessage.timestamp\n        },\n        personas: personas,\n        showActionButtons: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 311,\n        columnNumber: 9\n      }, this), latestMessage.responses.map(response => /*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'assistant',\n          content: response.content,\n          timestamp: response.timestamp,\n          persona_id: response.persona_id,\n          persona_name: response.persona_name\n        },\n        personas: personas,\n        showActionButtons: true\n      }, `${latestMessage.id}_${response.persona_id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 323,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            color: '#666',\n            marginBottom: '8px'\n          },\n          children: \"\\uD83D\\uDCA1 \\uAC01 \\uD398\\uB974\\uC18C\\uB098\\uC640 \\uAC1C\\uBCC4\\uC801\\uC73C\\uB85C \\uB300\\uD654\\uB97C \\uC774\\uC5B4\\uAC00\\uB824\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 345,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '13px',\n            color: '#888'\n          },\n          children: \"\\uC67C\\uCABD \\uC0AC\\uC774\\uB4DC\\uBC14\\uC5D0\\uC11C \\uD398\\uB974\\uC18C\\uB098\\uB97C \\uC120\\uD0DD\\uD558\\uAC70\\uB098, \\uD2B9\\uC815 \\uB300\\uD654\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 348,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 337,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 309,\n      columnNumber: 7\n    }, this);\n  };\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n    return currentConversation.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      personas: personas,\n      showActionButtons: true,\n      onCopy: () => {\n        navigator.clipboard.writeText(message.content);\n      },\n      onEdit: message.role === 'user' ? () => setEditingMessageIndex(index) : undefined,\n      onEditSave: message.role === 'user' ? async newContent => {\n        const success = await handleEditConversationMessage(index, newContent);\n        if (success) {\n          setEditingMessageIndex(null);\n        }\n        return success;\n      } : undefined,\n      onEditCancel: () => setEditingMessageIndex(null),\n      isEditing: editingMessageIndex === index,\n      onSunAction: () => {},\n      onPersonAction: () => {},\n      onDocumentAction: () => {}\n    }, `${currentConversation.id}_${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 360,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEmptyState = () => /*#__PURE__*/_jsxDEV(EmptyState, {\n    children: [/*#__PURE__*/_jsxDEV(EmptyStateTitle, {\n      children: \"\\uC0C8\\uB85C\\uC6B4 \\uB300\\uD654\\uB97C \\uC2DC\\uC791\\uD574\\uBCF4\\uC138\\uC694!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 387,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmptyStateText, {\n      children: Object.keys(personas).length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\uC544\\uB798\\uC5D0 \\uC9C8\\uBB38\\uC744 \\uC785\\uB825\\uD558\\uBA74 \", Object.keys(personas).length, \"\\uAC1C\\uC758 \\uD398\\uB974\\uC18C\\uB098\\uAC00\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 391,\n          columnNumber: 64\n        }, this), \"\\uAC01\\uAC01 \\uB2E4\\uB978 \\uAD00\\uC810\\uC5D0\\uC11C \\uB2F5\\uBCC0\\uD574\\uB4DC\\uB9BD\\uB2C8\\uB2E4.\"]\n      }, void 0, true) : '페르소나 정보를 불러오는 중입니다...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 386,\n    columnNumber: 5\n  }, this);\n\n  // 모드 전환 핸들러\n  const handleSwitchToMode = mode => {\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(mode);\n    }\n  };\n\n  // 새로운 해석 생성 핸들러\n  const handleGenerateNewInterpretation = async () => {\n    if (!(currentInterpretation !== null && currentInterpretation !== void 0 && currentInterpretation.personaId)) return;\n    try {\n      // 새로운 해석을 생성하고 완료 콜백 호출\n      onInterpretationComplete(currentInterpretation.personaId, '새로운 해석을 생성합니다...');\n    } catch (error) {\n      console.error('새로운 해석 생성 실패:', error);\n    }\n  };\n\n  // 선택된 스레드 추출\n  const getSelectedThread = conversationItem => {\n    if (!conversationItem || !conversationItem.includes('-thread-')) return null;\n    const threadId = conversationItem.split('-thread-')[1];\n    return threads.find(thread => thread.id === threadId) || null;\n  };\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return null;\n    return /*#__PURE__*/_jsxDEV(InterpretationView, {\n      interpretation: currentInterpretation.content,\n      personaName: currentInterpretation.personaName,\n      onSendMessage: onInterpretationMessage,\n      onEditMessage: handleEditInterpretationMessage,\n      isLoading: isLoading,\n      messages: currentInterpretation.messages,\n      onGenerateNewInterpretation: handleGenerateNewInterpretation,\n      onSwitchToMode: handleSwitchToMode,\n      personaId: currentInterpretation.personaId\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 433,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 나아가기 뷰 렌더링\n  const renderProceedView = () => {\n    if (!currentInterpretation) return null;\n    const selectedThread = getSelectedThread(selectedConversationItem);\n    return /*#__PURE__*/_jsxDEV(ProceedView, {\n      personaId: currentInterpretation.personaId,\n      personaName: currentInterpretation.personaName,\n      proceedContent: proceedContent || '나아가기를 생성하고 있습니다...',\n      threads: threads,\n      onThreadUpdate: updatedThreads => {\n        setThreads(updatedThreads);\n        // 스레드 업데이트 시 콘텐츠도 업데이트\n        const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n        if (proceedThread && proceedThread.messages.length > 0) {\n          const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n          if (firstProceedMessage) {\n            setProceedContent(firstProceedMessage.content);\n          }\n        }\n        // ConversationSidebar 새로고침\n        if (onRefreshConversationSidebar) {\n          onRefreshConversationSidebar();\n        }\n      },\n      onSwitchToMode: handleSwitchToMode,\n      onGenerateNewInterpretation: handleGenerateNewInterpretation,\n      selectedThread: selectedThread\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 454,\n      columnNumber: 7\n    }, this);\n  };\n\n  // 문장 뷰 렌더링\n  const renderSentenceView = () => {\n    if (!currentInterpretation) return null;\n    const selectedThread = getSelectedThread(selectedConversationItem);\n    return /*#__PURE__*/_jsxDEV(SentenceView, {\n      personaId: currentInterpretation.personaId,\n      personaName: currentInterpretation.personaName,\n      sentenceContent: sentenceContent || '문장을 생성하고 있습니다...',\n      threads: threads,\n      onThreadUpdate: updatedThreads => {\n        setThreads(updatedThreads);\n        // 스레드 업데이트 시 콘텐츠도 업데이트\n        const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n        if (sentenceThread && sentenceThread.messages.length > 0) {\n          const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n          if (firstSentenceMessage) {\n            setSentenceContent(firstSentenceMessage.content);\n          }\n        }\n        // ConversationSidebar 새로고침\n        if (onRefreshConversationSidebar) {\n          onRefreshConversationSidebar();\n        }\n      },\n      onSwitchToMode: handleSwitchToMode,\n      onGenerateNewInterpretation: handleGenerateNewInterpretation,\n      selectedThread: selectedThread\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 488,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(MainArea, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 518,\n      columnNumber: 11\n    }, this), selectedPersonaItem === 'training' ? /*#__PURE__*/_jsxDEV(TrainingCategoryView, {\n      personas: personas,\n      onSelectPersona: onSelectPersona || (() => {}),\n      onInterpretationComplete: onInterpretationComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 528,\n      columnNumber: 9\n    }, this) : selectedPersonaItem === 'admin' ? /*#__PURE__*/_jsxDEV(PersonaAdminPanel, {\n      onClose: () => {\n        // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n        if (onSelectPersona) {\n          onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 534,\n      columnNumber: 9\n    }, this) : currentInterpretation && (selectedConversationItem === 'proceed' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('proceed-thread-')) ?\n    // 나아가기 모드일 때 ProceedView 사용\n    renderProceedView() : currentInterpretation && (selectedConversationItem === 'sentence' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('sentence-thread-')) ?\n    // 문장 모드일 때 SentenceView 사용\n    renderSentenceView() : currentInterpretation && (selectedConversationItem === 'interpretation' || selectedConversationItem !== null && selectedConversationItem !== void 0 && selectedConversationItem.startsWith('interpretation-thread-')) ?\n    // 해석 모드일 때 InterpretationView 사용\n    renderInterpretationView() : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatContent, {\n        ref: chatContentRef,\n        children: [!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState(), !selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses(), selectedConversation && renderConversation(), isLoading && (selectedConversation && currentConversation ? /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: (_personas$currentConv = personas[currentConversation.persona_id]) === null || _personas$currentConv === void 0 ? void 0 : _personas$currentConv.name,\n          personaColor: (_personas$currentConv2 = personas[currentConversation.persona_id]) === null || _personas$currentConv2 === void 0 ? void 0 : _personas$currentConv2.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 566,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"AI\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 571,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 553,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        disabled: isLoading || Object.keys(personas).length === 0,\n        placeholder: selectedConversation && currentConversation ? `${(_personas$currentConv3 = personas[currentConversation.persona_id]) === null || _personas$currentConv3 === void 0 ? void 0 : _personas$currentConv3.name}에게 메시지를 보내세요...` : \"모든 페르소나에게 질문해보세요...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 579,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 516,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatArea, \"OVT94ZcfDUr6RhcI22qI3VfdGVI=\");\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Message","MessageInput","TrainingCategoryView","InterpretationView","ProceedView","SentenceView","PersonaAdminPanel","LoadingMessage","chatApi","MainArea","ChatContent","EmptyState","EmptyStateTitle","EmptyStateText","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","selectedConversation","conversations","personas","globalMessages","isLoading","error","onSendInitialMessage","onContinueConversation","onClearError","selectedPersonaItem","onSelectPersona","onInterpretationComplete","selectedConversationItem","currentInterpretation","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","_s","_personas$currentConv","_personas$currentConv2","_personas$currentConv3","chatContentRef","currentConversation","editingMessageIndex","setEditingMessageIndex","threads","setThreads","proceedContent","setProceedContent","sentenceContent","setSentenceContent","current","scrollTop","scrollHeight","messages","loadTrainingData","personaId","threadsResponse","getPersonaThreads","data","proceedThread","find","t","thread_type","sentenceThread","length","firstProceedMessage","m","role","content","firstSentenceMessage","console","handleSendMessage","message","handleEditInterpretationMessage","messageIndex","newContent","updatedMessages","timestamp","Date","toISOString","filteredMessages","slice","response","chatWithInterpretation","aiResponse","updatedInterpretation","personaName","apiError","handleEditConversationMessage","_result$data","result","editMessage","success","updated_conversation","getHeaderTitle","persona","persona_id","name","getHeaderSubtitle","renderInitialResponses","latestMessage","children","user_message","showActionButtons","fileName","_jsxFileName","lineNumber","columnNumber","responses","map","persona_name","id","style","margin","padding","backgroundColor","borderRadius","border","textAlign","fontSize","color","marginBottom","renderConversation","index","onCopy","navigator","clipboard","writeText","onEdit","undefined","onEditSave","onEditCancel","isEditing","onSunAction","onPersonAction","onDocumentAction","renderEmptyState","Object","keys","handleSwitchToMode","mode","handleGenerateNewInterpretation","getSelectedThread","conversationItem","includes","threadId","split","thread","renderInterpretationView","interpretation","onSendMessage","onEditMessage","onGenerateNewInterpretation","onSwitchToMode","renderProceedView","selectedThread","onThreadUpdate","updatedThreads","renderSentenceView","height","borderBottom","background","onClose","startsWith","ref","personaColor","disabled","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/shared/components/ChatArea.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Conversation, Persona, GlobalMessage, TrainingThread } from '../types';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from '../../training/components/TrainingCategoryView';\nimport InterpretationView from '../../training/components/InterpretationView';\nimport ProceedView from '../../training/components/ProceedView';\nimport SentenceView from '../../training/components/SentenceView';\nimport PersonaAdminPanel from '../../admin/components/PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport {\n  MainArea,\n  ChatHeader,\n  ChatHeaderTitle,\n  ChatContent,\n  LoadingSpinner,\n  ErrorMessage,\n  EmptyState,\n  EmptyStateTitle,\n  EmptyStateText,\n} from '../styles/GlobalStyle';\n\ninterface ChatAreaProps {\n  selectedConversation: string | null;\n  conversations: Record<string, Conversation>;\n  personas: Record<string, Persona>;\n  globalMessages: GlobalMessage[];\n  isLoading: boolean;\n  error: string | null;\n  onSendInitialMessage: (message: string) => Promise<boolean>;\n  onContinueConversation: (conversationId: string, message: string) => Promise<boolean>;\n  onClearError: () => void;\n  selectedPersonaItem?: string | null; // 훈습 모드 확인용\n  onSelectPersona?: (personaId: string) => void; // 페르소나 선택 핸들러\n  onInterpretationComplete: (personaId: string, interpretation: string) => void; // 해석 완료 핸들러\n  selectedConversationItem?: string | null; // 선택된 대화 항목\n  currentInterpretation?: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null;\n  onInterpretationMessage: (message: string) => Promise<boolean>; // 해석 채팅 메시지 핸들러\n  onUpdateInterpretation?: (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => void; // 해석 업데이트 핸들러\n  onUpdateConversation?: (updatedConversation: any) => void; // 대화 업데이트 핸들러\n  onSwitchConversationMode?: (mode: string) => void; // 대화 모드 전환 핸들러\n  onRefreshConversationSidebar?: () => void; // ConversationSidebar 새로고침 핸들러\n}\n\nconst ChatArea: React.FC<ChatAreaProps> = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onSwitchConversationMode,\n  onRefreshConversationSidebar,\n}) => {\n  const chatContentRef = useRef<HTMLDivElement>(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n  \n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 훈습 관련 상태\n  const [threads, setThreads] = useState<TrainingThread[]>([]);\n  const [proceedContent, setProceedContent] = useState<string>('');\n  const [sentenceContent, setSentenceContent] = useState<string>('');\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation?.messages, globalMessages, isLoading]);\n\n  // 훈습 데이터 로딩을 더 정확하게 수정\n  useEffect(() => {\n    const loadTrainingData = async () => {\n      if (!currentInterpretation?.personaId) return;\n\n      try {\n        // 스레드 데이터 로드\n        const threadsResponse = await chatApi.getPersonaThreads(currentInterpretation.personaId);\n        if (threadsResponse.data) {\n          setThreads(threadsResponse.data);\n          \n          // 나아가기와 문장 스레드에서 콘텐츠 추출\n          const proceedThread = threadsResponse.data.find(t => t.thread_type === 'proceed');\n          const sentenceThread = threadsResponse.data.find(t => t.thread_type === 'sentence');\n          \n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          \n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n        }\n      } catch (error) {\n        console.error('훈습 데이터 로드 실패:', error);\n      }\n    };\n\n    loadTrainingData();\n  }, [currentInterpretation?.personaId]);\n\n  // 스레드 업데이트 시 콘텐츠도 업데이트\n  useEffect(() => {\n    const proceedThread = threads.find(t => t.thread_type === 'proceed');\n    const sentenceThread = threads.find(t => t.thread_type === 'sentence');\n    \n    if (proceedThread && proceedThread.messages.length > 0) {\n      const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n      if (firstProceedMessage) {\n        setProceedContent(firstProceedMessage.content);\n      }\n    }\n    \n    if (sentenceThread && sentenceThread.messages.length > 0) {\n      const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n      if (firstSentenceMessage) {\n        setSentenceContent(firstSentenceMessage.content);\n      }\n    }\n  }, [threads]);\n\n  const handleSendMessage = async (message: string) => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString(),\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(\n            currentInterpretation.personaId,\n            newContent\n          );\n\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: response.data.response,\n              timestamp: response.data.timestamp,\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString(),\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n          \n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant' as const,\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse],\n          };\n\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!selectedConversation || !currentConversation) return false;\n\n    try {\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      \n      if (result.data?.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        \n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n\n  const getHeaderTitle = () => {\n    if (selectedConversation && currentConversation) {\n      const persona = personas[currentConversation.persona_id];\n      return `${persona?.name}과의 대화`;\n    }\n    return '다중 페르소나 채팅';\n  };\n\n  const getHeaderSubtitle = () => {\n    if (selectedConversation && currentConversation) {\n      return `${currentConversation.messages.length}개의 메시지`;\n    }\n    return '모든 페르소나와 대화하거나 개별 페르소나를 선택하세요';\n  };\n\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    \n    const latestMessage = globalMessages[globalMessages.length - 1];\n    \n    return (\n      <div>\n        {/* 사용자 질문 */}\n        <Message\n          message={{\n            role: 'user',\n            content: latestMessage.user_message,\n            timestamp: latestMessage.timestamp,\n          }}\n          personas={personas}\n          showActionButtons={false}\n        />\n        \n        {/* 모든 페르소나 응답 */}\n        {latestMessage.responses.map((response) => (\n          <Message\n            key={`${latestMessage.id}_${response.persona_id}`}\n            message={{\n              role: 'assistant',\n              content: response.content,\n              timestamp: response.timestamp,\n              persona_id: response.persona_id,\n              persona_name: response.persona_name,\n            }}\n            personas={personas}\n            showActionButtons={true}\n          />\n        ))}\n        \n        <div style={{\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center',\n        }}>\n          <div style={{ fontSize: '14px', color: '#666', marginBottom: '8px' }}>\n            💡 각 페르소나와 개별적으로 대화를 이어가려면\n          </div>\n          <div style={{ fontSize: '13px', color: '#888' }}>\n            왼쪽 사이드바에서 페르소나를 선택하거나, 특정 대화를 선택하세요\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n\n    return currentConversation.messages.map((message, index) => (\n      <Message\n        key={`${currentConversation.id}_${index}`}\n        message={message}\n        personas={personas}\n        showActionButtons={true}\n        onCopy={() => {\n          navigator.clipboard.writeText(message.content);\n        }}\n        onEdit={message.role === 'user' ? () => setEditingMessageIndex(index) : undefined}\n        onEditSave={message.role === 'user' ? async (newContent) => {\n          const success = await handleEditConversationMessage(index, newContent);\n                  if (success) {\n          setEditingMessageIndex(null);\n        }\n          return success;\n        } : undefined}\n        onEditCancel={() => setEditingMessageIndex(null)}\n        isEditing={editingMessageIndex === index}\n        onSunAction={() => {}}\n        onPersonAction={() => {}}\n        onDocumentAction={() => {}}\n      />\n    ));\n  };\n\n  const renderEmptyState = () => (\n    <EmptyState>\n      <EmptyStateTitle>새로운 대화를 시작해보세요!</EmptyStateTitle>\n      <EmptyStateText>\n        {Object.keys(personas).length > 0 ? (\n          <>\n            아래에 질문을 입력하면 {Object.keys(personas).length}개의 페르소나가<br />\n            각각 다른 관점에서 답변해드립니다.\n          </>\n        ) : (\n          '페르소나 정보를 불러오는 중입니다...'\n        )}\n      </EmptyStateText>\n    </EmptyState>\n  );\n\n  // 모드 전환 핸들러\n  const handleSwitchToMode = (mode: 'interpretation' | 'proceed' | 'sentence') => {\n    if (onSwitchConversationMode) {\n      onSwitchConversationMode(mode);\n    }\n  };\n\n  // 새로운 해석 생성 핸들러\n  const handleGenerateNewInterpretation = async () => {\n    if (!currentInterpretation?.personaId) return;\n    \n    try {\n      // 새로운 해석을 생성하고 완료 콜백 호출\n      onInterpretationComplete(currentInterpretation.personaId, '새로운 해석을 생성합니다...');\n    } catch (error) {\n      console.error('새로운 해석 생성 실패:', error);\n    }\n  };\n\n  // 선택된 스레드 추출\n  const getSelectedThread = (conversationItem: string | null | undefined): TrainingThread | null => {\n    if (!conversationItem || !conversationItem.includes('-thread-')) return null;\n    \n    const threadId = conversationItem.split('-thread-')[1];\n    return threads.find(thread => thread.id === threadId) || null;\n  };\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return null;\n\n    return (\n      <InterpretationView\n        interpretation={currentInterpretation.content}\n        personaName={currentInterpretation.personaName}\n        onSendMessage={onInterpretationMessage}\n        onEditMessage={handleEditInterpretationMessage}\n        isLoading={isLoading}\n        messages={currentInterpretation.messages}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        onSwitchToMode={handleSwitchToMode}\n        personaId={currentInterpretation.personaId}\n      />\n    );\n  };\n\n  // 나아가기 뷰 렌더링\n  const renderProceedView = () => {\n    if (!currentInterpretation) return null;\n\n    const selectedThread = getSelectedThread(selectedConversationItem);\n\n    return (\n      <ProceedView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        proceedContent={proceedContent || '나아가기를 생성하고 있습니다...'}\n        threads={threads}\n        onThreadUpdate={(updatedThreads) => {\n          setThreads(updatedThreads);\n          // 스레드 업데이트 시 콘텐츠도 업데이트\n          const proceedThread = updatedThreads.find(t => t.thread_type === 'proceed');\n          if (proceedThread && proceedThread.messages.length > 0) {\n            const firstProceedMessage = proceedThread.messages.find(m => m.role === 'assistant');\n            if (firstProceedMessage) {\n              setProceedContent(firstProceedMessage.content);\n            }\n          }\n          // ConversationSidebar 새로고침\n          if (onRefreshConversationSidebar) {\n            onRefreshConversationSidebar();\n          }\n        }}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        selectedThread={selectedThread}\n      />\n    );\n  };\n\n  // 문장 뷰 렌더링\n  const renderSentenceView = () => {\n    if (!currentInterpretation) return null;\n\n    const selectedThread = getSelectedThread(selectedConversationItem);\n\n    return (\n      <SentenceView\n        personaId={currentInterpretation.personaId}\n        personaName={currentInterpretation.personaName}\n        sentenceContent={sentenceContent || '문장을 생성하고 있습니다...'}\n        threads={threads}\n        onThreadUpdate={(updatedThreads) => {\n          setThreads(updatedThreads);\n          // 스레드 업데이트 시 콘텐츠도 업데이트\n          const sentenceThread = updatedThreads.find(t => t.thread_type === 'sentence');\n          if (sentenceThread && sentenceThread.messages.length > 0) {\n            const firstSentenceMessage = sentenceThread.messages.find(m => m.role === 'assistant');\n            if (firstSentenceMessage) {\n              setSentenceContent(firstSentenceMessage.content);\n            }\n          }\n          // ConversationSidebar 새로고침\n          if (onRefreshConversationSidebar) {\n            onRefreshConversationSidebar();\n          }\n        }}\n        onSwitchToMode={handleSwitchToMode}\n        onGenerateNewInterpretation={handleGenerateNewInterpretation}\n        selectedThread={selectedThread}\n      />\n    );\n  };\n\n  return (\n    <MainArea>\n      {/* 메인 영역 헤더 - 사이드바와 높이 맞춤 (80px) - 빈 공간 */}\n          <div style={{ \n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white',\n          }}>\n        {/* 빈 헤더 공간 */}\n          </div>\n\n      {/* 훈습 모드일 때 카테고리 뷰 표시 */}\n      {selectedPersonaItem === 'training' ? (\n        <TrainingCategoryView\n          personas={personas}\n          onSelectPersona={onSelectPersona || (() => {})}\n          onInterpretationComplete={onInterpretationComplete}\n        />\n      ) : selectedPersonaItem === 'admin' ? (\n        <PersonaAdminPanel \n          onClose={() => {\n            // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n            if (onSelectPersona) {\n              onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n            }\n          }}\n        />\n      ) : currentInterpretation && (selectedConversationItem === 'proceed' || selectedConversationItem?.startsWith('proceed-thread-')) ? (\n        // 나아가기 모드일 때 ProceedView 사용\n        renderProceedView()\n      ) : currentInterpretation && (selectedConversationItem === 'sentence' || selectedConversationItem?.startsWith('sentence-thread-')) ? (\n        // 문장 모드일 때 SentenceView 사용\n        renderSentenceView()\n      ) : currentInterpretation && (selectedConversationItem === 'interpretation' || selectedConversationItem?.startsWith('interpretation-thread-')) ? (\n        // 해석 모드일 때 InterpretationView 사용\n        renderInterpretationView()\n      ) : (\n        <>\n      <ChatContent ref={chatContentRef}>\n        {/* {error && (\n          <ErrorMessage onClick={onClearError}>\n            {error} (클릭하여 닫기)\n          </ErrorMessage>\n        )} */}\n\n            {!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState()}\n            {!selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses()}\n        {selectedConversation && renderConversation()}\n\n        {isLoading && (\n          selectedConversation && currentConversation ? (\n            <LoadingMessage \n              personaName={personas[currentConversation.persona_id]?.name}\n              personaColor={personas[currentConversation.persona_id]?.color}\n            />\n          ) : (\n            <LoadingMessage \n              personaName=\"AI\"\n              personaColor=\"#666\"\n            />\n          )\n        )}\n      </ChatContent>\n\n      <MessageInput\n        onSendMessage={handleSendMessage}\n        disabled={isLoading || Object.keys(personas).length === 0}\n        placeholder={\n          selectedConversation && currentConversation\n            ? `${personas[currentConversation.persona_id]?.name}에게 메시지를 보내세요...`\n            : \"모든 페르소나에게 질문해보세요...\"\n        }\n      />\n        </>\n      )}\n    </MainArea>\n  );\n};\n\nexport default ChatArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}