{"ast":null,"code":"import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject0;import React,{useState,useEffect,useRef}from'react';import styled from'styled-components';import{chatApi}from'../../shared/api/chatApi';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import LoadingMessage from'../../shared/components/LoadingMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const HeaderSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  display: flex;\\n  justify-content: space-between;\\n  align-items: center;\\n  padding: 20px;\\n  border-bottom: 1px solid #e0e0e0;\\n  background: #f8f9fa;\\n\"])));const HeaderTitle=styled.h2(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  font-size: 24px;\\n  font-weight: 700;\\n  color: #343a40;\\n  margin: 0;\\n\"])));const NewThreadButton=styled.button(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\\n  color: white;\\n  border: none;\\n  border-radius: 8px;\\n  padding: 10px 20px;\\n  font-size: 14px;\\n  font-weight: 600;\\n  cursor: pointer;\\n  transition: all 0.2s ease;\\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\\n\\n  &:hover {\\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\\n    transform: translateY(-1px);\\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\\n  }\\n\\n  &:active {\\n    transform: translateY(0);\\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\\n  }\\n\"])));const ChatSection=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n  line-height: 1.6;\\n\"])));const EmptyIcon=styled.div(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  font-size: 48px;\\n  margin-bottom: 16px;\\n\"])));// 토스트 스타일 컴포넌트 추가\nconst Toast=styled.div(_templateObject0||(_templateObject0=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const VerbalizationView=_ref=>{let{selectedThread,threads,onThreadUpdate,onCreateNewThread}=_ref;const[isLoading,setIsLoading]=useState(false);const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 텍스트 선택 관련 상태\nconst[selectedText,setSelectedText]=useState('');const[showFAB,setShowFAB]=useState(false);// 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\nconst[localMessages,setLocalMessages]=useState([]);// selectedThread가 변경될 때 localMessages 동기화\nuseEffect(()=>{if(selectedThread){setLocalMessages(selectedThread.messages||[]);}else{setLocalMessages([]);}},[selectedThread]);// 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\nuseEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[localMessages,isLoading]);// 메시지 전송 처리\nconst handleSendMessage=async message=>{if(!message.trim()||isLoading)return false;// 1단계: 사용자 메시지를 즉시 UI에 추가\nconst userMessage={role:'user',content:message.trim(),timestamp:new Date().toISOString()};setLocalMessages(prev=>[...prev,userMessage]);setIsLoading(true);try{console.log('=== 언어화 메시지 전송 ===');console.log('selectedThread:',selectedThread);console.log('message:',message);// 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\nconst response=await chatApi.chatWithVerbalization(message,selectedThread===null||selectedThread===void 0?void 0:selectedThread.id// 스레드가 없으면 undefined 전달\n);console.log('API 응답 전체:',response);console.log('응답 데이터:',response.data);console.log('응답 에러:',response.error);if(response.data){console.log('메시지 전송 성공');console.log('응답 구조:',{thread_id:response.data.thread_id,user_message:response.data.user_message,response:response.data.response,thread_updated_at:response.data.thread_updated_at});// 3단계: AI 응답을 로컬 메시지에 추가\nconst assistantMessage={role:'assistant',content:response.data.response.content,timestamp:response.data.response.timestamp,persona_name:'언어화 도우미'};setLocalMessages(prev=>[...prev,assistantMessage]);// 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\n// 스레드 목록과 선택된 스레드를 새로고침\nawait onThreadUpdate();// 새로 생성된 스레드가 선택되도록 추가 처리\nif(!selectedThread&&response.data.thread_id){console.log('새 스레드 생성됨, 선택 업데이트 필요:',response.data.thread_id);// 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\nsetTimeout(async()=>{await onThreadUpdate();},100);}return true;}else{// 실패 시 사용자 메시지 제거\nsetLocalMessages(prev=>prev.slice(0,-1));console.error('메시지 전송 실패:',response.error);showCopyToast(\"\\uC5B8\\uC5B4\\uD654 \\uCC44\\uD305 \\uC2E4\\uD328: \".concat(response.error));return false;}}catch(error){// 오류 시 사용자 메시지 제거\nsetLocalMessages(prev=>prev.slice(0,-1));console.error('메시지 전송 오류:',error);showCopyToast(\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC624\\uB958: \".concat(error));return false;}finally{setIsLoading(false);}};// 새 스레드 생성 처리\nconst handleCreateNewThread=async()=>{try{console.log('=== 새 스레드 생성 시작 ===');// 1단계: 로컬 메시지 초기화 (새 대화 준비)\nsetLocalMessages([]);// 2단계: 새 스레드 생성\nconsole.log('새 스레드 생성 중...');// 3단계: 상위 컴포넌트에 새 스레드 생성 요청\nawait onCreateNewThread();// 4단계: 성공 메시지 표시\nshowCopyToast('새 대화가 시작되었습니다!');console.log('새 스레드 생성 및 선택 완료');}catch(error){console.error('새 스레드 생성 오류:',error);showCopyToast('새 대화 생성에 실패했습니다.');}};// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);showCopyToast('복사 실패');}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 관련 함수들\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};const handleEditMessage=async(messageIndex,newContent)=>{// 언어화에서는 메시지 수정 기능을 제공하지 않음\n// 필요시 추후 구현\nreturn false;};const handleCancelEdit=()=>{setEditingMessageIndex(null);};// 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\nconst handleSunAction=()=>{showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');};const handlePersonAction=()=>{const proceedPrompt=\"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";if(messageInputRef.current){messageInputRef.current.insertText(proceedPrompt);}showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');};const handleDocumentAction=()=>{if(selectedThread&&selectedThread.messages.length>0){const lastAssistantMessage=selectedThread.messages.slice().reverse().find(msg=>msg.role==='assistant');if(lastAssistantMessage){copyToClipboard(lastAssistantMessage.content,'마지막 응답이 복사되었습니다');}else{showCopyToast('복사할 응답이 없습니다');}}};// 텍스트 선택 핸들러\nconst handleTextSelection=()=>{const selection=window.getSelection();if(selection&&selection.toString().trim()){const selectedText=selection.toString().trim();setSelectedText(selectedText);setShowFAB(true);}else{setSelectedText('');setShowFAB(false);}};// 선택 해제 핸들러\nconst handleClearSelection=()=>{setSelectedText('');setShowFAB(false);if(window.getSelection){var _window$getSelection;(_window$getSelection=window.getSelection())===null||_window$getSelection===void 0?void 0:_window$getSelection.removeAllRanges();}};// FloatingActionButton 메뉴 액션 핸들러\nconst handleFABMenuAction=async action=>{switch(action){case'sendToInput':if(messageInputRef.current&&selectedText){messageInputRef.current.insertText(selectedText);showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');}break;case'copy':if(selectedText){await copyToClipboard(selectedText,'선택한 텍스트가 복사되었습니다');}break;case'saveToVault':// 언어화에서는 저장고 기능 미제공\nshowCopyToast('언어화에서는 저장고 기능을 제공하지 않습니다');break;case'addMemo':// 언어화에서는 메모 기능 미제공\nshowCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');break;case'highlight':// 언어화에서는 하이라이트 기능 미제공\nshowCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');break;}// 액션 실행 후 선택 해제\nhandleClearSelection();};// 채팅 메시지 영역에 이벤트 리스너 등록\nuseEffect(()=>{const chatElement=chatMessagesRef.current;if(chatElement){const handleMouseUp=()=>{setTimeout(handleTextSelection,10);// 약간의 지연을 주어 selection이 완료된 후 처리\n};chatElement.addEventListener('mouseup',handleMouseUp);chatElement.addEventListener('touchend',handleMouseUp);return()=>{chatElement.removeEventListener('mouseup',handleMouseUp);chatElement.removeEventListener('touchend',handleMouseUp);};}},[]);// 다른 곳 클릭 시 선택 해제\nuseEffect(()=>{const handleClickOutside=event=>{const target=event.target;// FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\nif(chatMessagesRef.current&&!chatMessagesRef.current.contains(target)&&!target.closest('[data-fab]')){handleClearSelection();}};document.addEventListener('mousedown',handleClickOutside);return()=>{document.removeEventListener('mousedown',handleClickOutside);};},[]);return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsxs(HeaderSection,{children:[/*#__PURE__*/_jsx(HeaderTitle,{children:\"\\uC5B8\\uC5B4\\uD654\"}),/*#__PURE__*/_jsx(NewThreadButton,{onClick:handleCreateNewThread,children:\"\\uC0C8 \\uB300\\uD654 \\uC2DC\\uC791\"})]}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[localMessages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(EmptyIcon,{children:\"\\uD83D\\uDCAD\"}),/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsxs(\"strong\",{children:[\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368\",/*#__PURE__*/_jsx(\"br\",{}),\"\\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4.\"]}),/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"\\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\",/*#__PURE__*/_jsx(\"br\",{}),/*#__PURE__*/_jsx(\"br\",{}),\"\\uC5B4\\uB5A4 \\uAC83\\uC774\\uB4E0 \\uC88B\\uC2B5\\uB2C8\\uB2E4. \\uC9C0\\uAE08 \\uB290\\uB07C\\uACE0 \\uC788\\uB294 \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uD3B8\\uC548\\uD558\\uAC8C \\uB9D0\\uC500\\uD574 \\uC8FC\\uC138\\uC694.\"]})]}):localMessages.map((message,index)=>/*#__PURE__*/_jsx(Message,{message:message,personas:{}// 언어화에서는 페르소나 정보 불필요\n,showActionButtons:true,showThreeActionButtons:false,onCopy:()=>handleCopyMessage(message.content),onEdit:message.role==='user'?()=>handleStartEdit(index):undefined,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit,isEditing:editingMessageIndex===index},\"\".concat(message.role,\"-\").concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:\"\\uC5B8\\uC5B4\\uD654 \\uB3C4\\uC6B0\\uBBF8\",personaColor:\"#666\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:handleSendMessage,disabled:isLoading,placeholder:\"\\uC5B8\\uC5B4\\uD654\\uB294 \\uB9C9\\uC5F0\\uD558\\uACE0 \\uBB54\\uC9C0 \\uBAA8\\uB97C \\uAC10\\uC815\\uC774\\uB098 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uD45C\\uD604\\uD568\\uC73C\\uB85C\\uC368 \\uADF8\\uAC83\\uC744 \\uC778\\uC2DD\\uD558\\uACE0 \\uB9CC\\uB4E4\\uC5B4 \\uAC00\\uB294 \\uAC83\\uC785\\uB2C8\\uB2E4. \\uC790\\uC720\\uB86D\\uAC8C \\uB2F9\\uC2E0\\uC758 \\uC0DD\\uAC01\\uC744 \\uB9D0\\uB85C \\uB0B4\\uBC49\\uC73C\\uC138\\uC694!\"})})]}),/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsx(FloatingActionButton,{show:showFAB,onMenuAction:handleFABMenuAction,personaId:\"verbalization\",currentInterpretation:\"\"})]});};export default VerbalizationView;","map":{"version":3,"names":["React","useState","useEffect","useRef","styled","chatApi","MessageInput","Message","LoadingMessage","FloatingActionButton","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","HeaderSection","_templateObject2","HeaderTitle","h2","_templateObject3","NewThreadButton","button","_templateObject4","ChatSection","_templateObject5","ChatMessages","_templateObject6","ChatInputSection","_templateObject7","EmptyChat","_templateObject8","EmptyIcon","_templateObject9","Toast","_templateObject0","props","show","VerbalizationView","_ref","selectedThread","threads","onThreadUpdate","onCreateNewThread","isLoading","setIsLoading","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedText","setSelectedText","showFAB","setShowFAB","localMessages","setLocalMessages","messages","current","scrollTop","scrollHeight","handleSendMessage","message","trim","userMessage","role","content","timestamp","Date","toISOString","prev","console","log","response","chatWithVerbalization","id","data","error","thread_id","user_message","thread_updated_at","assistantMessage","persona_name","setTimeout","slice","showCopyToast","concat","handleCreateNewThread","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleSunAction","handlePersonAction","proceedPrompt","insertText","handleDocumentAction","length","lastAssistantMessage","reverse","find","msg","handleTextSelection","selection","window","getSelection","toString","handleClearSelection","_window$getSelection","removeAllRanges","handleFABMenuAction","action","chatElement","handleMouseUp","addEventListener","removeEventListener","handleClickOutside","event","target","contains","closest","document","children","onClick","ref","map","index","personas","showActionButtons","showThreeActionButtons","onCopy","onEdit","undefined","onEditSave","onEditCancel","isEditing","personaName","personaColor","onSendMessage","disabled","placeholder","onMenuAction","personaId","currentInterpretation"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/verbalization/components/VerbalizationView.tsx"],"sourcesContent":["import React, { useState, useEffect, useRef } from 'react';\r\nimport styled from 'styled-components';\r\nimport { TrainingThread } from '../../shared/types';\r\nimport { chatApi } from '../../shared/api/chatApi';\r\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\r\nimport Message from '../../shared/components/Message';\r\nimport LoadingMessage from '../../shared/components/LoadingMessage';\r\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\r\n\r\ninterface VerbalizationViewProps {\r\n  selectedThread: TrainingThread | null;\r\n  threads: TrainingThread[];\r\n  onThreadUpdate: () => void;\r\n  onCreateNewThread: () => Promise<void>;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  background: white;\r\n`;\r\n\r\nconst HeaderSection = styled.div`\r\n  display: flex;\r\n  justify-content: space-between;\r\n  align-items: center;\r\n  padding: 20px;\r\n  border-bottom: 1px solid #e0e0e0;\r\n  background: #f8f9fa;\r\n`;\r\n\r\nconst HeaderTitle = styled.h2`\r\n  font-size: 24px;\r\n  font-weight: 700;\r\n  color: #343a40;\r\n  margin: 0;\r\n`;\r\n\r\nconst NewThreadButton = styled.button`\r\n  background: linear-gradient(135deg, #6c757d 0%, #5a6268 100%);\r\n  color: white;\r\n  border: none;\r\n  border-radius: 8px;\r\n  padding: 10px 20px;\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  cursor: pointer;\r\n  transition: all 0.2s ease;\r\n  box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\r\n\r\n  &:hover {\r\n    background: linear-gradient(135deg, #5a6268 0%, #495057 100%);\r\n    transform: translateY(-1px);\r\n    box-shadow: 0 4px 8px rgba(108, 117, 125, 0.3);\r\n  }\r\n\r\n  &:active {\r\n    transform: translateY(0);\r\n    box-shadow: 0 2px 4px rgba(108, 117, 125, 0.2);\r\n  }\r\n`;\r\n\r\nconst ChatSection = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  overflow: hidden;\r\n`;\r\n\r\nconst ChatMessages = styled.div`\r\n  flex: 1;\r\n  overflow-y: auto;\r\n  padding: 20px;\r\n  display: flex;\r\n  flex-direction: column;\r\n  gap: 16px;\r\n`;\r\n\r\nconst ChatInputSection = styled.div`\r\n  padding: 16px 20px;\r\n  border-top: none;\r\n  background: #ffffff;\r\n`;\r\n\r\nconst EmptyChat = styled.div`\r\n  flex: 1;\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  align-items: center;\r\n  color: #999;\r\n  font-size: 14px;\r\n  text-align: center;\r\n  line-height: 1.6;\r\n`;\r\n\r\nconst EmptyIcon = styled.div`\r\n  font-size: 48px;\r\n  margin-bottom: 16px;\r\n`;\r\n\r\n// 토스트 스타일 컴포넌트 추가\r\nconst Toast = styled.div<{ show: boolean }>`\r\n  position: fixed;\r\n  top: 20px;\r\n  right: 20px;\r\n  background: #6c757d;\r\n  color: white;\r\n  padding: 12px 20px;\r\n  border-radius: 8px;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\r\n  z-index: 1000;\r\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\r\n  transition: transform 0.3s ease;\r\n  font-size: 14px;\r\n  font-weight: 500;\r\n`;\r\n\r\nconst VerbalizationView: React.FC<VerbalizationViewProps> = ({\r\n  selectedThread,\r\n  threads,\r\n  onThreadUpdate,\r\n  onCreateNewThread\r\n}) => {\r\n  const [isLoading, setIsLoading] = useState(false);\r\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\r\n  const messageInputRef = useRef<MessageInputRef>(null);\r\n  const [showToast, setShowToast] = useState(false);\r\n  const [toastMessage, setToastMessage] = useState('');\r\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\r\n  \r\n  // 텍스트 선택 관련 상태\r\n  const [selectedText, setSelectedText] = useState('');\r\n  const [showFAB, setShowFAB] = useState(false);\r\n  \r\n  // 로컬 메시지 상태 - 사용자 메시지를 즉시 UI에 반영하기 위함\r\n  const [localMessages, setLocalMessages] = useState<Array<{\r\n    role: 'user' | 'assistant';\r\n    content: string;\r\n    timestamp: string;\r\n    persona_name?: string;\r\n  }>>([]);\r\n\r\n  // selectedThread가 변경될 때 localMessages 동기화\r\n  useEffect(() => {\r\n    if (selectedThread) {\r\n      setLocalMessages(selectedThread.messages || []);\r\n    } else {\r\n      setLocalMessages([]);\r\n    }\r\n  }, [selectedThread]);\r\n\r\n  // 스크롤을 맨 아래로 이동 - localMessages 기준으로 변경\r\n  useEffect(() => {\r\n    if (chatMessagesRef.current) {\r\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\r\n    }\r\n  }, [localMessages, isLoading]);\r\n\r\n  // 메시지 전송 처리\r\n  const handleSendMessage = async (message: string): Promise<boolean> => {\r\n    if (!message.trim() || isLoading) return false;\r\n\r\n    // 1단계: 사용자 메시지를 즉시 UI에 추가\r\n    const userMessage = {\r\n      role: 'user' as const,\r\n      content: message.trim(),\r\n      timestamp: new Date().toISOString(),\r\n    };\r\n    \r\n    setLocalMessages(prev => [...prev, userMessage]);\r\n    setIsLoading(true);\r\n\r\n    try {\r\n      console.log('=== 언어화 메시지 전송 ===');\r\n      console.log('selectedThread:', selectedThread);\r\n      console.log('message:', message);\r\n\r\n      // 2단계: API 호출 - 스레드 ID 전달 (없으면 undefined)\r\n      const response = await chatApi.chatWithVerbalization(\r\n        message,\r\n        selectedThread?.id // 스레드가 없으면 undefined 전달\r\n      );\r\n\r\n      console.log('API 응답 전체:', response);\r\n      console.log('응답 데이터:', response.data);\r\n      console.log('응답 에러:', response.error);\r\n\r\n      if (response.data) {\r\n        console.log('메시지 전송 성공');\r\n        console.log('응답 구조:', {\r\n          thread_id: response.data.thread_id,\r\n          user_message: response.data.user_message,\r\n          response: response.data.response,\r\n          thread_updated_at: response.data.thread_updated_at\r\n        });\r\n        \r\n        // 3단계: AI 응답을 로컬 메시지에 추가\r\n        const assistantMessage = {\r\n          role: 'assistant' as const,\r\n          content: response.data.response.content,\r\n          timestamp: response.data.response.timestamp,\r\n          persona_name: '언어화 도우미',\r\n        };\r\n        \r\n        setLocalMessages(prev => [...prev, assistantMessage]);\r\n        \r\n        // 4단계: 백엔드에서 새 스레드가 생성되었거나 기존 스레드가 업데이트된 경우\r\n        // 스레드 목록과 선택된 스레드를 새로고침\r\n        await onThreadUpdate();\r\n        \r\n        // 새로 생성된 스레드가 선택되도록 추가 처리\r\n        if (!selectedThread && response.data.thread_id) {\r\n          console.log('새 스레드 생성됨, 선택 업데이트 필요:', response.data.thread_id);\r\n          // 약간의 지연 후 스레드 목록 재로드하여 새 스레드 선택\r\n          setTimeout(async () => {\r\n            await onThreadUpdate();\r\n          }, 100);\r\n        }\r\n        \r\n        return true;\r\n      } else {\r\n        // 실패 시 사용자 메시지 제거\r\n        setLocalMessages(prev => prev.slice(0, -1));\r\n        console.error('메시지 전송 실패:', response.error);\r\n        showCopyToast(`언어화 채팅 실패: ${response.error}`);\r\n        return false;\r\n      }\r\n    } catch (error) {\r\n      // 오류 시 사용자 메시지 제거\r\n      setLocalMessages(prev => prev.slice(0, -1));\r\n      console.error('메시지 전송 오류:', error);\r\n      showCopyToast(`네트워크 오류: ${error}`);\r\n      return false;\r\n    } finally {\r\n      setIsLoading(false);\r\n    }\r\n  };\r\n\r\n  // 새 스레드 생성 처리\r\n  const handleCreateNewThread = async () => {\r\n    try {\r\n      console.log('=== 새 스레드 생성 시작 ===');\r\n      \r\n      // 1단계: 로컬 메시지 초기화 (새 대화 준비)\r\n      setLocalMessages([]);\r\n      \r\n      // 2단계: 새 스레드 생성\r\n      console.log('새 스레드 생성 중...');\r\n      \r\n      // 3단계: 상위 컴포넌트에 새 스레드 생성 요청\r\n      await onCreateNewThread();\r\n      \r\n      // 4단계: 성공 메시지 표시\r\n      showCopyToast('새 대화가 시작되었습니다!');\r\n      \r\n      console.log('새 스레드 생성 및 선택 완료');\r\n    } catch (error) {\r\n      console.error('새 스레드 생성 오류:', error);\r\n      showCopyToast('새 대화 생성에 실패했습니다.');\r\n    }\r\n  };\r\n\r\n  // 토스트 메시지 표시 함수\r\n  const showCopyToast = (message: string) => {\r\n    setToastMessage(message);\r\n    setShowToast(true);\r\n    setTimeout(() => setShowToast(false), 3000);\r\n  };\r\n\r\n  // 텍스트 복사 유틸리티 함수\r\n  const copyToClipboard = async (text: string, successMessage: string) => {\r\n    try {\r\n      await navigator.clipboard.writeText(text);\r\n      showCopyToast(successMessage);\r\n    } catch (error) {\r\n      console.error('복사 실패:', error);\r\n      showCopyToast('복사 실패');\r\n    }\r\n  };\r\n\r\n  // 메시지 복사 기능\r\n  const handleCopyMessage = async (messageContent: string) => {\r\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\r\n  };\r\n\r\n  // 메시지 수정 관련 함수들\r\n  const handleStartEdit = (messageIndex: number) => {\r\n    setEditingMessageIndex(messageIndex);\r\n  };\r\n\r\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\r\n    // 언어화에서는 메시지 수정 기능을 제공하지 않음\r\n    // 필요시 추후 구현\r\n    return false;\r\n  };\r\n\r\n  const handleCancelEdit = () => {\r\n    setEditingMessageIndex(null);\r\n  };\r\n\r\n  // 액션 버튼 핸들러들 (언어화에서는 간단하게 구현)\r\n  const handleSunAction = () => {\r\n    showCopyToast('언어화에서는 해석 기능을 제공하지 않습니다');\r\n  };\r\n\r\n  const handlePersonAction = () => {\r\n    const proceedPrompt = \"이 감정이나 생각에 대해 더 깊이 탐구해보고 싶어요.\";\r\n    if (messageInputRef.current) {\r\n      messageInputRef.current.insertText(proceedPrompt);\r\n    }\r\n    showCopyToast('탐구 프롬프트가 입력창에 추가되었습니다');\r\n  };\r\n\r\n  const handleDocumentAction = () => {\r\n    if (selectedThread && selectedThread.messages.length > 0) {\r\n      const lastAssistantMessage = selectedThread.messages\r\n        .slice()\r\n        .reverse()\r\n        .find(msg => msg.role === 'assistant');\r\n      \r\n      if (lastAssistantMessage) {\r\n        copyToClipboard(lastAssistantMessage.content, '마지막 응답이 복사되었습니다');\r\n      } else {\r\n        showCopyToast('복사할 응답이 없습니다');\r\n      }\r\n    }\r\n  };\r\n\r\n  // 텍스트 선택 핸들러\r\n  const handleTextSelection = () => {\r\n    const selection = window.getSelection();\r\n    if (selection && selection.toString().trim()) {\r\n      const selectedText = selection.toString().trim();\r\n      setSelectedText(selectedText);\r\n      setShowFAB(true);\r\n    } else {\r\n      setSelectedText('');\r\n      setShowFAB(false);\r\n    }\r\n  };\r\n\r\n  // 선택 해제 핸들러\r\n  const handleClearSelection = () => {\r\n    setSelectedText('');\r\n    setShowFAB(false);\r\n    if (window.getSelection) {\r\n      window.getSelection()?.removeAllRanges();\r\n    }\r\n  };\r\n\r\n  // FloatingActionButton 메뉴 액션 핸들러\r\n  const handleFABMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\r\n    switch (action) {\r\n      case 'sendToInput':\r\n        if (messageInputRef.current && selectedText) {\r\n          messageInputRef.current.insertText(selectedText);\r\n          showCopyToast('선택한 텍스트가 입력창에 추가되었습니다');\r\n        }\r\n        break;\r\n      \r\n      case 'copy':\r\n        if (selectedText) {\r\n          await copyToClipboard(selectedText, '선택한 텍스트가 복사되었습니다');\r\n        }\r\n        break;\r\n      \r\n      case 'saveToVault':\r\n        // 언어화에서는 저장고 기능 미제공\r\n        showCopyToast('언어화에서는 저장고 기능을 제공하지 않습니다');\r\n        break;\r\n      \r\n      case 'addMemo':\r\n        // 언어화에서는 메모 기능 미제공\r\n        showCopyToast('언어화에서는 메모 기능을 제공하지 않습니다');\r\n        break;\r\n      \r\n      case 'highlight':\r\n        // 언어화에서는 하이라이트 기능 미제공\r\n        showCopyToast('언어화에서는 하이라이트 기능을 제공하지 않습니다');\r\n        break;\r\n    }\r\n    \r\n    // 액션 실행 후 선택 해제\r\n    handleClearSelection();\r\n  };\r\n\r\n  // 채팅 메시지 영역에 이벤트 리스너 등록\r\n  useEffect(() => {\r\n    const chatElement = chatMessagesRef.current;\r\n    if (chatElement) {\r\n      const handleMouseUp = () => {\r\n        setTimeout(handleTextSelection, 10); // 약간의 지연을 주어 selection이 완료된 후 처리\r\n      };\r\n\r\n      chatElement.addEventListener('mouseup', handleMouseUp);\r\n      chatElement.addEventListener('touchend', handleMouseUp);\r\n\r\n      return () => {\r\n        chatElement.removeEventListener('mouseup', handleMouseUp);\r\n        chatElement.removeEventListener('touchend', handleMouseUp);\r\n      };\r\n    }\r\n  }, []);\r\n\r\n  // 다른 곳 클릭 시 선택 해제\r\n  useEffect(() => {\r\n    const handleClickOutside = (event: MouseEvent) => {\r\n      const target = event.target as HTMLElement;\r\n      // FAB나 메시지 영역이 아닌 곳 클릭 시 선택 해제\r\n      if (chatMessagesRef.current && !chatMessagesRef.current.contains(target) && !target.closest('[data-fab]')) {\r\n        handleClearSelection();\r\n      }\r\n    };\r\n\r\n    document.addEventListener('mousedown', handleClickOutside);\r\n    return () => {\r\n      document.removeEventListener('mousedown', handleClickOutside);\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <Container>\r\n      {/* 헤더 */}\r\n      <HeaderSection>\r\n        <HeaderTitle>언어화</HeaderTitle>\r\n        <NewThreadButton onClick={handleCreateNewThread}>\r\n          새 대화 시작\r\n        </NewThreadButton>\r\n      </HeaderSection>\r\n\r\n      {/* 채팅 영역 */}\r\n      <ChatSection>\r\n        <ChatMessages ref={chatMessagesRef}>\r\n          {localMessages.length === 0 ? (\r\n            <EmptyChat>\r\n              <EmptyIcon>💭</EmptyIcon>\r\n              <div>\r\n                <strong>언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써<br />\r\n                그것을 인식하고 만들어 가는 것입니다.</strong>\r\n                <br /><br />\r\n                자유롭게 당신의 생각을 말로 내뱉으세요!\r\n                <br /><br />\r\n                어떤 것이든 좋습니다. 지금 느끼고 있는 감정이나 생각을 편안하게 말씀해 주세요.\r\n              </div>\r\n            </EmptyChat>\r\n          ) : (\r\n            localMessages.map((message, index) => (\r\n              <Message\r\n                key={`${message.role}-${index}`}\r\n                message={message}\r\n                personas={{}} // 언어화에서는 페르소나 정보 불필요\r\n                showActionButtons={true}\r\n                showThreeActionButtons={false}\r\n                onCopy={() => handleCopyMessage(message.content)}\r\n                onEdit={message.role === 'user' ? () => handleStartEdit(index) : undefined}\r\n                onEditSave={(newContent) => handleEditMessage(index, newContent)}\r\n                onEditCancel={handleCancelEdit}\r\n                isEditing={editingMessageIndex === index}\r\n              />\r\n            ))\r\n          )}\r\n          \r\n          {/* 로딩 메시지 */}\r\n          {isLoading && (\r\n            <LoadingMessage \r\n              personaName=\"언어화 도우미\"\r\n              personaColor=\"#666\"\r\n            />\r\n          )}\r\n        </ChatMessages>\r\n\r\n        {/* 입력창 */}\r\n        <ChatInputSection>\r\n          <MessageInput\r\n            ref={messageInputRef}\r\n            onSendMessage={handleSendMessage}\r\n            disabled={isLoading}\r\n            placeholder=\"언어화는 막연하고 뭔지 모를 감정이나 생각을 말로 표현함으로써 그것을 인식하고 만들어 가는 것입니다. 자유롭게 당신의 생각을 말로 내뱉으세요!\"\r\n          />\r\n        </ChatInputSection>\r\n      </ChatSection>\r\n\r\n      {/* 토스트 메시지 */}\r\n      <Toast show={showToast}>\r\n        {toastMessage}\r\n      </Toast>\r\n\r\n      {/* FloatingActionButton */}\r\n      <FloatingActionButton\r\n        show={showFAB}\r\n        onMenuAction={handleFABMenuAction}\r\n        personaId=\"verbalization\"\r\n        currentInterpretation=\"\"\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default VerbalizationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}