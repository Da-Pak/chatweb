{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\SentenceView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst SentenceView = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread\n}) => {\n  _s();\n  const [selectedThread, setSelectedThread] = useState(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 문장 스레드를 자동 선택\n      const firstSentenceThread = threads.find(t => t.thread_type === 'sentence');\n      if (firstSentenceThread && !selectedThread) {\n        setSelectedThread(firstSentenceThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages]);\n  const handleSendMessage = async message => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n\n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setSelectedThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        setSelectedThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === currentThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // 메시지 수정 기능 구현 예정\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n\n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n\n      if (selectedThread !== null && selectedThread !== void 0 && selectedThread.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n\n        // 새로 생성된 문장 스레드 선택\n        const newSentenceThread = updatedThreads.filter(t => t.thread_type === 'sentence').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        if (newSentenceThread && (!selectedThread || newSentenceThread.id !== selectedThread.id)) {\n          setSelectedThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'sentence_chat',\n            // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['sentence']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        selectedIds.forEach(id => {\n          // 로컬 상태에서 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [id]: ''\n          }));\n          setHighlightedSentences(prev => new Set(prev).add(id));\n\n          // 백엔드 API 호출 (비동기, 실패해도 로컬 생성은 유지)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: id,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n        });\n        break;\n      case 'highlight':\n        selectedIds.forEach(id => {\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            if (newSet.has(id)) {\n              newSet.delete(id);\n            } else {\n              newSet.add(id);\n            }\n            return newSet;\n          });\n        });\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 551,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!selectedThread || selectedThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCDD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 559,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 560,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 561,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 558,\n          columnNumber: 13\n        }, this) : selectedThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 568,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#4caf50',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 584,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#4caf50\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 619,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 556,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 문장에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.content) || sentenceContent,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: selectedThread === null || selectedThread === void 0 ? void 0 : selectedThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 628,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 627,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 555,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: sentenceContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 646,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 550,\n    columnNumber: 5\n  }, this);\n};\n_s(SentenceView, \"EbCB/tyxI5Zm8f3niCoWh3LJrFc=\");\n_c7 = SentenceView;\nexport default SentenceView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"SentenceView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","SentenceView","personaId","personaName","sentenceContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","_s","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","sentenceThreads","filter","thread","thread_type","firstSentenceThread","find","t","current","scrollTop","scrollHeight","messages","handleSendMessage","message","currentThread","sentenceThread","defaultThread","id","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","response","chatWithThread","thread_id","user_message","data","assistantMessage","finalUpdatedThread","thread_updated_at","map","console","error","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleSunAction","handlePersonAction","proceedPrompt","insertText","contentToSave","length","lastAssistantMessage","slice","reverse","msg","saveCurrentAsProceed","threadsResponse","getPersonaThreads","handleDocumentAction","sentencePrompt","saveCurrentAsSentence","handleRefreshThreads","newSentenceThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","Array","from","selectedTexts","sentenceIndex","split","m","sentences","s","trim","parseInt","formattedText","join","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onRefreshThreads","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/SentenceView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface SentenceViewProps {\n  personaId: string;\n  personaName: string;\n  sentenceContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst SentenceView: React.FC<SentenceViewProps> = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 문장 스레드를 자동 선택\n      const firstSentenceThread = threads.find(t => t.thread_type === 'sentence');\n      if (firstSentenceThread && !selectedThread) {\n        setSelectedThread(firstSentenceThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 메시지 수정 기능 구현 예정\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    \n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    \n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n          .reverse()\n          .find(msg => msg.role === 'assistant');\n        \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    \n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    \n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n          \n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 문장 스레드 선택\n              const newSentenceThread = updatedThreads\n                .filter(t => t.thread_type === 'sentence')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newSentenceThread && (!selectedThread || newSentenceThread.id !== selectedThread.id)) {\n                setSelectedThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'sentence_chat', // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['sentence']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        selectedIds.forEach(id => {\n          // 로컬 상태에서 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [id]: '' }));\n          setHighlightedSentences(prev => new Set(prev).add(id));\n          \n          // 백엔드 API 호출 (비동기, 실패해도 로컬 생성은 유지)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: id,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n        });\n        break;\n      \n      case 'highlight':\n        selectedIds.forEach(id => {\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            if (newSet.has(id)) {\n              newSet.delete(id);\n            } else {\n              newSet.add(id);\n            }\n            return newSet;\n          });\n        });\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>📝</div>\n              <div>문장에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#4caf50',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#4caf50\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 문장에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || sentenceContent}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={sentenceContent}\n      />\n    </Container>\n  );\n};\n\nexport default SentenceView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}