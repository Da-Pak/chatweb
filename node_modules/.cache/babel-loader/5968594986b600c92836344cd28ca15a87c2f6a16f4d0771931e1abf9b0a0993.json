{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\vault\\\\components\\\\SentenceVaultView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport styled from 'styled-components';\nimport SentenceFilterDropdown from './SentenceFilterDropdown';\nimport SentenceCard from './SentenceCard';\nimport ConfirmationModal from './ConfirmationModal';\nimport { sentenceApi } from '../../training/api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n`;\n_c = Container;\nconst FilterContainer = styled.div`\n  display: flex;\n  align-items: center;\n  gap: 16px;\n  margin-bottom: 24px;\n`;\n_c2 = FilterContainer;\nconst ArrowButton = styled.button`\n  background: #e9ecef;\n  border: 1px solid #dee2e6;\n  border-radius: 6px;\n  width: 32px;\n  height: 32px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 14px;\n  \n  &:hover {\n    background: #dee2e6;\n  }\n  \n  &:disabled {\n    opacity: 0.5;\n    cursor: not-allowed;\n  }\n`;\n_c3 = ArrowButton;\nconst SentenceGrid = styled.div`\n  display: grid;\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\n  gap: 16px;\n  flex: 1;\n`;\n_c4 = SentenceGrid;\nconst EmptyState = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  height: 300px;\n  color: #6c757d;\n  font-size: 16px;\n`;\n_c5 = EmptyState;\nconst LoadingState = styled.div`\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  height: 300px;\n  color: #6c757d;\n  font-size: 16px;\n`;\n_c6 = LoadingState;\nconst SentenceVaultView = ({\n  onNavigateToPersona,\n  onNavigateToThread\n}) => {\n  _s();\n  const [sentences, setSentences] = useState([]);\n  const [loading, setLoading] = useState(true);\n  const [currentFilter, setCurrentFilter] = useState('전체');\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\n  const [confirmModal, setConfirmModal] = useState({\n    isOpen: false,\n    type: 'interact',\n    sentence: null\n  });\n\n  // 더미 페르소나 데이터 (실제로는 백엔드에서 가져와야 함)\n  const personas = {\n    'persona1': '김철수',\n    'persona2': '이영희',\n    'persona3': '박민수',\n    'verbalization': '언어화'\n  };\n\n  // 필터 옵션 생성\n  const getFilterOptions = () => {\n    const baseOptions = ['전체', '언어화', '편지'];\n    const personaOptions = Object.values(personas).filter(name => name !== '언어화');\n    return [...baseOptions, ...personaOptions];\n  };\n  const filterOptions = getFilterOptions();\n  const currentFilterIndex = filterOptions.indexOf(currentFilter);\n\n  // 데이터 로딩\n  useEffect(() => {\n    loadSentences();\n  }, []);\n  const loadSentences = async () => {\n    try {\n      setLoading(true);\n      const data = await sentenceApi.getVaultSentences();\n\n      // 메타데이터 추가 (실제로는 백엔드에서 제공되어야 함)\n      const sentencesWithMeta = data.map(sentence => {\n        var _sentence$metadata;\n        return {\n          ...sentence,\n          persona_name: getPersonaNameFromMetadata(sentence),\n          thread_type: getThreadTypeFromMetadata(sentence),\n          is_pinned: ((_sentence$metadata = sentence.metadata) === null || _sentence$metadata === void 0 ? void 0 : _sentence$metadata.is_pinned) || false\n        };\n      });\n\n      // 고정된 항목을 맨 위로, 그 다음은 최신순으로 정렬\n      const sortedSentences = sentencesWithMeta.sort((a, b) => {\n        if (a.is_pinned && !b.is_pinned) return -1;\n        if (!a.is_pinned && b.is_pinned) return 1;\n        return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\n      });\n      setSentences(sortedSentences);\n    } catch (error) {\n      console.error('문장 로딩 오류:', error);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // 메타데이터에서 페르소나명 추출\n  const getPersonaNameFromMetadata = sentence => {\n    var _sentence$metadata2, _sentence$metadata3;\n    // metadata에서 persona_id 또는 thread_type을 확인\n    const personaId = (_sentence$metadata2 = sentence.metadata) === null || _sentence$metadata2 === void 0 ? void 0 : _sentence$metadata2.persona_id;\n    const threadType = (_sentence$metadata3 = sentence.metadata) === null || _sentence$metadata3 === void 0 ? void 0 : _sentence$metadata3.thread_type;\n    if (threadType === 'verbalization') {\n      return '언어화';\n    }\n    if (personaId && personas[personaId]) {\n      return personas[personaId];\n    }\n\n    // 기본값\n    return '알 수 없음';\n  };\n\n  // 메타데이터에서 스레드 타입 추출\n  const getThreadTypeFromMetadata = sentence => {\n    var _sentence$metadata4;\n    return ((_sentence$metadata4 = sentence.metadata) === null || _sentence$metadata4 === void 0 ? void 0 : _sentence$metadata4.thread_type) || 'interpretation';\n  };\n\n  // 필터링된 문장들\n  const getFilteredSentences = () => {\n    if (currentFilter === '전체') {\n      return sentences;\n    }\n    if (currentFilter === '언어화') {\n      return sentences.filter(s => s.persona_name === '언어화');\n    }\n    if (currentFilter === '편지') {\n      return sentences.filter(s => s.thread_type === 'letter');\n    }\n\n    // 특정 페르소나 필터\n    return sentences.filter(s => s.persona_name === currentFilter);\n  };\n  const filteredSentences = getFilteredSentences();\n\n  // 필터 이동\n  const moveFilter = direction => {\n    const newIndex = direction === 'left' ? Math.max(0, currentFilterIndex - 1) : Math.min(filterOptions.length - 1, currentFilterIndex + 1);\n    setCurrentFilter(filterOptions[newIndex]);\n  };\n\n  // 카드 액션 처리\n  const handleCardAction = (sentence, action) => {\n    setConfirmModal({\n      isOpen: true,\n      type: action,\n      sentence\n    });\n  };\n\n  // 모달 확인 처리\n  const handleConfirmAction = async () => {\n    var _sentence$metadata5, _sentence$metadata6;\n    const {\n      type,\n      sentence\n    } = confirmModal;\n    if (!sentence) return;\n    try {\n      switch (type) {\n        case 'interact':\n          // 상호작용 하기 - 해당 페르소나의 문장 모드로 이동\n          if ((_sentence$metadata5 = sentence.metadata) !== null && _sentence$metadata5 !== void 0 && _sentence$metadata5.persona_id) {\n            onNavigateToPersona(sentence.metadata.persona_id, 'sentence');\n          }\n          break;\n        case 'navigate':\n          // 해당 기록으로 이동 - 해당 스레드로 이동\n          if ((_sentence$metadata6 = sentence.metadata) !== null && _sentence$metadata6 !== void 0 && _sentence$metadata6.thread_id && sentence.thread_type) {\n            onNavigateToThread(sentence.metadata.thread_id, sentence.thread_type);\n          }\n          break;\n        case 'pin':\n          // 고정/해제\n          const updatedSentences = sentences.map(s => s.id === sentence.id ? {\n            ...s,\n            is_pinned: !s.is_pinned\n          } : s);\n          setSentences(updatedSentences);\n          // TODO: 백엔드에 고정 상태 저장\n          break;\n        case 'delete':\n          // 삭제\n          await sentenceApi.deleteVaultSentence(sentence.id);\n          setSentences(sentences.filter(s => s.id !== sentence.id));\n          break;\n      }\n    } catch (error) {\n      console.error('액션 처리 오류:', error);\n    }\n    setConfirmModal({\n      isOpen: false,\n      type: 'interact',\n      sentence: null\n    });\n  };\n  const getConfirmMessage = () => {\n    const {\n      type,\n      sentence\n    } = confirmModal;\n    if (!sentence) return '';\n    switch (type) {\n      case 'interact':\n        return `\"${sentence.persona_name}\"와 상호작용을 시작하시겠습니까?`;\n      case 'navigate':\n        return `해당 기록으로 이동하시겠습니까?`;\n      case 'pin':\n        return sentence.is_pinned ? `이 문장의 고정을 해제하시겠습니까?` : `이 문장을 맨 위에 고정하시겠습니까?`;\n      case 'delete':\n        return `이 문장을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.`;\n      default:\n        return '';\n    }\n  };\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(Container, {\n      children: /*#__PURE__*/_jsxDEV(LoadingState, {\n        children: \"\\uBB38\\uC7A5\\uC744 \\uBD88\\uB7EC\\uC624\\uB294 \\uC911...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 277,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 276,\n      columnNumber: 7\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(FilterContainer, {\n      children: [/*#__PURE__*/_jsxDEV(ArrowButton, {\n        onClick: () => moveFilter('left'),\n        disabled: currentFilterIndex === 0,\n        children: \"\\u2190\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 287,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(SentenceFilterDropdown, {\n        currentFilter: currentFilter,\n        options: filterOptions,\n        isOpen: isDropdownOpen,\n        onToggle: () => setIsDropdownOpen(!isDropdownOpen),\n        onSelect: option => {\n          setCurrentFilter(option);\n          setIsDropdownOpen(false);\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ArrowButton, {\n        onClick: () => moveFilter('right'),\n        disabled: currentFilterIndex === filterOptions.length - 1,\n        children: \"\\u2192\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 305,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 286,\n      columnNumber: 7\n    }, this), filteredSentences.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyState, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uD83D\\uDCDD\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 315,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        children: \"\\uC800\\uC7A5\\uB41C \\uBB38\\uC7A5\\uC774 \\uC5C6\\uC2B5\\uB2C8\\uB2E4\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 316,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          fontSize: '14px',\n          marginTop: '8px'\n        },\n        children: \"\\uB300\\uD654 \\uC911\\uC5D0 \\uBB38\\uC7A5\\uC744 \\uC120\\uD0DD\\uD558\\uACE0 \\\"\\uC800\\uC7A5\\uACE0\\uC5D0 \\uC800\\uC7A5\\\" \\uBC84\\uD2BC\\uC744 \\uB20C\\uB7EC\\uBCF4\\uC138\\uC694\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 317,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 314,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(SentenceGrid, {\n      children: filteredSentences.map(sentence => /*#__PURE__*/_jsxDEV(SentenceCard, {\n        sentence: sentence,\n        personaName: sentence.persona_name || '알 수 없음',\n        isPinned: sentence.is_pinned || false,\n        onAction: action => handleCardAction(sentence, action)\n      }, sentence.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 324,\n        columnNumber: 13\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 322,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(ConfirmationModal, {\n      isOpen: confirmModal.isOpen,\n      title: confirmModal.type === 'delete' ? '문장 삭제' : '확인',\n      message: getConfirmMessage(),\n      onConfirm: handleConfirmAction,\n      onCancel: () => setConfirmModal({\n        isOpen: false,\n        type: 'interact',\n        sentence: null\n      }),\n      confirmText: confirmModal.type === 'delete' ? '삭제' : '확인',\n      cancelText: \"\\uCDE8\\uC18C\",\n      isDangerous: confirmModal.type === 'delete'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 335,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 285,\n    columnNumber: 5\n  }, this);\n};\n_s(SentenceVaultView, \"cmiOY0VfL/j4nMtPabDMrzO/NSo=\");\n_c7 = SentenceVaultView;\nexport default SentenceVaultView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"FilterContainer\");\n$RefreshReg$(_c3, \"ArrowButton\");\n$RefreshReg$(_c4, \"SentenceGrid\");\n$RefreshReg$(_c5, \"EmptyState\");\n$RefreshReg$(_c6, \"LoadingState\");\n$RefreshReg$(_c7, \"SentenceVaultView\");","map":{"version":3,"names":["React","useState","useEffect","styled","SentenceFilterDropdown","SentenceCard","ConfirmationModal","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","FilterContainer","_c2","ArrowButton","button","_c3","SentenceGrid","_c4","EmptyState","_c5","LoadingState","_c6","SentenceVaultView","onNavigateToPersona","onNavigateToThread","_s","sentences","setSentences","loading","setLoading","currentFilter","setCurrentFilter","isDropdownOpen","setIsDropdownOpen","confirmModal","setConfirmModal","isOpen","type","sentence","personas","getFilterOptions","baseOptions","personaOptions","Object","values","filter","name","filterOptions","currentFilterIndex","indexOf","loadSentences","data","getVaultSentences","sentencesWithMeta","map","_sentence$metadata","persona_name","getPersonaNameFromMetadata","thread_type","getThreadTypeFromMetadata","is_pinned","metadata","sortedSentences","sort","a","b","Date","created_at","getTime","error","console","_sentence$metadata2","_sentence$metadata3","personaId","persona_id","threadType","_sentence$metadata4","getFilteredSentences","s","filteredSentences","moveFilter","direction","newIndex","Math","max","min","length","handleCardAction","action","handleConfirmAction","_sentence$metadata5","_sentence$metadata6","thread_id","updatedSentences","id","deleteVaultSentence","getConfirmMessage","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","disabled","options","onToggle","onSelect","option","style","fontSize","marginTop","personaName","isPinned","onAction","title","message","onConfirm","onCancel","confirmText","cancelText","isDangerous","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/vault/components/SentenceVaultView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport styled from 'styled-components';\r\nimport SentenceFilterDropdown from './SentenceFilterDropdown';\r\nimport SentenceCard from './SentenceCard';\r\nimport ConfirmationModal from './ConfirmationModal';\r\nimport { sentenceApi, SentenceVaultItem } from '../../training/api/sentenceApi';\r\n\r\ninterface SentenceVaultViewProps {\r\n  onNavigateToPersona: (personaId: string, mode: 'sentence') => void;\r\n  onNavigateToThread: (threadId: string, threadType: string) => void;\r\n}\r\n\r\nconst Container = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n`;\r\n\r\nconst FilterContainer = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  gap: 16px;\r\n  margin-bottom: 24px;\r\n`;\r\n\r\nconst ArrowButton = styled.button`\r\n  background: #e9ecef;\r\n  border: 1px solid #dee2e6;\r\n  border-radius: 6px;\r\n  width: 32px;\r\n  height: 32px;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  cursor: pointer;\r\n  font-size: 14px;\r\n  \r\n  &:hover {\r\n    background: #dee2e6;\r\n  }\r\n  \r\n  &:disabled {\r\n    opacity: 0.5;\r\n    cursor: not-allowed;\r\n  }\r\n`;\r\n\r\nconst SentenceGrid = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(auto-fill, minmax(300px, 1fr));\r\n  gap: 16px;\r\n  flex: 1;\r\n`;\r\n\r\nconst EmptyState = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 300px;\r\n  color: #6c757d;\r\n  font-size: 16px;\r\n`;\r\n\r\nconst LoadingState = styled.div`\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  height: 300px;\r\n  color: #6c757d;\r\n  font-size: 16px;\r\n`;\r\n\r\ninterface SentenceWithMeta extends SentenceVaultItem {\r\n  persona_name?: string;\r\n  thread_type?: string;\r\n  is_pinned?: boolean;\r\n}\r\n\r\nconst SentenceVaultView: React.FC<SentenceVaultViewProps> = ({\r\n  onNavigateToPersona,\r\n  onNavigateToThread\r\n}) => {\r\n  const [sentences, setSentences] = useState<SentenceWithMeta[]>([]);\r\n  const [loading, setLoading] = useState(true);\r\n  const [currentFilter, setCurrentFilter] = useState('전체');\r\n  const [isDropdownOpen, setIsDropdownOpen] = useState(false);\r\n  const [confirmModal, setConfirmModal] = useState<{\r\n    isOpen: boolean;\r\n    type: 'interact' | 'navigate' | 'pin' | 'delete';\r\n    sentence: SentenceWithMeta | null;\r\n  }>({\r\n    isOpen: false,\r\n    type: 'interact',\r\n    sentence: null\r\n  });\r\n\r\n  // 더미 페르소나 데이터 (실제로는 백엔드에서 가져와야 함)\r\n  const personas = {\r\n    'persona1': '김철수',\r\n    'persona2': '이영희',\r\n    'persona3': '박민수',\r\n    'verbalization': '언어화'\r\n  };\r\n\r\n  // 필터 옵션 생성\r\n  const getFilterOptions = () => {\r\n    const baseOptions = ['전체', '언어화', '편지'];\r\n    const personaOptions = Object.values(personas).filter(name => name !== '언어화');\r\n    return [...baseOptions, ...personaOptions];\r\n  };\r\n\r\n  const filterOptions = getFilterOptions();\r\n  const currentFilterIndex = filterOptions.indexOf(currentFilter);\r\n\r\n  // 데이터 로딩\r\n  useEffect(() => {\r\n    loadSentences();\r\n  }, []);\r\n\r\n  const loadSentences = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const data = await sentenceApi.getVaultSentences();\r\n      \r\n      // 메타데이터 추가 (실제로는 백엔드에서 제공되어야 함)\r\n      const sentencesWithMeta: SentenceWithMeta[] = data.map(sentence => ({\r\n        ...sentence,\r\n        persona_name: getPersonaNameFromMetadata(sentence),\r\n        thread_type: getThreadTypeFromMetadata(sentence),\r\n        is_pinned: sentence.metadata?.is_pinned || false\r\n      }));\r\n      \r\n      // 고정된 항목을 맨 위로, 그 다음은 최신순으로 정렬\r\n      const sortedSentences = sentencesWithMeta.sort((a, b) => {\r\n        if (a.is_pinned && !b.is_pinned) return -1;\r\n        if (!a.is_pinned && b.is_pinned) return 1;\r\n        return new Date(b.created_at).getTime() - new Date(a.created_at).getTime();\r\n      });\r\n      \r\n      setSentences(sortedSentences);\r\n    } catch (error) {\r\n      console.error('문장 로딩 오류:', error);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // 메타데이터에서 페르소나명 추출\r\n  const getPersonaNameFromMetadata = (sentence: SentenceVaultItem): string => {\r\n    // metadata에서 persona_id 또는 thread_type을 확인\r\n    const personaId = sentence.metadata?.persona_id;\r\n    const threadType = sentence.metadata?.thread_type;\r\n    \r\n    if (threadType === 'verbalization') {\r\n      return '언어화';\r\n    }\r\n    \r\n    if (personaId && personas[personaId as keyof typeof personas]) {\r\n      return personas[personaId as keyof typeof personas];\r\n    }\r\n    \r\n    // 기본값\r\n    return '알 수 없음';\r\n  };\r\n\r\n  // 메타데이터에서 스레드 타입 추출\r\n  const getThreadTypeFromMetadata = (sentence: SentenceVaultItem): string => {\r\n    return sentence.metadata?.thread_type || 'interpretation';\r\n  };\r\n\r\n  // 필터링된 문장들\r\n  const getFilteredSentences = () => {\r\n    if (currentFilter === '전체') {\r\n      return sentences;\r\n    }\r\n    \r\n    if (currentFilter === '언어화') {\r\n      return sentences.filter(s => s.persona_name === '언어화');\r\n    }\r\n    \r\n    if (currentFilter === '편지') {\r\n      return sentences.filter(s => s.thread_type === 'letter');\r\n    }\r\n    \r\n    // 특정 페르소나 필터\r\n    return sentences.filter(s => s.persona_name === currentFilter);\r\n  };\r\n\r\n  const filteredSentences = getFilteredSentences();\r\n\r\n  // 필터 이동\r\n  const moveFilter = (direction: 'left' | 'right') => {\r\n    const newIndex = direction === 'left' \r\n      ? Math.max(0, currentFilterIndex - 1)\r\n      : Math.min(filterOptions.length - 1, currentFilterIndex + 1);\r\n    setCurrentFilter(filterOptions[newIndex]);\r\n  };\r\n\r\n  // 카드 액션 처리\r\n  const handleCardAction = (sentence: SentenceWithMeta, action: 'interact' | 'navigate' | 'pin' | 'delete') => {\r\n    setConfirmModal({\r\n      isOpen: true,\r\n      type: action,\r\n      sentence\r\n    });\r\n  };\r\n\r\n  // 모달 확인 처리\r\n  const handleConfirmAction = async () => {\r\n    const { type, sentence } = confirmModal;\r\n    if (!sentence) return;\r\n\r\n    try {\r\n      switch (type) {\r\n        case 'interact':\r\n          // 상호작용 하기 - 해당 페르소나의 문장 모드로 이동\r\n          if (sentence.metadata?.persona_id) {\r\n            onNavigateToPersona(sentence.metadata.persona_id, 'sentence');\r\n          }\r\n          break;\r\n          \r\n        case 'navigate':\r\n          // 해당 기록으로 이동 - 해당 스레드로 이동\r\n          if (sentence.metadata?.thread_id && sentence.thread_type) {\r\n            onNavigateToThread(sentence.metadata.thread_id, sentence.thread_type);\r\n          }\r\n          break;\r\n          \r\n        case 'pin':\r\n          // 고정/해제\r\n          const updatedSentences = sentences.map(s => \r\n            s.id === sentence.id \r\n              ? { ...s, is_pinned: !s.is_pinned }\r\n              : s\r\n          );\r\n          setSentences(updatedSentences);\r\n          // TODO: 백엔드에 고정 상태 저장\r\n          break;\r\n          \r\n        case 'delete':\r\n          // 삭제\r\n          await sentenceApi.deleteVaultSentence(sentence.id);\r\n          setSentences(sentences.filter(s => s.id !== sentence.id));\r\n          break;\r\n      }\r\n    } catch (error) {\r\n      console.error('액션 처리 오류:', error);\r\n    }\r\n\r\n    setConfirmModal({ isOpen: false, type: 'interact', sentence: null });\r\n  };\r\n\r\n  const getConfirmMessage = () => {\r\n    const { type, sentence } = confirmModal;\r\n    if (!sentence) return '';\r\n\r\n    switch (type) {\r\n      case 'interact':\r\n        return `\"${sentence.persona_name}\"와 상호작용을 시작하시겠습니까?`;\r\n      case 'navigate':\r\n        return `해당 기록으로 이동하시겠습니까?`;\r\n      case 'pin':\r\n        return sentence.is_pinned \r\n          ? `이 문장의 고정을 해제하시겠습니까?`\r\n          : `이 문장을 맨 위에 고정하시겠습니까?`;\r\n      case 'delete':\r\n        return `이 문장을 삭제하시겠습니까? 이 작업은 되돌릴 수 없습니다.`;\r\n      default:\r\n        return '';\r\n    }\r\n  };\r\n\r\n  if (loading) {\r\n    return (\r\n      <Container>\r\n        <LoadingState>\r\n          문장을 불러오는 중...\r\n        </LoadingState>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container>\r\n      <FilterContainer>\r\n        <ArrowButton\r\n          onClick={() => moveFilter('left')}\r\n          disabled={currentFilterIndex === 0}\r\n        >\r\n          ←\r\n        </ArrowButton>\r\n        \r\n        <SentenceFilterDropdown\r\n          currentFilter={currentFilter}\r\n          options={filterOptions}\r\n          isOpen={isDropdownOpen}\r\n          onToggle={() => setIsDropdownOpen(!isDropdownOpen)}\r\n                     onSelect={(option: string) => {\r\n             setCurrentFilter(option);\r\n             setIsDropdownOpen(false);\r\n           }}\r\n        />\r\n        \r\n        <ArrowButton\r\n          onClick={() => moveFilter('right')}\r\n          disabled={currentFilterIndex === filterOptions.length - 1}\r\n        >\r\n          →\r\n        </ArrowButton>\r\n      </FilterContainer>\r\n\r\n      {filteredSentences.length === 0 ? (\r\n        <EmptyState>\r\n          <div>📝</div>\r\n          <div>저장된 문장이 없습니다</div>\r\n          <div style={{ fontSize: '14px', marginTop: '8px' }}>\r\n            대화 중에 문장을 선택하고 \"저장고에 저장\" 버튼을 눌러보세요\r\n          </div>\r\n        </EmptyState>\r\n      ) : (\r\n        <SentenceGrid>\r\n          {filteredSentences.map(sentence => (\r\n            <SentenceCard\r\n              key={sentence.id}\r\n              sentence={sentence}\r\n              personaName={sentence.persona_name || '알 수 없음'}\r\n              isPinned={sentence.is_pinned || false}\r\n              onAction={(action) => handleCardAction(sentence, action)}\r\n            />\r\n          ))}\r\n        </SentenceGrid>\r\n      )}\r\n\r\n      <ConfirmationModal\r\n        isOpen={confirmModal.isOpen}\r\n        title={confirmModal.type === 'delete' ? '문장 삭제' : '확인'}\r\n        message={getConfirmMessage()}\r\n        onConfirm={handleConfirmAction}\r\n        onCancel={() => setConfirmModal({ isOpen: false, type: 'interact', sentence: null })}\r\n        confirmText={confirmModal.type === 'delete' ? '삭제' : '확인'}\r\n        cancelText=\"취소\"\r\n        isDangerous={confirmModal.type === 'delete'}\r\n      />\r\n    </Container>\r\n  );\r\n};\r\n\r\nexport default SentenceVaultView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}