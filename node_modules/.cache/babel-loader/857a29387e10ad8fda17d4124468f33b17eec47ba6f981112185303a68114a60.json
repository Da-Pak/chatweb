{"ast":null,"code":"import{API_BASE_URL}from'../../shared/api/chatApi';// 메모 저장고 관련 타입들\nclass SentenceApi{// 저장고 관련 API\nasync saveSentencesToVault(request){try{console.log('=== 저장고 저장 시작 (하이라이트/메모 통합) ===');console.log('요청 데이터:',JSON.stringify(request,null,2));console.log('API URL:',\"\".concat(API_BASE_URL,\"/vault/sentences\"));const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/sentences\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});console.log('HTTP 응답 상태:',response.status);console.log('HTTP 응답 OK:',response.ok);if(!response.ok){let errorData;try{errorData=await response.json();}catch(e){const errorText=await response.text();console.error('JSON 파싱 실패, 원시 오류 응답:',errorText);throw new Error(\"\\uC11C\\uBC84 \\uC624\\uB958 (\".concat(response.status,\"): \").concat(errorText));}console.error('서버 오류 응답:',errorData);throw new Error(errorData.detail||\"\\uC11C\\uBC84 \\uC624\\uB958 (\".concat(response.status,\")\"));}const result=await response.json();console.log('성공 응답:',JSON.stringify(result,null,2));console.log('=== 저장고 저장 완료 ===');return result;}catch(error){console.error('저장고 저장 오류:',error);if(error.name==='TypeError'&&error.message.includes('fetch')){throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');}throw error;}}async getVaultSentences(){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/sentences\"));if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'저장고 조회 실패');}return await response.json();}catch(error){console.error('저장고 조회 오류:',error);throw error;}}async deleteVaultSentence(sentenceId){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/sentences/\").concat(sentenceId),{method:'DELETE'});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'문장 삭제 실패');}return await response.json();}catch(error){console.error('문장 삭제 오류:',error);throw error;}}async restoreVaultSentence(vaultSentenceId,request){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/sentences/\").concat(vaultSentenceId,\"/restore\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'문장 복원 실패');}return await response.json();}catch(error){console.error('문장 복원 오류:',error);throw error;}}async updateVaultSentence(sentenceId,request){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/sentences/\").concat(sentenceId),{method:'PUT',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'문장 업데이트 실패');}return await response.json();}catch(error){console.error('문장 업데이트 오류:',error);throw error;}}// 메모 관련 API\nasync createOrUpdateMemo(request){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/memos\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'메모 저장 실패');}return await response.json();}catch(error){console.error('메모 저장 오류:',error);throw error;}}async getMemo(sentenceId){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/memos/\").concat(sentenceId));if(response.status===404){return null;}if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'메모 조회 실패');}const result=await response.json();return result||null;}catch(error){console.error('메모 조회 오류:',error);throw error;}}async deleteMemo(sentenceId){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/memos/\").concat(sentenceId),{method:'DELETE'});// 404는 이미 삭제된 것으로 간주하여 성공으로 처리\nif(response.status===404){return{success:true,message:'메모가 이미 삭제되었습니다'};}if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'메모 삭제 실패');}return await response.json();}catch(error){console.error('메모 삭제 오류:',error);throw error;}}// 하이라이트 관련 API\nasync createHighlight(request){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/highlights\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'하이라이트 저장 실패');}return await response.json();}catch(error){console.error('하이라이트 저장 오류:',error);throw error;}}async deleteHighlight(sentenceId){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/highlights/\").concat(sentenceId),{method:'DELETE'});// 404는 이미 삭제된 것으로 간주하여 성공으로 처리\nif(response.status===404){return{success:true,message:'하이라이트가 이미 삭제되었습니다'};}if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'하이라이트 삭제 실패');}return await response.json();}catch(error){console.error('하이라이트 삭제 오류:',error);throw error;}}// 스레드별 메모와 하이라이트 데이터 불러오기\nasync getThreadSentenceData(threadId){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/threads/\").concat(threadId,\"/sentence-data\"));if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'스레드 문장 데이터 조회 실패');}const result=await response.json();return result||{memos:{},highlights:[]};}catch(error){console.error('스레드 문장 데이터 조회 오류:',error);// 실패 시 빈 데이터 반환\nreturn{memos:{},highlights:[]};}}// 전체 메모 조회\nasync getAllMemos(){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/memos\"));if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'전체 메모 조회 실패');}return await response.json();}catch(error){console.error('전체 메모 조회 오류:',error);return{};}}// 전체 하이라이트 조회 (스레드별로 그룹화됨)\nasync getAllHighlights(){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/highlights\"));if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'전체 하이라이트 조회 실패');}return await response.json();}catch(error){console.error('전체 하이라이트 조회 오류:',error);return{};}}// 특정 스레드의 하이라이트 조회\nasync getThreadHighlights(threadId){try{const response=await fetch(\"\".concat(API_BASE_URL,\"/highlights/thread/\").concat(threadId));if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'스레드 하이라이트 조회 실패');}const result=await response.json();return result.highlights||[];}catch(error){console.error('스레드 하이라이트 조회 오류:',error);return[];}}// 개발용 데이터 리셋\nasync resetDevData(){const response=await fetch(\"\".concat(API_BASE_URL,\"/dev/reset\"),{method:'POST',headers:{'Content-Type':'application/json'}});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'데이터 리셋 실패');}return response.json();}// 메모 저장고 관련 API 함수들\nasync saveMemoToVault(request){const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/memos\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(request)});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'메모 저장고 저장 실패');}return response.json();}async getVaultMemos(){const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/memos\"));if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'메모 저장고 조회 실패');}return response.json();}async deleteVaultMemo(memoId){const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/memos/\").concat(memoId),{method:'DELETE'});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'메모 저장고 삭제 실패');}return response.json();}async interactWithVaultMemo(memoId){const response=await fetch(\"\".concat(API_BASE_URL,\"/vault/memos/\").concat(memoId,\"/interact\"),{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify({})});if(!response.ok){const errorData=await response.json();throw new Error(errorData.detail||'메모 상호작용 실패');}return response.json();}}export const sentenceApi=new SentenceApi();","map":{"version":3,"names":["API_BASE_URL","SentenceApi","saveSentencesToVault","request","console","log","JSON","stringify","concat","response","fetch","method","headers","body","status","ok","errorData","json","e","errorText","text","error","Error","detail","result","name","message","includes","getVaultSentences","deleteVaultSentence","sentenceId","restoreVaultSentence","vaultSentenceId","updateVaultSentence","createOrUpdateMemo","getMemo","deleteMemo","success","createHighlight","deleteHighlight","getThreadSentenceData","threadId","memos","highlights","getAllMemos","getAllHighlights","getThreadHighlights","resetDevData","saveMemoToVault","getVaultMemos","deleteVaultMemo","memoId","interactWithVaultMemo","sentenceApi"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/api/sentenceApi.ts"],"sourcesContent":["import { API_BASE_URL } from '../../shared/api/chatApi';\n\nexport interface SentenceVaultItem {\n  id: string;\n  sentence: string;\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;  // 원본 스레드 ID\n  source_thread_type?: string;  // 원본 스레드 타입\n  source_sentence_id?: string;  // 원본 문장 ID\n  created_at: string;\n  tags: string[];\n  metadata?: Record<string, any>;\n  \n  // 통합된 문장 상태 정보\n  is_highlighted: boolean;  // 하이라이트 여부\n  highlight_color?: string;  // 하이라이트 색상\n  memo_content?: string;  // 메모 내용\n  is_pinned: boolean;  // 고정 여부\n}\n\nexport interface SentenceVaultRequest {\n  sentences: string[];\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  source_sentence_ids?: string[];  // 원본 문장 ID들\n  tags?: string[];\n  \n  // 각 문장별 상태 정보 (sentences와 동일한 순서)\n  highlight_states?: boolean[];  // 하이라이트 여부\n  highlight_colors?: (string | null)[];  // 하이라이트 색상\n  memo_contents?: (string | null)[];  // 메모 내용\n}\n\nexport interface SentenceVaultResponse {\n  success: boolean;\n  message: string;\n  saved_items: SentenceVaultItem[];\n}\n\nexport interface VaultRestoreRequest {\n  thread_id: string;\n  sentence_id: string;\n}\n\nexport interface VaultRestoreResponse {\n  success: boolean;\n  message: string;\n  restored_highlight: boolean;\n  restored_memo: boolean;\n  highlight_color?: string;\n  memo_content?: string;\n}\n\nexport interface VaultUpdateRequest {\n  is_highlighted?: boolean;\n  highlight_color?: string;\n  memo_content?: string;\n  is_pinned?: boolean;\n  tags?: string[];\n}\n\nexport interface VaultUpdateResponse {\n  success: boolean;\n  message: string;\n  updated_item: SentenceVaultItem;\n}\n\nexport interface SentenceMemo {\n  id: string;\n  sentence_id: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SentenceMemoRequest {\n  sentence_id: string;\n  thread_id?: string;\n  thread_type?: string;\n  content: string;\n  sentence_content?: string;  // 메모 저장고 저장을 위한 문장 내용\n  source_message_id?: string;  // 메모 저장고 저장을 위한 메시지 ID\n}\n\nexport interface SentenceMemoResponse {\n  success: boolean;\n  message: string;\n  memo?: SentenceMemo;\n}\n\nexport interface SentenceHighlight {\n  id: string;\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n  created_at: string;\n}\n\nexport interface SentenceHighlightRequest {\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n}\n\nexport interface SentenceHighlightResponse {\n  success: boolean;\n  message: string;\n  highlight?: SentenceHighlight;\n}\n\nexport interface ThreadSentenceData {\n  memos: Record<string, string>;\n  highlights: string[];\n}\n\n// 메모 저장고 관련 타입들\nexport interface MemoVaultItem {\n  id: string;\n  memo_content: string;  // 사용자가 삽입한 메모 내용\n  sentence_content: string;  // 원본 문장 내용\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  source_sentence_id: string;\n  created_at: string;\n  tags: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface MemoVaultRequest {\n  memo_content: string;  // 사용자가 삽입한 메모\n  sentence_content: string;  // 원본 문장\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  source_sentence_id: string;\n  tags?: string[];\n}\n\nexport interface MemoVaultResponse {\n  success: boolean;\n  message: string;\n  saved_item?: MemoVaultItem;\n}\n\nexport interface MemoVaultInteractionResponse {\n  success: boolean;\n  message: string;\n  interaction_message: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  memo_item: MemoVaultItem;\n}\n\nclass SentenceApi {\n  // 저장고 관련 API\n  async saveSentencesToVault(request: SentenceVaultRequest): Promise<SentenceVaultResponse> {\n    try {\n      console.log('=== 저장고 저장 시작 (하이라이트/메모 통합) ===');\n      console.log('요청 데이터:', JSON.stringify(request, null, 2));\n      console.log('API URL:', `${API_BASE_URL}/vault/sentences`);\n      \n      const response = await fetch(`${API_BASE_URL}/vault/sentences`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      console.log('HTTP 응답 상태:', response.status);\n      console.log('HTTP 응답 OK:', response.ok);\n\n      if (!response.ok) {\n        let errorData;\n        try {\n          errorData = await response.json();\n        } catch (e) {\n          const errorText = await response.text();\n          console.error('JSON 파싱 실패, 원시 오류 응답:', errorText);\n          throw new Error(`서버 오류 (${response.status}): ${errorText}`);\n        }\n        console.error('서버 오류 응답:', errorData);\n        throw new Error(errorData.detail || `서버 오류 (${response.status})`);\n      }\n\n      const result = await response.json();\n      console.log('성공 응답:', JSON.stringify(result, null, 2));\n      console.log('=== 저장고 저장 완료 ===');\n      return result;\n    } catch (error: any) {\n      console.error('저장고 저장 오류:', error);\n      \n      if (error.name === 'TypeError' && error.message.includes('fetch')) {\n        throw new Error('백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.');\n      }\n      \n      throw error;\n    }\n  }\n\n  async getVaultSentences(): Promise<SentenceVaultItem[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '저장고 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('저장고 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteVaultSentence(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('문장 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  async restoreVaultSentence(vaultSentenceId: string, request: VaultRestoreRequest): Promise<VaultRestoreResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${vaultSentenceId}/restore`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 복원 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('문장 복원 오류:', error);\n      throw error;\n    }\n  }\n\n  async updateVaultSentence(sentenceId: string, request: VaultUpdateRequest): Promise<VaultUpdateResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/vault/sentences/${sentenceId}`, {\n        method: 'PUT',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '문장 업데이트 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('문장 업데이트 오류:', error);\n      throw error;\n    }\n  }\n\n  // 메모 관련 API\n  async createOrUpdateMemo(request: SentenceMemoRequest): Promise<SentenceMemoResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async getMemo(sentenceId: string): Promise<SentenceMemo | null> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`);\n\n      if (response.status === 404) {\n        return null;\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 조회 실패');\n      }\n\n      const result = await response.json();\n      return result || null;\n    } catch (error) {\n      console.error('메모 조회 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteMemo(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '메모가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '메모 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('메모 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 하이라이트 관련 API\n  async createHighlight(request: SentenceHighlightRequest): Promise<SentenceHighlightResponse> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`, {\n        method: 'POST',\n        headers: {\n          'Content-Type': 'application/json',\n        },\n        body: JSON.stringify(request),\n      });\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 저장 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async deleteHighlight(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/${sentenceId}`, {\n        method: 'DELETE',\n      });\n\n      // 404는 이미 삭제된 것으로 간주하여 성공으로 처리\n      if (response.status === 404) {\n        return { success: true, message: '하이라이트가 이미 삭제되었습니다' };\n      }\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '하이라이트 삭제 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('하이라이트 삭제 오류:', error);\n      throw error;\n    }\n  }\n\n  // 스레드별 메모와 하이라이트 데이터 불러오기\n  async getThreadSentenceData(threadId: string): Promise<ThreadSentenceData> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/threads/${threadId}/sentence-data`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 문장 데이터 조회 실패');\n      }\n\n      const result = await response.json();\n      return result || { memos: {}, highlights: [] };\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 오류:', error);\n      // 실패 시 빈 데이터 반환\n      return { memos: {}, highlights: [] };\n    }\n  }\n\n  // 전체 메모 조회\n  async getAllMemos(): Promise<Record<string, string>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/memos`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 메모 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 메모 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 전체 하이라이트 조회 (스레드별로 그룹화됨)\n  async getAllHighlights(): Promise<Record<string, string[]>> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '전체 하이라이트 조회 실패');\n      }\n\n      return await response.json();\n    } catch (error) {\n      console.error('전체 하이라이트 조회 오류:', error);\n      return {};\n    }\n  }\n\n  // 특정 스레드의 하이라이트 조회\n  async getThreadHighlights(threadId: string): Promise<string[]> {\n    try {\n      const response = await fetch(`${API_BASE_URL}/highlights/thread/${threadId}`);\n\n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.detail || '스레드 하이라이트 조회 실패');\n      }\n\n      const result = await response.json();\n      return result.highlights || [];\n    } catch (error) {\n      console.error('스레드 하이라이트 조회 오류:', error);\n      return [];\n    }\n  }\n\n  // 개발용 데이터 리셋\n  async resetDevData(): Promise<{ success: boolean; message: string }> {\n    const response = await fetch(`${API_BASE_URL}/dev/reset`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || '데이터 리셋 실패');\n    }\n\n    return response.json();\n  }\n\n  // 메모 저장고 관련 API 함수들\n  async saveMemoToVault(request: MemoVaultRequest): Promise<MemoVaultResponse> {\n    const response = await fetch(`${API_BASE_URL}/vault/memos`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(request),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || '메모 저장고 저장 실패');\n    }\n\n    return response.json();\n  }\n\n  async getVaultMemos(): Promise<MemoVaultItem[]> {\n    const response = await fetch(`${API_BASE_URL}/vault/memos`);\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || '메모 저장고 조회 실패');\n    }\n\n    return response.json();\n  }\n\n  async deleteVaultMemo(memoId: string): Promise<{ success: boolean; message: string }> {\n    const response = await fetch(`${API_BASE_URL}/vault/memos/${memoId}`, {\n      method: 'DELETE',\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || '메모 저장고 삭제 실패');\n    }\n\n    return response.json();\n  }\n\n  async interactWithVaultMemo(memoId: string): Promise<MemoVaultInteractionResponse> {\n    const response = await fetch(`${API_BASE_URL}/vault/memos/${memoId}/interact`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify({}),\n    });\n\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.detail || '메모 상호작용 실패');\n    }\n\n    return response.json();\n  }\n}\n\nexport const sentenceApi = new SentenceApi();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}