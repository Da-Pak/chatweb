{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{API_BASE_URL}from'../api/chatApi';/**\n * 공통 API 클라이언트 - fetch 패턴 통합\n */export async function apiRequest(endpoint){let options=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};const{method='GET',body,headers={},timeout=getTimeoutForEndpoint(endpoint)}=options;// 기본 헤더 설정\nconst defaultHeaders=_objectSpread({'Content-Type':'application/json'},headers);try{// 타임아웃 설정\nconst controller=new AbortController();const timeoutId=setTimeout(()=>controller.abort(),timeout);const response=await fetch(\"\".concat(API_BASE_URL).concat(endpoint),{method,headers:defaultHeaders,body:body?JSON.stringify(body):undefined,signal:controller.signal});clearTimeout(timeoutId);// 응답 처리\nif(response.ok){const data=await response.json();return{data};}else{const errorData=await response.json().catch(()=>null);const errorMessage=(errorData===null||errorData===void 0?void 0:errorData.detail)||\"\\uC11C\\uBC84 \\uC624\\uB958 (\".concat(response.status,\")\");return{error:errorMessage};}}catch(error){var _error$message;if(error.name==='AbortError'){return{error:\"\\uC694\\uCCAD \\uC2DC\\uAC04 \\uCD08\\uACFC: \\uC11C\\uBC84 \\uC751\\uB2F5\\uC774 \\uB108\\uBB34 \\uB2A6\\uC2B5\\uB2C8\\uB2E4. (\".concat(timeout/1000,\"\\uCD08 \\uCD08\\uACFC)\")};}else if((_error$message=error.message)!==null&&_error$message!==void 0&&_error$message.includes('fetch')){return{error:'백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.'};}else{return{error:\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC624\\uB958: \".concat(error.message||error)};}}}/**\n * 엔드포인트에 따른 타임아웃 설정\n */function getTimeoutForEndpoint(endpoint){// 해석 생성 관련 API는 더 긴 타임아웃 설정\nif(endpoint.includes('/interpretations/generate')||endpoint.includes('/interpretations/generate-all')||endpoint.includes('/interpretations/generate-with-extras')){return 60000;// 60초\n}// 채팅 관련 API도 더 긴 타임아웃\nif(endpoint.includes('/chat/')||endpoint.includes('/threads/chat')||endpoint.includes('/verbalization/chat')){return 30000;// 30초\n}// 기본 타임아웃\nreturn 15000;// 15초 (기본값을 10초에서 15초로 증가)\n}/**\n * 공통 GET 요청\n */export async function apiGet(endpoint){return apiRequest(endpoint,{method:'GET'});}/**\n * 공통 POST 요청\n */export async function apiPost(endpoint,body){return apiRequest(endpoint,{method:'POST',body});}/**\n * 공통 PUT 요청\n */export async function apiPut(endpoint,body){return apiRequest(endpoint,{method:'PUT',body});}/**\n * 공통 DELETE 요청\n */export async function apiDelete(endpoint){return apiRequest(endpoint,{method:'DELETE'});}/**\n * 에러 처리 유틸리티\n */export function handleApiError(error){var _error$response,_error$response$data;let defaultMessage=arguments.length>1&&arguments[1]!==undefined?arguments[1]:'작업에 실패했습니다';if(error!==null&&error!==void 0&&(_error$response=error.response)!==null&&_error$response!==void 0&&(_error$response$data=_error$response.data)!==null&&_error$response$data!==void 0&&_error$response$data.detail){return error.response.data.detail;}if(error!==null&&error!==void 0&&error.message){return error.message;}return defaultMessage;}/**\n * 저장고 관리를 위한 제네릭 클래스\n */export class VaultManager{constructor(baseEndpoint){this.baseEndpoint=baseEndpoint;}async getAll(){return apiGet(this.baseEndpoint);}async create(request){return apiPost(this.baseEndpoint,request);}async delete(id){return apiDelete(\"\".concat(this.baseEndpoint,\"/\").concat(id));}async update(id,request){return apiPut(\"\".concat(this.baseEndpoint,\"/\").concat(id),request);}async interact(id){let request=arguments.length>1&&arguments[1]!==undefined?arguments[1]:{};return apiPost(\"\".concat(this.baseEndpoint,\"/\").concat(id,\"/interact\"),request);}}/**\n * 통합 채팅 함수\n */export async function universalChat(request){const{personaId,message,contextType,contextContent,threadId,conversationId}=request;// 채팅 타입에 따른 엔드포인트 결정\nif(contextType==='verbalization'){return apiPost('/verbalization/chat',{user_message:message,thread_id:threadId});}else if(threadId){return apiPost('/threads/chat',{thread_id:threadId,user_message:message});}else if(contextType&&contextContent){return apiPost('/chat/with-context',{persona_id:personaId,user_message:message,context_type:contextType,context_content:contextContent,thread_id:threadId});}else if(conversationId){return apiPost('/chat/continue',{persona_id:personaId,user_message:message,conversation_id:conversationId});}else{return apiPost('/chat/initial',{content:message});}}","map":{"version":3,"names":["API_BASE_URL","apiRequest","endpoint","options","arguments","length","undefined","method","body","headers","timeout","getTimeoutForEndpoint","defaultHeaders","_objectSpread","controller","AbortController","timeoutId","setTimeout","abort","response","fetch","concat","JSON","stringify","signal","clearTimeout","ok","data","json","errorData","catch","errorMessage","detail","status","error","_error$message","name","message","includes","apiGet","apiPost","apiPut","apiDelete","handleApiError","_error$response","_error$response$data","defaultMessage","VaultManager","constructor","baseEndpoint","getAll","create","request","delete","id","update","interact","universalChat","personaId","contextType","contextContent","threadId","conversationId","user_message","thread_id","persona_id","context_type","context_content","conversation_id","content"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/shared/utils/apiUtils.ts"],"sourcesContent":["import { API_BASE_URL } from '../api/chatApi';\n\nexport interface ApiRequestOptions {\n  method?: 'GET' | 'POST' | 'PUT' | 'DELETE';\n  body?: any;\n  headers?: Record<string, string>;\n  timeout?: number;\n}\n\nexport interface ApiResponse<T> {\n  data?: T;\n  error?: string;\n}\n\n/**\n * 공통 API 클라이언트 - fetch 패턴 통합\n */\nexport async function apiRequest<T>(\n  endpoint: string, \n  options: ApiRequestOptions = {}\n): Promise<ApiResponse<T>> {\n  const {\n    method = 'GET',\n    body,\n    headers = {},\n    timeout = getTimeoutForEndpoint(endpoint)\n  } = options;\n\n  // 기본 헤더 설정\n  const defaultHeaders: Record<string, string> = {\n    'Content-Type': 'application/json',\n    ...headers\n  };\n\n  try {\n    // 타임아웃 설정\n    const controller = new AbortController();\n    const timeoutId = setTimeout(() => controller.abort(), timeout);\n\n    const response = await fetch(`${API_BASE_URL}${endpoint}`, {\n      method,\n      headers: defaultHeaders,\n      body: body ? JSON.stringify(body) : undefined,\n      signal: controller.signal,\n    });\n\n    clearTimeout(timeoutId);\n\n    // 응답 처리\n    if (response.ok) {\n      const data = await response.json();\n      return { data };\n    } else {\n      const errorData = await response.json().catch(() => null);\n      const errorMessage = errorData?.detail || `서버 오류 (${response.status})`;\n      return { error: errorMessage };\n    }\n\n  } catch (error: any) {\n    if (error.name === 'AbortError') {\n      return { error: `요청 시간 초과: 서버 응답이 너무 늦습니다. (${timeout/1000}초 초과)` };\n    } else if (error.message?.includes('fetch')) {\n      return { error: '백엔드 서버에 연결할 수 없습니다. 서버가 실행 중인지 확인해주세요.' };\n    } else {\n      return { error: `네트워크 오류: ${error.message || error}` };\n    }\n  }\n}\n\n/**\n * 엔드포인트에 따른 타임아웃 설정\n */\nfunction getTimeoutForEndpoint(endpoint: string): number {\n  // 해석 생성 관련 API는 더 긴 타임아웃 설정\n  if (endpoint.includes('/interpretations/generate') || \n      endpoint.includes('/interpretations/generate-all') ||\n      endpoint.includes('/interpretations/generate-with-extras')) {\n    return 60000; // 60초\n  }\n  \n  // 채팅 관련 API도 더 긴 타임아웃\n  if (endpoint.includes('/chat/') || \n      endpoint.includes('/threads/chat') ||\n      endpoint.includes('/verbalization/chat')) {\n    return 30000; // 30초\n  }\n  \n  // 기본 타임아웃\n  return 15000; // 15초 (기본값을 10초에서 15초로 증가)\n}\n\n/**\n * 공통 GET 요청\n */\nexport async function apiGet<T>(endpoint: string): Promise<ApiResponse<T>> {\n  return apiRequest<T>(endpoint, { method: 'GET' });\n}\n\n/**\n * 공통 POST 요청\n */\nexport async function apiPost<T>(endpoint: string, body?: any): Promise<ApiResponse<T>> {\n  return apiRequest<T>(endpoint, { method: 'POST', body });\n}\n\n/**\n * 공통 PUT 요청\n */\nexport async function apiPut<T>(endpoint: string, body?: any): Promise<ApiResponse<T>> {\n  return apiRequest<T>(endpoint, { method: 'PUT', body });\n}\n\n/**\n * 공통 DELETE 요청\n */\nexport async function apiDelete<T>(endpoint: string): Promise<ApiResponse<T>> {\n  return apiRequest<T>(endpoint, { method: 'DELETE' });\n}\n\n/**\n * 에러 처리 유틸리티\n */\nexport function handleApiError(error: any, defaultMessage: string = '작업에 실패했습니다'): string {\n  if (error?.response?.data?.detail) {\n    return error.response.data.detail;\n  }\n  if (error?.message) {\n    return error.message;\n  }\n  return defaultMessage;\n}\n\n/**\n * 저장고 관리를 위한 제네릭 클래스\n */\nexport class VaultManager<T, CreateRequest, UpdateRequest = Partial<CreateRequest>> {\n  constructor(private baseEndpoint: string) {}\n\n  async getAll(): Promise<ApiResponse<T[]>> {\n    return apiGet<T[]>(this.baseEndpoint);\n  }\n\n  async create(request: CreateRequest): Promise<ApiResponse<{ success: boolean; message: string; saved_item?: T }>> {\n    return apiPost(this.baseEndpoint, request);\n  }\n\n  async delete(id: string): Promise<ApiResponse<{ success: boolean; message: string }>> {\n    return apiDelete(`${this.baseEndpoint}/${id}`);\n  }\n\n  async update(id: string, request: UpdateRequest): Promise<ApiResponse<{ success: boolean; message: string; updated_item?: T }>> {\n    return apiPut(`${this.baseEndpoint}/${id}`, request);\n  }\n\n  async interact(id: string, request: any = {}): Promise<ApiResponse<any>> {\n    return apiPost(`${this.baseEndpoint}/${id}/interact`, request);\n  }\n}\n\n/**\n * 통합 채팅 함수\n */\nexport interface ChatRequest {\n  personaId: string;\n  message: string;\n  contextType?: 'interpretation' | 'proceed' | 'sentence' | 'verbalization';\n  contextContent?: string;\n  threadId?: string;\n  conversationId?: string;\n}\n\nexport async function universalChat(request: ChatRequest): Promise<ApiResponse<any>> {\n  const { personaId, message, contextType, contextContent, threadId, conversationId } = request;\n\n  // 채팅 타입에 따른 엔드포인트 결정\n  if (contextType === 'verbalization') {\n    return apiPost('/verbalization/chat', {\n      user_message: message,\n      thread_id: threadId\n    });\n  } else if (threadId) {\n    return apiPost('/threads/chat', {\n      thread_id: threadId,\n      user_message: message\n    });\n  } else if (contextType && contextContent) {\n    return apiPost('/chat/with-context', {\n      persona_id: personaId,\n      user_message: message,\n      context_type: contextType,\n      context_content: contextContent,\n      thread_id: threadId\n    });\n  } else if (conversationId) {\n    return apiPost('/chat/continue', {\n      persona_id: personaId,\n      user_message: message,\n      conversation_id: conversationId\n    });\n  } else {\n    return apiPost('/chat/initial', { content: message });\n  }\n} "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}