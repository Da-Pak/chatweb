{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\SentenceView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.$show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst SentenceView = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread,\n  onRefreshThreads\n}) => {\n  _s();\n  const [activeThread, setActiveThread] = useState(selectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState(threads);\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // 선택된 스레드 변경 시 처리\n  useEffect(() => {\n    if (selectedThread) {\n      console.log('선택된 스레드 변경:', selectedThread.id);\n      setActiveThread(selectedThread);\n\n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [selectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async threadId => {\n    try {\n      console.log('=== 문장 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n\n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n\n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      console.log('=== 문장 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [activeThread === null || activeThread === void 0 ? void 0 : activeThread.messages]);\n  const handleSendMessage = async message => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = activeThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setActiveThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setActiveThread(currentThread);\n\n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onRefreshThreads === null || onRefreshThreads === void 0 ? void 0 : onRefreshThreads();\n      }\n    }\n\n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    setActiveThread(updatedThread);\n\n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n      if (response.data && response.data.success) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant',\n          content: response.data.new_response.content,\n          timestamp: response.data.new_response.timestamp,\n          persona_id: response.data.new_response.persona_id || personaId,\n          persona_name: response.data.new_response.persona_name || personaName\n        };\n        const finalUpdatedThread = {\n          ...response.data.thread,\n          messages: [...response.data.thread.messages, assistantMessage]\n        };\n        setActiveThread(finalUpdatedThread);\n\n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === currentThread.id ? finalUpdatedThread : t);\n        setLocalThreads(updatedThreads);\n        onRefreshThreads === null || onRefreshThreads === void 0 ? void 0 : onRefreshThreads();\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (!(activeThread !== null && activeThread !== void 0 && activeThread.id)) {\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n    try {\n      var _response$data;\n      setIsLoading(true);\n\n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(activeThread.id, messageIndex, newContent);\n      if ((_response$data = response.data) !== null && _response$data !== void 0 && _response$data.success && response.data.updated_thread) {\n        // 스레드 업데이트\n        setActiveThread(response.data.updated_thread);\n\n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => t.id === activeThread.id ? response.data.updated_thread : t);\n        setLocalThreads(updatedThreads);\n        onRefreshThreads === null || onRefreshThreads === void 0 ? void 0 : onRefreshThreads();\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp,, sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (activeThread !== null && activeThread !== void 0 && activeThread.messages) {\n      const message = activeThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    try {\n      // 기존 메모가 있는지 확인하여 업데이트/생성 구분\n      const existingMemo = memos[sentenceId];\n\n      // 백엔드 API 호출로 실제 저장 (백엔드 자동 저장을 위한 추가 정보 포함)\n      await sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        thread_id: activeThread === null || activeThread === void 0 ? void 0 : activeThread.id,\n        thread_type: 'sentence',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `sentence_${personaId}`,\n        // 백엔드 자동 저장을 위한 추가 정보\n        persona_id: personaId,\n        tags: ['sentence', ...(personaId ? [personaId] : [])],\n        source_conversation_id: activeThread === null || activeThread === void 0 ? void 0 : activeThread.id,\n        source_thread_id: activeThread === null || activeThread === void 0 ? void 0 : activeThread.id,\n        // 기존 메모 여부 표시\n        is_update: !!existingMemo\n      });\n\n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error;\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n\n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n\n      // 하이라이트도 제거\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 새로운 통합된 메뉴 액션 훅 사용\n  const sentenceMenuActions = useSentenceMenu({\n    personaId: personaId || '',\n    threadType: 'sentence',\n    selectedThread: activeThread,\n    memos,\n    highlightedSentences,\n    setMemos,\n    setHighlightedSentences\n  });\n\n  // 액션 핸들러들\n  const handleSunAction = async messageContent => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n  const handlePersonAction = async messageContent => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async messageContent => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      if (response.data) {\n        // 스레드 새로고침\n        onRefreshThreads === null || onRefreshThreads === void 0 ? void 0 : onRefreshThreads();\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n    try {\n      const threadsResponse = await chatApi.getPersonaThreads(personaId);\n      if (threadsResponse.data) {\n        const updatedThreads = threadsResponse.data;\n        setLocalThreads(updatedThreads);\n        onRefreshThreads === null || onRefreshThreads === void 0 ? void 0 : onRefreshThreads();\n\n        // 새로 생성된 문장 스레드 선택\n        const newSentenceThread = updatedThreads.filter(t => t.thread_type === 'sentence').sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n        if (newSentenceThread && (!activeThread || newSentenceThread.id !== activeThread.id)) {\n          setActiveThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp,, sentenceIndex] = id.split('_');\n      const message = activeThread === null || activeThread === void 0 ? void 0 : activeThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates = [];\n          const highlightColors = [];\n          const memoContents = [];\n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `sentence_${personaId}`,\n            source_conversation_id: activeThread === null || activeThread === void 0 ? void 0 : activeThread.id,\n            source_thread_id: activeThread === null || activeThread === void 0 ? void 0 : activeThread.id,\n            source_thread_type: 'sentence',\n            source_sentence_ids: selectedIds,\n            tags: ['sentence', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n\n          // 백엔드에 하이라이트도 저장 (기존 로직 유지)\n          if (activeThread !== null && activeThread !== void 0 && activeThread.id) {\n            for (const sentenceId of selectedIds) {\n              await sentenceApi.createHighlight({\n                sentence_id: sentenceId,\n                thread_id: activeThread.id,\n                thread_type: 'sentence'\n              });\n            }\n          }\n\n          // 성공 시 로컬 상태 업데이트\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        // 새로운 통합된 메뉴 액션 사용\n        await sentenceMenuActions.handleAddMemo(selectedIds, selectedTexts);\n        break;\n      case 'highlight':\n        if (selectedIds.length > 0 && activeThread !== null && activeThread !== void 0 && activeThread.id) {\n          try {\n            console.log('하이라이트 토글 시작:', selectedIds);\n\n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n\n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n\n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n\n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n\n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: activeThread.id,\n                    thread_type: 'sentence'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      $show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 690,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [!activeThread || activeThread.messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCDD\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 698,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 699,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 700,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 697,\n          columnNumber: 13\n        }, this) : activeThread.messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#4caf50',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `sentence_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 723,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#4caf50\",\n          customMessage: \"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 758,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 695,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: handleSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 문장에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: (activeThread === null || activeThread === void 0 ? void 0 : activeThread.content) || sentenceContent,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: activeThread === null || activeThread === void 0 ? void 0 : activeThread.messages,\n          onRefreshThreads: handleRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 767,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 766,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 694,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: sentenceContent\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 785,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 689,\n    columnNumber: 5\n  }, this);\n};\n_s(SentenceView, \"8Nn5I/HrBOQ7uVoq6EFj7pYrvpI=\", false, function () {\n  return [useSentenceMenu];\n});\n_c7 = SentenceView;\nexport default SentenceView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"SentenceView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","sentenceApi","useSentenceMenu","jsxDEV","_jsxDEV","Container","div","_c","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","$show","_c6","SentenceView","personaId","personaName","sentenceContent","threads","onSwitchToMode","onGenerateNewInterpretation","selectedThread","onRefreshThreads","_s","activeThread","setActiveThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","sentenceThreads","filter","thread","thread_type","console","log","id","loadThreadSentenceData","threadId","data","getThreadSentenceData","Object","keys","length","highlights","error","current","scrollTop","scrollHeight","messages","handleSendMessage","message","currentThread","sentenceThread","defaultThread","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","response","chatWithThread","thread_id","user_message","success","assistantMessage","new_response","finalUpdatedThread","map","t","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","_response$data","editThreadMessage","updated_thread","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","sentenceIndex","split","find","m","sentences","s","trim","parseInt","existingMemo","createOrUpdateMemo","sentence_id","sentence_content","source_message_id","tags","source_conversation_id","source_thread_id","is_update","handleDeleteMemo","deleteMemo","newMemos","sentenceMenuActions","threadType","handleSunAction","saveCurrentAsInterpretation","handlePersonAction","saveCurrentAsProceed","handleDocumentAction","saveCurrentAsSentence","handleRefreshThreads","threadsResponse","getPersonaThreads","newSentenceThread","sort","a","b","getTime","handleMenuAction","action","selectedIds","Array","from","selectedTexts","formattedText","join","insertText","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","push","saveSentencesToVault","source_thread_type","source_sentence_ids","highlight_states","highlight_colors","memo_contents","createHighlight","handleAddMemo","currentlyHighlighted","notHighlighted","forEach","deleteHighlight","warn","handleToggleSentenceMode","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","show","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/SentenceView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { useSentenceMenu } from '../../shared/hooks/useSentenceMenu';\n\ninterface SentenceViewProps {\n  personaId: string;\n  personaName: string;\n  sentenceContent: string;\n  threads: TrainingThread[];\n  onSwitchToMode: (mode: 'interpretation' | 'proceed' | 'sentence') => void;\n  onGenerateNewInterpretation: () => void;\n  selectedThread: TrainingThread | null;\n  onRefreshThreads?: () => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ $show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.$show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst SentenceView: React.FC<SentenceViewProps> = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread,\n  onRefreshThreads,\n}) => {\n  const [activeThread, setActiveThread] = useState<TrainingThread | null>(selectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // 선택된 스레드 변경 시 처리\n  useEffect(() => {\n    if (selectedThread) {\n      console.log('선택된 스레드 변경:', selectedThread.id);\n      setActiveThread(selectedThread);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(selectedThread.id);\n    }\n  }, [selectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (백엔드 API만 사용)\n  const loadThreadSentenceData = async (threadId: string) => {\n    try {\n      console.log('=== 문장 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n      \n      // 백엔드에서 스레드 데이터 로딩\n      const data = await sentenceApi.getThreadSentenceData(threadId);\n      \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n      \n      // 백엔드 데이터로 상태 설정\n      setMemos(data.memos);\n      setHighlightedSentences(new Set(data.highlights));\n      \n      console.log('=== 문장 스레드 데이터 로딩 완료 ===');\n    } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n      // 실패 시 빈 상태로 초기화\n      setMemos({});\n      setHighlightedSentences(new Set());\n    }\n  };\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [activeThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = activeThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setActiveThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setActiveThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onRefreshThreads?.();\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setActiveThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.success) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.new_response.content,\n          timestamp: response.data.new_response.timestamp,\n          persona_id: response.data.new_response.persona_id || personaId,\n          persona_name: response.data.new_response.persona_name || personaName\n        };\n\n        const finalUpdatedThread = {\n          ...response.data.thread,\n          messages: [...response.data.thread.messages, assistantMessage],\n        };\n        \n        setActiveThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onRefreshThreads?.();\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (!activeThread?.id) {\n      showCopyToast('스레드가 선택되지 않았습니다');\n      return false;\n    }\n\n    try {\n      setIsLoading(true);\n      \n      // 백엔드 API 호출\n      const response = await chatApi.editThreadMessage(activeThread.id, messageIndex, newContent);\n      \n      if (response.data?.success && response.data.updated_thread) {\n        // 스레드 업데이트\n        setActiveThread(response.data.updated_thread);\n        \n        // 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === activeThread.id ? response.data!.updated_thread! : t\n        );\n        setLocalThreads(updatedThreads);\n        onRefreshThreads?.();\n        \n    setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되고 새로운 응답이 생성되었습니다');\n        setIsLoading(false);\n    return true;\n      } else {\n        console.error('메시지 수정 실패:', response.error);\n        showCopyToast('메시지 수정에 실패했습니다');\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 오류:', error);\n      showCopyToast('메시지 수정 중 오류가 발생했습니다');\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp, , sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (activeThread?.messages) {\n      const message = activeThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    \n    try {\n      // 기존 메모가 있는지 확인하여 업데이트/생성 구분\n      const existingMemo = memos[sentenceId];\n      \n      // 백엔드 API 호출로 실제 저장 (백엔드 자동 저장을 위한 추가 정보 포함)\n      await sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        thread_id: activeThread?.id,\n        thread_type: 'sentence',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `sentence_${personaId}`,\n        // 백엔드 자동 저장을 위한 추가 정보\n        persona_id: personaId,\n        tags: ['sentence', ...(personaId ? [personaId] : [])],\n        source_conversation_id: activeThread?.id,\n        source_thread_id: activeThread?.id,\n        // 기존 메모 여부 표시\n        is_update: !!existingMemo\n      } as any);\n      \n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error;\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 백엔드 API 호출\n      await sentenceApi.deleteMemo(sentenceId);\n      \n      // 성공 시 로컬 상태 업데이트\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      \n      // 하이라이트도 제거\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 새로운 통합된 메뉴 액션 훅 사용\n  const sentenceMenuActions = useSentenceMenu({\n    personaId: personaId || '',\n    threadType: 'sentence',\n    selectedThread: activeThread,\n    memos,\n    highlightedSentences,\n    setMemos,\n    setHighlightedSentences\n  });\n\n  // 액션 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('해석 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('해석 저장 중 오류:', error);\n      showCopyToast('해석 저장에 실패했습니다');\n    }\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n\n      if (response.data) {\n        // 스레드 새로고침\n        onRefreshThreads?.();\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n          \n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onRefreshThreads?.();\n              \n              // 새로 생성된 문장 스레드 선택\n              const newSentenceThread = updatedThreads\n                .filter(t => t.thread_type === 'sentence')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newSentenceThread && (!activeThread || newSentenceThread.id !== activeThread.id)) {\n                setActiveThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, , sentenceIndex] = id.split('_');\n      const message = activeThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `sentence_${personaId}`,\n            source_conversation_id: activeThread?.id,\n            source_thread_id: activeThread?.id,\n            source_thread_type: 'sentence',\n            source_sentence_ids: selectedIds,\n            tags: ['sentence', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          // 백엔드에 하이라이트도 저장 (기존 로직 유지)\n          if (activeThread?.id) {\n            for (const sentenceId of selectedIds) {\n              await sentenceApi.createHighlight({\n                sentence_id: sentenceId,\n                thread_id: activeThread.id,\n                thread_type: 'sentence'\n              });\n            }\n          }\n          \n          // 성공 시 로컬 상태 업데이트\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          \n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        // 새로운 통합된 메뉴 액션 사용\n        await sentenceMenuActions.handleAddMemo(selectedIds, selectedTexts);\n        break;\n      \n      case 'highlight':\n        if (selectedIds.length > 0 && activeThread?.id) {\n          try {\n            console.log('하이라이트 토글 시작:', selectedIds);\n            \n            // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n            const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n            const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n            \n            console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n            console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n            \n            if (currentlyHighlighted.length > 0) {\n              // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n              \n              // 로컬 상태에서 하이라이트 제거\n              setHighlightedSentences(prev => {\n                const newSet = new Set(prev);\n                selectedIds.forEach(id => newSet.delete(id));\n                return newSet;\n              });\n              \n              // 백엔드에서 하이라이트 삭제\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.deleteHighlight(sentenceId);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 제거되었습니다');\n            } else {\n              // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n              \n              // 로컬 상태에 하이라이트 추가\n              setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n              \n              // 백엔드에 하이라이트 저장\n              for (const sentenceId of selectedIds) {\n                try {\n                  await sentenceApi.createHighlight({\n                    sentence_id: sentenceId,\n                    thread_id: activeThread.id,\n                    thread_type: 'sentence'\n                  });\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', error);\n                }\n              }\n              \n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n          } catch (error) {\n            console.error('하이라이트 토글 실패:', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          await copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast $show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!activeThread || activeThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>📝</div>\n              <div>문장에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            activeThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#4caf50',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#4caf50\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 문장에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={activeThread?.content || sentenceContent}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={activeThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={sentenceContent}\n      />\n    </Container>\n  );\n};\n\nexport default SentenceView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}