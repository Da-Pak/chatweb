{"ast":null,"code":"import { apiGet, apiPost, apiDelete, VaultManager } from '../../shared/utils/apiUtils';\n\n// 메모 저장고 관련 타입들\n\n// 저장고 매니저 인스턴스들\nconst sentenceVaultManager = new VaultManager('/vault/sentences');\nconst memoVaultManager = new VaultManager('/vault/memos');\nclass SentenceApi {\n  // === 문장 저장고 관련 API (VaultManager 사용) ===\n\n  async saveSentencesToVault(request) {\n    console.log('=== 저장고 저장 시작 (통합 API 사용) ===');\n    console.log('요청 데이터:', JSON.stringify(request, null, 2));\n    try {\n      const response = await sentenceVaultManager.create(request);\n      if (response.error) {\n        throw new Error(response.error);\n      }\n      console.log('성공 응답:', response.data);\n      console.log('=== 저장고 저장 완료 ===');\n      return response.data;\n    } catch (error) {\n      console.error('저장고 저장 오류:', error);\n      throw error;\n    }\n  }\n  async getVaultSentences() {\n    const response = await sentenceVaultManager.getAll();\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || [];\n  }\n  async deleteVaultSentence(sentenceId) {\n    const response = await sentenceVaultManager.delete(sentenceId);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || {\n      success: false,\n      message: '삭제 실패'\n    };\n  }\n  async updateVaultSentence(sentenceId, request) {\n    const response = await sentenceVaultManager.update(sentenceId, request);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data;\n  }\n  async restoreVaultSentence(vaultSentenceId, request) {\n    const response = await apiPost(`/vault/sentences/${vaultSentenceId}/restore`, request);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data;\n  }\n\n  // === 메모 관련 API (통합) ===\n\n  async createOrUpdateMemo(request) {\n    var _request$content, _request$content2, _request$related_sent;\n    console.log('=== 메모 저장 API 호출 ===');\n    console.log('요청 데이터:', {\n      sentence_id: request.sentence_id,\n      thread_id: request.thread_id,\n      thread_type: request.thread_type,\n      content: ((_request$content = request.content) === null || _request$content === void 0 ? void 0 : _request$content.substring(0, 50)) + (((_request$content2 = request.content) === null || _request$content2 === void 0 ? void 0 : _request$content2.length) > 50 ? '...' : ''),\n      has_related_sentences: (((_request$related_sent = request.related_sentence_ids) === null || _request$related_sent === void 0 ? void 0 : _request$related_sent.length) || 0) > 0\n    });\n    try {\n      var _response$data;\n      const response = await apiPost('/memos', request);\n      if (response.error) {\n        console.error('메모 저장 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      console.log('메모 저장 성공:', (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.success);\n      return response.data;\n    } catch (error) {\n      console.error('메모 저장 API 호출 실패:', error);\n      throw error;\n    }\n  }\n  async getMemo(sentenceId) {\n    const response = await apiGet(`/memos/${sentenceId}`);\n    return response.data || null;\n  }\n  async deleteMemo(sentenceId) {\n    console.log('=== 메모 삭제 API 호출 ===');\n    console.log('문장 ID:', sentenceId);\n    try {\n      var _response$data2;\n      const response = await apiDelete(`/memos/${sentenceId}`);\n      if (response.error) {\n        console.error('메모 삭제 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      console.log('메모 삭제 성공:', (_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2.success);\n      return response.data;\n    } catch (error) {\n      console.error('메모 삭제 API 호출 실패:', error);\n      throw error;\n    }\n  }\n  async getAllMemos() {\n    const response = await apiGet('/memos');\n    return response.data || {};\n  }\n\n  // === 하이라이트 관련 API (통합) ===\n\n  async createHighlight(request) {\n    console.log('=== 하이라이트 생성 API 호출 ===');\n    console.log('요청 데이터:', {\n      sentence_id: request.sentence_id,\n      thread_id: request.thread_id,\n      thread_type: request.thread_type\n    });\n    try {\n      var _response$data3;\n      const response = await apiPost('/highlights', request);\n      if (response.error) {\n        console.error('하이라이트 생성 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      console.log('하이라이트 생성 성공:', (_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : _response$data3.success);\n      return response.data;\n    } catch (error) {\n      console.error('하이라이트 생성 API 호출 실패:', error);\n      throw error;\n    }\n  }\n  async deleteHighlight(sentenceId) {\n    console.log('=== 하이라이트 삭제 API 호출 ===');\n    console.log('문장 ID:', sentenceId);\n    try {\n      var _response$data4;\n      const response = await apiDelete(`/highlights/${sentenceId}`);\n      if (response.error) {\n        console.error('하이라이트 삭제 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      console.log('하이라이트 삭제 성공:', (_response$data4 = response.data) === null || _response$data4 === void 0 ? void 0 : _response$data4.success);\n      return response.data;\n    } catch (error) {\n      console.error('하이라이트 삭제 API 호출 실패:', error);\n      throw error;\n    }\n  }\n  async getAllHighlights() {\n    const response = await apiGet('/highlights');\n    return response.data || {};\n  }\n  async getThreadHighlights(threadId) {\n    var _response$data5;\n    const response = await apiGet(`/highlights/thread/${threadId}`);\n    return ((_response$data5 = response.data) === null || _response$data5 === void 0 ? void 0 : _response$data5.highlights) || [];\n  }\n\n  // === 스레드 관련 API ===\n\n  async getThreadSentenceData(threadId) {\n    console.log('=== 스레드 문장 데이터 조회 API 호출 ===');\n    console.log('스레드 ID:', threadId);\n    try {\n      var _response$data6, _response$data7, _response$data7$highl;\n      const response = await apiGet(`/threads/${threadId}/sentence-data`);\n      if (response.error) {\n        console.error('스레드 문장 데이터 조회 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      console.log('스레드 문장 데이터 조회 성공:', {\n        memo_count: Object.keys(((_response$data6 = response.data) === null || _response$data6 === void 0 ? void 0 : _response$data6.memos) || {}).length,\n        highlight_count: ((_response$data7 = response.data) === null || _response$data7 === void 0 ? void 0 : (_response$data7$highl = _response$data7.highlights) === null || _response$data7$highl === void 0 ? void 0 : _response$data7$highl.length) || 0\n      });\n      return response.data;\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 API 호출 실패:', error);\n      throw error;\n    }\n  }\n\n  // === 메모 저장고 관련 API (VaultManager 사용) ===\n\n  async saveMemoToVault(request) {\n    const response = await memoVaultManager.create(request);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data;\n  }\n  async getVaultMemos() {\n    const response = await memoVaultManager.getAll();\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || [];\n  }\n  async deleteVaultMemo(memoId) {\n    const response = await memoVaultManager.delete(memoId);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || {\n      success: false,\n      message: '삭제 실패'\n    };\n  }\n  async interactWithVaultMemo(memoId) {\n    const response = await memoVaultManager.interact(memoId);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data;\n  }\n\n  // === 개발용 API ===\n\n  async resetDevData() {\n    const response = await apiPost('/dev/reset');\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data;\n  }\n}\nexport const sentenceApi = new SentenceApi();","map":{"version":3,"names":["apiGet","apiPost","apiDelete","VaultManager","sentenceVaultManager","memoVaultManager","SentenceApi","saveSentencesToVault","request","console","log","JSON","stringify","response","create","error","Error","data","getVaultSentences","getAll","deleteVaultSentence","sentenceId","delete","success","message","updateVaultSentence","update","restoreVaultSentence","vaultSentenceId","createOrUpdateMemo","_request$content","_request$content2","_request$related_sent","sentence_id","thread_id","thread_type","content","substring","length","has_related_sentences","related_sentence_ids","_response$data","getMemo","deleteMemo","_response$data2","getAllMemos","createHighlight","_response$data3","deleteHighlight","_response$data4","getAllHighlights","getThreadHighlights","threadId","_response$data5","highlights","getThreadSentenceData","_response$data6","_response$data7","_response$data7$highl","memo_count","Object","keys","memos","highlight_count","saveMemoToVault","getVaultMemos","deleteVaultMemo","memoId","interactWithVaultMemo","interact","resetDevData","sentenceApi"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/api/sentenceApi.ts"],"sourcesContent":["import { \n  apiGet, \n  apiPost, \n  apiDelete, \n  VaultManager\n} from '../../shared/utils/apiUtils';\n\nexport interface SentenceVaultItem {\n  id: string;\n  sentence: string;\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;  // 원본 스레드 ID\n  source_thread_type?: string;  // 원본 스레드 타입\n  source_sentence_id?: string;  // 원본 문장 ID\n  created_at: string;\n  tags: string[];\n  metadata?: Record<string, any>;\n  \n  // 통합된 문장 상태 정보\n  is_highlighted: boolean;  // 하이라이트 여부\n  highlight_color?: string;  // 하이라이트 색상\n  memo_content?: string;  // 메모 내용\n  is_pinned: boolean;  // 고정 여부\n}\n\nexport interface SentenceVaultRequest {\n  sentences: string[];\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  source_sentence_ids?: string[];  // 원본 문장 ID들\n  tags?: string[];\n  \n  // 각 문장별 상태 정보 (sentences와 동일한 순서)\n  highlight_states?: boolean[];  // 하이라이트 여부\n  highlight_colors?: (string | null)[];  // 하이라이트 색상\n  memo_contents?: (string | null)[];  // 메모 내용\n}\n\nexport interface SentenceVaultResponse {\n  success: boolean;\n  message: string;\n  saved_items: SentenceVaultItem[];\n}\n\nexport interface VaultRestoreRequest {\n  thread_id: string;\n  sentence_id: string;\n}\n\nexport interface VaultRestoreResponse {\n  success: boolean;\n  message: string;\n  restored_highlight: boolean;\n  restored_memo: boolean;\n  highlight_color?: string;\n  memo_content?: string;\n}\n\nexport interface VaultUpdateRequest {\n  is_highlighted?: boolean;\n  highlight_color?: string;\n  memo_content?: string;\n  is_pinned?: boolean;\n  tags?: string[];\n}\n\nexport interface VaultUpdateResponse {\n  success: boolean;\n  message: string;\n  updated_item: SentenceVaultItem;\n}\n\nexport interface SentenceMemo {\n  id: string;\n  sentence_id: string;\n  content: string;\n  created_at: string;\n  updated_at: string;\n}\n\nexport interface SentenceMemoRequest {\n  sentence_id: string;\n  thread_id?: string;\n  thread_type?: string;\n  content: string;\n  sentence_content?: string;  // 메모 저장고 저장을 위한 문장 내용\n  source_message_id?: string;  // 메모 저장고 저장을 위한 메시지 ID\n  \n  // 연관된 문장들 정보 (메모와 함께 선택된 문장들)\n  related_sentence_ids?: string[];  // 메모와 연관된 모든 문장 ID들\n  related_sentence_contents?: string[];  // 메모와 연관된 모든 문장 내용들\n}\n\nexport interface SentenceMemoResponse {\n  success: boolean;\n  message: string;\n  memo?: SentenceMemo;\n}\n\nexport interface SentenceHighlight {\n  id: string;\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n  created_at: string;\n}\n\nexport interface SentenceHighlightRequest {\n  sentence_id: string;\n  thread_id: string;\n  thread_type: string;\n}\n\nexport interface SentenceHighlightResponse {\n  success: boolean;\n  message: string;\n  highlight?: SentenceHighlight;\n}\n\nexport interface ThreadSentenceData {\n  memos: Record<string, string>;\n  highlights: string[];\n}\n\n// 메모 저장고 관련 타입들\nexport interface MemoVaultItem {\n  id: string;\n  memo_content: string;  // 사용자가 삽입한 메모 내용\n  sentence_content: string;  // 원본 문장 내용\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  source_sentence_id: string;\n  created_at: string;\n  tags: string[];\n  metadata?: Record<string, any>;\n}\n\nexport interface MemoVaultRequest {\n  memo_content: string;  // 사용자가 삽입한 메모\n  sentence_content: string;  // 원본 문장\n  source_message_id: string;\n  source_conversation_id?: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  source_sentence_id: string;\n  tags?: string[];\n  metadata?: Record<string, any>;  // 연관된 문장들 정보 등을 저장하는 메타데이터\n}\n\nexport interface MemoVaultResponse {\n  success: boolean;\n  message: string;\n  saved_item?: MemoVaultItem;\n}\n\nexport interface MemoVaultInteractionResponse {\n  success: boolean;\n  message: string;\n  interaction_message: string;\n  source_thread_id?: string;\n  source_thread_type?: string;\n  memo_item: MemoVaultItem;\n}\n\n// 저장고 매니저 인스턴스들\nconst sentenceVaultManager = new VaultManager<SentenceVaultItem, SentenceVaultRequest, VaultUpdateRequest>('/vault/sentences');\nconst memoVaultManager = new VaultManager<MemoVaultItem, MemoVaultRequest>('/vault/memos');\n\nclass SentenceApi {\n  // === 문장 저장고 관련 API (VaultManager 사용) ===\n  \n  async saveSentencesToVault(request: SentenceVaultRequest): Promise<SentenceVaultResponse> {\n    console.log('=== 저장고 저장 시작 (통합 API 사용) ===');\n    console.log('요청 데이터:', JSON.stringify(request, null, 2));\n    \n    try {\n      const response = await sentenceVaultManager.create(request);\n      \n      if (response.error) {\n        throw new Error(response.error);\n      }\n      \n      console.log('성공 응답:', response.data);\n      console.log('=== 저장고 저장 완료 ===');\n      return response.data as SentenceVaultResponse;\n      \n    } catch (error: any) {\n      console.error('저장고 저장 오류:', error);\n      throw error;\n    }\n  }\n\n  async getVaultSentences(): Promise<SentenceVaultItem[]> {\n    const response = await sentenceVaultManager.getAll();\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || [];\n  }\n\n  async deleteVaultSentence(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    const response = await sentenceVaultManager.delete(sentenceId);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || { success: false, message: '삭제 실패' };\n  }\n\n  async updateVaultSentence(sentenceId: string, request: VaultUpdateRequest): Promise<VaultUpdateResponse> {\n    const response = await sentenceVaultManager.update(sentenceId, request);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data as VaultUpdateResponse;\n  }\n\n  async restoreVaultSentence(vaultSentenceId: string, request: VaultRestoreRequest): Promise<VaultRestoreResponse> {\n    const response = await apiPost<VaultRestoreResponse>(`/vault/sentences/${vaultSentenceId}/restore`, request);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data!;\n  }\n\n  // === 메모 관련 API (통합) ===\n  \n  async createOrUpdateMemo(request: SentenceMemoRequest): Promise<SentenceMemoResponse> {\n    console.log('=== 메모 저장 API 호출 ===');\n    console.log('요청 데이터:', {\n      sentence_id: request.sentence_id,\n      thread_id: request.thread_id,\n      thread_type: request.thread_type,\n      content: request.content?.substring(0, 50) + (request.content?.length > 50 ? '...' : ''),\n      has_related_sentences: (request.related_sentence_ids?.length || 0) > 0\n    });\n    \n    try {\n      const response = await apiPost<SentenceMemoResponse>('/memos', request);\n      \n      if (response.error) {\n        console.error('메모 저장 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      \n      console.log('메모 저장 성공:', response.data?.success);\n      return response.data!;\n    } catch (error) {\n      console.error('메모 저장 API 호출 실패:', error);\n      throw error;\n    }\n  }\n\n  async getMemo(sentenceId: string): Promise<SentenceMemo | null> {\n    const response = await apiGet<SentenceMemo>(`/memos/${sentenceId}`);\n    return response.data || null;\n  }\n\n  async deleteMemo(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    console.log('=== 메모 삭제 API 호출 ===');\n    console.log('문장 ID:', sentenceId);\n    \n    try {\n      const response = await apiDelete<{ success: boolean; message: string }>(`/memos/${sentenceId}`);\n      \n      if (response.error) {\n        console.error('메모 삭제 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      \n      console.log('메모 삭제 성공:', response.data?.success);\n      return response.data!;\n    } catch (error) {\n      console.error('메모 삭제 API 호출 실패:', error);\n      throw error;\n    }\n  }\n\n  async getAllMemos(): Promise<Record<string, string>> {\n    const response = await apiGet<Record<string, string>>('/memos');\n    return response.data || {};\n  }\n\n  // === 하이라이트 관련 API (통합) ===\n  \n  async createHighlight(request: SentenceHighlightRequest): Promise<SentenceHighlightResponse> {\n    console.log('=== 하이라이트 생성 API 호출 ===');\n    console.log('요청 데이터:', {\n      sentence_id: request.sentence_id,\n      thread_id: request.thread_id,\n      thread_type: request.thread_type\n    });\n    \n    try {\n      const response = await apiPost<SentenceHighlightResponse>('/highlights', request);\n      \n      if (response.error) {\n        console.error('하이라이트 생성 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      \n      console.log('하이라이트 생성 성공:', response.data?.success);\n      return response.data!;\n    } catch (error) {\n      console.error('하이라이트 생성 API 호출 실패:', error);\n      throw error;\n    }\n  }\n\n  async deleteHighlight(sentenceId: string): Promise<{ success: boolean; message: string }> {\n    console.log('=== 하이라이트 삭제 API 호출 ===');\n    console.log('문장 ID:', sentenceId);\n    \n    try {\n      const response = await apiDelete<{ success: boolean; message: string }>(`/highlights/${sentenceId}`);\n      \n      if (response.error) {\n        console.error('하이라이트 삭제 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      \n      console.log('하이라이트 삭제 성공:', response.data?.success);\n      return response.data!;\n    } catch (error) {\n      console.error('하이라이트 삭제 API 호출 실패:', error);\n      throw error;\n    }\n  }\n\n  async getAllHighlights(): Promise<Record<string, string[]>> {\n    const response = await apiGet<Record<string, string[]>>('/highlights');\n    return response.data || {};\n  }\n\n  async getThreadHighlights(threadId: string): Promise<string[]> {\n    const response = await apiGet<{ highlights: string[] }>(`/highlights/thread/${threadId}`);\n    return response.data?.highlights || [];\n  }\n\n  // === 스레드 관련 API ===\n  \n  async getThreadSentenceData(threadId: string): Promise<ThreadSentenceData> {\n    console.log('=== 스레드 문장 데이터 조회 API 호출 ===');\n    console.log('스레드 ID:', threadId);\n    \n    try {\n      const response = await apiGet<ThreadSentenceData>(`/threads/${threadId}/sentence-data`);\n      \n      if (response.error) {\n        console.error('스레드 문장 데이터 조회 API 에러:', response.error);\n        throw new Error(response.error);\n      }\n      \n      console.log('스레드 문장 데이터 조회 성공:', {\n        memo_count: Object.keys(response.data?.memos || {}).length,\n        highlight_count: response.data?.highlights?.length || 0\n      });\n      \n      return response.data!;\n    } catch (error) {\n      console.error('스레드 문장 데이터 조회 API 호출 실패:', error);\n      throw error;\n    }\n  }\n\n  // === 메모 저장고 관련 API (VaultManager 사용) ===\n  \n  async saveMemoToVault(request: MemoVaultRequest): Promise<MemoVaultResponse> {\n    const response = await memoVaultManager.create(request);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data as MemoVaultResponse;\n  }\n\n  async getVaultMemos(): Promise<MemoVaultItem[]> {\n    const response = await memoVaultManager.getAll();\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || [];\n  }\n\n  async deleteVaultMemo(memoId: string): Promise<{ success: boolean; message: string }> {\n    const response = await memoVaultManager.delete(memoId);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data || { success: false, message: '삭제 실패' };\n  }\n\n  async interactWithVaultMemo(memoId: string): Promise<MemoVaultInteractionResponse> {\n    const response = await memoVaultManager.interact(memoId);\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data as MemoVaultInteractionResponse;\n  }\n\n  // === 개발용 API ===\n  \n  async resetDevData(): Promise<{ success: boolean; message: string }> {\n    const response = await apiPost<{ success: boolean; message: string }>('/dev/reset');\n    if (response.error) {\n      throw new Error(response.error);\n    }\n    return response.data!;\n  }\n}\n\nexport const sentenceApi = new SentenceApi();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}