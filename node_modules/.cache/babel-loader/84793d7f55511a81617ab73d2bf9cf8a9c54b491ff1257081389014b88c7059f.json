{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work_ver2\\\\frontend\\\\src\\\\features\\\\core\\\\App.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useChat } from '../shared/hooks/useChat';\nimport { useBrowserHistory } from '../shared/hooks/useBrowserHistory';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { qaApi } from '../qa/api/qaApi';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst App = () => {\n  _s();\n  const navigate = useNavigate();\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState(null);\n\n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n\n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState(null);\n\n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n\n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState(null);\n\n  // 최근 상호작용 보기 관련 상태\n  const [viewingRecentThread, setViewingRecentThread] = useState(null);\n  const [isRecentThreadLoading, setIsRecentThreadLoading] = useState(false);\n\n  // QA 상태 관리\n  const [qaCompleted, setQaCompleted] = useState(null); // null = 로딩 중\n  const [isCheckingQaStatus, setIsCheckingQaStatus] = useState(true);\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    isLoading,\n    error,\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectPersona,\n    clearError\n  } = useChat();\n\n  // 브라우저 히스토리 관리\n  const {\n    parseInitialState\n  } = useBrowserHistory({\n    selectedPersonaItem,\n    selectedConversationItem,\n    currentPersonaId: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId,\n    currentPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName,\n    onNavigateBack: state => {\n      console.log('=== 브라우저 뒤로가기 처리 ===');\n      console.log('복원할 상태:', state);\n\n      // 상태 복원\n      setSelectedPersonaItem(state.selectedPersonaItem);\n      setSelectedConversationItem(state.selectedConversationItem);\n\n      // 페르소나 선택 복원\n      if (state.personaId && personas[state.personaId]) {\n        selectPersona(state.personaId);\n\n        // 해석 상태 복원이 필요한 경우\n        const existingInterpretation = interpretationStore[state.personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: state.personaId,\n            personaName: personas[state.personaId].name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n      }\n\n      // 사이드바 상태 조정\n      if (state.selectedPersonaItem === 'vault' || state.selectedPersonaItem === 'admin' || state.selectedPersonaItem === 'training') {\n        setIsConversationSidebarCollapsed(true);\n      } else {\n        setIsConversationSidebarCollapsed(false);\n      }\n    }\n  });\n\n  // QA 완료 상태 확인\n  useEffect(() => {\n    const checkQaStatus = async () => {\n      try {\n        setIsCheckingQaStatus(true);\n        const status = await qaApi.getStatus();\n        setQaCompleted(status.is_completed);\n\n        // QA가 미완료라면 QA 페이지로 리다이렉트\n        if (!status.is_completed) {\n          console.log('QA 미완료, QA 페이지로 이동');\n          navigate('/qa');\n          return;\n        }\n      } catch (error) {\n        console.error('QA 상태 확인 실패:', error);\n        // 에러 발생시 일단 메인 화면 표시 (백엔드 미연결 등의 경우)\n        setQaCompleted(true);\n      } finally {\n        setIsCheckingQaStatus(false);\n      }\n    };\n    checkQaStatus();\n  }, [navigate]);\n\n  // 페르소나 정보가 로드되면 자동으로 훈습 모드로 전환\n  useEffect(() => {\n    // QA가 완료된 경우에만 실행\n    if (qaCompleted === true && Object.keys(personas).length > 0 && !selectedPersonaItem) {\n      console.log('페르소나 정보 로드 완료, 자동으로 훈습 모드로 전환');\n      setSelectedPersonaItem('training');\n    }\n  }, [personas, selectedPersonaItem, qaCompleted]);\n\n  // 초기 로드 시 URL에서 상태 복원\n  useEffect(() => {\n    // QA가 완료된 경우에만 실행\n    if (qaCompleted === true) {\n      const initialState = parseInitialState();\n      console.log('=== 초기 상태 복원 ===');\n      console.log('URL에서 파싱된 상태:', initialState);\n      if (initialState.selectedPersonaItem) {\n        setSelectedPersonaItem(initialState.selectedPersonaItem);\n      }\n      if (initialState.selectedConversationItem) {\n        setSelectedConversationItem(initialState.selectedConversationItem);\n      }\n      if (initialState.personaId && personas[initialState.personaId]) {\n        selectPersona(initialState.personaId);\n      }\n    }\n  }, [personas, parseInitialState, selectPersona, qaCompleted]);\n\n  // 언어화 스레드 로드 (QA 완료 후에만 실행)\n  const loadVerbalizationThreads = useCallback(async () => {\n    if (qaCompleted !== true) return;\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n\n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        setSelectedVerbalizationThread(prevSelected => {\n          if (prevSelected) {\n            var _response$data;\n            const updatedSelectedThread = (_response$data = response.data) === null || _response$data === void 0 ? void 0 : _response$data.find(thread => thread.id === prevSelected.id);\n            if (updatedSelectedThread) {\n              console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n              return updatedSelectedThread;\n            } else {\n              var _response$data2;\n              console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n              return ((_response$data2 = response.data) === null || _response$data2 === void 0 ? void 0 : _response$data2[0]) || null;\n            }\n          } else if (response.data && response.data.length > 0) {\n            // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n            console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n            return response.data[0];\n          }\n          return null;\n        });\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  }, [qaCompleted]); // qaCompleted 의존성 추가\n\n  // 언어화 모드일 때 스레드 로드 (QA 완료 후에만)\n  useEffect(() => {\n    if (qaCompleted === true && selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem, loadVerbalizationThreads, qaCompleted]);\n\n  // 최근 상호작용 스레드 로드\n  useEffect(() => {\n    // QA가 완료된 경우에만 실행\n    if (qaCompleted !== true) return;\n    const loadRecentThread = async () => {\n      if (!selectedConversationItem || !selectedConversationItem.startsWith('recent-thread::')) {\n        setViewingRecentThread(null);\n        return;\n      }\n      const parts = selectedConversationItem.split('::');\n      if (parts.length < 3) {\n        setViewingRecentThread(null);\n        return;\n      }\n      const threadId = parts[1];\n      const personaId = parts[2];\n      setIsRecentThreadLoading(true);\n      try {\n        let response;\n        let thread;\n        if (personaId === 'verbalization') {\n          response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            thread = response.data.find(t => t.id === threadId);\n          }\n        } else {\n          response = await chatApi.getPersonaThreads(personaId);\n          if (response.data) {\n            thread = response.data.find(t => t.id === threadId);\n          }\n        }\n        if (thread) {\n          var _personas$personaId;\n          const personaName = personaId === 'verbalization' ? '언어화' : ((_personas$personaId = personas[personaId]) === null || _personas$personaId === void 0 ? void 0 : _personas$personaId.name) || '알 수 없음';\n          setViewingRecentThread({\n            ...thread,\n            persona_id: personaId,\n            persona_name: personaName\n          });\n        } else {\n          setViewingRecentThread(null);\n        }\n      } catch (error) {\n        console.error('최근 상호작용 스레드 로드 실패:', error);\n        setViewingRecentThread(null);\n      } finally {\n        setIsRecentThreadLoading(false);\n      }\n    };\n    if (selectedPersonaItem === 'recent') {\n      loadRecentThread();\n    } else {\n      setViewingRecentThread(null);\n    }\n  }, [selectedConversationItem, selectedPersonaItem, personas, qaCompleted]);\n\n  // QA 체크가 진행 중이면 로딩 화면 표시\n  if (isCheckingQaStatus) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        fontSize: '1.2rem',\n        color: '#666'\n      },\n      children: \"\\uC2DC\\uC2A4\\uD15C\\uC744 \\uC900\\uBE44\\uD558\\uACE0 \\uC788\\uC2B5\\uB2C8\\uB2E4...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 284,\n      columnNumber: 7\n    }, this);\n  }\n\n  // QA가 미완료면 빈 컴포넌트 반환 (리다이렉트 중)\n  if (qaCompleted === false) {\n    return null;\n  }\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = itemId => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n\n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualItemId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = itemId => {\n    setSelectedConversationItem(itemId);\n\n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId !== null && itemId !== void 0 && itemId.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러\n  const handleNavigateToPersona = (personaId, mode) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n\n    // 해석 모드로 이동해야 하는지 확인\n    const shouldNavigateToInterpretation = sessionStorage.getItem('navigateToInterpretationMode');\n    if (shouldNavigateToInterpretation === 'true') {\n      sessionStorage.removeItem('navigateToInterpretationMode'); // 사용 후 제거\n      setSelectedConversationItem('interpretation');\n    } else if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId, mode, selectedSentence) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n\n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId, threadType, interactionMessage) => {\n    console.log('=== 저장고에서 스레드로 이동 ===');\n    console.log('threadId:', threadId);\n    console.log('threadType:', threadType);\n    console.log('interactionMessage:', interactionMessage);\n\n    // 상호작용 메시지가 있으면 sessionStorage에 저장\n    if (interactionMessage) {\n      sessionStorage.setItem('selectedSentenceForInput', interactionMessage);\n      console.log('상호작용 메시지를 sessionStorage에 저장:', interactionMessage);\n    }\n\n    // 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n    // 신형은 타임스탬프가 포함되어 있으므로 숫자가 끝에 있는지 확인\n    const isLegacyInterpretationId = threadId.startsWith('interpretation_') && !threadId.includes('-') && !/\\d{10,}$/.test(threadId); // 10자리 이상 숫자로 끝나지 않는 경우만 구형\n\n    console.log('isLegacyInterpretationId:', isLegacyInterpretationId);\n    console.log('타임스탬프 테스트:', /\\d{10,}$/.test(threadId));\n\n    // 언어화 스레드인 경우\n    if (threadType === 'verbalization') {\n      console.log('언어화 스레드로 이동');\n      setSelectedPersonaItem('verbalization');\n      setIsConversationSidebarCollapsed(false);\n\n      // 해당 스레드를 찾아서 선택\n      const loadAndSelectThread = async () => {\n        try {\n          const response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            const targetThread = response.data.find(thread => thread.id === threadId);\n            if (targetThread) {\n              console.log('타겟 언어화 스레드 찾음:', targetThread.id);\n              setSelectedVerbalizationThread(targetThread);\n              setVerbalizationThreads(response.data);\n            } else {\n              console.warn('타겟 언어화 스레드를 찾을 수 없음:', threadId);\n              // 폴백: 첫 번째 스레드 선택\n              if (response.data.length > 0) {\n                setSelectedVerbalizationThread(response.data[0]);\n                setVerbalizationThreads(response.data);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('언어화 스레드 로딩 오류:', error);\n        }\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      };\n      loadAndSelectThread();\n      return;\n    }\n\n    // 해석 타입인 경우 특별 처리\n    if (threadType === 'interpretation') {\n      console.log('해석 타입 스레드 처리:', threadId);\n\n      // 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\n      const extractPersonaIdFromThreadId = id => {\n        // interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\n        const parts = id.split('_');\n        console.log('스레드 ID 파싱:', parts);\n        if (parts.length >= 2 && parts[0] === 'interpretation') {\n          const extractedPersonaId = parts[1];\n          console.log('추출된 페르소나 ID:', extractedPersonaId);\n          return extractedPersonaId; // 페르소나 ID 부분\n        }\n        return null;\n      };\n      const personaId = extractPersonaIdFromThreadId(threadId);\n      console.log('최종 페르소나 ID:', personaId);\n      console.log('페르소나 존재 여부:', personaId && personas[personaId]);\n      if (personaId && personas[personaId]) {\n        const persona = personas[personaId];\n        console.log('해석 스레드용 페르소나 찾음:', persona.name);\n\n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 페르소나 선택 및 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        console.log('해석 모드로 이동 완료');\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        return;\n      } else {\n        console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:', threadId);\n        // 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n      }\n    }\n\n    // 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\n    const loadAndNavigateToTrainingThread = async () => {\n      try {\n        console.log('훈습 스레드 정보 로딩 중...');\n\n        // 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\n        let foundThread = null;\n        let foundPersonaId = null;\n        for (const personaId of Object.keys(personas)) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const targetThread = threadsResponse.data.find(thread => thread.id === threadId);\n              if (targetThread) {\n                console.log('스레드를 찾음:', targetThread.id, 'in persona:', personaId);\n                foundThread = targetThread;\n                foundPersonaId = personaId;\n                break;\n              }\n            }\n          } catch (error) {\n            console.warn(`페르소나 ${personaId}의 스레드 로딩 실패:`, error);\n          }\n        }\n        if (!foundThread || !foundPersonaId) {\n          console.error('해당 스레드를 찾을 수 없음:', threadId);\n          alert('해당 스레드를 찾을 수 없습니다.');\n          return;\n        }\n        const persona = personas[foundPersonaId];\n        console.log('찾은 페르소나:', persona.name);\n\n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[foundPersonaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: foundPersonaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n\n        // 페르소나 선택 및 해당 스레드로 이동\n        selectPersona(foundPersonaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n        console.log('훈습 스레드로 이동 완료:', `${threadType}-thread-${threadId}`);\n\n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      } catch (error) {\n        console.error('훈습 스레드 로딩 오류:', error);\n        alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');\n      }\n    };\n    loadAndNavigateToTrainingThread();\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId, interpretation) => {\n    const persona = personas[personaId];\n\n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n\n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: (persona === null || persona === void 0 ? void 0 : persona.name) || '',\n      content: interpretation,\n      messages: [{\n        role: 'assistant',\n        content: interpretation,\n        timestamp: new Date().toISOString()\n      }]\n    });\n\n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async message => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\n    const isInterpretationThread = selectedConversationItem === null || selectedConversationItem === void 0 ? void 0 : selectedConversationItem.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지 객체 생성\n    const userMessage = {\n      role: 'user',\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n\n        // 사용자 메시지를 먼저 UI에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage]\n        } : null);\n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n        if (response.data && response.data.success) {\n          // 백엔드에서 받은 완전한 스레드 데이터로 UI 업데이트\n          setCurrentInterpretation(prev => {\n            var _response$data3, _response$data3$threa;\n            return prev ? {\n              ...prev,\n              messages: ((_response$data3 = response.data) === null || _response$data3 === void 0 ? void 0 : (_response$data3$threa = _response$data3.thread) === null || _response$data3$threa === void 0 ? void 0 : _response$data3$threa.messages) || []\n            } : null;\n          });\n          setIsInterpretationLoading(false);\n\n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅\n        console.log('기본 해석 기반 채팅');\n\n        // 사용자 메시지를 먼저 UI에 반영\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage]\n        } : null);\n        const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, message);\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant',\n            content: response.data.response,\n            timestamp: response.data.timestamp\n          };\n\n          // AI 응답 추가\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, assistantMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n\n          // 기본 해석 채팅 완료 후 ConversationSidebar 새로고침\n          setConversationRefreshTrigger(prev => prev + 1);\n          return true;\n        } else {\n          // API 호출 실패 시 폴백\n          console.error('해석 기반 채팅 API 실패:', response.error);\n          const fallbackMessage = {\n            role: 'assistant',\n            content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n            timestamp: new Date().toISOString()\n          };\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, fallbackMessage]\n          } : null);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n\n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant',\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString()\n      };\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage]\n      } : null);\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = updatedInterpretation => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = updatedConversation => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = mode => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = personaId => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread, personaId) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n\n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || []\n        });\n\n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [{\n              role: 'assistant',\n              content: existingInterpretation,\n              timestamp: new Date().toISOString()\n            }]\n          });\n        }\n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [{\n          role: 'assistant',\n          content: existingInterpretation,\n          timestamp: new Date().toISOString()\n        }]\n      });\n\n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread === null || selectedVerbalizationThread === void 0 ? void 0 : selectedVerbalizationThread.id;\n    await loadVerbalizationThreads();\n\n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find(thread => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n\n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async () => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n\n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n\n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data, ...prev]);\n\n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation || selectedPersonaItem === 'recent' || selectedPersonaItem === 'verbalization';\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(GlobalStyle, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 1042,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(AppContainer, {\n      children: [/*#__PURE__*/_jsxDEV(PersonaSidebar, {\n        selectedItem: selectedPersonaItem,\n        onSelectItem: handleSelectPersonaItem,\n        isCollapsed: isPersonaSidebarCollapsed,\n        onToggle: shouldShowConversationSidebar ? undefined : togglePersonaSidebar\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1045,\n        columnNumber: 9\n      }, this), shouldShowConversationSidebar && /*#__PURE__*/_jsxDEV(ConversationSidebar, {\n        selectedItem: selectedConversationItem,\n        onSelectItem: handleSelectConversationItem,\n        isCollapsed: isConversationSidebarCollapsed,\n        onToggle: toggleConversationSidebar,\n        selectedPersonaName: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaName,\n        selectedPersonaId: currentInterpretation === null || currentInterpretation === void 0 ? void 0 : currentInterpretation.personaId,\n        refreshTrigger: conversationRefreshTrigger,\n        mode: selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona',\n        personas: selectedPersonaItem === 'recent' ? personas : undefined,\n        verbalizationThreads: selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined,\n        onSelectVerbalizationThread: selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined,\n        onRefreshTrigger: selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1054,\n        columnNumber: 11\n      }, this), selectedPersonaItem === 'vault' ? /*#__PURE__*/_jsxDEV(VaultView, {\n        personas: personas,\n        onNavigateToPersona: handleNavigateToPersona,\n        onNavigateToThread: handleNavigateToThread,\n        onNavigateToPersonaWithSentence: handleNavigateToPersonaWithSentence\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1072,\n        columnNumber: 11\n      }, this) : /*#__PURE__*/_jsxDEV(ChatArea, {\n        selectedConversation: selectedConversation,\n        conversations: conversations,\n        personas: personas,\n        globalMessages: globalMessages,\n        isLoading: currentInterpretation ? isInterpretationLoading : isLoading,\n        error: error,\n        onSendInitialMessage: sendInitialMessage,\n        onContinueConversation: continueConversation,\n        onClearError: clearError,\n        selectedPersonaItem: selectedPersonaItem,\n        onSelectPersona: handlePersonaSelection,\n        onInterpretationComplete: handleInterpretationComplete,\n        selectedConversationItem: selectedConversationItem,\n        currentInterpretation: currentInterpretation,\n        onInterpretationMessage: handleInterpretationMessage,\n        onUpdateInterpretation: handleUpdateInterpretation,\n        onUpdateConversation: handleUpdateConversation,\n        onSwitchConversationMode: handleSwitchConversationMode,\n        onRefreshConversationSidebar: handleRefreshConversationSidebar,\n        viewingRecentThread: viewingRecentThread,\n        isRecentThreadLoading: isRecentThreadLoading,\n        onNavigateToThread: handleNavigateToThread,\n        recentInteractionsProps: {\n          personas,\n          onSelectPersona: handleRecentPersonaSelect,\n          onThreadSelect: handleRecentThreadSelect\n        },\n        verbalizationProps: {\n          selectedThread: selectedVerbalizationThread,\n          threads: verbalizationThreads,\n          onThreadUpdate: handleVerbalizationThreadUpdate,\n          onCreateNewThread: handleCreateNewVerbalizationThread\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 1079,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 1043,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n};\n_s(App, \"aG75uh2ucwJdyJV5V8B3y3uyS7o=\", false, function () {\n  return [useNavigate, useChat, useBrowserHistory];\n});\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","useEffect","useCallback","useNavigate","useChat","useBrowserHistory","ConversationSidebar","PersonaSidebar","VaultView","ChatArea","GlobalStyle","AppContainer","chatApi","qaApi","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","navigate","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","isInterpretationLoading","setIsInterpretationLoading","interpretationStore","setInterpretationStore","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","viewingRecentThread","setViewingRecentThread","isRecentThreadLoading","setIsRecentThreadLoading","qaCompleted","setQaCompleted","isCheckingQaStatus","setIsCheckingQaStatus","personas","globalMessages","conversations","selectedConversation","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectPersona","clearError","parseInitialState","currentPersonaId","personaId","currentPersonaName","personaName","onNavigateBack","state","console","log","existingInterpretation","name","content","messages","role","timestamp","Date","toISOString","checkQaStatus","status","getStatus","is_completed","Object","keys","length","initialState","loadVerbalizationThreads","response","getVerbalizationThreads","data","prevSelected","_response$data","updatedSelectedThread","find","thread","id","_response$data2","loadRecentThread","startsWith","parts","split","threadId","t","getPersonaThreads","_personas$personaId","persona_id","persona_name","style","display","justifyContent","alignItems","height","fontSize","color","children","fileName","_jsxFileName","lineNumber","columnNumber","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","handleNavigateToPersona","mode","persona","shouldNavigateToInterpretation","sessionStorage","getItem","removeItem","handleNavigateToPersonaWithSentence","selectedSentence","setItem","handleNavigateToThread","threadType","interactionMessage","isLegacyInterpretationId","test","loadAndSelectThread","targetThread","warn","prev","extractPersonaIdFromThreadId","extractedPersonaId","loadAndNavigateToTrainingThread","foundThread","foundPersonaId","threadsResponse","alert","handlePersonaSelection","handleInterpretationComplete","interpretation","handleInterpretationMessage","message","isInterpretationThread","selectedThreadId","userMessage","chatWithThread","thread_id","user_message","success","_response$data3","_response$data3$threa","chatWithInterpretation","assistantMessage","fallbackMessage","errorMessage","handleUpdateInterpretation","updatedInterpretation","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","thread_type","interpretationContent","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","handleVerbalizationThreadUpdate","currentSelectedId","setTimeout","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","onNavigateToPersona","onNavigateToThread","onNavigateToPersonaWithSentence","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","onThreadSelect","verbalizationProps","selectedThread","threads","onThreadUpdate","onCreateNewThread","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect, useCallback } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { useChat } from '../shared/hooks/useChat';\nimport { useBrowserHistory } from '../shared/hooks/useBrowserHistory';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport VaultView from '../vault/components/VaultView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { qaApi } from '../qa/api/qaApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const navigate = useNavigate();\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null>(null);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n  \n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  // 최근 상호작용 보기 관련 상태\n  const [viewingRecentThread, setViewingRecentThread] = useState<(TrainingThread & { persona_id: string; persona_name: string }) | null>(null);\n  const [isRecentThreadLoading, setIsRecentThreadLoading] = useState(false);\n\n  // QA 상태 관리\n  const [qaCompleted, setQaCompleted] = useState<boolean | null>(null); // null = 로딩 중\n  const [isCheckingQaStatus, setIsCheckingQaStatus] = useState(true);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 브라우저 히스토리 관리\n  const { parseInitialState } = useBrowserHistory({\n    selectedPersonaItem,\n    selectedConversationItem,\n    currentPersonaId: currentInterpretation?.personaId,\n    currentPersonaName: currentInterpretation?.personaName,\n    onNavigateBack: (state) => {\n      console.log('=== 브라우저 뒤로가기 처리 ===');\n      console.log('복원할 상태:', state);\n      \n      // 상태 복원\n      setSelectedPersonaItem(state.selectedPersonaItem);\n      setSelectedConversationItem(state.selectedConversationItem);\n      \n      // 페르소나 선택 복원\n      if (state.personaId && personas[state.personaId]) {\n        selectPersona(state.personaId);\n        \n        // 해석 상태 복원이 필요한 경우\n        const existingInterpretation = interpretationStore[state.personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: state.personaId,\n            personaName: personas[state.personaId].name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n      }\n      \n      // 사이드바 상태 조정\n      if (state.selectedPersonaItem === 'vault' || state.selectedPersonaItem === 'admin' || state.selectedPersonaItem === 'training') {\n        setIsConversationSidebarCollapsed(true);\n      } else {\n        setIsConversationSidebarCollapsed(false);\n      }\n    }\n  });\n\n  // QA 완료 상태 확인\n  useEffect(() => {\n    const checkQaStatus = async () => {\n      try {\n        setIsCheckingQaStatus(true);\n        const status = await qaApi.getStatus();\n        setQaCompleted(status.is_completed);\n        \n        // QA가 미완료라면 QA 페이지로 리다이렉트\n        if (!status.is_completed) {\n          console.log('QA 미완료, QA 페이지로 이동');\n          navigate('/qa');\n          return;\n        }\n      } catch (error) {\n        console.error('QA 상태 확인 실패:', error);\n        // 에러 발생시 일단 메인 화면 표시 (백엔드 미연결 등의 경우)\n        setQaCompleted(true);\n      } finally {\n        setIsCheckingQaStatus(false);\n      }\n    };\n\n    checkQaStatus();\n  }, [navigate]);\n\n  // 페르소나 정보가 로드되면 자동으로 훈습 모드로 전환\n  useEffect(() => {\n    // QA가 완료된 경우에만 실행\n    if (qaCompleted === true && Object.keys(personas).length > 0 && !selectedPersonaItem) {\n      console.log('페르소나 정보 로드 완료, 자동으로 훈습 모드로 전환');\n      setSelectedPersonaItem('training');\n    }\n  }, [personas, selectedPersonaItem, qaCompleted]);\n\n  // 초기 로드 시 URL에서 상태 복원\n  useEffect(() => {\n    // QA가 완료된 경우에만 실행\n    if (qaCompleted === true) {\n      const initialState = parseInitialState();\n      console.log('=== 초기 상태 복원 ===');\n      console.log('URL에서 파싱된 상태:', initialState);\n      \n      if (initialState.selectedPersonaItem) {\n        setSelectedPersonaItem(initialState.selectedPersonaItem);\n      }\n      \n      if (initialState.selectedConversationItem) {\n        setSelectedConversationItem(initialState.selectedConversationItem);\n      }\n      \n      if (initialState.personaId && personas[initialState.personaId]) {\n        selectPersona(initialState.personaId);\n      }\n    }\n  }, [personas, parseInitialState, selectPersona, qaCompleted]);\n\n  // 언어화 스레드 로드 (QA 완료 후에만 실행)\n  const loadVerbalizationThreads = useCallback(async () => {\n    if (qaCompleted !== true) return;\n    \n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        setSelectedVerbalizationThread(prevSelected => {\n          if (prevSelected) {\n            const updatedSelectedThread = response.data?.find(\n              thread => thread.id === prevSelected.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n              return updatedSelectedThread;\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n              return response.data?.[0] || null;\n          }\n          } else if (response.data && response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n            return response.data[0];\n        }\n          return null;\n        });\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  }, [qaCompleted]); // qaCompleted 의존성 추가\n\n  // 언어화 모드일 때 스레드 로드 (QA 완료 후에만)\n  useEffect(() => {\n    if (qaCompleted === true && selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem, loadVerbalizationThreads, qaCompleted]);\n\n  // 최근 상호작용 스레드 로드\n  useEffect(() => {\n    // QA가 완료된 경우에만 실행\n    if (qaCompleted !== true) return;\n\n    const loadRecentThread = async () => {\n      if (!selectedConversationItem || !selectedConversationItem.startsWith('recent-thread::')) {\n        setViewingRecentThread(null);\n        return;\n      }\n\n      const parts = selectedConversationItem.split('::');\n      if (parts.length < 3) {\n        setViewingRecentThread(null);\n        return;\n      }\n      const threadId = parts[1];\n      const personaId = parts[2];\n\n      setIsRecentThreadLoading(true);\n      try {\n        let response;\n        let thread: TrainingThread | undefined;\n        \n        if (personaId === 'verbalization') {\n          response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            thread = response.data.find((t: TrainingThread) => t.id === threadId);\n          }\n        } else {\n          response = await chatApi.getPersonaThreads(personaId);\n          if (response.data) {\n            thread = response.data.find((t: TrainingThread) => t.id === threadId);\n          }\n        }\n\n        if (thread) {\n          const personaName = personaId === 'verbalization' ? '언어화' : (personas[personaId]?.name || '알 수 없음');\n          setViewingRecentThread({\n            ...thread,\n            persona_id: personaId,\n            persona_name: personaName,\n          });\n        } else {\n          setViewingRecentThread(null);\n        }\n      } catch (error) {\n        console.error('최근 상호작용 스레드 로드 실패:', error);\n        setViewingRecentThread(null);\n      } finally {\n        setIsRecentThreadLoading(false);\n      }\n    };\n\n    if (selectedPersonaItem === 'recent') {\n      loadRecentThread();\n    } else {\n      setViewingRecentThread(null);\n    }\n  }, [selectedConversationItem, selectedPersonaItem, personas, qaCompleted]);\n\n  // QA 체크가 진행 중이면 로딩 화면 표시\n  if (isCheckingQaStatus) {\n    return (\n      <div style={{\n        display: 'flex',\n        justifyContent: 'center',\n        alignItems: 'center',\n        height: '100vh',\n        fontSize: '1.2rem',\n        color: '#666'\n      }}>\n        시스템을 준비하고 있습니다...\n      </div>\n    );\n  }\n\n  // QA가 미완료면 빈 컴포넌트 반환 (리다이렉트 중)\n  if (qaCompleted === false) {\n    return null;\n  }\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin' && actualItemId !== 'vault') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러\n  const handleNavigateToPersona = (personaId: string, mode: 'sentence') => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 해석 모드로 이동해야 하는지 확인\n    const shouldNavigateToInterpretation = sessionStorage.getItem('navigateToInterpretationMode');\n    if (shouldNavigateToInterpretation === 'true') {\n      sessionStorage.removeItem('navigateToInterpretationMode'); // 사용 후 제거\n      setSelectedConversationItem('interpretation');\n    } else if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n    }\n  };\n\n  // 저장고에서 페르소나로 이동 핸들러 (선택된 문장과 함께)\n  const handleNavigateToPersonaWithSentence = (personaId: string, mode: 'sentence', selectedSentence: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 있는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    }\n\n    // 페르소나 선택 및 모드 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 저장고 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    \n    // 문장 모드로 이동하면서 선택된 문장을 저장\n    if (mode === 'sentence') {\n      setSelectedConversationItem('sentence');\n      // 선택된 문장을 전역 상태나 로컬 스토리지에 임시 저장\n      sessionStorage.setItem('selectedSentenceForInput', selectedSentence);\n      console.log('선택된 문장 저장됨:', selectedSentence);\n    }\n  };\n\n  // 저장고에서 스레드로 이동 핸들러\n  const handleNavigateToThread = (threadId: string, threadType: string, interactionMessage?: string) => {\n    console.log('=== 저장고에서 스레드로 이동 ===');\n    console.log('threadId:', threadId);\n    console.log('threadType:', threadType);\n    console.log('interactionMessage:', interactionMessage);\n    \n    // 상호작용 메시지가 있으면 sessionStorage에 저장\n    if (interactionMessage) {\n      sessionStorage.setItem('selectedSentenceForInput', interactionMessage);\n      console.log('상호작용 메시지를 sessionStorage에 저장:', interactionMessage);\n    }\n    \n    // 구형 해석 ID 형태 확인 (예: interpretation_sigmund_freud)\n    // 신형은 타임스탬프가 포함되어 있으므로 숫자가 끝에 있는지 확인\n    const isLegacyInterpretationId = threadId.startsWith('interpretation_') && \n                                    !threadId.includes('-') && \n                                    !/\\d{10,}$/.test(threadId); // 10자리 이상 숫자로 끝나지 않는 경우만 구형\n    \n    console.log('isLegacyInterpretationId:', isLegacyInterpretationId);\n    console.log('타임스탬프 테스트:', /\\d{10,}$/.test(threadId));\n    \n    // 언어화 스레드인 경우\n    if (threadType === 'verbalization') {\n      console.log('언어화 스레드로 이동');\n      setSelectedPersonaItem('verbalization');\n      setIsConversationSidebarCollapsed(false);\n      \n      // 해당 스레드를 찾아서 선택\n      const loadAndSelectThread = async () => {\n        try {\n          const response = await chatApi.getVerbalizationThreads();\n          if (response.data) {\n            const targetThread = response.data.find((thread: TrainingThread) => thread.id === threadId);\n            if (targetThread) {\n              console.log('타겟 언어화 스레드 찾음:', targetThread.id);\n              setSelectedVerbalizationThread(targetThread);\n              setVerbalizationThreads(response.data);\n            } else {\n              console.warn('타겟 언어화 스레드를 찾을 수 없음:', threadId);\n              // 폴백: 첫 번째 스레드 선택\n              if (response.data.length > 0) {\n                setSelectedVerbalizationThread(response.data[0]);\n                setVerbalizationThreads(response.data);\n              }\n            }\n          }\n        } catch (error) {\n          console.error('언어화 스레드 로딩 오류:', error);\n        }\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n      };\n      \n      loadAndSelectThread();\n      return;\n    }\n    \n\n    \n    // 해석 타입인 경우 특별 처리\n    if (threadType === 'interpretation') {\n      console.log('해석 타입 스레드 처리:', threadId);\n      \n      // 해석 스레드의 경우 페르소나 ID를 추출하여 해석 모드로 이동\n      const extractPersonaIdFromThreadId = (id: string): string | null => {\n        // interpretation_persona_timestamp 형태 또는 interpretation_persona 형태에서 페르소나 ID 추출\n        const parts = id.split('_');\n        console.log('스레드 ID 파싱:', parts);\n        if (parts.length >= 2 && parts[0] === 'interpretation') {\n          const extractedPersonaId = parts[1];\n          console.log('추출된 페르소나 ID:', extractedPersonaId);\n          return extractedPersonaId;  // 페르소나 ID 부분\n        }\n        return null;\n      };\n      \n      const personaId = extractPersonaIdFromThreadId(threadId);\n      console.log('최종 페르소나 ID:', personaId);\n      console.log('페르소나 존재 여부:', personaId && personas[personaId]);\n      \n      if (personaId && personas[personaId]) {\n        const persona = personas[personaId];\n        console.log('해석 스레드용 페르소나 찾음:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[personaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해석 모드로 이동\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem('interpretation');\n        \n        console.log('해석 모드로 이동 완료');\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        return;\n      } else {\n        console.error('해석 스레드에서 페르소나 ID를 찾을 수 없음, 훈습 스레드 탐색으로 폴백:', threadId);\n        // 페르소나를 찾지 못하면 훈습 스레드 탐색 로직으로 폴백\n      }\n    }\n    \n    // 훈습 스레드인 경우 - 스레드 ID를 통해 해당 스레드를 찾고 페르소나 정보 추출\n    const loadAndNavigateToTrainingThread = async () => {\n      try {\n        console.log('훈습 스레드 정보 로딩 중...');\n        \n        // 모든 페르소나의 스레드를 검색해서 해당 스레드를 찾기\n        let foundThread = null;\n        let foundPersonaId = null;\n        \n        for (const personaId of Object.keys(personas)) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const targetThread = threadsResponse.data.find(thread => thread.id === threadId);\n              if (targetThread) {\n                console.log('스레드를 찾음:', targetThread.id, 'in persona:', personaId);\n                foundThread = targetThread;\n                foundPersonaId = personaId;\n                break;\n              }\n            }\n          } catch (error) {\n            console.warn(`페르소나 ${personaId}의 스레드 로딩 실패:`, error);\n          }\n        }\n        \n        if (!foundThread || !foundPersonaId) {\n          console.error('해당 스레드를 찾을 수 없음:', threadId);\n          alert('해당 스레드를 찾을 수 없습니다.');\n          return;\n        }\n        \n        const persona = personas[foundPersonaId];\n        console.log('찾은 페르소나:', persona.name);\n        \n        // 해석이 있는지 확인\n        const existingInterpretation = interpretationStore[foundPersonaId];\n        \n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId: foundPersonaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n\n        // 페르소나 선택 및 해당 스레드로 이동\n        selectPersona(foundPersonaId);\n        setSelectedPersonaItem(null); // 저장고 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${threadType}-thread-${threadId}`);\n        \n        console.log('훈습 스레드로 이동 완료:', `${threadType}-thread-${threadId}`);\n        \n        // ConversationSidebar 새로고침\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n      } catch (error) {\n        console.error('훈습 스레드 로딩 오류:', error);\n        alert('스레드 정보를 로딩하는 중 오류가 발생했습니다.');\n      }\n    };\n    \n    loadAndNavigateToTrainingThread();\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n    \n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: persona?.name || '',\n      content: interpretation,\n      messages: [\n        {\n          role: 'assistant',\n          content: interpretation,\n          timestamp: new Date().toISOString(),\n        }\n      ],\n    });\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택된 경우 해당 스레드의 데이터 사용, 아니면 가장 최신 해석 스레드 사용 (나아가기와 동일한 로직)\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지 객체 생성\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString(),\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        \n        // 사용자 메시지를 먼저 UI에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n        \n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n\n        if (response.data && response.data.success) {\n          // 백엔드에서 받은 완전한 스레드 데이터로 UI 업데이트\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: response.data?.thread?.messages || [],\n          } : null);\n          \n          setIsInterpretationLoading(false);\n          \n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅\n        console.log('기본 해석 기반 채팅');\n        \n        // 사용자 메시지를 먼저 UI에 반영\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n\n        const response = await chatApi.chatWithInterpretation(\n          currentInterpretation.personaId,\n          message\n        );\n\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant' as const,\n            content: response.data.response,\n            timestamp: response.data.timestamp,\n          };\n          \n          // AI 응답 추가\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, assistantMessage],\n          } : null);\n\n          setIsInterpretationLoading(false);\n          \n          // 기본 해석 채팅 완료 후 ConversationSidebar 새로고침\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          return true;\n        } else {\n          // API 호출 실패 시 폴백\n          console.error('해석 기반 채팅 API 실패:', response.error);\n          const fallbackMessage = {\n            role: 'assistant' as const,\n            content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, fallbackMessage],\n          } : null);\n\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      \n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant' as const,\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString(),\n      };\n\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n      } : null);\n\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    \n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      \n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || [],\n        });\n        \n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        \n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n        \n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && selectedPersonaItem !== 'vault' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 영역 - 저장고 모드일 때는 저장고 뷰, 그 외에는 채팅 영역 */}\n        {selectedPersonaItem === 'vault' ? (\n          <VaultView\n            personas={personas}\n            onNavigateToPersona={handleNavigateToPersona}\n            onNavigateToThread={handleNavigateToThread}\n            onNavigateToPersonaWithSentence={handleNavigateToPersonaWithSentence}\n          />\n        ) : (\n        <ChatArea\n          selectedConversation={selectedConversation}\n          conversations={conversations}\n          personas={personas}\n          globalMessages={globalMessages}\n          isLoading={currentInterpretation ? isInterpretationLoading : isLoading}\n          error={error}\n          onSendInitialMessage={sendInitialMessage}\n          onContinueConversation={continueConversation}\n          onClearError={clearError}\n          selectedPersonaItem={selectedPersonaItem}\n          onSelectPersona={handlePersonaSelection}\n          onInterpretationComplete={handleInterpretationComplete}\n          selectedConversationItem={selectedConversationItem}\n          currentInterpretation={currentInterpretation}\n          onInterpretationMessage={handleInterpretationMessage}\n          onUpdateInterpretation={handleUpdateInterpretation}\n          onUpdateConversation={handleUpdateConversation}\n          onSwitchConversationMode={handleSwitchConversationMode}\n          onRefreshConversationSidebar={handleRefreshConversationSidebar}\n          viewingRecentThread={viewingRecentThread}\n          isRecentThreadLoading={isRecentThreadLoading}\n          onNavigateToThread={handleNavigateToThread}\n            recentInteractionsProps={{\n              personas,\n              onSelectPersona: handleRecentPersonaSelect,\n              onThreadSelect: handleRecentThreadSelect,\n            }}\n            verbalizationProps={{\n              selectedThread: selectedVerbalizationThread,\n              threads: verbalizationThreads,\n              onThreadUpdate: handleVerbalizationThreadUpdate,\n              onCreateNewThread: handleCreateNewVerbalizationThread,\n            }}\n        />\n        )}\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}