{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\InterpretationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n_c = Container;\nconst InterpretationSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\nconst InterpretationTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\nconst InterpretationContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\nconst NewInterpretationButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c2 = ChatSection;\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n_c3 = ChatMessages;\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n_c4 = ChatInputSection;\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\n_c5 = EmptyChat;\nconst Toast = styled.div`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n_c6 = Toast;\nconst InterpretationView = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads\n}) => {\n  _s();\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트)\n  useEffect(() => {\n    const loadThreadSentenceData = async () => {\n      if (!personaId) return;\n      try {\n        // 해석 스레드의 경우 기본 스레드 ID 사용\n        const threadId = `interpretation_${personaId}`;\n        const data = await sentenceApi.getThreadSentenceData(threadId);\n        setMemos(data.memos);\n        setHighlightedSentences(new Set(data.highlights));\n      } catch (error) {\n        console.error('스레드 문장 데이터 로딩 실패:', error);\n      }\n    };\n    loadThreadSentenceData();\n  }, [personaId]);\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex, newContent) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async action => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'interpretation_chat',\n            // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['interpretation']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA,, sentenceIndexA] = a.split('_');\n            const [timestampB,, sentenceIndexB] = b.split('_');\n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n\n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({\n            ...prev,\n            [bottomSentenceId]: ''\n          }));\n\n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n\n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          const threadId = `interpretation_${personaId}`;\n          selectedIds.forEach(id => {\n            sentenceApi.createHighlight({\n              sentence_id: id,\n              thread_id: threadId,\n              thread_type: 'interpretation'\n            }).catch(error => {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n            });\n          });\n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n\n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n\n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n\n          // 백엔드에서 모든 하이라이트 삭제\n          selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n\n          // 백엔드에 모든 하이라이트 저장\n          const threadId = `interpretation_${personaId}`;\n          selectedIds.forEach(id => {\n            sentenceApi.createHighlight({\n              sentence_id: id,\n              thread_id: threadId,\n              thread_type: 'interpretation'\n            }).catch(error => {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n            });\n          });\n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = '';\n      console.log('messages 개수:', (messages === null || messages === void 0 ? void 0 : messages.length) || 0);\n      if (messages && messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = messages.slice().reverse().find(msg => msg.role === 'assistant');\n        console.log('lastAssistantMessage:', lastAssistantMessage);\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n          console.log('Assistant 메시지로 설정된 contentToSave:', contentToSave.substring(0, 100) + '...');\n        }\n      }\n\n      // 채팅 메시지가 없으면 저장하지 않음\n      if (!contentToSave || contentToSave.trim() === '') {\n        console.error('저장할 채팅 내용이 없습니다');\n        showCopyToast('저장할 채팅 내용이 없습니다. 먼저 채팅을 진행해주세요.');\n        return;\n      }\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: contentToSave.length,\n        contentPreview: contentToSave.substring(0, 100) + '...'\n      });\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      const response = await chatApi.saveCurrentAsInterpretation(personaId, contentToSave);\n      console.log('API 응답:', response);\n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('현재 Assistant 응답이 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('현재 Assistant 응답이 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    console.log('=== handleSunAction 완료 ===');\n  };\n  const handlePersonAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = interpretation; // 기본값: 해석 내용\n\n      if (messages && messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('현재 Assistant 응답이 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n  const handleDocumentAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = interpretation; // 기본값: 해석 내용\n\n      if (messages && messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = messages.slice().reverse().find(msg => msg.role === 'assistant');\n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n\n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 스레드에 저장\n      const {\n        chatApi\n      } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('현재 Assistant 응답이 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(Container, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 639,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ChatSection, {\n      children: [/*#__PURE__*/_jsxDEV(ChatMessages, {\n        ref: chatMessagesRef,\n        children: [messages.length === 0 ? /*#__PURE__*/_jsxDEV(EmptyChat, {\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '24px',\n              marginBottom: '8px'\n            },\n            children: \"\\uD83D\\uDCAC\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 647,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            children: \"\\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 648,\n            columnNumber: 15\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            style: {\n              fontSize: '12px',\n              marginTop: '4px'\n            },\n            children: [personaName, \"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 649,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 646,\n          columnNumber: 13\n        }, this) : messages.map((message, index) => message.role === 'user' ? /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...message,\n            persona_id: undefined,\n            persona_name: undefined\n          },\n          personas: {},\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onEdit: () => handleStartEdit(index),\n          isEditing: editingMessageIndex === index,\n          onEditSave: newContent => handleEditMessage(index, newContent),\n          onEditCancel: handleCancelEdit\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 656,\n          columnNumber: 17\n        }, this) : /*#__PURE__*/_jsxDEV(SelectableMessage, {\n          message: {\n            ...message,\n            persona_id: 'current_persona',\n            persona_name: personaName\n          },\n          personas: {\n            current_persona: {\n              name: personaName,\n              description: '',\n              color: '#6c757d',\n              prompt: '',\n              category: '',\n              subcategory: ''\n            }\n          },\n          selectedSentences: isSentenceModeActive ? selectedSentences : new Set(),\n          highlightedSentences: highlightedSentences,\n          memos: memos,\n          onToggleSelect: isSentenceModeActive ? handleToggleSelect : () => {},\n          onMemoChange: handleMemoChange,\n          onDeleteMemo: handleDeleteMemo,\n          showSentenceSelector: isSentenceModeActive,\n          showActionButtons: true,\n          onCopy: () => handleCopyMessage(message.content),\n          onSunAction: handleSunAction,\n          onPersonAction: handlePersonAction,\n          onDocumentAction: handleDocumentAction\n        }, `interpretation_${index}`, false, {\n          fileName: _jsxFileName,\n          lineNumber: 672,\n          columnNumber: 17\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: personaName,\n          personaColor: \"#6c757d\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 707,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 644,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(ChatInputSection, {\n        children: /*#__PURE__*/_jsxDEV(MessageInput, {\n          ref: messageInputRef,\n          onSendMessage: onSendMessage,\n          disabled: isLoading,\n          placeholder: `${personaName}에게 해석에 대해 질문해보세요...`,\n          onToggleSentenceMode: handleToggleSentenceMode,\n          isSentenceModeActive: isSentenceModeActive,\n          hasSelectedSentences: selectedSentences.size > 0,\n          currentInterpretation: interpretation,\n          personaId: personaId,\n          onGenerateProceed: handlePersonAction,\n          onGenerateSentence: handleDocumentAction,\n          currentChatMessages: messages,\n          onRefreshThreads: onRefreshThreads\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 715,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 714,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 643,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n      show: isSentenceModeActive && selectedSentences.size > 0,\n      onMenuAction: handleMenuAction,\n      personaId: personaId,\n      currentInterpretation: interpretation\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 733,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 638,\n    columnNumber: 5\n  }, this);\n};\n_s(InterpretationView, \"JVuIi0zpPVcsHCA3pvJZYrOeioQ=\");\n_c7 = InterpretationView;\nexport default InterpretationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7;\n$RefreshReg$(_c, \"Container\");\n$RefreshReg$(_c2, \"ChatSection\");\n$RefreshReg$(_c3, \"ChatMessages\");\n$RefreshReg$(_c4, \"ChatInputSection\");\n$RefreshReg$(_c5, \"EmptyChat\");\n$RefreshReg$(_c6, \"Toast\");\n$RefreshReg$(_c7, \"InterpretationView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","jsxDEV","_jsxDEV","Container","div","_c","InterpretationSection","InterpretationTitle","h2","InterpretationContent","NewInterpretationButton","button","ChatSection","_c2","ChatMessages","_c3","ChatInputSection","_c4","EmptyChat","_c5","Toast","props","show","_c6","InterpretationView","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","onRefreshThreads","_s","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","loadThreadSentenceData","threadId","data","getThreadSentenceData","highlights","error","console","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","content","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","action","selectedIds","Array","from","selectedTexts","map","id","timestamp","sentenceIndex","split","find","m","sentences","s","trim","filter","length","parseInt","formattedText","join","insertText","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","sortedIds","sort","a","b","timestampA","sentenceIndexA","timestampB","sentenceIndexB","Date","getTime","bottomSentenceId","createHighlight","thread_id","thread_type","log","currentlyHighlighted","notHighlighted","deleteHighlight","handleToggleSentenceMode","handleSunAction","contentToSave","lastAssistantMessage","slice","reverse","msg","role","substring","contentLength","contentPreview","chatApi","response","saveCurrentAsInterpretation","persona_id","Error","String","handlePersonAction","saveCurrentAsProceed","handleDocumentAction","saveCurrentAsSentence","children","fileName","_jsxFileName","lineNumber","columnNumber","ref","fontSize","marginBottom","marginTop","index","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction","_c7","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n  onRefreshThreads?: () => void;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst InterpretationSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\n\nconst InterpretationTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst InterpretationContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\n\nconst NewInterpretationButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n}) => {\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 스레드 데이터 불러오기 (메모/하이라이트)\n  useEffect(() => {\n    const loadThreadSentenceData = async () => {\n      if (!personaId) return;\n      \n      try {\n        // 해석 스레드의 경우 기본 스레드 ID 사용\n        const threadId = `interpretation_${personaId}`;\n        const data = await sentenceApi.getThreadSentenceData(threadId);\n        \n        setMemos(data.memos);\n        setHighlightedSentences(new Set(data.highlights));\n      } catch (error) {\n        console.error('스레드 문장 데이터 로딩 실패:', error);\n      }\n    };\n\n    loadThreadSentenceData();\n  }, [personaId]);\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'interpretation_chat', // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['interpretation']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 가장 아래에 있는 문장 ID 찾기 (timestamp와 sentence index가 가장 큰 것)\n          const sortedIds = selectedIds.sort((a, b) => {\n            const [timestampA, , sentenceIndexA] = a.split('_');\n            const [timestampB, , sentenceIndexB] = b.split('_');\n            \n            if (timestampA !== timestampB) {\n              return new Date(timestampA).getTime() - new Date(timestampB).getTime();\n            }\n            return parseInt(sentenceIndexA) - parseInt(sentenceIndexB);\n          });\n          \n          const bottomSentenceId = sortedIds[sortedIds.length - 1];\n          \n          // 가장 아래 문장에만 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [bottomSentenceId]: '' }));\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 메모 저장 (가장 아래 문장만)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: bottomSentenceId,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          const threadId = `interpretation_${personaId}`;\n          selectedIds.forEach(id => {\n            sentenceApi.createHighlight({\n              sentence_id: id,\n              thread_id: threadId,\n              thread_type: 'interpretation'\n            }).catch(error => {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n          });\n        });\n          \n          console.log('메모 추가: 가장 아래 문장에만, 하이라이트: 모든 선택된 문장에');\n        }\n        break;\n      \n      case 'highlight':\n        // 모든 선택된 문장에 하이라이트 적용/제거\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n        // 하이라이트 상태를 한 번에 업데이트\n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n        selectedIds.forEach(id => {\n            sentenceApi.deleteHighlight(id).catch(error => {\n              console.warn('백엔드 하이라이트 삭제 실패:', error);\n            });\n          });\n          \n          console.log('모든 선택된 문장의 하이라이트 제거');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n          const threadId = `interpretation_${personaId}`;\n          selectedIds.forEach(id => {\n            sentenceApi.createHighlight({\n              sentence_id: id,\n              thread_id: threadId,\n              thread_type: 'interpretation'\n            }).catch(error => {\n              console.warn('백엔드 하이라이트 저장 실패:', error);\n          });\n        });\n          \n          console.log('모든 선택된 문장에 하이라이트 추가');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    \n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = '';\n      \n      console.log('messages 개수:', messages?.length || 0);\n      \n      if (messages && messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = messages\n          .slice()\n          .reverse()\n          .find(msg => msg.role === 'assistant');\n        \n        console.log('lastAssistantMessage:', lastAssistantMessage);\n        \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n          console.log('Assistant 메시지로 설정된 contentToSave:', contentToSave.substring(0, 100) + '...');\n        }\n      }\n      \n      // 채팅 메시지가 없으면 저장하지 않음\n      if (!contentToSave || contentToSave.trim() === '') {\n        console.error('저장할 채팅 내용이 없습니다');\n        showCopyToast('저장할 채팅 내용이 없습니다. 먼저 채팅을 진행해주세요.');\n        return;\n      }\n      \n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: contentToSave.length,\n        contentPreview: contentToSave.substring(0, 100) + '...'\n      });\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 해석 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      \n      const response = await chatApi.saveCurrentAsInterpretation(personaId, contentToSave);\n      console.log('API 응답:', response);\n      \n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('현재 Assistant 응답이 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('현재 Assistant 응답이 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    console.log('=== handleSunAction 완료 ===');\n  };\n\n  const handlePersonAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = interpretation; // 기본값: 해석 내용\n      \n      if (messages && messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = messages\n          .slice()\n          .reverse()\n          .find(msg => msg.role === 'assistant');\n        \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('현재 Assistant 응답이 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 현재 Assistant의 마지막 채팅 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = interpretation; // 기본값: 해석 내용\n      \n      if (messages && messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = messages\n          .slice()\n          .reverse()\n          .find(msg => msg.role === 'assistant');\n        \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('현재 Assistant 응답이 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\n              <div>해석에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#6c757d',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#6c757d\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={onSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 해석에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={interpretation}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={messages}\n            onRefreshThreads={onRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={interpretation}\n      />\n    </Container>\n  );\n};\n\nexport default InterpretationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}