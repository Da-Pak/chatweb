{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\features\\\\training\\\\components\\\\InterpretationView.tsx\";\nimport React from 'react';\nimport TrainingChatView from '../../shared/components/TrainingChatView';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InterpretationView = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId\n}) => {\n  const handleSwitchToMode = mode => {\n    if (onSwitchToMode) {\n      onSwitchToMode(mode);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(TrainingChatView, {\n    personaId: personaId || '',\n    personaName: personaName,\n    contextContent: interpretation,\n    contextType: \"interpretation\",\n    messages: messages,\n    isLoading: isLoading,\n    onSendMessage: onSendMessage,\n    onEditMessage: onEditMessage,\n    onGenerateNewContent: onGenerateNewInterpretation,\n    onSwitchToMode: handleSwitchToMode\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n};\n_c = InterpretationView;\nexport default InterpretationView;\nvar _c;\n$RefreshReg$(_c, \"InterpretationView\");","map":{"version":3,"names":["React","TrainingChatView","jsxDEV","_jsxDEV","InterpretationView","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","handleSwitchToMode","mode","contextContent","contextType","onGenerateNewContent","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport TrainingChatView from '../../shared/components/TrainingChatView';\nimport { chatApi } from '../../shared/api/chatApi';\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n}\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n}) => {\n  const handleSwitchToMode = (mode: 'interpretation' | 'proceed' | 'sentence') => {\n    if (onSwitchToMode) {\n      onSwitchToMode(mode as 'proceed' | 'sentence');\n    }\n  };\n\n  return (\n    <TrainingChatView\n      personaId={personaId || ''}\n      personaName={personaName}\n      contextContent={interpretation}\n      contextType=\"interpretation\"\n      messages={messages}\n      isLoading={isLoading}\n      onSendMessage={onSendMessage}\n      onEditMessage={onEditMessage}\n      onGenerateNewContent={onGenerateNewInterpretation}\n      onSwitchToMode={handleSwitchToMode}\n    />\n  );\n};\n\nexport default InterpretationView; "],"mappings":";AAAA,OAAOA,KAAK,MAA+B,OAAO;AAClD,OAAOC,gBAAgB,MAAM,0CAA0C;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAmBxE,MAAMC,kBAAqD,GAAGA,CAAC;EAC7DC,cAAc;EACdC,WAAW;EACXC,aAAa;EACbC,aAAa;EACbC,SAAS;EACTC,QAAQ;EACRC,2BAA2B;EAC3BC,cAAc;EACdC;AACF,CAAC,KAAK;EACJ,MAAMC,kBAAkB,GAAIC,IAA+C,IAAK;IAC9E,IAAIH,cAAc,EAAE;MAClBA,cAAc,CAACG,IAA8B,CAAC;IAChD;EACF,CAAC;EAED,oBACEZ,OAAA,CAACF,gBAAgB;IACfY,SAAS,EAAEA,SAAS,IAAI,EAAG;IAC3BP,WAAW,EAAEA,WAAY;IACzBU,cAAc,EAAEX,cAAe;IAC/BY,WAAW,EAAC,gBAAgB;IAC5BP,QAAQ,EAAEA,QAAS;IACnBD,SAAS,EAAEA,SAAU;IACrBF,aAAa,EAAEA,aAAc;IAC7BC,aAAa,EAAEA,aAAc;IAC7BU,oBAAoB,EAAEP,2BAA4B;IAClDC,cAAc,EAAEE;EAAmB;IAAAK,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACpC,CAAC;AAEN,CAAC;AAACC,EAAA,GA/BInB,kBAAqD;AAiC3D,eAAeA,kBAAkB;AAAC,IAAAmB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}