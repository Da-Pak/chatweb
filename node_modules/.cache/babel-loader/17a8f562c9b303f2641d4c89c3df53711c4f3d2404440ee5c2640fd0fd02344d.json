{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\ChatArea.tsx\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState } from 'react';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from './TrainingCategoryView';\nimport InterpretationView from './InterpretationView';\nimport PersonaAdminPanel from './PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport { MainArea, ChatContent, EmptyState, EmptyStateTitle, EmptyStateText } from '../styles/GlobalStyle';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ChatArea = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onMenuAction,\n  onCreateNewInterpretation,\n  proceedStore,\n  sentenceStore\n}) => {\n  _s();\n  var _personas$currentConv, _personas$currentConv2, _personas$currentConv3;\n  const chatContentRef = useRef(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n\n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation === null || currentConversation === void 0 ? void 0 : currentConversation.messages, globalMessages, isLoading]);\n  const handleSendMessage = async message => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex, newContent) => {\n    if (!currentInterpretation) return false;\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString()\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(currentInterpretation.personaId, newContent);\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant',\n              content: response.data.response,\n              timestamp: response.data.timestamp\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant',\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString()\n            };\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse]\n            };\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n\n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant',\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString()\n          };\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse]\n          };\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex, newContent) => {\n    if (!selectedConversation || !currentConversation) return false;\n    try {\n      var _result$data;\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      if ((_result$data = result.data) !== null && _result$data !== void 0 && _result$data.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        console.log('메시지가 수정되고 새로운 AI 응답이 생성되었습니다:', {\n          conversation: result.data.updated_conversation,\n          newResponse: result.data.new_response\n        });\n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n  const getHeaderTitle = () => {\n    if (selectedConversation && currentConversation) {\n      const persona = personas[currentConversation.persona_id];\n      return `${persona === null || persona === void 0 ? void 0 : persona.name}과의 대화`;\n    }\n    return '다중 페르소나 채팅';\n  };\n  const getHeaderSubtitle = () => {\n    if (selectedConversation && currentConversation) {\n      return `${currentConversation.messages.length}개의 메시지`;\n    }\n    return '모든 페르소나와 대화하거나 개별 페르소나를 선택하세요';\n  };\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    const latestMessage = globalMessages[globalMessages.length - 1];\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'user',\n          content: latestMessage.user_message,\n          timestamp: latestMessage.timestamp\n        },\n        personas: personas,\n        showActionButtons: false\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 258,\n        columnNumber: 9\n      }, this), latestMessage.responses.map(response => /*#__PURE__*/_jsxDEV(Message, {\n        message: {\n          role: 'assistant',\n          content: response.content,\n          timestamp: response.timestamp,\n          persona_id: response.persona_id,\n          persona_name: response.persona_name\n        },\n        personas: personas,\n        showActionButtons: true\n      }, `${latestMessage.id}_${response.persona_id}`, false, {\n        fileName: _jsxFileName,\n        lineNumber: 270,\n        columnNumber: 11\n      }, this)), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '14px',\n            color: '#666',\n            marginBottom: '8px'\n          },\n          children: \"\\uD83D\\uDCA1 \\uAC01 \\uD398\\uB974\\uC18C\\uB098\\uC640 \\uAC1C\\uBCC4\\uC801\\uC73C\\uB85C \\uB300\\uD654\\uB97C \\uC774\\uC5B4\\uAC00\\uB824\\uBA74\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: {\n            fontSize: '13px',\n            color: '#888'\n          },\n          children: \"\\uC67C\\uCABD \\uC0AC\\uC774\\uB4DC\\uBC14\\uC5D0\\uC11C \\uD398\\uB974\\uC18C\\uB098\\uB97C \\uC120\\uD0DD\\uD558\\uAC70\\uB098, \\uD2B9\\uC815 \\uB300\\uD654\\uB97C \\uC120\\uD0DD\\uD558\\uC138\\uC694\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 284,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }, this);\n  };\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n    return currentConversation.messages.map((message, index) => /*#__PURE__*/_jsxDEV(Message, {\n      message: message,\n      personas: personas,\n      showActionButtons: true,\n      onCopy: () => {\n        // 메시지 내용 복사\n        navigator.clipboard.writeText(message.content).then(() => {\n          console.log('메시지가 복사되었습니다');\n        }).catch(err => {\n          console.error('복사 실패:', err);\n        });\n      },\n      onEdit: message.role === 'user' ? () => setEditingMessageIndex(index) : undefined,\n      onEditSave: message.role === 'user' ? async newContent => {\n        const success = await handleEditConversationMessage(index, newContent);\n        if (success) {\n          setEditingMessageIndex(null); // 편집 완료 시 편집 모드 해제\n        }\n        return success;\n      } : undefined,\n      onEditCancel: () => setEditingMessageIndex(null),\n      isEditing: editingMessageIndex === index,\n      onSunAction: () => console.log('해 버튼 - 향후 구현'),\n      onPersonAction: () => console.log('나 버튼 - 향후 구현'),\n      onDocumentAction: () => console.log('문 버튼 - 향후 구현')\n    }, `${currentConversation.id}_${index}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 307,\n      columnNumber: 7\n    }, this));\n  };\n  const renderEmptyState = () => /*#__PURE__*/_jsxDEV(EmptyState, {\n    children: [/*#__PURE__*/_jsxDEV(EmptyStateTitle, {\n      children: \"\\uC0C8\\uB85C\\uC6B4 \\uB300\\uD654\\uB97C \\uC2DC\\uC791\\uD574\\uBCF4\\uC138\\uC694!\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 339,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(EmptyStateText, {\n      children: Object.keys(personas).length > 0 ? /*#__PURE__*/_jsxDEV(_Fragment, {\n        children: [\"\\uC544\\uB798\\uC5D0 \\uC9C8\\uBB38\\uC744 \\uC785\\uB825\\uD558\\uBA74 \", Object.keys(personas).length, \"\\uAC1C\\uC758 \\uD398\\uB974\\uC18C\\uB098\\uAC00\", /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 343,\n          columnNumber: 64\n        }, this), \"\\uAC01\\uAC01 \\uB2E4\\uB978 \\uAD00\\uC810\\uC5D0\\uC11C \\uB2F5\\uBCC0\\uD574\\uB4DC\\uB9BD\\uB2C8\\uB2E4.\"]\n      }, void 0, true) : '페르소나 정보를 불러오는 중입니다...'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 340,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 338,\n    columnNumber: 5\n  }, this);\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return null;\n    return /*#__PURE__*/_jsxDEV(InterpretationView, {\n      interpretation: currentInterpretation.content,\n      personaName: currentInterpretation.personaName,\n      onSendMessage: onInterpretationMessage,\n      onEditMessage: handleEditInterpretationMessage,\n      isLoading: isLoading,\n      messages: currentInterpretation.messages\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 358,\n      columnNumber: 7\n    }, this);\n  };\n  return /*#__PURE__*/_jsxDEV(MainArea, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 372,\n      columnNumber: 11\n    }, this), selectedPersonaItem === 'training' ? /*#__PURE__*/_jsxDEV(TrainingCategoryView, {\n      personas: personas,\n      onSelectPersona: onSelectPersona || (() => {}),\n      onInterpretationComplete: onInterpretationComplete\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 382,\n      columnNumber: 9\n    }, this) : selectedPersonaItem === 'admin' ? /*#__PURE__*/_jsxDEV(PersonaAdminPanel, {\n      onClose: () => {\n        // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n        if (onSelectPersona) {\n          onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 388,\n      columnNumber: 9\n    }, this) : currentInterpretation && selectedConversationItem === 'interpretation' ?\n    // 해석 모드일 때 InterpretationView 사용\n    renderInterpretationView() : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(ChatContent, {\n        ref: chatContentRef,\n        children: [!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState(), !selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses(), selectedConversation && renderConversation(), isLoading && (selectedConversation && currentConversation ? /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: (_personas$currentConv = personas[currentConversation.persona_id]) === null || _personas$currentConv === void 0 ? void 0 : _personas$currentConv.name,\n          personaColor: (_personas$currentConv2 = personas[currentConversation.persona_id]) === null || _personas$currentConv2 === void 0 ? void 0 : _personas$currentConv2.color\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 414,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(LoadingMessage, {\n          personaName: \"AI\",\n          personaColor: \"#666\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 419,\n          columnNumber: 13\n        }, this))]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 401,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        onSendMessage: handleSendMessage,\n        disabled: isLoading || Object.keys(personas).length === 0,\n        placeholder: selectedConversation && currentConversation ? `${(_personas$currentConv3 = personas[currentConversation.persona_id]) === null || _personas$currentConv3 === void 0 ? void 0 : _personas$currentConv3.name}에게 메시지를 보내세요...` : \"모든 페르소나에게 질문해보세요...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 427,\n        columnNumber: 7\n      }, this)]\n    }, void 0, true)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 370,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatArea, \"4aqDf0DTWdXze7hyuLXh7DO0J4Q=\");\n_c = ChatArea;\nexport default ChatArea;\nvar _c;\n$RefreshReg$(_c, \"ChatArea\");","map":{"version":3,"names":["React","useEffect","useRef","useState","Message","MessageInput","TrainingCategoryView","InterpretationView","PersonaAdminPanel","LoadingMessage","chatApi","MainArea","ChatContent","EmptyState","EmptyStateTitle","EmptyStateText","jsxDEV","_jsxDEV","Fragment","_Fragment","ChatArea","selectedConversation","conversations","personas","globalMessages","isLoading","error","onSendInitialMessage","onContinueConversation","onClearError","selectedPersonaItem","onSelectPersona","onInterpretationComplete","selectedConversationItem","currentInterpretation","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onMenuAction","onCreateNewInterpretation","proceedStore","sentenceStore","_s","_personas$currentConv","_personas$currentConv2","_personas$currentConv3","chatContentRef","currentConversation","editingMessageIndex","setEditingMessageIndex","current","scrollTop","scrollHeight","messages","handleSendMessage","message","handleEditInterpretationMessage","messageIndex","newContent","updatedMessages","length","content","timestamp","Date","toISOString","filteredMessages","slice","response","chatWithInterpretation","personaId","data","aiResponse","role","updatedInterpretation","personaName","apiError","console","handleEditConversationMessage","_result$data","result","editMessage","success","updated_conversation","log","conversation","newResponse","new_response","getHeaderTitle","persona","persona_id","name","getHeaderSubtitle","renderInitialResponses","latestMessage","children","user_message","showActionButtons","fileName","_jsxFileName","lineNumber","columnNumber","responses","map","persona_name","id","style","margin","padding","backgroundColor","borderRadius","border","textAlign","fontSize","color","marginBottom","renderConversation","index","onCopy","navigator","clipboard","writeText","then","catch","err","onEdit","undefined","onEditSave","onEditCancel","isEditing","onSunAction","onPersonAction","onDocumentAction","renderEmptyState","Object","keys","renderInterpretationView","interpretation","onSendMessage","onEditMessage","height","borderBottom","background","onClose","ref","personaColor","disabled","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/ChatArea.tsx"],"sourcesContent":["import React, { useEffect, useRef, useState } from 'react';\nimport { Conversation, Persona, GlobalMessage } from '../types';\nimport Message from './Message';\nimport MessageInput from './MessageInput';\nimport TrainingCategoryView from './TrainingCategoryView';\nimport InterpretationView from './InterpretationView';\nimport ProceedView from './ProceedView';\nimport SentenceView from './SentenceView';\nimport PersonaAdminPanel from './PersonaAdminPanel';\nimport LoadingMessage from './LoadingMessage';\nimport { chatApi } from '../api/chatApi';\nimport {\n  MainArea,\n  ChatHeader,\n  ChatHeaderTitle,\n  ChatContent,\n  LoadingSpinner,\n  ErrorMessage,\n  EmptyState,\n  EmptyStateTitle,\n  EmptyStateText,\n} from '../styles/GlobalStyle';\n\ninterface ChatAreaProps {\n  selectedConversation: string | null;\n  conversations: Record<string, Conversation>;\n  personas: Record<string, Persona>;\n  globalMessages: GlobalMessage[];\n  isLoading: boolean;\n  error: string | null;\n  onSendInitialMessage: (message: string) => Promise<boolean>;\n  onContinueConversation: (conversationId: string, message: string) => Promise<boolean>;\n  onClearError: () => void;\n  selectedPersonaItem?: string | null; // 훈습 모드 확인용\n  onSelectPersona?: (personaId: string) => void; // 페르소나 선택 핸들러\n  onInterpretationComplete: (personaId: string, interpretation: string) => void; // 해석 완료 핸들러\n  selectedConversationItem?: string | null; // 선택된 대화 항목\n  currentInterpretation?: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null;\n  onInterpretationMessage: (message: string) => Promise<boolean>; // 해석 채팅 메시지 핸들러\n  onUpdateInterpretation?: (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => void; // 해석 업데이트 핸들러\n  onUpdateConversation?: (updatedConversation: any) => void; // 대화 업데이트 핸들러\n  onMenuAction?: (action: string) => void; // 메뉴 액션 핸들러\n  onCreateNewInterpretation?: () => void; // 새로운 해석 만들기 핸들러\n  proceedStore?: Record<string, string>; // 나아가기 저장소\n  sentenceStore?: Record<string, string>; // 문장 저장소\n}\n\nconst ChatArea: React.FC<ChatAreaProps> = ({\n  selectedConversation,\n  conversations,\n  personas,\n  globalMessages,\n  isLoading,\n  error,\n  onSendInitialMessage,\n  onContinueConversation,\n  onClearError,\n  selectedPersonaItem,\n  onSelectPersona,\n  onInterpretationComplete,\n  selectedConversationItem,\n  currentInterpretation,\n  onInterpretationMessage,\n  onUpdateInterpretation,\n  onUpdateConversation,\n  onMenuAction,\n  onCreateNewInterpretation,\n  proceedStore,\n  sentenceStore,\n}) => {\n  const chatContentRef = useRef<HTMLDivElement>(null);\n  const currentConversation = selectedConversation ? conversations[selectedConversation] : null;\n  \n  // 편집 상태 관리\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 메시지가 추가될 때마다 스크롤을 맨 아래로\n  useEffect(() => {\n    if (chatContentRef.current) {\n      chatContentRef.current.scrollTop = chatContentRef.current.scrollHeight;\n    }\n  }, [currentConversation?.messages, globalMessages, isLoading]);\n\n  const handleSendMessage = async (message: string) => {\n    if (selectedConversation) {\n      // 기존 대화에 메시지 추가\n      return await onContinueConversation(selectedConversation, message);\n    } else if (currentInterpretation) {\n      // 해석 모드에서는 해석 관련 메시지 전송\n      return await onInterpretationMessage(message);\n    } else {\n      // 새로운 대화 시작\n      return await onSendInitialMessage(message);\n    }\n  };\n\n  // 해석 메시지 수정 핸들러\n  const handleEditInterpretationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    try {\n      // 메시지 수정 - 수정 후 새로운 응답 자동 생성\n      const updatedMessages = [...currentInterpretation.messages];\n      if (messageIndex >= 0 && messageIndex < updatedMessages.length) {\n        // 수정된 메시지 업데이트\n        updatedMessages[messageIndex] = {\n          ...updatedMessages[messageIndex],\n          content: newContent,\n          timestamp: new Date().toISOString(),\n        };\n\n        // 수정된 메시지 이후의 모든 메시지들 제거\n        const filteredMessages = updatedMessages.slice(0, messageIndex + 1);\n\n        // 백엔드 API를 통해 새로운 AI 응답 생성\n        try {\n          const response = await chatApi.chatWithInterpretation(\n            currentInterpretation.personaId,\n            newContent\n          );\n\n          if (response.data) {\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: response.data.response,\n              timestamp: response.data.timestamp,\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            // 상위 컴포넌트에 업데이트 알림\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          } else {\n            // API 호출 실패 시 로컬에서 임시 응답 생성\n            const aiResponse = {\n              role: 'assistant' as const,\n              content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n              timestamp: new Date().toISOString(),\n            };\n\n            const updatedInterpretation = {\n              ...currentInterpretation,\n              messages: [...filteredMessages, aiResponse],\n            };\n\n            if (onUpdateInterpretation) {\n              onUpdateInterpretation(updatedInterpretation);\n            }\n\n            return true;\n          }\n        } catch (apiError) {\n          console.error('해석 API 호출 실패:', apiError);\n          \n          // API 호출 실패 시 로컬에서 임시 응답 생성\n          const aiResponse = {\n            role: 'assistant' as const,\n            content: `${currentInterpretation.personaName}의 관점에서 수정된 메시지에 대해 새롭게 응답드리겠습니다.\\n\\n\"${newContent}\"에 대해 분석해보면, 이는 이전과는 다른 맥락을 제시하고 있습니다. 수정된 내용을 바탕으로 새로운 해석과 통찰을 제공하겠습니다.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          const updatedInterpretation = {\n            ...currentInterpretation,\n            messages: [...filteredMessages, aiResponse],\n          };\n\n          if (onUpdateInterpretation) {\n            onUpdateInterpretation(updatedInterpretation);\n          }\n\n          return true;\n        }\n      }\n      return false;\n    } catch (error) {\n      console.error('해석 메시지 수정 실패:', error);\n      return false;\n    }\n  };\n\n  // 일반 대화 메시지 수정 핸들러\n  const handleEditConversationMessage = async (messageIndex: number, newContent: string): Promise<boolean> => {\n    if (!selectedConversation || !currentConversation) return false;\n\n    try {\n      const result = await chatApi.editMessage(selectedConversation, messageIndex, newContent);\n      \n      if (result.data?.success && result.data.updated_conversation) {\n        // 수정된 대화 정보로 즉시 UI 업데이트\n        if (onUpdateConversation) {\n          onUpdateConversation(result.data.updated_conversation);\n        }\n        \n        console.log('메시지가 수정되고 새로운 AI 응답이 생성되었습니다:', {\n          conversation: result.data.updated_conversation,\n          newResponse: result.data.new_response\n        });\n        \n        return true;\n      } else {\n        console.error('메시지 수정 실패:', result.error);\n        return false;\n      }\n    } catch (error) {\n      console.error('메시지 수정 요청 실패:', error);\n      return false;\n    }\n  };\n\n  const getHeaderTitle = () => {\n    if (selectedConversation && currentConversation) {\n      const persona = personas[currentConversation.persona_id];\n      return `${persona?.name}과의 대화`;\n    }\n    return '다중 페르소나 채팅';\n  };\n\n  const getHeaderSubtitle = () => {\n    if (selectedConversation && currentConversation) {\n      return `${currentConversation.messages.length}개의 메시지`;\n    }\n    return '모든 페르소나와 대화하거나 개별 페르소나를 선택하세요';\n  };\n\n  const renderInitialResponses = () => {\n    if (!globalMessages.length) return null;\n    \n    const latestMessage = globalMessages[globalMessages.length - 1];\n    \n    return (\n      <div>\n        {/* 사용자 질문 */}\n        <Message\n          message={{\n            role: 'user',\n            content: latestMessage.user_message,\n            timestamp: latestMessage.timestamp,\n          }}\n          personas={personas}\n          showActionButtons={false}\n        />\n        \n        {/* 모든 페르소나 응답 */}\n        {latestMessage.responses.map((response) => (\n          <Message\n            key={`${latestMessage.id}_${response.persona_id}`}\n            message={{\n              role: 'assistant',\n              content: response.content,\n              timestamp: response.timestamp,\n              persona_id: response.persona_id,\n              persona_name: response.persona_name,\n            }}\n            personas={personas}\n            showActionButtons={true}\n          />\n        ))}\n        \n        <div style={{\n          margin: '20px 0',\n          padding: '16px',\n          backgroundColor: '#f8f8f8',\n          borderRadius: '8px',\n          border: 'none',\n          textAlign: 'center',\n        }}>\n          <div style={{ fontSize: '14px', color: '#666', marginBottom: '8px' }}>\n            💡 각 페르소나와 개별적으로 대화를 이어가려면\n          </div>\n          <div style={{ fontSize: '13px', color: '#888' }}>\n            왼쪽 사이드바에서 페르소나를 선택하거나, 특정 대화를 선택하세요\n          </div>\n        </div>\n      </div>\n    );\n  };\n\n  const renderConversation = () => {\n    if (!currentConversation) return null;\n\n    return currentConversation.messages.map((message, index) => (\n      <Message\n        key={`${currentConversation.id}_${index}`}\n        message={message}\n        personas={personas}\n        showActionButtons={true}\n        onCopy={() => {\n          // 메시지 내용 복사\n          navigator.clipboard.writeText(message.content).then(() => {\n            console.log('메시지가 복사되었습니다');\n          }).catch(err => {\n            console.error('복사 실패:', err);\n          });\n        }}\n        onEdit={message.role === 'user' ? () => setEditingMessageIndex(index) : undefined}\n        onEditSave={message.role === 'user' ? async (newContent) => {\n          const success = await handleEditConversationMessage(index, newContent);\n          if (success) {\n            setEditingMessageIndex(null); // 편집 완료 시 편집 모드 해제\n          }\n          return success;\n        } : undefined}\n        onEditCancel={() => setEditingMessageIndex(null)}\n        isEditing={editingMessageIndex === index}\n        onSunAction={() => console.log('해 버튼 - 향후 구현')}\n        onPersonAction={() => console.log('나 버튼 - 향후 구현')}\n        onDocumentAction={() => console.log('문 버튼 - 향후 구현')}\n      />\n    ));\n  };\n\n  const renderEmptyState = () => (\n    <EmptyState>\n      <EmptyStateTitle>새로운 대화를 시작해보세요!</EmptyStateTitle>\n      <EmptyStateText>\n        {Object.keys(personas).length > 0 ? (\n          <>\n            아래에 질문을 입력하면 {Object.keys(personas).length}개의 페르소나가<br />\n            각각 다른 관점에서 답변해드립니다.\n          </>\n        ) : (\n          '페르소나 정보를 불러오는 중입니다...'\n        )}\n      </EmptyStateText>\n    </EmptyState>\n  );\n\n  // 해석 뷰 렌더링\n  const renderInterpretationView = () => {\n    if (!currentInterpretation) return null;\n\n    return (\n      <InterpretationView\n        interpretation={currentInterpretation.content}\n        personaName={currentInterpretation.personaName}\n        onSendMessage={onInterpretationMessage}\n        onEditMessage={handleEditInterpretationMessage}\n        isLoading={isLoading}\n        messages={currentInterpretation.messages}\n      />\n    );\n  };\n\n  return (\n    <MainArea>\n      {/* 메인 영역 헤더 - 사이드바와 높이 맞춤 (80px) - 빈 공간 */}\n          <div style={{ \n        height: '80px',\n        borderBottom: '1px solid #ddd',\n        background: 'white',\n          }}>\n        {/* 빈 헤더 공간 */}\n          </div>\n\n      {/* 훈습 모드일 때 카테고리 뷰 표시 */}\n      {selectedPersonaItem === 'training' ? (\n        <TrainingCategoryView\n          personas={personas}\n          onSelectPersona={onSelectPersona || (() => {})}\n          onInterpretationComplete={onInterpretationComplete}\n        />\n      ) : selectedPersonaItem === 'admin' ? (\n        <PersonaAdminPanel \n          onClose={() => {\n            // 관리 모드 종료 시 PersonaSidebar로 돌아가기\n            if (onSelectPersona) {\n              onSelectPersona(''); // 빈 값으로 설정하여 PersonaSidebar의 selectedItem을 null로 만듦\n            }\n          }}\n        />\n      ) : currentInterpretation && selectedConversationItem === 'interpretation' ? (\n        // 해석 모드일 때 InterpretationView 사용\n        renderInterpretationView()\n      ) : (\n        <>\n      <ChatContent ref={chatContentRef}>\n        {/* {error && (\n          <ErrorMessage onClick={onClearError}>\n            {error} (클릭하여 닫기)\n          </ErrorMessage>\n        )} */}\n\n            {!selectedConversation && !currentInterpretation && globalMessages.length === 0 && renderEmptyState()}\n            {!selectedConversation && !currentInterpretation && globalMessages.length > 0 && renderInitialResponses()}\n        {selectedConversation && renderConversation()}\n\n        {isLoading && (\n          selectedConversation && currentConversation ? (\n            <LoadingMessage \n              personaName={personas[currentConversation.persona_id]?.name}\n              personaColor={personas[currentConversation.persona_id]?.color}\n            />\n          ) : (\n            <LoadingMessage \n              personaName=\"AI\"\n              personaColor=\"#666\"\n            />\n          )\n        )}\n      </ChatContent>\n\n      <MessageInput\n        onSendMessage={handleSendMessage}\n        disabled={isLoading || Object.keys(personas).length === 0}\n        placeholder={\n          selectedConversation && currentConversation\n            ? `${personas[currentConversation.persona_id]?.name}에게 메시지를 보내세요...`\n            : \"모든 페르소나에게 질문해보세요...\"\n        }\n      />\n        </>\n      )}\n    </MainArea>\n  );\n};\n\nexport default ChatArea; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}