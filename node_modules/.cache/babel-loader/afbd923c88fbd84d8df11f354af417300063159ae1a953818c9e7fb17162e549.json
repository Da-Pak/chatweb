{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import React,{useState,useEffect}from'react';import{useChat}from'../shared/hooks/useChat';import ConversationSidebar from'../shared/components/ConversationSidebar';import PersonaSidebar from'../shared/components/PersonaSidebar';import ChatArea from'../shared/components/ChatArea';import{GlobalStyle,AppContainer}from'../shared/styles/GlobalStyle';import{chatApi}from'../shared/api/chatApi';import{jsx as _jsx,jsxs as _jsxs,Fragment as _Fragment}from\"react/jsx-runtime\";const App=()=>{const[isPersonaSidebarCollapsed,setIsPersonaSidebarCollapsed]=useState(false);const[isConversationSidebarCollapsed,setIsConversationSidebarCollapsed]=useState(false);const[selectedPersonaItem,setSelectedPersonaItem]=useState(null);const[selectedConversationItem,setSelectedConversationItem]=useState(null);// ConversationSidebar 새로고침 트리거\nconst[conversationRefreshTrigger,setConversationRefreshTrigger]=useState(0);// 해석 관련 상태\nconst[currentInterpretation,setCurrentInterpretation]=useState(null);// 해석 모드 전용 로딩 상태\nconst[isInterpretationLoading,setIsInterpretationLoading]=useState(false);// 해석 저장소 (실제로는 백엔드에서 관리)\nconst[interpretationStore,setInterpretationStore]=useState({});// 언어화 관련 상태\nconst[verbalizationThreads,setVerbalizationThreads]=useState([]);const[selectedVerbalizationThread,setSelectedVerbalizationThread]=useState(null);const{// State\npersonas,globalMessages,conversations,selectedConversation,selectedPersona,isLoading,error,// Actions\nsendInitialMessage,continueConversation,updateConversation,selectConversation,selectPersona,clearError}=useChat();// 페르소나 메뉴 아이템 선택 핸들러\nconst handleSelectPersonaItem=itemId=>{// 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\nconst actualItemId=itemId===''?null:itemId;setSelectedPersonaItem(actualItemId);// 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\nif(actualItemId!=='training'&&actualItemId!=='admin'){setIsConversationSidebarCollapsed(false);}};// 대화 메뉴 아이템 선택 핸들러\nconst handleSelectConversationItem=itemId=>{setSelectedConversationItem(itemId);// 스레드 선택 시 해당 스레드 데이터 로드 처리\nif(itemId!==null&&itemId!==void 0&&itemId.includes('-thread-')){console.log('스레드 선택됨:',itemId);// 필요시 스레드별 추가 처리 로직\n}};// 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\nconst handlePersonaSelection=personaId=>{const persona=personas[personaId];if(!persona)return;// 해석이 이미 존재하는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){// 1) 해석이 있으면 바로 채팅 모드로\nsetCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');}else{// 2) 해석이 없으면 생성 과정 진행\n// 팝업은 TrainingCategoryView에서 처리\n}};// 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\nconst handleInterpretationComplete=async(personaId,interpretation)=>{const persona=personas[personaId];// 해석을 저장소에 저장\nsetInterpretationStore(prev=>_objectSpread(_objectSpread({},prev),{},{[personaId]:interpretation}));// 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\nsetCurrentInterpretation({personaId,personaName:(persona===null||persona===void 0?void 0:persona.name)||'',content:interpretation,messages:[{role:'assistant',content:interpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 일반 채팅 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 훈습 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');// ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\nsetConversationRefreshTrigger(prev=>prev+1);};// 해석 채팅 메시지 전송 핸들러\nconst handleInterpretationMessage=async message=>{if(!currentInterpretation)return false;// 해석 스레드가 선택되었는지 확인\nconst isInterpretationThread=selectedConversationItem===null||selectedConversationItem===void 0?void 0:selectedConversationItem.startsWith('interpretation-thread-');const selectedThreadId=isInterpretationThread&&selectedConversationItem?selectedConversationItem.split('-thread-')[1]:null;console.log('해석 메시지 전송:',{isInterpretationThread,selectedThreadId,selectedConversationItem});// 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\nconst userMessage={role:'user',content:message,timestamp:new Date().toISOString()};// 로딩 상태 시작\nsetIsInterpretationLoading(true);try{if(isInterpretationThread&&selectedThreadId){// 특정 해석 스레드와 채팅\nconsole.log('특정 해석 스레드와 채팅:',selectedThreadId);const response=await chatApi.chatWithThread({thread_id:selectedThreadId,user_message:message});if(response.data){const assistantMessage={role:'assistant',content:response.data.response.content,timestamp:new Date().toISOString(),persona_id:response.data.response.persona_id,persona_name:response.data.response.persona_name};// 현재 해석 상태의 메시지에 추가하지 않고, \n// ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\nsetIsInterpretationLoading(false);// 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\nsetConversationRefreshTrigger(prev=>prev+1);console.log('특정 해석 스레드 채팅 성공');return true;}else{console.error('해석 스레드 채팅 API 실패:',response.error);setIsInterpretationLoading(false);return false;}}else{// 기본 해석 기반 채팅 (기존 로직)\nconsole.log('기본 해석 기반 채팅');// 사용자 메시지를 currentInterpretation에 추가\nsetCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,userMessage]}):null);const response=await chatApi.chatWithInterpretation(currentInterpretation.personaId,message);if(response.data){const assistantMessage={role:'assistant',content:response.data.response,timestamp:response.data.timestamp};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,assistantMessage]}):null);setIsInterpretationLoading(false);return true;}else{// API 호출 실패 시 폴백\nconsole.error('해석 기반 채팅 API 실패:',response.error);const fallbackMessage={role:'assistant',content:\"\\uC8C4\\uC1A1\\uD569\\uB2C8\\uB2E4. \\uC77C\\uC2DC\\uC801\\uC73C\\uB85C \\uC751\\uB2F5 \\uC0DD\\uC131\\uC5D0 \\uBB38\\uC81C\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uC7A0\\uC2DC \\uD6C4 \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD574\\uC8FC\\uC138\\uC694.\",timestamp:new Date().toISOString()};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,fallbackMessage]}):null);setIsInterpretationLoading(false);return false;}}}catch(error){console.error('해석 채팅 오류:',error);// 에러 발생 시 폴백 메시지\nconst errorMessage={role:'assistant',content:\"\\uB124\\uD2B8\\uC6CC\\uD06C \\uC624\\uB958\\uAC00 \\uBC1C\\uC0DD\\uD588\\uC2B5\\uB2C8\\uB2E4. \\uC5F0\\uACB0\\uC744 \\uD655\\uC778\\uD558\\uACE0 \\uB2E4\\uC2DC \\uC2DC\\uB3C4\\uD574\\uC8FC\\uC138\\uC694.\",timestamp:new Date().toISOString()};setCurrentInterpretation(prev=>prev?_objectSpread(_objectSpread({},prev),{},{messages:[...prev.messages,errorMessage]}):null);setIsInterpretationLoading(false);return false;}};// 해석 업데이트 핸들러\nconst handleUpdateInterpretation=updatedInterpretation=>{setCurrentInterpretation(updatedInterpretation);};// 대화 업데이트 핸들러\nconst handleUpdateConversation=updatedConversation=>{if(selectedConversation){updateConversation(selectedConversation,updatedConversation);}};// 대화 모드 전환 핸들러\nconst handleSwitchConversationMode=mode=>{setSelectedConversationItem(mode);};// ConversationSidebar 새로고침 핸들러\nconst handleRefreshConversationSidebar=()=>{setConversationRefreshTrigger(prev=>prev+1);};// 최근 상호작용에서 페르소나 선택 핸들러\nconst handleRecentPersonaSelect=personaId=>{const persona=personas[personaId];if(!persona)return;// 해석이 이미 존재하는지 확인\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){// 해석이 있으면 바로 해석 모드로\nsetCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 해석 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem('interpretation');}else{// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}};// 최근 상호작용에서 스레드 선택 핸들러\nconst handleRecentThreadSelect=async(thread,personaId)=>{console.log('=== 최근 상호작용 스레드 선택 ===');console.log('thread:',thread);console.log('personaId:',personaId);console.log('thread.thread_type:',thread.thread_type);// 언어화 스레드인 경우 언어화 모드로 전환\nif(personaId==='verbalization'||thread.thread_type==='verbalization'){console.log('언어화 스레드로 인식, 언어화 모드 전환');setSelectedPersonaItem('verbalization');setSelectedVerbalizationThread(thread);setIsConversationSidebarCollapsed(false);// ConversationSidebar가 업데이트되도록 트리거\nsetConversationRefreshTrigger(prev=>prev+1);return;}const persona=personas[personaId];if(!persona){console.error('페르소나를 찾을 수 없음:',personaId);return;}// 해석 스레드인 경우 실제 스레드 내용을 로딩\nif(thread.thread_type==='interpretation'){console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');try{// 해석 스레드의 실제 내용과 메시지들을 설정\nconst interpretationContent=thread.content||(thread.messages.length>0?thread.messages[0].content:'');setCurrentInterpretation({personaId,personaName:persona.name,content:interpretationContent,messages:thread.messages||[]});// 페르소나 선택 및 해당 스레드 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));console.log('해석 스레드 로딩 완료:',thread.id);}catch(error){console.error('해석 스레드 로딩 중 오류:',error);// 폴백으로 기존 해석 사용\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){setCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});}selectPersona(personaId);setSelectedPersonaItem(null);setIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));}return;}// 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\nconst existingInterpretation=interpretationStore[personaId];if(existingInterpretation){// 해석이 있으면 바로 해석 모드로\nsetCurrentInterpretation({personaId,personaName:persona.name,content:existingInterpretation,messages:[{role:'assistant',content:existingInterpretation,timestamp:new Date().toISOString()}]});// 페르소나 선택 및 해당 스레드 모드로 전환\nselectPersona(personaId);setSelectedPersonaItem(null);// 최근 상호작용 모드 해제\nsetIsConversationSidebarCollapsed(false);setSelectedConversationItem(\"\".concat(thread.thread_type,\"-thread-\").concat(thread.id));}else{// 해석이 없으면 훈습 모드로 전환\nsetSelectedPersonaItem('training');}};// 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\nconst toggleConversationSidebar=()=>{const newCollapsedState=!isConversationSidebarCollapsed;setIsConversationSidebarCollapsed(newCollapsedState);setIsPersonaSidebarCollapsed(newCollapsedState);};// 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\nconst togglePersonaSidebar=()=>{setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);};// 언어화 스레드 로드\nconst loadVerbalizationThreads=async()=>{try{console.log('=== 언어화 스레드 로드 시작 ===');const response=await chatApi.getVerbalizationThreads();console.log('스레드 로드 응답:',response);if(response.data){console.log('로드된 스레드 개수:',response.data.length);setVerbalizationThreads(response.data);// 현재 선택된 스레드가 있는지 확인하고 업데이트\nif(selectedVerbalizationThread){const updatedSelectedThread=response.data.find(thread=>thread.id===selectedVerbalizationThread.id);if(updatedSelectedThread){console.log('기존 선택된 스레드 업데이트:',updatedSelectedThread.id);setSelectedVerbalizationThread(updatedSelectedThread);}else{console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');setSelectedVerbalizationThread(response.data[0]||null);}}else if(response.data.length>0){// 선택된 스레드가 없으면 첫 번째 스레드를 선택\nconsole.log('새로운 첫 번째 스레드 선택:',response.data[0].id);setSelectedVerbalizationThread(response.data[0]);}}console.log('=== 언어화 스레드 로드 완료 ===');}catch(error){console.error('언어화 스레드 로드 오류:',error);}};// 언어화 모드일 때 스레드 로드\nuseEffect(()=>{if(selectedPersonaItem==='verbalization'){loadVerbalizationThreads();}},[selectedPersonaItem]);// 언어화 스레드 업데이트 핸들러\nconst handleVerbalizationThreadUpdate=async()=>{console.log('=== 언어화 스레드 업데이트 요청 ===');const currentSelectedId=selectedVerbalizationThread===null||selectedVerbalizationThread===void 0?void 0:selectedVerbalizationThread.id;await loadVerbalizationThreads();// 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\nif(currentSelectedId){// loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n// 비동기 로직을 위해 setTimeout 사용\nsetTimeout(()=>{const response=chatApi.getVerbalizationThreads();response.then(res=>{if(res.data){const stillExists=res.data.find(thread=>thread.id===currentSelectedId);if(!stillExists){// 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\nif(res.data.length>0){setSelectedVerbalizationThread(res.data[0]);}else{setSelectedVerbalizationThread(null);}console.log('삭제된 스레드 감지, 선택 변경됨');}}});},100);}// ConversationSidebar도 새로고침하여 최근 상호작용에 반영\nsetConversationRefreshTrigger(prev=>prev+1);};// 새 언어화 스레드 생성 핸들러\nconst handleCreateNewVerbalizationThread=async()=>{try{console.log('=== 새 언어화 스레드 생성 시작 ===');const response=await chatApi.createNewVerbalizationThread();if(response.data){console.log('새 스레드 생성됨:',response.data.id);// 1단계: 새로 생성된 스레드를 즉시 선택\nsetSelectedVerbalizationThread(response.data);// 2단계: 스레드 목록에도 추가 (최신 순서로)\nsetVerbalizationThreads(prev=>[response.data,...prev]);// 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\nsetConversationRefreshTrigger(prev=>prev+1);console.log('새 스레드 선택 완료:',response.data.id);}else{console.error('새 스레드 생성 실패:',response.error);}}catch(error){console.error('새 언어화 스레드 생성 오류:',error);}};// ConversationSidebar 표시 여부 확인\nconst shouldShowConversationSidebar=selectedPersonaItem!=='training'&&selectedPersonaItem!=='admin'&&selectedPersonaItem!=='verbalization'&&currentInterpretation||selectedPersonaItem==='recent'||selectedPersonaItem==='verbalization';return/*#__PURE__*/_jsxs(_Fragment,{children:[/*#__PURE__*/_jsx(GlobalStyle,{}),/*#__PURE__*/_jsxs(AppContainer,{children:[/*#__PURE__*/_jsx(PersonaSidebar,{selectedItem:selectedPersonaItem,onSelectItem:handleSelectPersonaItem,isCollapsed:isPersonaSidebarCollapsed,onToggle:shouldShowConversationSidebar?undefined:togglePersonaSidebar}),shouldShowConversationSidebar&&/*#__PURE__*/_jsx(ConversationSidebar,{selectedItem:selectedConversationItem,onSelectItem:handleSelectConversationItem,isCollapsed:isConversationSidebarCollapsed,onToggle:toggleConversationSidebar,selectedPersonaName:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaName,selectedPersonaId:currentInterpretation===null||currentInterpretation===void 0?void 0:currentInterpretation.personaId,refreshTrigger:conversationRefreshTrigger,mode:selectedPersonaItem==='recent'?'recent':selectedPersonaItem==='verbalization'?'verbalization':'persona',personas:selectedPersonaItem==='recent'?personas:undefined,verbalizationThreads:selectedPersonaItem==='verbalization'?verbalizationThreads:undefined,onSelectVerbalizationThread:selectedPersonaItem==='verbalization'?setSelectedVerbalizationThread:undefined,onRefreshTrigger:selectedPersonaItem==='verbalization'?handleVerbalizationThreadUpdate:undefined}),/*#__PURE__*/_jsx(ChatArea,{selectedConversation:selectedConversation,conversations:conversations,personas:personas,globalMessages:globalMessages,isLoading:currentInterpretation?isInterpretationLoading:isLoading,error:error,onSendInitialMessage:sendInitialMessage,onContinueConversation:continueConversation,onClearError:clearError,selectedPersonaItem:selectedPersonaItem,onSelectPersona:handlePersonaSelection,onInterpretationComplete:handleInterpretationComplete,selectedConversationItem:selectedConversationItem,currentInterpretation:currentInterpretation,onInterpretationMessage:handleInterpretationMessage,onUpdateInterpretation:handleUpdateInterpretation,onUpdateConversation:handleUpdateConversation,onSwitchConversationMode:handleSwitchConversationMode,onRefreshConversationSidebar:handleRefreshConversationSidebar,recentInteractionsProps:{personas,onSelectPersona:handleRecentPersonaSelect,onThreadSelect:handleRecentThreadSelect},verbalizationProps:{selectedThread:selectedVerbalizationThread,threads:verbalizationThreads,onThreadUpdate:handleVerbalizationThreadUpdate,onCreateNewThread:handleCreateNewVerbalizationThread}})]})]});};export default App;","map":{"version":3,"names":["React","useState","useEffect","useChat","ConversationSidebar","PersonaSidebar","ChatArea","GlobalStyle","AppContainer","chatApi","jsx","_jsx","jsxs","_jsxs","Fragment","_Fragment","App","isPersonaSidebarCollapsed","setIsPersonaSidebarCollapsed","isConversationSidebarCollapsed","setIsConversationSidebarCollapsed","selectedPersonaItem","setSelectedPersonaItem","selectedConversationItem","setSelectedConversationItem","conversationRefreshTrigger","setConversationRefreshTrigger","currentInterpretation","setCurrentInterpretation","isInterpretationLoading","setIsInterpretationLoading","interpretationStore","setInterpretationStore","verbalizationThreads","setVerbalizationThreads","selectedVerbalizationThread","setSelectedVerbalizationThread","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","error","sendInitialMessage","continueConversation","updateConversation","selectConversation","selectPersona","clearError","handleSelectPersonaItem","itemId","actualItemId","handleSelectConversationItem","includes","console","log","handlePersonaSelection","personaId","persona","existingInterpretation","personaName","name","content","messages","role","timestamp","Date","toISOString","handleInterpretationComplete","interpretation","prev","_objectSpread","handleInterpretationMessage","message","isInterpretationThread","startsWith","selectedThreadId","split","userMessage","response","chatWithThread","thread_id","user_message","data","assistantMessage","persona_id","persona_name","chatWithInterpretation","fallbackMessage","errorMessage","handleUpdateInterpretation","updatedInterpretation","handleUpdateConversation","updatedConversation","handleSwitchConversationMode","mode","handleRefreshConversationSidebar","handleRecentPersonaSelect","handleRecentThreadSelect","thread","thread_type","interpretationContent","length","concat","id","toggleConversationSidebar","newCollapsedState","togglePersonaSidebar","loadVerbalizationThreads","getVerbalizationThreads","updatedSelectedThread","find","handleVerbalizationThreadUpdate","currentSelectedId","setTimeout","then","res","stillExists","handleCreateNewVerbalizationThread","createNewVerbalizationThread","shouldShowConversationSidebar","children","selectedItem","onSelectItem","isCollapsed","onToggle","undefined","selectedPersonaName","selectedPersonaId","refreshTrigger","onSelectVerbalizationThread","onRefreshTrigger","onSendInitialMessage","onContinueConversation","onClearError","onSelectPersona","onInterpretationComplete","onInterpretationMessage","onUpdateInterpretation","onUpdateConversation","onSwitchConversationMode","onRefreshConversationSidebar","recentInteractionsProps","onThreadSelect","verbalizationProps","selectedThread","threads","onThreadUpdate","onCreateNewThread"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/core/App.tsx"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport { useChat } from '../shared/hooks/useChat';\nimport ConversationSidebar from '../shared/components/ConversationSidebar';\nimport PersonaSidebar from '../shared/components/PersonaSidebar';\nimport TrainingCategoryView from '../training/components/TrainingCategoryView';\nimport InterpretationView from '../training/components/InterpretationView';\nimport RecentInteractionsView from '../shared/components/RecentInteractionsView';\nimport VerbalizationView from '../verbalization/components/VerbalizationView';\nimport ChatArea from '../shared/components/ChatArea';\nimport { GlobalStyle, AppContainer } from '../shared/styles/GlobalStyle';\nimport { chatApi } from '../shared/api/chatApi';\nimport { TrainingThread } from '../shared/types';\n\nconst App: React.FC = () => {\n  const [isPersonaSidebarCollapsed, setIsPersonaSidebarCollapsed] = useState(false);\n  const [isConversationSidebarCollapsed, setIsConversationSidebarCollapsed] = useState(false);\n  const [selectedPersonaItem, setSelectedPersonaItem] = useState<string | null>(null);\n  const [selectedConversationItem, setSelectedConversationItem] = useState<string | null>(null);\n  \n  // ConversationSidebar 새로고침 트리거\n  const [conversationRefreshTrigger, setConversationRefreshTrigger] = useState(0);\n  \n  // 해석 관련 상태\n  const [currentInterpretation, setCurrentInterpretation] = useState<{\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  } | null>(null);\n  \n  // 해석 모드 전용 로딩 상태\n  const [isInterpretationLoading, setIsInterpretationLoading] = useState(false);\n  \n  // 해석 저장소 (실제로는 백엔드에서 관리)\n  const [interpretationStore, setInterpretationStore] = useState<Record<string, string>>({});\n\n  // 언어화 관련 상태\n  const [verbalizationThreads, setVerbalizationThreads] = useState<TrainingThread[]>([]);\n  const [selectedVerbalizationThread, setSelectedVerbalizationThread] = useState<TrainingThread | null>(null);\n\n  const {\n    // State\n    personas,\n    globalMessages,\n    conversations,\n    selectedConversation,\n    selectedPersona,\n    isLoading,\n    error,\n\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError,\n  } = useChat();\n\n  // 페르소나 메뉴 아이템 선택 핸들러\n  const handleSelectPersonaItem = (itemId: string | null) => {\n    // 빈 문자열이면 null로 처리 (관리 모드에서 돌아가기 시)\n    const actualItemId = itemId === '' ? null : itemId;\n    setSelectedPersonaItem(actualItemId);\n    \n    // 훈습이나 관리 모드가 아닌 다른 항목 선택 시 원래대로\n    if (actualItemId !== 'training' && actualItemId !== 'admin') {\n      setIsConversationSidebarCollapsed(false);\n    }\n  };\n\n  // 대화 메뉴 아이템 선택 핸들러\n  const handleSelectConversationItem = (itemId: string | null) => {\n    setSelectedConversationItem(itemId);\n    \n    // 스레드 선택 시 해당 스레드 데이터 로드 처리\n    if (itemId?.includes('-thread-')) {\n      console.log('스레드 선택됨:', itemId);\n      // 필요시 스레드별 추가 처리 로직\n    }\n  };\n\n  // 페르소나 선택 핸들러 (카테고리에서 페르소나 클릭 시)\n  const handlePersonaSelection = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 1) 해석이 있으면 바로 채팅 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 일반 채팅 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 훈습 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 2) 해석이 없으면 생성 과정 진행\n      // 팝업은 TrainingCategoryView에서 처리\n    }\n  };\n\n  // 해석 완료 핸들러 (팝업에서 해석 생성 완료 시)\n  const handleInterpretationComplete = async (personaId: string, interpretation: string) => {\n    const persona = personas[personaId];\n    \n    // 해석을 저장소에 저장\n    setInterpretationStore(prev => ({\n      ...prev,\n      [personaId]: interpretation\n    }));\n    \n    // 현재 해석 설정 (해석을 첫 번째 Assistant 메시지로)\n    setCurrentInterpretation({\n      personaId,\n      personaName: persona?.name || '',\n      content: interpretation,\n      messages: [\n        {\n          role: 'assistant',\n          content: interpretation,\n          timestamp: new Date().toISOString(),\n        }\n      ],\n    });\n    \n    // 페르소나 선택 및 일반 채팅 모드로 전환\n    selectPersona(personaId);\n    setSelectedPersonaItem(null); // 훈습 모드 해제\n    setIsConversationSidebarCollapsed(false);\n    setSelectedConversationItem('interpretation');\n\n    // ConversationSidebar 새로고침 트리거 (나아가기와 문장은 이미 자동 생성됨)\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 해석 채팅 메시지 전송 핸들러\n  const handleInterpretationMessage = async (message: string): Promise<boolean> => {\n    if (!currentInterpretation) return false;\n\n    // 해석 스레드가 선택되었는지 확인\n    const isInterpretationThread = selectedConversationItem?.startsWith('interpretation-thread-');\n    const selectedThreadId = isInterpretationThread && selectedConversationItem ? selectedConversationItem.split('-thread-')[1] : null;\n\n    console.log('해석 메시지 전송:', {\n      isInterpretationThread,\n      selectedThreadId,\n      selectedConversationItem\n    });\n\n    // 사용자 메시지를 로컬 상태에 즉시 추가 (UI 반응성)\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString(),\n    };\n\n    // 로딩 상태 시작\n    setIsInterpretationLoading(true);\n\n    try {\n      if (isInterpretationThread && selectedThreadId) {\n        // 특정 해석 스레드와 채팅\n        console.log('특정 해석 스레드와 채팅:', selectedThreadId);\n        \n        const response = await chatApi.chatWithThread({\n          thread_id: selectedThreadId,\n          user_message: message\n        });\n\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant' as const,\n            content: response.data.response.content,\n            timestamp: new Date().toISOString(),\n            persona_id: response.data.response.persona_id,\n            persona_name: response.data.response.persona_name,\n          };\n\n          // 현재 해석 상태의 메시지에 추가하지 않고, \n          // ChatArea에서 새로고침하여 스레드 데이터 다시 로딩하도록 함\n          setIsInterpretationLoading(false);\n          \n          // 스레드 새로고침을 위해 ConversationSidebar 새로고침 트리거\n          setConversationRefreshTrigger(prev => prev + 1);\n          \n          console.log('특정 해석 스레드 채팅 성공');\n          return true;\n        } else {\n          console.error('해석 스레드 채팅 API 실패:', response.error);\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      } else {\n        // 기본 해석 기반 채팅 (기존 로직)\n        console.log('기본 해석 기반 채팅');\n        \n        // 사용자 메시지를 currentInterpretation에 추가\n        setCurrentInterpretation(prev => prev ? {\n          ...prev,\n          messages: [...prev.messages, userMessage],\n        } : null);\n\n        const response = await chatApi.chatWithInterpretation(\n          currentInterpretation.personaId,\n          message\n        );\n\n        if (response.data) {\n          const assistantMessage = {\n            role: 'assistant' as const,\n            content: response.data.response,\n            timestamp: response.data.timestamp,\n          };\n\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, assistantMessage],\n          } : null);\n\n          setIsInterpretationLoading(false);\n          return true;\n        } else {\n          // API 호출 실패 시 폴백\n          console.error('해석 기반 채팅 API 실패:', response.error);\n          const fallbackMessage = {\n            role: 'assistant' as const,\n            content: `죄송합니다. 일시적으로 응답 생성에 문제가 발생했습니다. 잠시 후 다시 시도해주세요.`,\n            timestamp: new Date().toISOString(),\n          };\n\n          setCurrentInterpretation(prev => prev ? {\n            ...prev,\n            messages: [...prev.messages, fallbackMessage],\n          } : null);\n\n          setIsInterpretationLoading(false);\n          return false;\n        }\n      }\n    } catch (error) {\n      console.error('해석 채팅 오류:', error);\n      \n      // 에러 발생 시 폴백 메시지\n      const errorMessage = {\n        role: 'assistant' as const,\n        content: `네트워크 오류가 발생했습니다. 연결을 확인하고 다시 시도해주세요.`,\n        timestamp: new Date().toISOString(),\n      };\n\n      setCurrentInterpretation(prev => prev ? {\n        ...prev,\n        messages: [...prev.messages, errorMessage],\n      } : null);\n\n      setIsInterpretationLoading(false);\n      return false;\n    }\n  };\n\n  // 해석 업데이트 핸들러\n  const handleUpdateInterpretation = (updatedInterpretation: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: Array<{\n      role: 'user' | 'assistant';\n      content: string;\n      timestamp: string;\n    }>;\n  }) => {\n    setCurrentInterpretation(updatedInterpretation);\n  };\n\n  // 대화 업데이트 핸들러\n  const handleUpdateConversation = (updatedConversation: any) => {\n    if (selectedConversation) {\n      updateConversation(selectedConversation, updatedConversation);\n    }\n  };\n\n  // 대화 모드 전환 핸들러\n  const handleSwitchConversationMode = (mode: string) => {\n    setSelectedConversationItem(mode);\n  };\n\n  // ConversationSidebar 새로고침 핸들러\n  const handleRefreshConversationSidebar = () => {\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 최근 상호작용에서 페르소나 선택 핸들러\n  const handleRecentPersonaSelect = (personaId: string) => {\n    const persona = personas[personaId];\n    if (!persona) return;\n\n    // 해석이 이미 존재하는지 확인\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n    \n      // 페르소나 선택 및 해석 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem('interpretation');\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 최근 상호작용에서 스레드 선택 핸들러\n  const handleRecentThreadSelect = async (thread: TrainingThread, personaId: string) => {\n    console.log('=== 최근 상호작용 스레드 선택 ===');\n    console.log('thread:', thread);\n    console.log('personaId:', personaId);\n    console.log('thread.thread_type:', thread.thread_type);\n    \n    // 언어화 스레드인 경우 언어화 모드로 전환\n    if (personaId === 'verbalization' || thread.thread_type === 'verbalization') {\n      console.log('언어화 스레드로 인식, 언어화 모드 전환');\n      setSelectedPersonaItem('verbalization');\n      setSelectedVerbalizationThread(thread);\n      setIsConversationSidebarCollapsed(false);\n      // ConversationSidebar가 업데이트되도록 트리거\n      setConversationRefreshTrigger(prev => prev + 1);\n      return;\n    }\n\n    const persona = personas[personaId];\n    if (!persona) {\n      console.error('페르소나를 찾을 수 없음:', personaId);\n      return;\n    }\n\n    // 해석 스레드인 경우 실제 스레드 내용을 로딩\n    if (thread.thread_type === 'interpretation') {\n      console.log('해석 스레드 선택됨, 스레드 내용 로딩 중...');\n      \n      try {\n        // 해석 스레드의 실제 내용과 메시지들을 설정\n        const interpretationContent = thread.content || (thread.messages.length > 0 ? thread.messages[0].content : '');\n        \n        setCurrentInterpretation({\n          personaId,\n          personaName: persona.name,\n          content: interpretationContent,\n          messages: thread.messages || [],\n        });\n        \n        // 페르소나 선택 및 해당 스레드 모드로 전환\n        selectPersona(personaId);\n        setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n        \n        console.log('해석 스레드 로딩 완료:', thread.id);\n      } catch (error) {\n        console.error('해석 스레드 로딩 중 오류:', error);\n        // 폴백으로 기존 해석 사용\n        const existingInterpretation = interpretationStore[personaId];\n        if (existingInterpretation) {\n          setCurrentInterpretation({\n            personaId,\n            personaName: persona.name,\n            content: existingInterpretation,\n            messages: [\n              {\n                role: 'assistant',\n                content: existingInterpretation,\n                timestamp: new Date().toISOString(),\n              }\n            ],\n          });\n        }\n        \n        selectPersona(personaId);\n        setSelectedPersonaItem(null);\n        setIsConversationSidebarCollapsed(false);\n        setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n      }\n      return;\n    }\n\n    // 해석이 아닌 다른 스레드 타입들 (나아가기, 문장)\n    const existingInterpretation = interpretationStore[personaId];\n    \n    if (existingInterpretation) {\n      // 해석이 있으면 바로 해석 모드로\n      setCurrentInterpretation({\n        personaId,\n        personaName: persona.name,\n        content: existingInterpretation,\n        messages: [\n          {\n            role: 'assistant',\n            content: existingInterpretation,\n            timestamp: new Date().toISOString(),\n          }\n        ],\n      });\n      \n      // 페르소나 선택 및 해당 스레드 모드로 전환\n      selectPersona(personaId);\n      setSelectedPersonaItem(null); // 최근 상호작용 모드 해제\n      setIsConversationSidebarCollapsed(false);\n      setSelectedConversationItem(`${thread.thread_type}-thread-${thread.id}`);\n    } else {\n      // 해석이 없으면 훈습 모드로 전환\n      setSelectedPersonaItem('training');\n    }\n  };\n\n  // 대화 목록 사이드바 토글 - 두 사이드바 모두 제어 (ConversationSidebar가 표시될 때)\n  const toggleConversationSidebar = () => {\n    const newCollapsedState = !isConversationSidebarCollapsed;\n    setIsConversationSidebarCollapsed(newCollapsedState);\n    setIsPersonaSidebarCollapsed(newCollapsedState);\n  };\n\n  // 페르소나 사이드바 단독 토글 (ConversationSidebar가 표시되지 않을 때)\n  const togglePersonaSidebar = () => {\n    setIsPersonaSidebarCollapsed(!isPersonaSidebarCollapsed);\n  };\n\n  // 언어화 스레드 로드\n  const loadVerbalizationThreads = async () => {\n    try {\n      console.log('=== 언어화 스레드 로드 시작 ===');\n      const response = await chatApi.getVerbalizationThreads();\n      console.log('스레드 로드 응답:', response);\n      \n      if (response.data) {\n        console.log('로드된 스레드 개수:', response.data.length);\n        setVerbalizationThreads(response.data);\n        \n        // 현재 선택된 스레드가 있는지 확인하고 업데이트\n        if (selectedVerbalizationThread) {\n          const updatedSelectedThread = response.data.find(\n            thread => thread.id === selectedVerbalizationThread.id\n          );\n          if (updatedSelectedThread) {\n            console.log('기존 선택된 스레드 업데이트:', updatedSelectedThread.id);\n            setSelectedVerbalizationThread(updatedSelectedThread);\n          } else {\n            console.log('기존 선택된 스레드를 찾을 수 없음, 첫 번째 스레드 선택');\n            setSelectedVerbalizationThread(response.data[0] || null);\n          }\n        } else if (response.data.length > 0) {\n          // 선택된 스레드가 없으면 첫 번째 스레드를 선택\n          console.log('새로운 첫 번째 스레드 선택:', response.data[0].id);\n          setSelectedVerbalizationThread(response.data[0]);\n        }\n      }\n      console.log('=== 언어화 스레드 로드 완료 ===');\n    } catch (error) {\n      console.error('언어화 스레드 로드 오류:', error);\n    }\n  };\n\n  // 언어화 모드일 때 스레드 로드\n  useEffect(() => {\n    if (selectedPersonaItem === 'verbalization') {\n      loadVerbalizationThreads();\n    }\n  }, [selectedPersonaItem]);\n\n  // 언어화 스레드 업데이트 핸들러\n  const handleVerbalizationThreadUpdate = async () => {\n    console.log('=== 언어화 스레드 업데이트 요청 ===');\n    const currentSelectedId = selectedVerbalizationThread?.id;\n    \n    await loadVerbalizationThreads();\n    \n    // 업데이트 후에 이전에 선택된 스레드가 여전히 존재하는지 확인\n    if (currentSelectedId) {\n      // loadVerbalizationThreads가 완료된 후의 최신 verbalizationThreads를 확인해야 하므로\n      // 비동기 로직을 위해 setTimeout 사용\n      setTimeout(() => {\n        const response = chatApi.getVerbalizationThreads();\n        response.then(res => {\n          if (res.data) {\n            const stillExists = res.data.find((thread: TrainingThread) => thread.id === currentSelectedId);\n            if (!stillExists) {\n              // 선택된 스레드가 더 이상 존재하지 않으면 첫 번째 스레드 선택\n              if (res.data.length > 0) {\n                setSelectedVerbalizationThread(res.data[0]);\n              } else {\n                setSelectedVerbalizationThread(null);\n              }\n              console.log('삭제된 스레드 감지, 선택 변경됨');\n            }\n          }\n        });\n      }, 100);\n    }\n    \n    // ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n    setConversationRefreshTrigger(prev => prev + 1);\n  };\n\n  // 새 언어화 스레드 생성 핸들러\n  const handleCreateNewVerbalizationThread = async (): Promise<void> => {\n    try {\n      console.log('=== 새 언어화 스레드 생성 시작 ===');\n      const response = await chatApi.createNewVerbalizationThread();\n      \n      if (response.data) {\n        console.log('새 스레드 생성됨:', response.data.id);\n        \n        // 1단계: 새로 생성된 스레드를 즉시 선택\n        setSelectedVerbalizationThread(response.data);\n        \n        // 2단계: 스레드 목록에도 추가 (최신 순서로)\n        setVerbalizationThreads(prev => [response.data!, ...prev]);\n        \n        // 3단계: ConversationSidebar도 새로고침하여 최근 상호작용에 반영\n        setConversationRefreshTrigger(prev => prev + 1);\n        \n        console.log('새 스레드 선택 완료:', response.data.id);\n      } else {\n        console.error('새 스레드 생성 실패:', response.error);\n      }\n    } catch (error) {\n      console.error('새 언어화 스레드 생성 오류:', error);\n    }\n  };\n\n  // ConversationSidebar 표시 여부 확인\n  const shouldShowConversationSidebar = \n    (selectedPersonaItem !== 'training' && selectedPersonaItem !== 'admin' && selectedPersonaItem !== 'verbalization' && currentInterpretation) ||\n    selectedPersonaItem === 'recent' ||\n    selectedPersonaItem === 'verbalization';\n\n  return (\n    <>\n      <GlobalStyle />\n      <AppContainer>\n        {/* 왼쪽 첫 번째 사이드바 - 페르소나 메뉴 */}\n        <PersonaSidebar\n          selectedItem={selectedPersonaItem}\n          onSelectItem={handleSelectPersonaItem}\n          isCollapsed={isPersonaSidebarCollapsed}\n          onToggle={shouldShowConversationSidebar ? undefined : togglePersonaSidebar}\n        />\n\n        {/* 왼쪽 두 번째 사이드바 - 훈습 모드나 관리 모드가 아니고 해석이 있거나 최근 상호작용 모드일 때 표시 */}\n        {shouldShowConversationSidebar && (\n          <ConversationSidebar\n            selectedItem={selectedConversationItem}\n            onSelectItem={handleSelectConversationItem}\n            isCollapsed={isConversationSidebarCollapsed}\n            onToggle={toggleConversationSidebar}\n            selectedPersonaName={currentInterpretation?.personaName}\n            selectedPersonaId={currentInterpretation?.personaId}\n            refreshTrigger={conversationRefreshTrigger}\n            mode={selectedPersonaItem === 'recent' ? 'recent' : selectedPersonaItem === 'verbalization' ? 'verbalization' : 'persona'}\n            personas={selectedPersonaItem === 'recent' ? personas : undefined}\n            verbalizationThreads={selectedPersonaItem === 'verbalization' ? verbalizationThreads : undefined}\n            onSelectVerbalizationThread={selectedPersonaItem === 'verbalization' ? setSelectedVerbalizationThread : undefined}\n            onRefreshTrigger={selectedPersonaItem === 'verbalization' ? handleVerbalizationThreadUpdate : undefined}\n          />\n        )}\n\n        {/* 메인 채팅 영역 */}\n        <ChatArea\n          selectedConversation={selectedConversation}\n          conversations={conversations}\n          personas={personas}\n          globalMessages={globalMessages}\n          isLoading={currentInterpretation ? isInterpretationLoading : isLoading}\n          error={error}\n          onSendInitialMessage={sendInitialMessage}\n          onContinueConversation={continueConversation}\n          onClearError={clearError}\n          selectedPersonaItem={selectedPersonaItem}\n          onSelectPersona={handlePersonaSelection}\n          onInterpretationComplete={handleInterpretationComplete}\n          selectedConversationItem={selectedConversationItem}\n          currentInterpretation={currentInterpretation}\n          onInterpretationMessage={handleInterpretationMessage}\n          onUpdateInterpretation={handleUpdateInterpretation}\n          onUpdateConversation={handleUpdateConversation}\n          onSwitchConversationMode={handleSwitchConversationMode}\n          onRefreshConversationSidebar={handleRefreshConversationSidebar}\n          recentInteractionsProps={{\n            personas,\n            onSelectPersona: handleRecentPersonaSelect,\n            onThreadSelect: handleRecentThreadSelect,\n          }}\n          verbalizationProps={{\n            selectedThread: selectedVerbalizationThread,\n            threads: verbalizationThreads,\n            onThreadUpdate: handleVerbalizationThreadUpdate,\n            onCreateNewThread: handleCreateNewVerbalizationThread,\n          }}\n        />\n      </AppContainer>\n    </>\n  );\n};\n\nexport default App; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}