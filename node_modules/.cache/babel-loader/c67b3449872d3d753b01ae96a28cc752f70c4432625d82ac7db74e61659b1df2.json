{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6,_templateObject7,_templateObject8,_templateObject9,_templateObject0;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import SelectableMessage from'./SelectableMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import LoadingMessage from'../../shared/components/LoadingMessage';import{sentenceApi}from'../api/sentenceApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const InterpretationSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  padding: 24px;\\n  border-bottom: 2px solid #e0e0e0;\\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\\n  position: relative;\\n\"])));const InterpretationTitle=styled.h2(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  font-size: 20px;\\n  font-weight: 600;\\n  color: #333;\\n  margin-bottom: 16px;\\n  display: flex;\\n  align-items: center;\\n  gap: 8px;\\n\"])));const InterpretationContent=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  background: white;\\n  border: 1px solid #e0e0e0;\\n  border-radius: 12px;\\n  padding: 20px;\\n  line-height: 1.6;\\n  color: #555;\\n  font-size: 14px;\\n  white-space: pre-line;\\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\\n\"])));const NewInterpretationButton=styled.button(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  position: absolute;\\n  top: 24px;\\n  right: 24px;\\n  background: rgba(108, 117, 125, 0.8);\\n  border: 1px solid rgba(108, 117, 125, 0.3);\\n  color: white;\\n  border-radius: 50%;\\n  width: 36px;\\n  height: 36px;\\n  cursor: pointer;\\n  display: flex;\\n  align-items: center;\\n  justify-content: center;\\n  font-size: 18px;\\n  transition: all 0.2s ease;\\n  \\n  &:hover {\\n    background: rgba(108, 117, 125, 1);\\n    transform: scale(1.1);\\n  }\\n  \\n  &:active {\\n    transform: scale(0.95);\\n  }\\n\"])));const ChatSection=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject7||(_templateObject7=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject8||(_templateObject8=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject9||(_templateObject9=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n\"])));// 복사 알림을 위한 토스트 컴포넌트\nconst Toast=styled.div(_templateObject0||(_templateObject0=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const InterpretationView=_ref=>{let{interpretation,personaName,onSendMessage,onEditMessage,isLoading,messages,onGenerateNewInterpretation,onSwitchToMode,personaId}=_ref;const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 문장 선택 관련 상태\nconst[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});const[isSentenceModeActive,setIsSentenceModeActive]=useState(false);useEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[messages]);// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);// 대체 복사 방법\ntry{const textArea=document.createElement('textarea');textArea.value=text;textArea.style.position='fixed';textArea.style.left='-999999px';textArea.style.top='-999999px';document.body.appendChild(textArea);textArea.focus();textArea.select();document.execCommand('copy');document.body.removeChild(textArea);showCopyToast(successMessage);}catch(fallbackError){console.error('대체 복사 방법도 실패:',fallbackError);showCopyToast('복사 실패');}}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 시작\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};// 메시지 수정 완료\nconst handleEditMessage=async(messageIndex,newContent)=>{if(onEditMessage){const success=await onEditMessage(messageIndex,newContent);if(success){setEditingMessageIndex(null);showCopyToast('메시지가 수정되었습니다');}else{showCopyToast('메시지 수정에 실패했습니다');}}};// 메시지 수정 취소\nconst handleCancelEdit=()=>{setEditingMessageIndex(null);};// 문장 선택 핸들러들\nconst handleToggleSelect=sentenceId=>{setSelectedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(sentenceId)){newSet.delete(sentenceId);}else{newSet.add(sentenceId);}return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{try{// 로컬 상태에서 메모 업데이트 (즉시 반영)\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));// 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\nsentenceApi.createOrUpdateMemo({sentence_id:sentenceId,content:memo}).catch(error=>{console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):',error);});}catch(error){console.error('메모 저장 실패:',error);showCopyToast('메모 저장에 실패했습니다');}};const handleDeleteMemo=async sentenceId=>{try{// 로컬 상태에서 메모 삭제\nsetMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});setHighlightedSentences(prev=>{const newSet=new Set(prev);newSet.delete(sentenceId);return newSet;});// 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\nsentenceApi.deleteMemo(sentenceId).catch(error=>{console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):',error);});showCopyToast('메모가 삭제되었습니다');}catch(error){console.error('메모 삭제 실패:',error);showCopyToast('메모 삭제에 실패했습니다');}};// 플로팅 액션 버튼 메뉴 액션들\nconst handleMenuAction=async action=>{const selectedIds=Array.from(selectedSentences);const selectedTexts=selectedIds.map(id=>{// sentenceId에서 실제 문장 텍스트를 찾아내는 로직\nconst[timestamp,messageIndex,sentenceIndex]=id.split('_');const message=messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n\\.]+/).map(s=>s.trim()).filter(s=>s.length>0);return sentences[parseInt(sentenceIndex)]||'';}return'';}).filter(text=>text.length>0);switch(action){case'sendToInput':if(messageInputRef.current&&selectedTexts.length>0){const formattedText=selectedTexts.map(text=>\"\\\"\".concat(text,\"\\\"\")).join(', ');messageInputRef.current.insertText(formattedText);}break;case'saveToVault':try{await sentenceApi.saveSentencesToVault({sentences:selectedTexts,source_message_id:'interpretation_chat',// 임시 ID\nsource_conversation_id:undefined,tags:['interpretation']});selectedIds.forEach(id=>{setHighlightedSentences(prev=>new Set(prev).add(id));});showCopyToast('저장고에 저장되었습니다');}catch(error){console.error('저장고 저장 실패:',error);showCopyToast('저장고 저장에 실패했습니다');}break;case'addMemo':selectedIds.forEach(id=>{// 로컬 상태에서 메모 생성 (즉시 반영)\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[id]:''}));setHighlightedSentences(prev=>new Set(prev).add(id));// 백엔드 API 호출 (비동기, 실패해도 로컬 생성은 유지)\nsentenceApi.createOrUpdateMemo({sentence_id:id,content:''}).catch(error=>{console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):',error);});});break;case'highlight':selectedIds.forEach(id=>{setHighlightedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(id)){newSet.delete(id);}else{newSet.add(id);}return newSet;});});break;case'copy':if(selectedTexts.length>0){copyToClipboard(selectedTexts.join(' '),'선택된 문장이 복사되었습니다');}break;case'generateProceed':showCopyToast('나아가기 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');break;case'generateSentence':showCopyToast('문장 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');break;}// 모든 선택 해제\nsetSelectedSentences(new Set());};// 문장선택 모드 토글\nconst handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};// 향후 확장을 위한 버튼 핸들러들\nconst handleSunAction=async()=>{if(onGenerateNewInterpretation){onGenerateNewInterpretation();}};const handlePersonAction=async()=>{// 나아가기 모드로 전환 (이미 자동 생성되었을 것임)\nif(onSwitchToMode){onSwitchToMode('proceed');}};const handleDocumentAction=async()=>{// 문장 모드로 전환 (이미 자동 생성되었을 것임)\nif(onSwitchToMode){onSwitchToMode('sentence');}};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[messages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'24px',marginBottom:'8px'},children:\"\\uD83D\\uDCAC\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'4px'},children:[personaName,\"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]})]}):messages.map((message,index)=>message.role==='user'?/*#__PURE__*/_jsx(Message,{message:_objectSpread(_objectSpread({},message),{},{persona_id:undefined,persona_name:undefined}),personas:{},showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onEdit:()=>handleStartEdit(index),isEditing:editingMessageIndex===index,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit},\"interpretation_\".concat(index)):/*#__PURE__*/_jsx(SelectableMessage,{message:_objectSpread(_objectSpread({},message),{},{persona_id:'current_persona',persona_name:personaName}),personas:{current_persona:{name:personaName,description:'',color:'#6c757d',prompt:'',category:'',subcategory:''}},selectedSentences:isSentenceModeActive?selectedSentences:new Set(),highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:isSentenceModeActive?handleToggleSelect:()=>{},onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo,showSentenceSelector:isSentenceModeActive,showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onSunAction:handleSunAction,onPersonAction:handlePersonAction,onDocumentAction:handleDocumentAction},\"interpretation_\".concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:personaName,personaColor:\"#6c757d\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:onSendMessage,disabled:isLoading,placeholder:\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\"),onToggleSentenceMode:handleToggleSentenceMode,isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,currentInterpretation:interpretation,personaId:personaId,onGenerateProceed:handlePersonAction,onGenerateSentence:handleDocumentAction})})]}),/*#__PURE__*/_jsx(FloatingActionButton,{show:isSentenceModeActive&&selectedSentences.size>0,onMenuAction:handleMenuAction,personaId:personaId,currentInterpretation:interpretation})]});};export default InterpretationView;","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","InterpretationSection","_templateObject2","InterpretationTitle","h2","_templateObject3","InterpretationContent","_templateObject4","NewInterpretationButton","button","_templateObject5","ChatSection","_templateObject6","ChatMessages","_templateObject7","ChatInputSection","_templateObject8","EmptyChat","_templateObject9","Toast","_templateObject0","props","show","InterpretationView","_ref","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","error","console","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","_objectSpread","createOrUpdateMemo","sentence_id","content","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","action","selectedIds","Array","from","selectedTexts","map","id","timestamp","sentenceIndex","split","find","m","sentences","s","trim","filter","length","parseInt","formattedText","concat","join","insertText","saveSentencesToVault","source_message_id","source_conversation_id","undefined","tags","forEach","handleToggleSentenceMode","handleSunAction","handlePersonAction","handleDocumentAction","children","ref","fontSize","marginBottom","marginTop","index","role","persona_id","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","onMenuAction"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst InterpretationSection = styled.div`\n  padding: 24px;\n  border-bottom: 2px solid #e0e0e0;\n  background: linear-gradient(135deg, #f8f9fa 0%, #f1f3f4 100%);\n  position: relative;\n`;\n\nconst InterpretationTitle = styled.h2`\n  font-size: 20px;\n  font-weight: 600;\n  color: #333;\n  margin-bottom: 16px;\n  display: flex;\n  align-items: center;\n  gap: 8px;\n`;\n\nconst InterpretationContent = styled.div`\n  background: white;\n  border: 1px solid #e0e0e0;\n  border-radius: 12px;\n  padding: 20px;\n  line-height: 1.6;\n  color: #555;\n  font-size: 14px;\n  white-space: pre-line;\n  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);\n`;\n\nconst NewInterpretationButton = styled.button`\n  position: absolute;\n  top: 24px;\n  right: 24px;\n  background: rgba(108, 117, 125, 0.8);\n  border: 1px solid rgba(108, 117, 125, 0.3);\n  color: white;\n  border-radius: 50%;\n  width: 36px;\n  height: 36px;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: rgba(108, 117, 125, 1);\n    transform: scale(1.1);\n  }\n  \n  &:active {\n    transform: scale(0.95);\n  }\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n}) => {\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, messageIndex, sentenceIndex] = id.split('_');\n      const message = messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n\\.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: 'interpretation_chat', // 임시 ID\n            source_conversation_id: undefined,\n            tags: ['interpretation']\n          });\n          selectedIds.forEach(id => {\n            setHighlightedSentences(prev => new Set(prev).add(id));\n          });\n          showCopyToast('저장고에 저장되었습니다');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        selectedIds.forEach(id => {\n          // 로컬 상태에서 메모 생성 (즉시 반영)\n          setMemos(prev => ({ ...prev, [id]: '' }));\n          setHighlightedSentences(prev => new Set(prev).add(id));\n          \n          // 백엔드 API 호출 (비동기, 실패해도 로컬 생성은 유지)\n          sentenceApi.createOrUpdateMemo({\n            sentence_id: id,\n            content: ''\n          }).catch(error => {\n            console.warn('백엔드 메모 생성 실패 (로컬 생성은 성공):', error);\n          });\n        });\n        break;\n      \n      case 'highlight':\n        selectedIds.forEach(id => {\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            if (newSet.has(id)) {\n              newSet.delete(id);\n            } else {\n              newSet.add(id);\n            }\n            return newSet;\n          });\n        });\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n\n      case 'generateProceed':\n        showCopyToast('나아가기 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');\n        break;\n\n      case 'generateSentence':\n        showCopyToast('문장 생성 기능을 사용하려면 하단 메뉴를 이용해주세요');\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n\n  const handlePersonAction = async () => {\n    // 나아가기 모드로 전환 (이미 자동 생성되었을 것임)\n    if (onSwitchToMode) {\n      onSwitchToMode('proceed');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 문장 모드로 전환 (이미 자동 생성되었을 것임)\n    if (onSwitchToMode) {\n      onSwitchToMode('sentence');\n    }\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\n              <div>해석에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#6c757d',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#6c757d\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={onSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 해석에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={interpretation}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={interpretation}\n      />\n    </Container>\n  );\n};\n\nexport default InterpretationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}