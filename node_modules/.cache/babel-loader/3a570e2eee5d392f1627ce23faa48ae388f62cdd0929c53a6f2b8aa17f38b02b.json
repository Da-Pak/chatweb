{"ast":null,"code":"var _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from 'react';\nimport { chatApi } from '../api/chatApi';\nconst initialState = {\n  personas: {},\n  globalMessages: [],\n  conversations: {},\n  selectedConversation: null,\n  selectedPersona: null,\n  isLoading: false\n};\nexport const useChat = () => {\n  _s();\n  const [state, setState] = useState(initialState);\n  const [error, setError] = useState(null);\n\n  // 페르소나 정보 로드\n  const loadPersonas = useCallback(async () => {\n    const result = await chatApi.getPersonas();\n    if (result.data) {\n      setState(prev => ({\n        ...prev,\n        personas: result.data\n      }));\n    } else {\n      setError(result.error || '페르소나 정보를 불러올 수 없습니다.');\n    }\n  }, []);\n\n  // 글로벌 메시지 로드\n  const loadGlobalMessages = useCallback(async () => {\n    const result = await chatApi.getGlobalMessages();\n    if (result.data) {\n      setState(prev => ({\n        ...prev,\n        globalMessages: result.data\n      }));\n    }\n  }, []);\n\n  // 대화 목록 로드\n  const loadConversations = useCallback(async () => {\n    const result = await chatApi.getAllConversations();\n    if (result.data) {\n      const conversationsMap = result.data.reduce((acc, conv) => {\n        acc[conv.id] = conv;\n        return acc;\n      }, {});\n      setState(prev => ({\n        ...prev,\n        conversations: conversationsMap\n      }));\n    }\n  }, []);\n\n  // 초기 메시지 전송 (모든 페르소나 응답)\n  const sendInitialMessage = useCallback(async content => {\n    setState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    setError(null);\n    try {\n      const result = await chatApi.sendInitialMessage(content);\n      if (result.data) {\n        // 글로벌 메시지 추가\n        const newGlobalMessage = {\n          id: result.data.message_id,\n          user_message: content,\n          responses: result.data.responses,\n          timestamp: new Date().toISOString()\n        };\n        setState(prev => ({\n          ...prev,\n          globalMessages: [...prev.globalMessages, newGlobalMessage],\n          isLoading: false\n        }));\n\n        // 각 페르소나에 대한 대화 생성\n        result.data.responses.forEach(response => {\n          const conversationId = `${result.data.message_id}_${response.persona_id}`;\n          const newConversation = {\n            id: conversationId,\n            persona_id: response.persona_id,\n            messages: [{\n              role: 'user',\n              content: content,\n              timestamp: new Date().toISOString()\n            }, {\n              role: 'assistant',\n              content: response.content,\n              timestamp: response.timestamp,\n              persona_id: response.persona_id,\n              persona_name: response.persona_name\n            }],\n            created_at: new Date().toISOString()\n          };\n          setState(prev => ({\n            ...prev,\n            conversations: {\n              ...prev.conversations,\n              [conversationId]: newConversation\n            }\n          }));\n        });\n        return true;\n      } else {\n        setError(result.error || '메시지 전송에 실패했습니다.');\n        setState(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        return false;\n      }\n    } catch (err) {\n      setError('메시지 전송 중 오류가 발생했습니다.');\n      setState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n      return false;\n    }\n  }, []);\n\n  // 특정 페르소나와 대화 이어가기\n  const continueConversation = useCallback(async (conversationId, message) => {\n    const conversation = state.conversations[conversationId];\n    if (!conversation) {\n      setError('대화를 찾을 수 없습니다.');\n      return false;\n    }\n    setState(prev => ({\n      ...prev,\n      isLoading: true\n    }));\n    setError(null);\n    try {\n      const result = await chatApi.continueConversation(conversation.persona_id, message, conversationId);\n      if (result.data) {\n        // 새 메시지들을 대화에 추가\n        const userMessage = {\n          role: 'user',\n          content: message,\n          timestamp: new Date().toISOString()\n        };\n        const assistantMessage = {\n          role: 'assistant',\n          content: result.data.content,\n          timestamp: result.data.timestamp,\n          persona_id: result.data.persona_id,\n          persona_name: result.data.persona_name\n        };\n        setState(prev => ({\n          ...prev,\n          conversations: {\n            ...prev.conversations,\n            [conversationId]: {\n              ...prev.conversations[conversationId],\n              messages: [...prev.conversations[conversationId].messages, userMessage, assistantMessage]\n            }\n          },\n          isLoading: false\n        }));\n        return true;\n      } else {\n        setError(result.error || '대화 이어가기에 실패했습니다.');\n        setState(prev => ({\n          ...prev,\n          isLoading: false\n        }));\n        return false;\n      }\n    } catch (err) {\n      setError('대화 이어가기 중 오류가 발생했습니다.');\n      setState(prev => ({\n        ...prev,\n        isLoading: false\n      }));\n      return false;\n    }\n  }, [state.conversations]);\n\n  // 대화 업데이트\n  const updateConversation = useCallback((conversationId, updatedConversation) => {\n    setState(prev => ({\n      ...prev,\n      conversations: {\n        ...prev.conversations,\n        [conversationId]: updatedConversation\n      }\n    }));\n  }, []);\n\n  // 대화 선택\n  const selectConversation = useCallback(conversationId => {\n    setState(prev => ({\n      ...prev,\n      selectedConversation: conversationId\n    }));\n  }, []);\n\n  // 페르소나 선택\n  const selectPersona = useCallback(personaId => {\n    setState(prev => ({\n      ...prev,\n      selectedPersona: personaId\n    }));\n  }, []);\n\n  // 에러 클리어\n  const clearError = useCallback(() => {\n    setError(null);\n  }, []);\n\n  // 특정 페르소나의 대화 목록 가져오기\n  const getPersonaConversations = useCallback(personaId => {\n    return Object.values(state.conversations).filter(conv => conv.persona_id === personaId);\n  }, [state.conversations]);\n\n  // 현재 선택된 대화 가져오기\n  const getCurrentConversation = useCallback(() => {\n    return state.selectedConversation ? state.conversations[state.selectedConversation] : null;\n  }, [state.selectedConversation, state.conversations]);\n\n  // 초기 로드\n  useEffect(() => {\n    loadPersonas();\n    loadGlobalMessages();\n    loadConversations();\n  }, [loadPersonas, loadGlobalMessages, loadConversations]);\n  return {\n    // State\n    personas: state.personas,\n    globalMessages: state.globalMessages,\n    conversations: state.conversations,\n    selectedConversation: state.selectedConversation,\n    selectedPersona: state.selectedPersona,\n    isLoading: state.isLoading,\n    error,\n    // Actions\n    sendInitialMessage,\n    continueConversation,\n    updateConversation,\n    selectConversation,\n    selectPersona,\n    clearError,\n    loadPersonas,\n    loadGlobalMessages,\n    loadConversations,\n    // Computed\n    getPersonaConversations,\n    getCurrentConversation\n  };\n};\n_s(useChat, \"hOoi8IjST9hk5gICJ1aFqJyTgtg=\");","map":{"version":3,"names":["useState","useEffect","useCallback","chatApi","initialState","personas","globalMessages","conversations","selectedConversation","selectedPersona","isLoading","useChat","_s","state","setState","error","setError","loadPersonas","result","getPersonas","data","prev","loadGlobalMessages","getGlobalMessages","loadConversations","getAllConversations","conversationsMap","reduce","acc","conv","id","sendInitialMessage","content","newGlobalMessage","message_id","user_message","responses","timestamp","Date","toISOString","forEach","response","conversationId","persona_id","newConversation","messages","role","persona_name","created_at","err","continueConversation","message","conversation","userMessage","assistantMessage","updateConversation","updatedConversation","selectConversation","selectPersona","personaId","clearError","getPersonaConversations","Object","values","filter","getCurrentConversation"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/hooks/useChat.ts"],"sourcesContent":["import { useState, useEffect, useCallback } from 'react';\r\nimport { ChatState, Persona, GlobalMessage, Conversation, PersonaResponse } from '../types';\r\nimport { chatApi } from '../api/chatApi';\r\n\r\nconst initialState: ChatState = {\r\n  personas: {},\r\n  globalMessages: [],\r\n  conversations: {},\r\n  selectedConversation: null,\r\n  selectedPersona: null,\r\n  isLoading: false,\r\n};\r\n\r\nexport const useChat = () => {\r\n  const [state, setState] = useState<ChatState>(initialState);\r\n  const [error, setError] = useState<string | null>(null);\r\n\r\n  // 페르소나 정보 로드\r\n  const loadPersonas = useCallback(async () => {\r\n    const result = await chatApi.getPersonas();\r\n    if (result.data) {\r\n      setState(prev => ({ ...prev, personas: result.data! }));\r\n    } else {\r\n      setError(result.error || '페르소나 정보를 불러올 수 없습니다.');\r\n    }\r\n  }, []);\r\n\r\n  // 글로벌 메시지 로드\r\n  const loadGlobalMessages = useCallback(async () => {\r\n    const result = await chatApi.getGlobalMessages();\r\n    if (result.data) {\r\n      setState(prev => ({ ...prev, globalMessages: result.data! }));\r\n    }\r\n  }, []);\r\n\r\n  // 대화 목록 로드\r\n  const loadConversations = useCallback(async () => {\r\n    const result = await chatApi.getAllConversations();\r\n    if (result.data) {\r\n      const conversationsMap = result.data!.reduce((acc, conv) => {\r\n        acc[conv.id] = conv;\r\n        return acc;\r\n      }, {} as Record<string, Conversation>);\r\n      setState(prev => ({ ...prev, conversations: conversationsMap }));\r\n    }\r\n  }, []);\r\n\r\n  // 초기 메시지 전송 (모든 페르소나 응답)\r\n  const sendInitialMessage = useCallback(async (content: string) => {\r\n    setState(prev => ({ ...prev, isLoading: true }));\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await chatApi.sendInitialMessage(content);\r\n      if (result.data) {\r\n        // 글로벌 메시지 추가\r\n        const newGlobalMessage: GlobalMessage = {\r\n          id: result.data.message_id,\r\n          user_message: content,\r\n          responses: result.data.responses,\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          globalMessages: [...prev.globalMessages, newGlobalMessage],\r\n          isLoading: false,\r\n        }));\r\n\r\n        // 각 페르소나에 대한 대화 생성\r\n        result.data.responses.forEach(response => {\r\n          const conversationId = `${result.data!.message_id}_${response.persona_id}`;\r\n          const newConversation: Conversation = {\r\n            id: conversationId,\r\n            persona_id: response.persona_id,\r\n            messages: [\r\n              {\r\n                role: 'user',\r\n                content: content,\r\n                timestamp: new Date().toISOString(),\r\n              },\r\n              {\r\n                role: 'assistant',\r\n                content: response.content,\r\n                timestamp: response.timestamp,\r\n                persona_id: response.persona_id,\r\n                persona_name: response.persona_name,\r\n              },\r\n            ],\r\n            created_at: new Date().toISOString(),\r\n          };\r\n\r\n          setState(prev => ({\r\n            ...prev,\r\n            conversations: {\r\n              ...prev.conversations,\r\n              [conversationId]: newConversation,\r\n            },\r\n          }));\r\n        });\r\n\r\n        return true;\r\n      } else {\r\n        setError(result.error || '메시지 전송에 실패했습니다.');\r\n        setState(prev => ({ ...prev, isLoading: false }));\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      setError('메시지 전송 중 오류가 발생했습니다.');\r\n      setState(prev => ({ ...prev, isLoading: false }));\r\n      return false;\r\n    }\r\n  }, []);\r\n\r\n  // 특정 페르소나와 대화 이어가기\r\n  const continueConversation = useCallback(async (\r\n    conversationId: string,\r\n    message: string\r\n  ) => {\r\n    const conversation = state.conversations[conversationId];\r\n    if (!conversation) {\r\n      setError('대화를 찾을 수 없습니다.');\r\n      return false;\r\n    }\r\n\r\n    setState(prev => ({ ...prev, isLoading: true }));\r\n    setError(null);\r\n\r\n    try {\r\n      const result = await chatApi.continueConversation(\r\n        conversation.persona_id,\r\n        message,\r\n        conversationId\r\n      );\r\n\r\n      if (result.data) {\r\n        // 새 메시지들을 대화에 추가\r\n        const userMessage: any = {\r\n          role: 'user',\r\n          content: message,\r\n          timestamp: new Date().toISOString(),\r\n        };\r\n\r\n        const assistantMessage: any = {\r\n          role: 'assistant',\r\n          content: result.data.content,\r\n          timestamp: result.data.timestamp,\r\n          persona_id: result.data.persona_id,\r\n          persona_name: result.data.persona_name,\r\n        };\r\n\r\n        setState(prev => ({\r\n          ...prev,\r\n          conversations: {\r\n            ...prev.conversations,\r\n            [conversationId]: {\r\n              ...prev.conversations[conversationId],\r\n              messages: [\r\n                ...prev.conversations[conversationId].messages,\r\n                userMessage,\r\n                assistantMessage,\r\n              ],\r\n            },\r\n          },\r\n          isLoading: false,\r\n        }));\r\n\r\n        return true;\r\n      } else {\r\n        setError(result.error || '대화 이어가기에 실패했습니다.');\r\n        setState(prev => ({ ...prev, isLoading: false }));\r\n        return false;\r\n      }\r\n    } catch (err) {\r\n      setError('대화 이어가기 중 오류가 발생했습니다.');\r\n      setState(prev => ({ ...prev, isLoading: false }));\r\n      return false;\r\n    }\r\n  }, [state.conversations]);\r\n\r\n  // 대화 업데이트\r\n  const updateConversation = useCallback((conversationId: string, updatedConversation: Conversation) => {\r\n    setState(prev => ({\r\n      ...prev,\r\n      conversations: {\r\n        ...prev.conversations,\r\n        [conversationId]: updatedConversation,\r\n      },\r\n    }));\r\n  }, []);\r\n\r\n  // 대화 선택\r\n  const selectConversation = useCallback((conversationId: string | null) => {\r\n    setState(prev => ({ ...prev, selectedConversation: conversationId }));\r\n  }, []);\r\n\r\n  // 페르소나 선택\r\n  const selectPersona = useCallback((personaId: string | null) => {\r\n    setState(prev => ({ ...prev, selectedPersona: personaId }));\r\n  }, []);\r\n\r\n  // 에러 클리어\r\n  const clearError = useCallback(() => {\r\n    setError(null);\r\n  }, []);\r\n\r\n  // 특정 페르소나의 대화 목록 가져오기\r\n  const getPersonaConversations = useCallback((personaId: string) => {\r\n    return Object.values(state.conversations).filter(\r\n      conv => conv.persona_id === personaId\r\n    );\r\n  }, [state.conversations]);\r\n\r\n  // 현재 선택된 대화 가져오기\r\n  const getCurrentConversation = useCallback(() => {\r\n    return state.selectedConversation \r\n      ? state.conversations[state.selectedConversation]\r\n      : null;\r\n  }, [state.selectedConversation, state.conversations]);\r\n\r\n  // 초기 로드\r\n  useEffect(() => {\r\n    loadPersonas();\r\n    loadGlobalMessages();\r\n    loadConversations();\r\n  }, [loadPersonas, loadGlobalMessages, loadConversations]);\r\n\r\n  return {\r\n    // State\r\n    personas: state.personas,\r\n    globalMessages: state.globalMessages,\r\n    conversations: state.conversations,\r\n    selectedConversation: state.selectedConversation,\r\n    selectedPersona: state.selectedPersona,\r\n    isLoading: state.isLoading,\r\n    error,\r\n\r\n    // Actions\r\n    sendInitialMessage,\r\n    continueConversation,\r\n    updateConversation,\r\n    selectConversation,\r\n    selectPersona,\r\n    clearError,\r\n    loadPersonas,\r\n    loadGlobalMessages,\r\n    loadConversations,\r\n\r\n    // Computed\r\n    getPersonaConversations,\r\n    getCurrentConversation,\r\n  };\r\n}; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}