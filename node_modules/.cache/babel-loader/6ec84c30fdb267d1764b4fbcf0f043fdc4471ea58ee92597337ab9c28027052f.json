{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\sungh\\\\Desktop\\\\chat_work\\\\frontend\\\\src\\\\components\\\\InterpretationView.tsx\",\n  _s = $RefreshSig$();\nimport React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput from './MessageInput';\nimport Message from './Message';\nimport FloatingActionButton from './FloatingActionButton';\nimport LoadingMessage from './LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst InterpretationContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n_c = InterpretationContainer;\nconst InterpretationHeaderContainer = styled.div`\n  padding: 20px 20px 10px 20px;\n  border-bottom: 1px solid #e5e5e5;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n_c2 = InterpretationHeaderContainer;\nconst InterpretationHeader = styled.h2`\n  margin: 0;\n  color: #333;\n  font-size: 24px;\n  font-weight: 600;\n`;\n_c3 = InterpretationHeader;\nconst NewInterpretationButton = styled.button`\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: #0056b3;\n    transform: scale(1.05);\n  }\n`;\n_c4 = NewInterpretationButton;\nconst InterpretationContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n_c5 = InterpretationContent;\nconst MessagesArea = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 20px;\n  background: #fff;\n`;\n_c6 = MessagesArea;\nconst ActionButtonsArea = styled.div`\n  position: fixed;\n  bottom: 90px;\n  right: 30px;\n  z-index: 1000;\n`;\n_c7 = ActionButtonsArea;\nconst InterpretationView = ({\n  interpretationData,\n  onSendMessage,\n  isLoading,\n  onMenuAction,\n  onCreateNewInterpretation\n}) => {\n  _s();\n  const chatMessagesRef = useRef(null);\n  const messageInputRef = useRef(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState(null);\n\n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState(new Set());\n  const [memos, setMemos] = useState({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [menuOptions] = useState([{\n    id: 'copy',\n    label: '복사',\n    emoji: '📋'\n  }, {\n    id: 'interpretation',\n    label: '해',\n    emoji: '🔍'\n  }, {\n    id: 'proceed',\n    label: '나',\n    emoji: '🎯'\n  }, {\n    id: 'sentence',\n    label: '문',\n    emoji: '📝'\n  }]);\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [interpretationData.messages]);\n  const formatTime = timestamp => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit'\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = message => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text, successMessage) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 해석 내용 복사 기능\n  const handleCopyInterpretation = async () => {\n    await copyToClipboard(interpretationData.content, '해석 내용이 복사되었습니다');\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async messageContent => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = messageIndex => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex, newContent) => {\n    // Implementation needed\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = sentenceId => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n  const handleMemoChange = async (sentenceId, memo) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n  const handleDeleteMemo = async sentenceId => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = {\n          ...prev\n        };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n\n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = action => {\n    if (action === 'copy') {\n      handleCopyInterpretation();\n    } else if (action === 'interpretation') {\n      onMenuAction('generateInterpretation');\n    } else if (action === 'proceed') {\n      onMenuAction('generateProceed');\n    } else if (action === 'sentence') {\n      onMenuAction('generateSentence');\n    }\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n  return /*#__PURE__*/_jsxDEV(InterpretationContainer, {\n    children: [/*#__PURE__*/_jsxDEV(Toast, {\n      show: showToast,\n      children: toastMessage\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 265,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InterpretationHeaderContainer, {\n      children: [/*#__PURE__*/_jsxDEV(InterpretationHeader, {\n        children: [interpretationData.personaName, \" \\uD574\\uC11D\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 269,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(NewInterpretationButton, {\n        onClick: onCreateNewInterpretation,\n        title: \"\\uC0C8\\uB85C\\uC6B4 \\uD574\\uC11D \\uB9CC\\uB4E4\\uAE30\",\n        children: \"\\u2728\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 272,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 268,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(InterpretationContent, {\n      children: [/*#__PURE__*/_jsxDEV(MessagesArea, {\n        children: [interpretationData.messages.map((msg, index) => /*#__PURE__*/_jsxDEV(Message, {\n          message: {\n            ...msg,\n            id: `msg-${index}`,\n            isUser: msg.role === 'user'\n          }\n        }, index, false, {\n          fileName: _jsxFileName,\n          lineNumber: 283,\n          columnNumber: 13\n        }, this)), isLoading && /*#__PURE__*/_jsxDEV(LoadingMessage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 292,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 281,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MessageInput, {\n        ref: messageInputRef,\n        onSendMessage: onSendMessage,\n        disabled: isLoading,\n        placeholder: `${interpretationData.personaName}에게 메시지를 보내세요...`,\n        onToggleSentenceMode: handleToggleSentenceMode,\n        isSentenceModeActive: isSentenceModeActive,\n        hasSelectedSentences: selectedSentences.size > 0\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 295,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 280,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(ActionButtonsArea, {\n      children: /*#__PURE__*/_jsxDEV(FloatingActionButton, {\n        options: menuOptions,\n        onMenuAction: handleMenuAction\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 307,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 306,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 264,\n    columnNumber: 5\n  }, this);\n};\n_s(InterpretationView, \"a1J3qArG83pSh5OzglzqMCttE4E=\");\n_c8 = InterpretationView;\nexport default InterpretationView;\nvar _c, _c2, _c3, _c4, _c5, _c6, _c7, _c8;\n$RefreshReg$(_c, \"InterpretationContainer\");\n$RefreshReg$(_c2, \"InterpretationHeaderContainer\");\n$RefreshReg$(_c3, \"InterpretationHeader\");\n$RefreshReg$(_c4, \"NewInterpretationButton\");\n$RefreshReg$(_c5, \"InterpretationContent\");\n$RefreshReg$(_c6, \"MessagesArea\");\n$RefreshReg$(_c7, \"ActionButtonsArea\");\n$RefreshReg$(_c8, \"InterpretationView\");","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","FloatingActionButton","LoadingMessage","sentenceApi","jsxDEV","_jsxDEV","InterpretationContainer","div","_c","InterpretationHeaderContainer","_c2","InterpretationHeader","h2","_c3","NewInterpretationButton","button","_c4","InterpretationContent","_c5","MessagesArea","_c6","ActionButtonsArea","_c7","InterpretationView","interpretationData","onSendMessage","isLoading","onMenuAction","onCreateNewInterpretation","_s","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","menuOptions","id","label","emoji","current","scrollTop","scrollHeight","messages","formatTime","timestamp","Date","toLocaleTimeString","hour","minute","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","error","console","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyInterpretation","content","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","createOrUpdateMemo","sentence_id","catch","warn","handleDeleteMemo","newMemos","deleteMemo","handleMenuAction","action","handleToggleSentenceMode","children","Toast","show","fileName","_jsxFileName","lineNumber","columnNumber","personaName","onClick","title","map","msg","index","isUser","role","ref","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","options","_c8","$RefreshReg$"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from './MessageInput';\nimport Message from './Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from './FloatingActionButton';\nimport LoadingMessage from './LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { Message as MessageType } from '../types';\n\ninterface InterpretationViewProps {\n  interpretationData: {\n    personaId: string;\n    personaName: string;\n    content: string;\n    messages: MessageType[];\n  };\n  onSendMessage: (message: string) => Promise<boolean>;\n  isLoading: boolean;\n  onMenuAction: (action: string) => void;\n  onCreateNewInterpretation?: () => void;\n}\n\nconst InterpretationContainer = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  position: relative;\n`;\n\nconst InterpretationHeaderContainer = styled.div`\n  padding: 20px 20px 10px 20px;\n  border-bottom: 1px solid #e5e5e5;\n  display: flex;\n  justify-content: space-between;\n  align-items: center;\n`;\n\nconst InterpretationHeader = styled.h2`\n  margin: 0;\n  color: #333;\n  font-size: 24px;\n  font-weight: 600;\n`;\n\nconst NewInterpretationButton = styled.button`\n  background: #007bff;\n  color: white;\n  border: none;\n  border-radius: 50%;\n  width: 40px;\n  height: 40px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  cursor: pointer;\n  font-size: 18px;\n  transition: all 0.2s ease;\n  \n  &:hover {\n    background: #0056b3;\n    transform: scale(1.05);\n  }\n`;\n\nconst InterpretationContent = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst MessagesArea = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 0 20px;\n  background: #fff;\n`;\n\nconst ActionButtonsArea = styled.div`\n  position: fixed;\n  bottom: 90px;\n  right: 30px;\n  z-index: 1000;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretationData,\n  onSendMessage,\n  isLoading,\n  onMenuAction,\n  onCreateNewInterpretation\n}) => {\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  const [menuOptions] = useState([\n    { id: 'copy', label: '복사', emoji: '📋' },\n    { id: 'interpretation', label: '해', emoji: '🔍' },\n    { id: 'proceed', label: '나', emoji: '🎯' },\n    { id: 'sentence', label: '문', emoji: '📝' }\n  ]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [interpretationData.messages]);\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 해석 내용 복사 기능\n  const handleCopyInterpretation = async () => {\n    await copyToClipboard(interpretationData.content, '해석 내용이 복사되었습니다');\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // Implementation needed\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    try {\n      // 로컬 상태에서 메모 업데이트 (즉시 반영)\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 업데이트는 유지)\n      sentenceApi.createOrUpdateMemo({\n        sentence_id: sentenceId,\n        content: memo\n      }).catch(error => {\n        console.warn('백엔드 메모 저장 실패 (로컬 저장은 성공):', error);\n      });\n    } catch (error) {\n      console.error('메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n    }\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = (action: string) => {\n    if (action === 'copy') {\n      handleCopyInterpretation();\n    } else if (action === 'interpretation') {\n      onMenuAction('generateInterpretation');\n    } else if (action === 'proceed') {\n      onMenuAction('generateProceed');\n    } else if (action === 'sentence') {\n      onMenuAction('generateSentence');\n    }\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <InterpretationContainer>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      <InterpretationHeaderContainer>\n        <InterpretationHeader>\n          {interpretationData.personaName} 해석\n        </InterpretationHeader>\n        <NewInterpretationButton \n          onClick={onCreateNewInterpretation}\n          title=\"새로운 해석 만들기\"\n        >\n          ✨\n        </NewInterpretationButton>\n      </InterpretationHeaderContainer>\n      \n      <InterpretationContent>\n        <MessagesArea>\n          {interpretationData.messages.map((msg, index) => (\n            <Message\n              key={index}\n              message={{\n                ...msg,\n                id: `msg-${index}`,\n                isUser: msg.role === 'user'\n              }}\n            />\n          ))}\n          {isLoading && <LoadingMessage />}\n        </MessagesArea>\n        \n        <MessageInput\n          ref={messageInputRef}\n          onSendMessage={onSendMessage}\n          disabled={isLoading}\n          placeholder={`${interpretationData.personaName}에게 메시지를 보내세요...`}\n          onToggleSentenceMode={handleToggleSentenceMode}\n          isSentenceModeActive={isSentenceModeActive}\n          hasSelectedSentences={selectedSentences.size > 0}\n        />\n      </InterpretationContent>\n\n      <ActionButtonsArea>\n        <FloatingActionButton\n          options={menuOptions}\n          onMenuAction={handleMenuAction}\n        />\n      </ActionButtonsArea>\n    </InterpretationContainer>\n  );\n};\n\nexport default InterpretationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}