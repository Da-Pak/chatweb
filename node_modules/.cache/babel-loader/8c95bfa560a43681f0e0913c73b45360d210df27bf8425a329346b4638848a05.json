{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work_ver2/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import SelectableMessage from'./SelectableMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import LoadingMessage from'../../shared/components/LoadingMessage';import{sentenceApi}from'../api/sentenceApi';import{chatApi}from'../../shared/api/chatApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const ChatSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n\"])));// 복사 알림을 위한 토스트 컴포넌트\nconst Toast=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const InterpretationView=_ref=>{let{interpretation,personaName,onSendMessage,onEditMessage,isLoading,messages,onGenerateNewInterpretation,onSwitchToMode,personaId,onRefreshThreads,selectedThread:propSelectedThread}=_ref;const[selectedThread,setSelectedThread]=useState(propSelectedThread||null);const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 문장 선택 관련 상태\nconst[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});const[isSentenceModeActive,setIsSentenceModeActive]=useState(false);useEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[messages]);// 선택된 스레드 변경 시 처리 (나아가기와 동일)\nuseEffect(()=>{if(propSelectedThread){console.log('선택된 해석 스레드 변경:',propSelectedThread.id);setSelectedThread(propSelectedThread);// 스레드별 문장 데이터 로딩\nloadThreadSentenceData(propSelectedThread.id);}},[propSelectedThread]);// 스레드별 문장 데이터 로딩 (나아가기와 동일한 방식)\nconst loadThreadSentenceData=async threadId=>{try{console.log('=== 해석 스레드 데이터 로딩 시작 ===');console.log('스레드 ID:',threadId);// 백엔드에서 스레드 데이터 로딩\nconst data=await sentenceApi.getThreadSentenceData(threadId);console.log('로딩된 메모:',Object.keys(data.memos).length,'개');console.log('로딩된 하이라이트:',data.highlights.length,'개');// 백엔드 데이터로 상태 설정\nsetMemos(data.memos);setHighlightedSentences(new Set(data.highlights));console.log('=== 해석 스레드 데이터 로딩 완료 ===');}catch(error){console.error('스레드 문장 데이터 로딩 실패:',error);// 실패 시 빈 상태로 초기화\nsetMemos({});setHighlightedSentences(new Set());}};// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);// 대체 복사 방법\ntry{const textArea=document.createElement('textarea');textArea.value=text;textArea.style.position='fixed';textArea.style.left='-999999px';textArea.style.top='-999999px';document.body.appendChild(textArea);textArea.focus();textArea.select();document.execCommand('copy');document.body.removeChild(textArea);showCopyToast(successMessage);}catch(fallbackError){console.error('대체 복사 방법도 실패:',fallbackError);showCopyToast('복사 실패');}}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 시작\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};// 메시지 수정 완료\nconst handleEditMessage=async(messageIndex,newContent)=>{if(onEditMessage){const success=await onEditMessage(messageIndex,newContent);if(success){setEditingMessageIndex(null);showCopyToast('메시지가 수정되었습니다');}else{showCopyToast('메시지 수정에 실패했습니다');}}};// 메시지 수정 취소\nconst handleCancelEdit=()=>{setEditingMessageIndex(null);};// 문장 선택 핸들러들\nconst handleToggleSelect=sentenceId=>{setSelectedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(sentenceId)){newSet.delete(sentenceId);}else{newSet.add(sentenceId);}return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{// 디버깅 로그 추가\nconsole.log('=== 해석 메모 저장 디버깅 ===');console.log('sentenceId:',sentenceId);console.log('memo:',memo);console.log('selectedThread:',selectedThread);console.log('selectedThread?.id:',selectedThread===null||selectedThread===void 0?void 0:selectedThread.id);console.log('personaId:',personaId);// selectedThread가 없으면 최신 해석 스레드를 찾아서 사용 (폴백 로직)\nlet threadIdToUse=selectedThread===null||selectedThread===void 0?void 0:selectedThread.id;if(!threadIdToUse&&personaId){console.log('selectedThread가 없어서 최신 해석 스레드 찾는 중...');try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){const interpretationThreads=threadsResponse.data.filter(t=>t.thread_type==='interpretation');if(interpretationThreads.length>0){// 가장 최신 해석 스레드 사용\nconst latestThread=interpretationThreads.sort((a,b)=>new Date(b.created_at).getTime()-new Date(a.created_at).getTime())[0];threadIdToUse=latestThread.id;console.log('폴백으로 찾은 해석 스레드 ID:',threadIdToUse);}}}catch(error){console.warn('해석 스레드 조회 실패:',error);}}if(!threadIdToUse){console.error('사용할 스레드 ID를 찾을 수 없음');showCopyToast('해석 스레드를 찾을 수 없습니다. 해석을 다시 생성해주세요.');throw new Error('해석 스레드를 찾을 수 없습니다.');}console.log('최종 사용할 스레드 ID:',threadIdToUse);// 로컬 상태 업데이트는 SelectableSentence에서 처리하므로 제거\n// 백엔드 저장만 수행\n// sentenceId로부터 실제 문장 내용 찾기\nconst[timestamp,,sentenceIndex]=sentenceId.split('_');let sentenceContent='';if(selectedThread!==null&&selectedThread!==void 0&&selectedThread.messages){const message=selectedThread.messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n.]+/).map(s=>s.trim()).filter(s=>s.length>0);sentenceContent=sentences[parseInt(sentenceIndex)]||'';}}console.log('추출된 문장 내용:',sentenceContent);try{// 기존 메모가 있는지 확인하여 업데이트/생성 구분\nconst existingMemo=memos[sentenceId];// 메모 저장 요청 데이터 (백엔드 자동 저장을 위한 추가 정보 포함)\nconst memoRequest={sentence_id:sentenceId,thread_id:threadIdToUse,// 폴백 로직으로 찾은 스레드 ID 사용\nthread_type:'interpretation',content:memo,sentence_content:sentenceContent,source_message_id:\"interpretation_\".concat(personaId),// 백엔드 자동 저장을 위한 추가 정보\npersona_id:personaId,tags:['interpretation',...(personaId?[personaId]:[])],source_conversation_id:threadIdToUse,source_thread_id:threadIdToUse,// 기존 메모 여부 표시\nis_update:!!existingMemo};console.log('메모 저장 요청 데이터:',memoRequest);// 백엔드 API 호출로 실제 저장 (메모 저장고 자동 저장은 백엔드에서 처리)\nconst saveResponse=await sentenceApi.createOrUpdateMemo(memoRequest);console.log('백엔드 메모 저장 응답:',saveResponse);// 성공 시 로컬 상태도 업데이트\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));console.log('해석 메모 저장 성공');showCopyToast('메모가 저장되었습니다');}catch(error){console.error('해석 메모 저장 실패:',error);showCopyToast('메모 저장에 실패했습니다');throw error;// SelectableSentence에서 에러 처리할 수 있도록\n}console.log('=== 해석 메모 저장 디버깅 끝 ===');};const handleDeleteMemo=async sentenceId=>{try{// 로컬 상태에서 메모 삭제\nsetMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});setHighlightedSentences(prev=>{const newSet=new Set(prev);newSet.delete(sentenceId);return newSet;});// 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\nsentenceApi.deleteMemo(sentenceId).catch(error=>{console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):',error);});showCopyToast('메모가 삭제되었습니다');}catch(error){console.error('메모 삭제 실패:',error);showCopyToast('메모 삭제에 실패했습니다');}};// 플로팅 액션 버튼 메뉴 액션들\nconst handleMenuAction=async action=>{const selectedIds=Array.from(selectedSentences);const selectedTexts=selectedIds.map(id=>{// sentenceId에서 실제 문장 텍스트를 찾아내는 로직\nconst[timestamp,,sentenceIndex]=id.split('_');const message=selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages.find(m=>m.timestamp===timestamp);if(message){const sentences=message.content.split(/[\\n.]+/).map(s=>s.trim()).filter(s=>s.length>0);return sentences[parseInt(sentenceIndex)]||'';}return'';}).filter(text=>text.length>0);switch(action){case'sendToInput':if(messageInputRef.current&&selectedTexts.length>0){const formattedText=selectedTexts.map(text=>\"\\\"\".concat(text,\"\\\"\")).join(', ');messageInputRef.current.insertText(formattedText);}break;case'saveToVault':try{if(!personaId){showCopyToast('페르소나 ID를 찾을 수 없습니다');return;}// 선택된 문장들의 하이라이트/메모 상태 수집\nconst highlightStates=[];const highlightColors=[];const memoContents=[];for(const sentenceId of selectedIds){const isHighlighted=highlightedSentences.has(sentenceId);const memoContent=memos[sentenceId]||null;highlightStates.push(isHighlighted);highlightColors.push(isHighlighted?'yellow':null);memoContents.push(memoContent);}// 스레드 ID 생성 (selectedThread가 없는 경우 대비)\nconst threadId=(selectedThread===null||selectedThread===void 0?void 0:selectedThread.id)||\"interpretation_\".concat(personaId,\"_\").concat(Date.now());console.log('=== 해석 저장고 저장 디버깅 ===');console.log('personaId:',personaId);console.log('selectedThread:',selectedThread);console.log('사용할 threadId:',threadId);console.log('selectedTexts:',selectedTexts);console.log('selectedIds:',selectedIds);await sentenceApi.saveSentencesToVault({sentences:selectedTexts,source_message_id:\"interpretation_\".concat(personaId),source_conversation_id:threadId,source_thread_id:threadId,source_thread_type:'interpretation',source_sentence_ids:selectedIds,tags:['interpretation',personaId],highlight_states:highlightStates,highlight_colors:highlightColors,memo_contents:memoContents});console.log('해석 저장고 저장 완료');console.log('=== 해석 저장고 저장 디버깅 끝 ===');// 백엔드에 하이라이트도 저장 (나아가기와 동일한 로직)\nconst highlightThreadId=(selectedThread===null||selectedThread===void 0?void 0:selectedThread.id)||threadId;if(highlightThreadId){for(const sentenceId of selectedIds){try{await sentenceApi.createHighlight({sentence_id:sentenceId,thread_id:highlightThreadId,thread_type:'interpretation'});}catch(error){console.warn('백엔드 하이라이트 저장 실패:',error);}}}// 성공 시 로컬 상태 업데이트 (나아가기와 동일한 방식)\nsetHighlightedSentences(prev=>new Set([...Array.from(prev),...selectedIds]));showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');}catch(error){console.error('저장고 저장 실패:',error);showCopyToast('저장고 저장에 실패했습니다');}break;case'addMemo':if(selectedIds.length>0){// 선택된 모든 문장에 빈 메모 추가 (사용자가 개별적으로 작성할 수 있도록)\nconst newMemos={};selectedIds.forEach(id=>{newMemos[id]='';});// 모든 선택된 문장에 하이라이트 추가\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.add(id));return newSet;});// 로컬 상태에 메모 추가\nsetMemos(prev=>_objectSpread(_objectSpread({},prev),newMemos));// 백엔드에 모든 선택된 문장의 하이라이트 저장\nconst threadId=(selectedThread===null||selectedThread===void 0?void 0:selectedThread.id)||\"interpretation_\".concat(personaId,\"_\").concat(Date.now());if(threadId){selectedIds.forEach(id=>{sentenceApi.createHighlight({sentence_id:id,thread_id:threadId,thread_type:'interpretation'}).catch(error=>{console.warn('백엔드 하이라이트 저장 실패:',error);});});}showCopyToast('선택된 모든 문장에 메모와 하이라이트가 추가되었습니다');}break;case'highlight':if(selectedIds.length>0){const highlightThreadId=(selectedThread===null||selectedThread===void 0?void 0:selectedThread.id)||\"interpretation_\".concat(personaId,\"_\").concat(Date.now());try{console.log('=== 해석 하이라이트 토글 시작 ===');console.log('selectedThread.id:',selectedThread===null||selectedThread===void 0?void 0:selectedThread.id);console.log('highlightThreadId:',highlightThreadId);console.log('선택된 문장들:',selectedIds);// 현재 하이라이트된 문장들과 선택된 문장들을 비교\nconst currentlyHighlighted=selectedIds.filter(id=>highlightedSentences.has(id));const notHighlighted=selectedIds.filter(id=>!highlightedSentences.has(id));console.log('현재 하이라이트된 문장들:',currentlyHighlighted);console.log('아직 하이라이트되지 않은 문장들:',notHighlighted);console.log('사용할 스레드 ID:',highlightThreadId);if(currentlyHighlighted.length>0){// 일부가 하이라이트되어 있으면 모두 제거\nconsole.log('기존 하이라이트 제거 중...');// 로컬 상태에서 하이라이트 제거\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.delete(id));return newSet;});// 백엔드에서 모든 하이라이트 삭제\nfor(const id of selectedIds){try{console.log('하이라이트 삭제 중:',id);await sentenceApi.deleteHighlight(id);console.log('하이라이트 삭제 완료:',id);}catch(error){console.warn('백엔드 하이라이트 삭제 실패:',id,error);}}console.log('모든 선택된 문장의 하이라이트 제거 완료');showCopyToast('하이라이트가 제거되었습니다');}else{// 모두 하이라이트되지 않았으면 모두 추가\nconsole.log('새 하이라이트 추가 중...');// 로컬 상태에 하이라이트 추가\nsetHighlightedSentences(prev=>{const newSet=new Set(prev);selectedIds.forEach(id=>newSet.add(id));return newSet;});// 백엔드에 모든 하이라이트 저장\nfor(const id of selectedIds){try{console.log('하이라이트 저장 중:',id);const saveRequest={sentence_id:id,thread_id:highlightThreadId,thread_type:'interpretation'};console.log('하이라이트 저장 요청:',saveRequest);const response=await sentenceApi.createHighlight(saveRequest);console.log('하이라이트 저장 응답:',response);console.log('하이라이트 저장 완료:',id);}catch(error){console.warn('백엔드 하이라이트 저장 실패:',id,error);}}console.log('모든 선택된 문장에 하이라이트 추가 완료');showCopyToast('하이라이트가 추가되었습니다');}console.log('=== 해석 하이라이트 토글 완료 ===');}catch(error){console.error('=== 해석 하이라이트 토글 실패 ===',error);showCopyToast('하이라이트 처리에 실패했습니다');}}else{console.warn('선택된 문장이 없거나 personaId가 없습니다:',{selectedIds,personaId});showCopyToast('선택된 문장이 없습니다');}break;case'copy':if(selectedTexts.length>0){copyToClipboard(selectedTexts.join(' '),'선택된 문장이 복사되었습니다');}break;}// 모든 선택 해제\nsetSelectedSentences(new Set());};// 문장선택 모드 토글\nconst handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};// 향후 확장을 위한 버튼 핸들러들\nconst handleSunAction=async messageContent=>{// 전달받은 메시지 내용을 해석 스레드에 저장\nconsole.log('=== handleSunAction 시작 ===');console.log('personaId:',personaId);console.log('messageContent:',messageContent.substring(0,100)+'...');if(!personaId){console.error('personaId가 없습니다');showCopyToast('페르소나 ID를 찾을 수 없습니다');return;}if(!messageContent){console.error('저장할 메시지 내용이 없습니다');showCopyToast('저장할 메시지 내용이 없습니다');return;}try{console.log('최종 저장할 내용:',{personaId,contentLength:messageContent.length,contentPreview:messageContent.substring(0,100)+'...'});// chatApi를 통해 메시지 내용을 해석 스레드에 저장\nconst{chatApi}=await import('../../shared/api/chatApi');console.log('chatApi 가져옴');const response=await chatApi.saveCurrentAsInterpretation(personaId,messageContent);console.log('API 응답:',response);if(response.data&&response.data.persona_id&&response.data.interpretation){console.log('해석 저장 성공:',response.data);// 스레드 새로고침\nif(onRefreshThreads){console.log('스레드 새로고침 시작');onRefreshThreads();console.log('스레드 새로고침 완료');}showCopyToast('메시지가 해석 스레드에 저장되었습니다');}else if(response.error){console.error('API 오류:',response.error);showCopyToast(\"\\uD574\\uC11D \\uC800\\uC7A5\\uC5D0 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4: \".concat(response.error));}else{console.error('예상치 못한 응답 구조:',response);// 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\nif(response.data){console.log('응답이 있으므로 성공으로 처리');if(onRefreshThreads){console.log('스레드 새로고침 시작');onRefreshThreads();console.log('스레드 새로고침 완료');}showCopyToast('메시지가 해석 스레드에 저장되었습니다');}else{showCopyToast('해석 저장에 실패했습니다');}}}catch(error){console.error('해석 저장 중 예외 발생:',error);showCopyToast(\"\\uD574\\uC11D \\uC800\\uC7A5\\uC5D0 \\uC2E4\\uD328\\uD588\\uC2B5\\uB2C8\\uB2E4: \".concat(error instanceof Error?error.message:String(error)));}console.log('=== handleSunAction 완료 ===');};const handlePersonAction=async messageContent=>{// 전달받은 메시지 내용을 나아가기 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\nconst{chatApi}=await import('../../shared/api/chatApi');const response=await chatApi.saveCurrentAsProceed(personaId,messageContent);if(response.data){// 스레드 새로고침\nif(onRefreshThreads){onRefreshThreads();}showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');}else{showCopyToast('나아가기 저장에 실패했습니다');}}catch(error){console.error('나아가기 저장 중 오류:',error);showCopyToast('나아가기 저장에 실패했습니다');}};const handleDocumentAction=async messageContent=>{// 전달받은 메시지 내용을 문장 스레드에 저장\nif(!personaId)return;if(!messageContent){showCopyToast('저장할 메시지 내용이 없습니다');return;}try{// chatApi를 통해 메시지 내용을 문장 스레드에 저장\nconst{chatApi}=await import('../../shared/api/chatApi');const response=await chatApi.saveCurrentAsSentence(personaId,messageContent);if(response.data){// 스레드 새로고침\nif(onRefreshThreads){onRefreshThreads();}showCopyToast('메시지가 문장 스레드에 저장되었습니다');}else{showCopyToast('문장 저장에 실패했습니다');}}catch(error){console.error('문장 저장 중 오류:',error);showCopyToast('문장 저장에 실패했습니다');}};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[!selectedThread||selectedThread.messages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'24px',marginBottom:'8px'},children:\"\\uD83D\\uDCAC\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'4px'},children:[personaName,\"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]})]}):selectedThread.messages.map((message,index)=>message.role==='user'?/*#__PURE__*/_jsx(Message,{message:_objectSpread(_objectSpread({},message),{},{persona_id:undefined,persona_name:undefined}),personas:{},showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onEdit:()=>handleStartEdit(index),isEditing:editingMessageIndex===index,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit},\"interpretation_\".concat(index)):/*#__PURE__*/_jsx(SelectableMessage,{message:_objectSpread(_objectSpread({},message),{},{persona_id:'current_persona',persona_name:personaName}),personas:{current_persona:{name:personaName,description:'',color:'#6c757d',prompt:'',category:'',subcategory:''}},selectedSentences:isSentenceModeActive?selectedSentences:new Set(),highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:isSentenceModeActive?handleToggleSelect:()=>{},onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo,showSentenceSelector:isSentenceModeActive,showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onSunAction:handleSunAction,onPersonAction:handlePersonAction,onDocumentAction:handleDocumentAction},\"interpretation_\".concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:personaName,personaColor:\"#6c757d\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:onSendMessage,disabled:isLoading,placeholder:\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uD574\\uC11D\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\"),onToggleSentenceMode:handleToggleSentenceMode,isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,currentInterpretation:interpretation,personaId:personaId,onGenerateProceed:handlePersonAction,onGenerateSentence:handleDocumentAction,currentChatMessages:messages,onRefreshThreads:onRefreshThreads})})]}),/*#__PURE__*/_jsx(FloatingActionButton,{show:isSentenceModeActive&&selectedSentences.size>0,onMenuAction:handleMenuAction,personaId:personaId,currentInterpretation:interpretation})]});};export default InterpretationView;","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","sentenceApi","chatApi","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","ChatSection","_templateObject2","ChatMessages","_templateObject3","ChatInputSection","_templateObject4","EmptyChat","_templateObject5","Toast","_templateObject6","props","show","InterpretationView","_ref","interpretation","personaName","onSendMessage","onEditMessage","isLoading","messages","onGenerateNewInterpretation","onSwitchToMode","personaId","onRefreshThreads","selectedThread","propSelectedThread","setSelectedThread","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","editingMessageIndex","setEditingMessageIndex","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","current","scrollTop","scrollHeight","console","log","id","loadThreadSentenceData","threadId","data","getThreadSentenceData","Object","keys","length","highlights","error","showCopyToast","message","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","textArea","document","createElement","value","style","position","left","top","body","appendChild","focus","select","execCommand","removeChild","fallbackError","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","success","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","threadIdToUse","threadsResponse","getPersonaThreads","interpretationThreads","filter","t","thread_type","latestThread","sort","a","b","Date","created_at","getTime","warn","Error","timestamp","sentenceIndex","split","sentenceContent","find","m","sentences","content","map","s","trim","parseInt","existingMemo","memoRequest","sentence_id","thread_id","sentence_content","source_message_id","concat","persona_id","tags","source_conversation_id","source_thread_id","is_update","saveResponse","createOrUpdateMemo","_objectSpread","handleDeleteMemo","newMemos","deleteMemo","catch","handleMenuAction","action","selectedIds","Array","from","selectedTexts","formattedText","join","insertText","highlightStates","highlightColors","memoContents","isHighlighted","memoContent","push","now","saveSentencesToVault","source_thread_type","source_sentence_ids","highlight_states","highlight_colors","memo_contents","highlightThreadId","createHighlight","forEach","currentlyHighlighted","notHighlighted","deleteHighlight","saveRequest","response","handleToggleSentenceMode","handleSunAction","substring","contentLength","contentPreview","saveCurrentAsInterpretation","String","handlePersonAction","saveCurrentAsProceed","handleDocumentAction","saveCurrentAsSentence","children","ref","fontSize","marginBottom","marginTop","index","role","undefined","persona_name","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onMenuAction"],"sources":["C:/Users/sungh/Desktop/chat_work_ver2/frontend/src/features/training/components/InterpretationView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { sentenceApi } from '../api/sentenceApi';\nimport { TrainingThread } from '../../shared/types';\nimport { chatApi } from '../../shared/api/chatApi';\n\n\ninterface InterpretationViewProps {\n  interpretation: string;\n  personaName: string;\n  onSendMessage: (message: string) => Promise<boolean>;\n  onEditMessage?: (messageIndex: number, newContent: string) => Promise<boolean>;\n  isLoading: boolean;\n  messages: Array<{\n    role: 'user' | 'assistant';\n    content: string;\n    timestamp: string;\n  }>;\n  onGenerateNewInterpretation?: () => void;\n  onSwitchToMode?: (mode: 'proceed' | 'sentence') => void;\n  personaId?: string;\n  onRefreshThreads?: () => void;\n  selectedThread?: TrainingThread | null; // 나아가기와 동일하게 추가\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\n\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 복사 알림을 위한 토스트 컴포넌트\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst InterpretationView: React.FC<InterpretationViewProps> = ({\n  interpretation,\n  personaName,\n  onSendMessage,\n  onEditMessage,\n  isLoading,\n  messages,\n  onGenerateNewInterpretation,\n  onSwitchToMode,\n  personaId,\n  onRefreshThreads,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [messages]);\n\n  // 선택된 스레드 변경 시 처리 (나아가기와 동일)\n  useEffect(() => {\n    if (propSelectedThread) {\n      console.log('선택된 해석 스레드 변경:', propSelectedThread.id);\n      setSelectedThread(propSelectedThread);\n      \n      // 스레드별 문장 데이터 로딩\n      loadThreadSentenceData(propSelectedThread.id);\n    }\n  }, [propSelectedThread]);\n\n  // 스레드별 문장 데이터 로딩 (나아가기와 동일한 방식)\n  const loadThreadSentenceData = async (threadId: string) => {\n      try {\n      console.log('=== 해석 스레드 데이터 로딩 시작 ===');\n      console.log('스레드 ID:', threadId);\n        \n      // 백엔드에서 스레드 데이터 로딩\n        const data = await sentenceApi.getThreadSentenceData(threadId);\n        \n      console.log('로딩된 메모:', Object.keys(data.memos).length, '개');\n      console.log('로딩된 하이라이트:', data.highlights.length, '개');\n        \n      // 백엔드 데이터로 상태 설정\n          setMemos(data.memos);\n          setHighlightedSentences(new Set(data.highlights));\n        \n        console.log('=== 해석 스레드 데이터 로딩 완료 ===');\n      } catch (error) {\n      console.error('스레드 문장 데이터 로딩 실패:', error);\n        // 실패 시 빈 상태로 초기화\n        setMemos({});\n        setHighlightedSentences(new Set());\n      }\n    };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      // 대체 복사 방법\n      try {\n        const textArea = document.createElement('textarea');\n        textArea.value = text;\n        textArea.style.position = 'fixed';\n        textArea.style.left = '-999999px';\n        textArea.style.top = '-999999px';\n        document.body.appendChild(textArea);\n        textArea.focus();\n        textArea.select();\n        document.execCommand('copy');\n        document.body.removeChild(textArea);\n        showCopyToast(successMessage);\n      } catch (fallbackError) {\n        console.error('대체 복사 방법도 실패:', fallbackError);\n        showCopyToast('복사 실패');\n      }\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 시작\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  // 메시지 수정 완료\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    if (onEditMessage) {\n      const success = await onEditMessage(messageIndex, newContent);\n      if (success) {\n        setEditingMessageIndex(null);\n        showCopyToast('메시지가 수정되었습니다');\n      } else {\n        showCopyToast('메시지 수정에 실패했습니다');\n      }\n    }\n  };\n\n  // 메시지 수정 취소\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 핸들러들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    // 디버깅 로그 추가\n    console.log('=== 해석 메모 저장 디버깅 ===');\n    console.log('sentenceId:', sentenceId);\n    console.log('memo:', memo);\n    console.log('selectedThread:', selectedThread);\n    console.log('selectedThread?.id:', selectedThread?.id);\n    console.log('personaId:', personaId);\n    \n    // selectedThread가 없으면 최신 해석 스레드를 찾아서 사용 (폴백 로직)\n    let threadIdToUse = selectedThread?.id;\n    \n    if (!threadIdToUse && personaId) {\n      console.log('selectedThread가 없어서 최신 해석 스레드 찾는 중...');\n      try {\n        const threadsResponse = await chatApi.getPersonaThreads(personaId);\n        if (threadsResponse.data) {\n          const interpretationThreads = threadsResponse.data.filter(t => t.thread_type === 'interpretation');\n          if (interpretationThreads.length > 0) {\n            // 가장 최신 해석 스레드 사용\n            const latestThread = interpretationThreads.sort((a, b) => \n              new Date(b.created_at).getTime() - new Date(a.created_at).getTime()\n            )[0];\n            threadIdToUse = latestThread.id;\n            console.log('폴백으로 찾은 해석 스레드 ID:', threadIdToUse);\n          }\n        }\n      } catch (error) {\n        console.warn('해석 스레드 조회 실패:', error);\n      }\n    }\n    \n    if (!threadIdToUse) {\n      console.error('사용할 스레드 ID를 찾을 수 없음');\n      showCopyToast('해석 스레드를 찾을 수 없습니다. 해석을 다시 생성해주세요.');\n      throw new Error('해석 스레드를 찾을 수 없습니다.');\n    }\n    \n    console.log('최종 사용할 스레드 ID:', threadIdToUse);\n    \n    // 로컬 상태 업데이트는 SelectableSentence에서 처리하므로 제거\n    // 백엔드 저장만 수행\n    \n    // sentenceId로부터 실제 문장 내용 찾기\n    const [timestamp, , sentenceIndex] = sentenceId.split('_');\n    let sentenceContent = '';\n    if (selectedThread?.messages) {\n      const message = selectedThread.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        sentenceContent = sentences[parseInt(sentenceIndex)] || '';\n      }\n    }\n    \n    console.log('추출된 문장 내용:', sentenceContent);\n    \n    try {\n      // 기존 메모가 있는지 확인하여 업데이트/생성 구분\n      const existingMemo = memos[sentenceId];\n      \n      // 메모 저장 요청 데이터 (백엔드 자동 저장을 위한 추가 정보 포함)\n      const memoRequest = {\n        sentence_id: sentenceId,\n        thread_id: threadIdToUse, // 폴백 로직으로 찾은 스레드 ID 사용\n        thread_type: 'interpretation',\n        content: memo,\n        sentence_content: sentenceContent,\n        source_message_id: `interpretation_${personaId}`,\n        // 백엔드 자동 저장을 위한 추가 정보\n        persona_id: personaId,\n        tags: ['interpretation', ...(personaId ? [personaId] : [])],\n        source_conversation_id: threadIdToUse,\n        source_thread_id: threadIdToUse,\n        // 기존 메모 여부 표시\n        is_update: !!existingMemo\n      };\n      \n      console.log('메모 저장 요청 데이터:', memoRequest);\n      \n      // 백엔드 API 호출로 실제 저장 (메모 저장고 자동 저장은 백엔드에서 처리)\n      const saveResponse = await sentenceApi.createOrUpdateMemo(memoRequest as any);\n      console.log('백엔드 메모 저장 응답:', saveResponse);\n      \n      // 성공 시 로컬 상태도 업데이트\n      setMemos(prev => ({\n        ...prev,\n        [sentenceId]: memo\n      }));\n      \n      console.log('해석 메모 저장 성공');\n      showCopyToast('메모가 저장되었습니다');\n    } catch (error) {\n      console.error('해석 메모 저장 실패:', error);\n      showCopyToast('메모 저장에 실패했습니다');\n      throw error; // SelectableSentence에서 에러 처리할 수 있도록\n    }\n    \n    console.log('=== 해석 메모 저장 디버깅 끝 ===');\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    try {\n      // 로컬 상태에서 메모 삭제\n      setMemos(prev => {\n        const newMemos = { ...prev };\n        delete newMemos[sentenceId];\n        return newMemos;\n      });\n      setHighlightedSentences(prev => {\n        const newSet = new Set(prev);\n        newSet.delete(sentenceId);\n        return newSet;\n      });\n      \n      // 백엔드 API 호출 (비동기, 실패해도 로컬 삭제는 유지)\n      sentenceApi.deleteMemo(sentenceId).catch(error => {\n        console.warn('백엔드 메모 삭제 실패 (로컬 삭제는 성공):', error);\n      });\n      \n      showCopyToast('메모가 삭제되었습니다');\n    } catch (error) {\n      console.error('메모 삭제 실패:', error);\n      showCopyToast('메모 삭제에 실패했습니다');\n    }\n  };\n\n  // 플로팅 액션 버튼 메뉴 액션들\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy') => {\n    const selectedIds = Array.from(selectedSentences);\n    const selectedTexts = selectedIds.map(id => {\n      // sentenceId에서 실제 문장 텍스트를 찾아내는 로직\n      const [timestamp, , sentenceIndex] = id.split('_');\n      const message = selectedThread?.messages.find(m => m.timestamp === timestamp);\n      if (message) {\n        const sentences = message.content.split(/[\\n.]+/).map(s => s.trim()).filter(s => s.length > 0);\n        return sentences[parseInt(sentenceIndex)] || '';\n      }\n      return '';\n    }).filter(text => text.length > 0);\n\n    switch (action) {\n      case 'sendToInput':\n        if (messageInputRef.current && selectedTexts.length > 0) {\n          const formattedText = selectedTexts.map(text => `\"${text}\"`).join(', ');\n          messageInputRef.current.insertText(formattedText);\n        }\n        break;\n      \n      case 'saveToVault':\n        try {\n          if (!personaId) {\n            showCopyToast('페르소나 ID를 찾을 수 없습니다');\n            return;\n          }\n          \n          // 선택된 문장들의 하이라이트/메모 상태 수집\n          const highlightStates: boolean[] = [];\n          const highlightColors: (string | null)[] = [];\n          const memoContents: (string | null)[] = [];\n          \n          for (const sentenceId of selectedIds) {\n            const isHighlighted = highlightedSentences.has(sentenceId);\n            const memoContent = memos[sentenceId] || null;\n            \n            highlightStates.push(isHighlighted);\n            highlightColors.push(isHighlighted ? 'yellow' : null);\n            memoContents.push(memoContent);\n          }\n\n          // 스레드 ID 생성 (selectedThread가 없는 경우 대비)\n          const threadId = selectedThread?.id || `interpretation_${personaId}_${Date.now()}`;\n          \n          console.log('=== 해석 저장고 저장 디버깅 ===');\n          console.log('personaId:', personaId);\n          console.log('selectedThread:', selectedThread);\n          console.log('사용할 threadId:', threadId);\n          console.log('selectedTexts:', selectedTexts);\n          console.log('selectedIds:', selectedIds);\n\n          await sentenceApi.saveSentencesToVault({\n            sentences: selectedTexts,\n            source_message_id: `interpretation_${personaId}`,\n            source_conversation_id: threadId,\n            source_thread_id: threadId,\n            source_thread_type: 'interpretation',\n            source_sentence_ids: selectedIds,\n            tags: ['interpretation', personaId],\n            highlight_states: highlightStates,\n            highlight_colors: highlightColors,\n            memo_contents: memoContents\n          });\n          \n          console.log('해석 저장고 저장 완료');\n          console.log('=== 해석 저장고 저장 디버깅 끝 ===');\n          \n          // 백엔드에 하이라이트도 저장 (나아가기와 동일한 로직)\n          const highlightThreadId = selectedThread?.id || threadId;\n          if (highlightThreadId) {\n            for (const sentenceId of selectedIds) {\n              try {\n                await sentenceApi.createHighlight({\n                  sentence_id: sentenceId,\n                  thread_id: highlightThreadId,\n                  thread_type: 'interpretation'\n                });\n              } catch (error) {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              }\n            }\n          }\n          \n          // 성공 시 로컬 상태 업데이트 (나아가기와 동일한 방식)\n          setHighlightedSentences(prev => new Set([...Array.from(prev), ...selectedIds]));\n          \n          showCopyToast('저장고에 저장되었습니다 (하이라이트/메모 정보 포함)');\n        } catch (error) {\n          console.error('저장고 저장 실패:', error);\n          showCopyToast('저장고 저장에 실패했습니다');\n        }\n        break;\n      \n      case 'addMemo':\n        if (selectedIds.length > 0) {\n          // 선택된 모든 문장에 빈 메모 추가 (사용자가 개별적으로 작성할 수 있도록)\n          const newMemos: Record<string, string> = {};\n          selectedIds.forEach(id => {\n            newMemos[id] = '';\n          });\n          \n          // 모든 선택된 문장에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 로컬 상태에 메모 추가\n          setMemos(prev => ({ ...prev, ...newMemos }));\n          \n          // 백엔드에 모든 선택된 문장의 하이라이트 저장\n          const threadId = selectedThread?.id || `interpretation_${personaId}_${Date.now()}`;\n          if (threadId) {\n            selectedIds.forEach(id => {\n              sentenceApi.createHighlight({\n                sentence_id: id,\n                thread_id: threadId,\n                thread_type: 'interpretation'\n              }).catch(error => {\n                console.warn('백엔드 하이라이트 저장 실패:', error);\n              });\n            });\n          }\n          \n          showCopyToast('선택된 모든 문장에 메모와 하이라이트가 추가되었습니다');\n        }\n        break;\n      \n      case 'highlight':\n        if (selectedIds.length > 0) {\n          const highlightThreadId = selectedThread?.id || `interpretation_${personaId}_${Date.now()}`;\n          try {\n            console.log('=== 해석 하이라이트 토글 시작 ===');\n            console.log('selectedThread.id:', selectedThread?.id);\n            console.log('highlightThreadId:', highlightThreadId);\n        console.log('선택된 문장들:', selectedIds);\n        \n        // 현재 하이라이트된 문장들과 선택된 문장들을 비교\n        const currentlyHighlighted = selectedIds.filter(id => highlightedSentences.has(id));\n        const notHighlighted = selectedIds.filter(id => !highlightedSentences.has(id));\n        \n        console.log('현재 하이라이트된 문장들:', currentlyHighlighted);\n        console.log('아직 하이라이트되지 않은 문장들:', notHighlighted);\n        \n            console.log('사용할 스레드 ID:', highlightThreadId);\n            \n        if (currentlyHighlighted.length > 0) {\n          // 일부가 하이라이트되어 있으면 모두 제거\n              console.log('기존 하이라이트 제거 중...');\n              \n              // 로컬 상태에서 하이라이트 제거\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.delete(id));\n            return newSet;\n          });\n          \n          // 백엔드에서 모든 하이라이트 삭제\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 삭제 중:', id);\n                  await sentenceApi.deleteHighlight(id);\n                  console.log('하이라이트 삭제 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 삭제 실패:', id, error);\n                }\n              }\n          \n              console.log('모든 선택된 문장의 하이라이트 제거 완료');\n              showCopyToast('하이라이트가 제거되었습니다');\n        } else {\n          // 모두 하이라이트되지 않았으면 모두 추가\n              console.log('새 하이라이트 추가 중...');\n              \n              // 로컬 상태에 하이라이트 추가\n          setHighlightedSentences(prev => {\n            const newSet = new Set(prev);\n            selectedIds.forEach(id => newSet.add(id));\n            return newSet;\n          });\n          \n          // 백엔드에 모든 하이라이트 저장\n              for (const id of selectedIds) {\n                try {\n                  console.log('하이라이트 저장 중:', id);\n                  const saveRequest = {\n              sentence_id: id,\n                    thread_id: highlightThreadId,\n              thread_type: 'interpretation'\n                  };\n                  console.log('하이라이트 저장 요청:', saveRequest);\n                  \n                  const response = await sentenceApi.createHighlight(saveRequest);\n                  console.log('하이라이트 저장 응답:', response);\n                  console.log('하이라이트 저장 완료:', id);\n                } catch (error) {\n                  console.warn('백엔드 하이라이트 저장 실패:', id, error);\n                }\n              }\n          \n              console.log('모든 선택된 문장에 하이라이트 추가 완료');\n              showCopyToast('하이라이트가 추가되었습니다');\n            }\n            \n            console.log('=== 해석 하이라이트 토글 완료 ===');\n          } catch (error) {\n            console.error('=== 해석 하이라이트 토글 실패 ===', error);\n            showCopyToast('하이라이트 처리에 실패했습니다');\n          }\n        } else {\n          console.warn('선택된 문장이 없거나 personaId가 없습니다:', { selectedIds, personaId });\n          showCopyToast('선택된 문장이 없습니다');\n        }\n        break;\n      \n      case 'copy':\n        if (selectedTexts.length > 0) {\n          copyToClipboard(selectedTexts.join(' '), '선택된 문장이 복사되었습니다');\n        }\n        break;\n    }\n\n    // 모든 선택 해제\n    setSelectedSentences(new Set());\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  // 향후 확장을 위한 버튼 핸들러들\n  const handleSunAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 해석 스레드에 저장\n    console.log('=== handleSunAction 시작 ===');\n    console.log('personaId:', personaId);\n    console.log('messageContent:', messageContent.substring(0, 100) + '...');\n    \n    if (!personaId) {\n      console.error('personaId가 없습니다');\n      showCopyToast('페르소나 ID를 찾을 수 없습니다');\n      return;\n    }\n    \n    if (!messageContent) {\n      console.error('저장할 메시지 내용이 없습니다');\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      console.log('최종 저장할 내용:', {\n        personaId,\n        contentLength: messageContent.length,\n        contentPreview: messageContent.substring(0, 100) + '...'\n      });\n      \n      // chatApi를 통해 메시지 내용을 해석 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      console.log('chatApi 가져옴');\n      \n      const response = await chatApi.saveCurrentAsInterpretation(personaId, messageContent);\n      console.log('API 응답:', response);\n      \n      if (response.data && response.data.persona_id && response.data.interpretation) {\n        console.log('해석 저장 성공:', response.data);\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          console.log('스레드 새로고침 시작');\n          onRefreshThreads();\n          console.log('스레드 새로고침 완료');\n        }\n        showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n      } else if (response.error) {\n        console.error('API 오류:', response.error);\n        showCopyToast(`해석 저장에 실패했습니다: ${response.error}`);\n      } else {\n        console.error('예상치 못한 응답 구조:', response);\n        // 응답이 있지만 예상한 구조가 아닌 경우에도 성공으로 처리\n        if (response.data) {\n          console.log('응답이 있으므로 성공으로 처리');\n          if (onRefreshThreads) {\n            console.log('스레드 새로고침 시작');\n            onRefreshThreads();\n            console.log('스레드 새로고침 완료');\n          }\n          showCopyToast('메시지가 해석 스레드에 저장되었습니다');\n        } else {\n          showCopyToast('해석 저장에 실패했습니다');\n        }\n      }\n    } catch (error) {\n      console.error('해석 저장 중 예외 발생:', error);\n      showCopyToast(`해석 저장에 실패했습니다: ${error instanceof Error ? error.message : String(error)}`);\n    }\n    \n    console.log('=== handleSunAction 완료 ===');\n  };\n\n  const handlePersonAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 나아가기 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 나아가기 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsProceed(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 나아가기 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('나아가기 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async (messageContent: string) => {\n    // 전달받은 메시지 내용을 문장 스레드에 저장\n    if (!personaId) return;\n    \n    if (!messageContent) {\n      showCopyToast('저장할 메시지 내용이 없습니다');\n      return;\n    }\n    \n    try {\n      // chatApi를 통해 메시지 내용을 문장 스레드에 저장\n      const { chatApi } = await import('../../shared/api/chatApi');\n      const response = await chatApi.saveCurrentAsSentence(personaId, messageContent);\n      \n      if (response.data) {\n        // 스레드 새로고침\n        if (onRefreshThreads) {\n          onRefreshThreads();\n        }\n        showCopyToast('메시지가 문장 스레드에 저장되었습니다');\n      } else {\n        showCopyToast('문장 저장에 실패했습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>💬</div>\n              <div>해석에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`interpretation_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#6c757d',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#6c757d\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={onSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 해석에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={interpretation}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={messages}\n            onRefreshThreads={onRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={interpretation}\n      />\n    </Container>\n  );\n};\n\nexport default InterpretationView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}