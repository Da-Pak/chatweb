{"ast":null,"code":"import _objectSpread from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import _taggedTemplateLiteral from\"C:/Users/sungh/Desktop/chat_work/frontend/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js\";var _templateObject,_templateObject2,_templateObject3,_templateObject4,_templateObject5,_templateObject6;import React,{useState,useRef,useEffect}from'react';import styled from'styled-components';import MessageInput from'../../shared/components/MessageInput';import Message from'../../shared/components/Message';import SelectableMessage from'./SelectableMessage';import FloatingActionButton from'../../shared/components/FloatingActionButton';import LoadingMessage from'../../shared/components/LoadingMessage';import{chatApi}from'../../shared/api/chatApi';import{jsx as _jsx,jsxs as _jsxs}from\"react/jsx-runtime\";const Container=styled.div(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n  display: flex;\\n  flex-direction: column;\\n  height: 100%;\\n  background: white;\\n\"])));const ChatSection=styled.div(_templateObject2||(_templateObject2=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  overflow: hidden;\\n\"])));const ChatMessages=styled.div(_templateObject3||(_templateObject3=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  overflow-y: auto;\\n  padding: 20px;\\n  display: flex;\\n  flex-direction: column;\\n  gap: 16px;\\n\"])));const ChatInputSection=styled.div(_templateObject4||(_templateObject4=_taggedTemplateLiteral([\"\\n  padding: 16px 20px;\\n  border-top: none;\\n  background: #ffffff;\\n\"])));const EmptyChat=styled.div(_templateObject5||(_templateObject5=_taggedTemplateLiteral([\"\\n  flex: 1;\\n  display: flex;\\n  flex-direction: column;\\n  justify-content: center;\\n  align-items: center;\\n  color: #999;\\n  font-size: 14px;\\n  text-align: center;\\n\"])));// 토스트 스타일 컴포넌트 추가\nconst Toast=styled.div(_templateObject6||(_templateObject6=_taggedTemplateLiteral([\"\\n  position: fixed;\\n  top: 20px;\\n  right: 20px;\\n  background: #6c757d;\\n  color: white;\\n  padding: 12px 20px;\\n  border-radius: 8px;\\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\\n  z-index: 1000;\\n  transform: \",\";\\n  transition: transform 0.3s ease;\\n  font-size: 14px;\\n  font-weight: 500;\\n\"])),props=>props.show?'translateX(0)':'translateX(120%)');const SentenceView=_ref=>{let{personaId,personaName,sentenceContent,threads,onThreadUpdate,onSwitchToMode,onGenerateNewInterpretation,selectedThread:propSelectedThread}=_ref;const[selectedThread,setSelectedThread]=useState(propSelectedThread||null);const[isLoading,setIsLoading]=useState(false);const[localThreads,setLocalThreads]=useState(threads);const chatMessagesRef=useRef(null);const messageInputRef=useRef(null);const[showToast,setShowToast]=useState(false);const[toastMessage,setToastMessage]=useState('');// 문장 선택 관련 상태\nconst[selectedSentences,setSelectedSentences]=useState(new Set());const[highlightedSentences,setHighlightedSentences]=useState(new Set());const[memos,setMemos]=useState({});const[isSentenceModeActive,setIsSentenceModeActive]=useState(false);const[editingMessageIndex,setEditingMessageIndex]=useState(null);// 문장 타입의 스레드만 필터링\nconst sentenceThreads=localThreads.filter(thread=>thread.thread_type==='sentence');useEffect(()=>{setLocalThreads(threads);},[threads]);// propSelectedThread가 변경되면 선택된 스레드 업데이트\nuseEffect(()=>{if(propSelectedThread){setSelectedThread(propSelectedThread);}else{// 첫 번째 문장 스레드를 자동 선택\nconst firstSentenceThread=threads.find(t=>t.thread_type==='sentence');if(firstSentenceThread&&!selectedThread){setSelectedThread(firstSentenceThread);}}},[propSelectedThread,threads]);useEffect(()=>{if(chatMessagesRef.current){chatMessagesRef.current.scrollTop=chatMessagesRef.current.scrollHeight;}},[selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages]);const handleSendMessage=async message=>{// 선택된 스레드가 없으면 기본 스레드 생성\nlet currentThread=selectedThread;if(!currentThread){// 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\nconst sentenceThread=sentenceThreads[0];if(sentenceThread){currentThread=sentenceThread;setSelectedThread(currentThread);}else{// 기본 스레드 생성 (UI용)\nconst defaultThread={id:\"sentence_default_\".concat(personaId),persona_id:personaId,thread_type:'sentence',content:sentenceContent,messages:[{role:'assistant',content:sentenceContent,timestamp:new Date().toISOString(),persona_id:personaId,persona_name:personaName}],created_at:new Date().toISOString(),updated_at:new Date().toISOString()};currentThread=defaultThread;setSelectedThread(currentThread);// 로컬 스레드 목록에도 추가\nconst updatedThreads=[...localThreads,defaultThread];setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);}}// 1. 사용자 메시지를 즉시 UI에 추가\nconst userMessage={role:'user',content:message,timestamp:new Date().toISOString()};const updatedThread=_objectSpread(_objectSpread({},currentThread),{},{messages:[...currentThread.messages,userMessage],updated_at:new Date().toISOString()});setSelectedThread(updatedThread);// 2. 로딩 상태 시작\nsetIsLoading(true);try{// 3. 백엔드 API 호출\nconst response=await chatApi.chatWithThread({thread_id:currentThread.id,user_message:message});if(response.data&&response.data.response){// 4. AI 응답을 UI에 추가\nconst assistantMessage={role:'assistant',content:response.data.response.content,timestamp:response.data.response.timestamp,persona_id:response.data.response.persona_id||personaId,persona_name:response.data.response.persona_name||personaName};const finalUpdatedThread=_objectSpread(_objectSpread({},updatedThread),{},{messages:[...updatedThread.messages,assistantMessage],updated_at:response.data.thread_updated_at||new Date().toISOString()});setSelectedThread(finalUpdatedThread);// 5. 로컬 스레드 목록도 업데이트\nconst updatedThreads=localThreads.map(t=>t.id===currentThread.id?finalUpdatedThread:t);setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);setIsLoading(false);return true;}else{console.error('문장 채팅 응답 오류:',response);setIsLoading(false);return false;}}catch(error){console.error('문장 채팅 오류:',error);setIsLoading(false);return false;}};const formatTime=timestamp=>{return new Date(timestamp).toLocaleTimeString('ko-KR',{hour:'2-digit',minute:'2-digit'});};// 토스트 메시지 표시 함수\nconst showCopyToast=message=>{setToastMessage(message);setShowToast(true);setTimeout(()=>setShowToast(false),3000);};// 텍스트 복사 유틸리티 함수\nconst copyToClipboard=async(text,successMessage)=>{try{await navigator.clipboard.writeText(text);showCopyToast(successMessage);}catch(error){console.error('복사 실패:',error);showCopyToast('복사 실패');}};// 메시지 복사 기능\nconst handleCopyMessage=async messageContent=>{await copyToClipboard(messageContent,'메시지가 복사되었습니다');};// 메시지 수정 관련 함수들\nconst handleStartEdit=messageIndex=>{setEditingMessageIndex(messageIndex);};const handleEditMessage=async(messageIndex,newContent)=>{// 메시지 수정 기능 구현 예정\nsetEditingMessageIndex(null);showCopyToast('메시지가 수정되었습니다');return true;};const handleCancelEdit=()=>{setEditingMessageIndex(null);};// 문장 선택 관련 함수들\nconst handleToggleSelect=sentenceId=>{setSelectedSentences(prev=>{const newSet=new Set(prev);if(newSet.has(sentenceId)){newSet.delete(sentenceId);}else{newSet.add(sentenceId);}return newSet;});};const handleMemoChange=async(sentenceId,memo)=>{setMemos(prev=>_objectSpread(_objectSpread({},prev),{},{[sentenceId]:memo}));};const handleDeleteMemo=async sentenceId=>{setMemos(prev=>{const newMemos=_objectSpread({},prev);delete newMemos[sentenceId];return newMemos;});};// 액션 핸들러들\nconst handleSunAction=async()=>{if(onGenerateNewInterpretation){onGenerateNewInterpretation();}};const handlePersonAction=async()=>{// 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\nif(!personaId)return;const proceedPrompt=\"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";// 입력창에 프롬프트 삽입\nif(messageInputRef.current){messageInputRef.current.insertText(proceedPrompt);}showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');try{// 현재 Assistant의 마지막 채팅 내용만 사용\nlet contentToSave=sentenceContent;// 기본값: 문장 내용\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.messages&&selectedThread.messages.length>0){// Assistant의 마지막 메시지 찾기\nconst lastAssistantMessage=selectedThread.messages.slice().reverse().find(msg=>msg.role==='assistant');if(lastAssistantMessage){contentToSave=lastAssistantMessage.content;}}// chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\nconst response=await chatApi.saveCurrentAsProceed(personaId,contentToSave);if(response.data){// 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\nif(onThreadUpdate){try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){onThreadUpdate(threadsResponse.data);}}catch(error){console.error('스레드 새로고침 실패:',error);}}showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');}}catch(error){console.error('나아가기 저장 중 오류:',error);showCopyToast('나아가기 저장에 실패했습니다');}};const handleDocumentAction=async()=>{// 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\nif(!personaId)return;const sentencePrompt=\"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";// 입력창에 프롬프트 삽입\nif(messageInputRef.current){messageInputRef.current.insertText(sentencePrompt);}showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');try{// 현재 Assistant의 마지막 채팅 내용만 사용\nlet contentToSave=sentenceContent;// 기본값: 문장 내용\nif(selectedThread!==null&&selectedThread!==void 0&&selectedThread.messages&&selectedThread.messages.length>0){// Assistant의 마지막 메시지 찾기\nconst lastAssistantMessage=selectedThread.messages.slice().reverse().find(msg=>msg.role==='assistant');if(lastAssistantMessage){contentToSave=lastAssistantMessage.content;}}// chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\nconst response=await chatApi.saveCurrentAsSentence(personaId,contentToSave);if(response.data){// 스레드 새로고침\nhandleRefreshThreads();showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');}}catch(error){console.error('문장 저장 중 오류:',error);showCopyToast('문장 저장에 실패했습니다');}};// 스레드 새로고침 함수\nconst handleRefreshThreads=async()=>{try{const threadsResponse=await chatApi.getPersonaThreads(personaId);if(threadsResponse.data){const updatedThreads=threadsResponse.data;setLocalThreads(updatedThreads);onThreadUpdate(updatedThreads);// 새로 생성된 문장 스레드 선택\nconst newSentenceThread=updatedThreads.filter(t=>t.thread_type==='sentence').sort((a,b)=>new Date(b.created_at).getTime()-new Date(a.created_at).getTime())[0];if(newSentenceThread&&(!selectedThread||newSentenceThread.id!==selectedThread.id)){setSelectedThread(newSentenceThread);showCopyToast('새로운 문장이 생성되었습니다');}}}catch(error){console.error('스레드 새로고침 실패:',error);}};// FloatingActionButton 메뉴 액션 처리\nconst handleMenuAction=async action=>{showCopyToast(\"\".concat(action,\" \\uAE30\\uB2A5\\uC774 \\uC2E4\\uD589\\uB418\\uC5C8\\uC2B5\\uB2C8\\uB2E4\"));};// 문장선택 모드 토글\nconst handleToggleSentenceMode=()=>{setIsSentenceModeActive(prev=>!prev);};return/*#__PURE__*/_jsxs(Container,{children:[/*#__PURE__*/_jsx(Toast,{show:showToast,children:toastMessage}),/*#__PURE__*/_jsxs(ChatSection,{children:[/*#__PURE__*/_jsxs(ChatMessages,{ref:chatMessagesRef,children:[!selectedThread||selectedThread.messages.length===0?/*#__PURE__*/_jsxs(EmptyChat,{children:[/*#__PURE__*/_jsx(\"div\",{style:{fontSize:'24px',marginBottom:'8px'},children:\"\\uD83D\\uDCDD\"}),/*#__PURE__*/_jsx(\"div\",{children:\"\\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uB354 \\uC790\\uC138\\uD788 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694\"}),/*#__PURE__*/_jsxs(\"div\",{style:{fontSize:'12px',marginTop:'4px'},children:[personaName,\"\\uC640 \\uB300\\uD654\\uB97C \\uB098\\uB20C \\uC218 \\uC788\\uC2B5\\uB2C8\\uB2E4\"]})]}):selectedThread.messages.map((message,index)=>message.role==='user'?/*#__PURE__*/_jsx(Message,{message:_objectSpread(_objectSpread({},message),{},{persona_id:undefined,persona_name:undefined}),personas:{},showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onEdit:()=>handleStartEdit(index),isEditing:editingMessageIndex===index,onEditSave:newContent=>handleEditMessage(index,newContent),onEditCancel:handleCancelEdit},\"sentence_\".concat(index)):/*#__PURE__*/_jsx(SelectableMessage,{message:_objectSpread(_objectSpread({},message),{},{persona_id:'current_persona',persona_name:personaName}),personas:{current_persona:{name:personaName,description:'',color:'#4caf50',prompt:'',category:'',subcategory:''}},selectedSentences:isSentenceModeActive?selectedSentences:new Set(),highlightedSentences:highlightedSentences,memos:memos,onToggleSelect:isSentenceModeActive?handleToggleSelect:()=>{},onMemoChange:handleMemoChange,onDeleteMemo:handleDeleteMemo,showSentenceSelector:isSentenceModeActive,showActionButtons:true,onCopy:()=>handleCopyMessage(message.content),onSunAction:handleSunAction,onPersonAction:handlePersonAction,onDocumentAction:handleDocumentAction},\"sentence_\".concat(index))),isLoading&&/*#__PURE__*/_jsx(LoadingMessage,{personaName:personaName,personaColor:\"#4caf50\",customMessage:\"\\uC751\\uB2F5 \\uC0DD\\uC131\\uC911...\"})]}),/*#__PURE__*/_jsx(ChatInputSection,{children:/*#__PURE__*/_jsx(MessageInput,{ref:messageInputRef,onSendMessage:handleSendMessage,disabled:isLoading,placeholder:\"\".concat(personaName,\"\\uC5D0\\uAC8C \\uBB38\\uC7A5\\uC5D0 \\uB300\\uD574 \\uC9C8\\uBB38\\uD574\\uBCF4\\uC138\\uC694...\"),onToggleSentenceMode:handleToggleSentenceMode,isSentenceModeActive:isSentenceModeActive,hasSelectedSentences:selectedSentences.size>0,currentInterpretation:(selectedThread===null||selectedThread===void 0?void 0:selectedThread.content)||sentenceContent,personaId:personaId,onGenerateProceed:handlePersonAction,onGenerateSentence:handleDocumentAction,currentChatMessages:selectedThread===null||selectedThread===void 0?void 0:selectedThread.messages,onRefreshThreads:handleRefreshThreads})})]}),/*#__PURE__*/_jsx(FloatingActionButton,{show:isSentenceModeActive&&selectedSentences.size>0,onMenuAction:handleMenuAction,personaId:personaId,currentInterpretation:sentenceContent})]});};export default SentenceView;","map":{"version":3,"names":["React","useState","useRef","useEffect","styled","MessageInput","Message","SelectableMessage","FloatingActionButton","LoadingMessage","chatApi","jsx","_jsx","jsxs","_jsxs","Container","div","_templateObject","_taggedTemplateLiteral","ChatSection","_templateObject2","ChatMessages","_templateObject3","ChatInputSection","_templateObject4","EmptyChat","_templateObject5","Toast","_templateObject6","props","show","SentenceView","_ref","personaId","personaName","sentenceContent","threads","onThreadUpdate","onSwitchToMode","onGenerateNewInterpretation","selectedThread","propSelectedThread","setSelectedThread","isLoading","setIsLoading","localThreads","setLocalThreads","chatMessagesRef","messageInputRef","showToast","setShowToast","toastMessage","setToastMessage","selectedSentences","setSelectedSentences","Set","highlightedSentences","setHighlightedSentences","memos","setMemos","isSentenceModeActive","setIsSentenceModeActive","editingMessageIndex","setEditingMessageIndex","sentenceThreads","filter","thread","thread_type","firstSentenceThread","find","t","current","scrollTop","scrollHeight","messages","handleSendMessage","message","currentThread","sentenceThread","defaultThread","id","concat","persona_id","content","role","timestamp","Date","toISOString","persona_name","created_at","updated_at","updatedThreads","userMessage","updatedThread","_objectSpread","response","chatWithThread","thread_id","user_message","data","assistantMessage","finalUpdatedThread","thread_updated_at","map","console","error","formatTime","toLocaleTimeString","hour","minute","showCopyToast","setTimeout","copyToClipboard","text","successMessage","navigator","clipboard","writeText","handleCopyMessage","messageContent","handleStartEdit","messageIndex","handleEditMessage","newContent","handleCancelEdit","handleToggleSelect","sentenceId","prev","newSet","has","delete","add","handleMemoChange","memo","handleDeleteMemo","newMemos","handleSunAction","handlePersonAction","proceedPrompt","insertText","contentToSave","length","lastAssistantMessage","slice","reverse","msg","saveCurrentAsProceed","threadsResponse","getPersonaThreads","handleDocumentAction","sentencePrompt","saveCurrentAsSentence","handleRefreshThreads","newSentenceThread","sort","a","b","getTime","handleMenuAction","action","handleToggleSentenceMode","children","ref","style","fontSize","marginBottom","marginTop","index","undefined","personas","showActionButtons","onCopy","onEdit","isEditing","onEditSave","onEditCancel","current_persona","name","description","color","prompt","category","subcategory","onToggleSelect","onMemoChange","onDeleteMemo","showSentenceSelector","onSunAction","onPersonAction","onDocumentAction","personaColor","customMessage","onSendMessage","disabled","placeholder","onToggleSentenceMode","hasSelectedSentences","size","currentInterpretation","onGenerateProceed","onGenerateSentence","currentChatMessages","onRefreshThreads","onMenuAction"],"sources":["C:/Users/sungh/Desktop/chat_work/frontend/src/features/training/components/SentenceView.tsx"],"sourcesContent":["import React, { useState, useRef, useEffect } from 'react';\nimport styled from 'styled-components';\nimport MessageInput, { MessageInputRef } from '../../shared/components/MessageInput';\nimport Message from '../../shared/components/Message';\nimport SelectableMessage from './SelectableMessage';\nimport FloatingActionButton from '../../shared/components/FloatingActionButton';\nimport LoadingMessage from '../../shared/components/LoadingMessage';\nimport { chatApi } from '../../shared/api/chatApi';\nimport { TrainingThread } from '../../shared/types';\nimport { sentenceApi } from '../api/sentenceApi';\n\ninterface SentenceViewProps {\n  personaId: string;\n  personaName: string;\n  sentenceContent: string;\n  threads: TrainingThread[];\n  onThreadUpdate: (threads: TrainingThread[]) => void;\n  onSwitchToMode?: (mode: 'interpretation' | 'proceed') => void;\n  onGenerateNewInterpretation?: () => void;\n  selectedThread?: TrainingThread | null;\n}\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  height: 100%;\n  background: white;\n`;\n\nconst ChatSection = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n`;\n\nconst ChatMessages = styled.div`\n  flex: 1;\n  overflow-y: auto;\n  padding: 20px;\n  display: flex;\n  flex-direction: column;\n  gap: 16px;\n`;\n\nconst ChatInputSection = styled.div`\n  padding: 16px 20px;\n  border-top: none;\n  background: #ffffff;\n`;\n\nconst EmptyChat = styled.div`\n  flex: 1;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  align-items: center;\n  color: #999;\n  font-size: 14px;\n  text-align: center;\n`;\n\n// 토스트 스타일 컴포넌트 추가\nconst Toast = styled.div<{ show: boolean }>`\n  position: fixed;\n  top: 20px;\n  right: 20px;\n  background: #6c757d;\n  color: white;\n  padding: 12px 20px;\n  border-radius: 8px;\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.2);\n  z-index: 1000;\n  transform: ${props => props.show ? 'translateX(0)' : 'translateX(120%)'};\n  transition: transform 0.3s ease;\n  font-size: 14px;\n  font-weight: 500;\n`;\n\nconst SentenceView: React.FC<SentenceViewProps> = ({\n  personaId,\n  personaName,\n  sentenceContent,\n  threads,\n  onThreadUpdate,\n  onSwitchToMode,\n  onGenerateNewInterpretation,\n  selectedThread: propSelectedThread,\n}) => {\n  const [selectedThread, setSelectedThread] = useState<TrainingThread | null>(propSelectedThread || null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [localThreads, setLocalThreads] = useState<TrainingThread[]>(threads);\n  const chatMessagesRef = useRef<HTMLDivElement>(null);\n  const messageInputRef = useRef<MessageInputRef>(null);\n  const [showToast, setShowToast] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  \n  // 문장 선택 관련 상태\n  const [selectedSentences, setSelectedSentences] = useState<Set<string>>(new Set());\n  const [highlightedSentences, setHighlightedSentences] = useState<Set<string>>(new Set());\n  const [memos, setMemos] = useState<Record<string, string>>({});\n  const [isSentenceModeActive, setIsSentenceModeActive] = useState(false);\n  const [editingMessageIndex, setEditingMessageIndex] = useState<number | null>(null);\n\n  // 문장 타입의 스레드만 필터링\n  const sentenceThreads = localThreads.filter(thread => thread.thread_type === 'sentence');\n\n  useEffect(() => {\n    setLocalThreads(threads);\n  }, [threads]);\n\n  // propSelectedThread가 변경되면 선택된 스레드 업데이트\n  useEffect(() => {\n    if (propSelectedThread) {\n      setSelectedThread(propSelectedThread);\n    } else {\n      // 첫 번째 문장 스레드를 자동 선택\n      const firstSentenceThread = threads.find(t => t.thread_type === 'sentence');\n      if (firstSentenceThread && !selectedThread) {\n        setSelectedThread(firstSentenceThread);\n      }\n    }\n  }, [propSelectedThread, threads]);\n\n  useEffect(() => {\n    if (chatMessagesRef.current) {\n      chatMessagesRef.current.scrollTop = chatMessagesRef.current.scrollHeight;\n    }\n  }, [selectedThread?.messages]);\n\n  const handleSendMessage = async (message: string): Promise<boolean> => {\n    // 선택된 스레드가 없으면 기본 스레드 생성\n    let currentThread = selectedThread;\n    if (!currentThread) {\n      // 문장 타입의 첫 번째 스레드를 찾거나 기본 스레드 생성\n      const sentenceThread = sentenceThreads[0];\n      if (sentenceThread) {\n        currentThread = sentenceThread;\n        setSelectedThread(currentThread);\n      } else {\n        // 기본 스레드 생성 (UI용)\n        const defaultThread: TrainingThread = {\n          id: `sentence_default_${personaId}`,\n          persona_id: personaId,\n          thread_type: 'sentence',\n          content: sentenceContent,\n          messages: [{\n            role: 'assistant',\n            content: sentenceContent,\n            timestamp: new Date().toISOString(),\n            persona_id: personaId,\n            persona_name: personaName\n          }],\n          created_at: new Date().toISOString(),\n          updated_at: new Date().toISOString()\n        };\n        currentThread = defaultThread;\n        setSelectedThread(currentThread);\n        \n        // 로컬 스레드 목록에도 추가\n        const updatedThreads = [...localThreads, defaultThread];\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n      }\n    }\n    \n    // 1. 사용자 메시지를 즉시 UI에 추가\n    const userMessage = {\n      role: 'user' as const,\n      content: message,\n      timestamp: new Date().toISOString()\n    };\n    \n    const updatedThread = {\n      ...currentThread,\n      messages: [...currentThread.messages, userMessage],\n      updated_at: new Date().toISOString()\n    };\n    \n    setSelectedThread(updatedThread);\n    \n    // 2. 로딩 상태 시작\n    setIsLoading(true);\n    \n    try {\n      // 3. 백엔드 API 호출\n      const response = await chatApi.chatWithThread({\n        thread_id: currentThread.id,\n        user_message: message\n      });\n\n      if (response.data && response.data.response) {\n        // 4. AI 응답을 UI에 추가\n        const assistantMessage = {\n          role: 'assistant' as const,\n          content: response.data.response.content,\n          timestamp: response.data.response.timestamp,\n          persona_id: response.data.response.persona_id || personaId,\n          persona_name: response.data.response.persona_name || personaName\n        };\n\n        const finalUpdatedThread = {\n          ...updatedThread,\n          messages: [...updatedThread.messages, assistantMessage],\n          updated_at: response.data.thread_updated_at || new Date().toISOString()\n        };\n        \n        setSelectedThread(finalUpdatedThread);\n        \n        // 5. 로컬 스레드 목록도 업데이트\n        const updatedThreads = localThreads.map(t => \n          t.id === currentThread!.id ? finalUpdatedThread : t\n        );\n        setLocalThreads(updatedThreads);\n        onThreadUpdate(updatedThreads);\n        \n        setIsLoading(false);\n        return true;\n      } else {\n        console.error('문장 채팅 응답 오류:', response);\n        setIsLoading(false);\n        return false;\n      }\n    } catch (error) {\n      console.error('문장 채팅 오류:', error);\n      setIsLoading(false);\n      return false;\n    }\n  };\n\n  const formatTime = (timestamp: string) => {\n    return new Date(timestamp).toLocaleTimeString('ko-KR', {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n  };\n\n  // 토스트 메시지 표시 함수\n  const showCopyToast = (message: string) => {\n    setToastMessage(message);\n    setShowToast(true);\n    setTimeout(() => setShowToast(false), 3000);\n  };\n\n  // 텍스트 복사 유틸리티 함수\n  const copyToClipboard = async (text: string, successMessage: string) => {\n    try {\n      await navigator.clipboard.writeText(text);\n      showCopyToast(successMessage);\n    } catch (error) {\n      console.error('복사 실패:', error);\n      showCopyToast('복사 실패');\n    }\n  };\n\n  // 메시지 복사 기능\n  const handleCopyMessage = async (messageContent: string) => {\n    await copyToClipboard(messageContent, '메시지가 복사되었습니다');\n  };\n\n  // 메시지 수정 관련 함수들\n  const handleStartEdit = (messageIndex: number) => {\n    setEditingMessageIndex(messageIndex);\n  };\n\n  const handleEditMessage = async (messageIndex: number, newContent: string) => {\n    // 메시지 수정 기능 구현 예정\n    setEditingMessageIndex(null);\n    showCopyToast('메시지가 수정되었습니다');\n    return true;\n  };\n\n  const handleCancelEdit = () => {\n    setEditingMessageIndex(null);\n  };\n\n  // 문장 선택 관련 함수들\n  const handleToggleSelect = (sentenceId: string) => {\n    setSelectedSentences(prev => {\n      const newSet = new Set(prev);\n      if (newSet.has(sentenceId)) {\n        newSet.delete(sentenceId);\n      } else {\n        newSet.add(sentenceId);\n      }\n      return newSet;\n    });\n  };\n\n  const handleMemoChange = async (sentenceId: string, memo: string) => {\n    setMemos(prev => ({ ...prev, [sentenceId]: memo }));\n  };\n\n  const handleDeleteMemo = async (sentenceId: string) => {\n    setMemos(prev => {\n      const newMemos = { ...prev };\n      delete newMemos[sentenceId];\n      return newMemos;\n    });\n  };\n\n  // 액션 핸들러들\n  const handleSunAction = async () => {\n    if (onGenerateNewInterpretation) {\n      onGenerateNewInterpretation();\n    }\n  };\n\n  const handlePersonAction = async () => {\n    // 나아가기 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n    if (!personaId) return;\n    \n    const proceedPrompt = \"좋아. 너의 답변에 근거하여, 내가 나아가야 할 방향은?\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(proceedPrompt);\n    }\n    \n    showCopyToast('나아가기 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n          .reverse()\n          .find(msg => msg.role === 'assistant');\n        \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 나아가기 사이드바에 저장\n      const response = await chatApi.saveCurrentAsProceed(personaId, contentToSave);\n      \n      if (response.data) {\n        // 스레드 새로고침 (나아가기 모드로 전환하지 않고 백그라운드에서만 저장)\n        if (onThreadUpdate) {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              onThreadUpdate(threadsResponse.data);\n            }\n          } catch (error) {\n            console.error('스레드 새로고침 실패:', error);\n          }\n        }\n        showCopyToast('현재 Assistant 응답이 나아가기에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('나아가기 저장 중 오류:', error);\n      showCopyToast('나아가기 저장에 실패했습니다');\n    }\n  };\n\n  const handleDocumentAction = async () => {\n    // 문장 프롬프트를 입력창에 삽입하고 현재 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n    if (!personaId) return;\n    \n    const sentencePrompt = \"네 답변을 세 문장으로 통찰적, 명제형, 핵심적으로 짧게 요약 (in bullet style)\";\n    \n    // 입력창에 프롬프트 삽입\n    if (messageInputRef.current) {\n      messageInputRef.current.insertText(sentencePrompt);\n    }\n    \n    showCopyToast('문장 프롬프트가 입력창에 추가되었습니다');\n    \n    try {\n      // 현재 Assistant의 마지막 채팅 내용만 사용\n      let contentToSave = sentenceContent; // 기본값: 문장 내용\n      \n      if (selectedThread?.messages && selectedThread.messages.length > 0) {\n        // Assistant의 마지막 메시지 찾기\n        const lastAssistantMessage = selectedThread.messages\n          .slice()\n        .reverse()\n        .find(msg => msg.role === 'assistant');\n      \n        if (lastAssistantMessage) {\n          contentToSave = lastAssistantMessage.content;\n        }\n      }\n      \n      // chatApi를 통해 Assistant의 마지막 채팅 내용을 문장 사이드바에 저장\n      const response = await chatApi.saveCurrentAsSentence(personaId, contentToSave);\n\n      if (response.data) {\n        // 스레드 새로고침\n        handleRefreshThreads();\n        showCopyToast('현재 Assistant 응답이 문장에 저장되었습니다');\n      }\n    } catch (error) {\n      console.error('문장 저장 중 오류:', error);\n      showCopyToast('문장 저장에 실패했습니다');\n    }\n  };\n          \n  // 스레드 새로고침 함수\n  const handleRefreshThreads = async () => {\n          try {\n            const threadsResponse = await chatApi.getPersonaThreads(personaId);\n            if (threadsResponse.data) {\n              const updatedThreads = threadsResponse.data;\n              setLocalThreads(updatedThreads);\n              onThreadUpdate(updatedThreads);\n              \n              // 새로 생성된 문장 스레드 선택\n              const newSentenceThread = updatedThreads\n                .filter(t => t.thread_type === 'sentence')\n                .sort((a, b) => new Date(b.created_at).getTime() - new Date(a.created_at).getTime())[0];\n              \n        if (newSentenceThread && (!selectedThread || newSentenceThread.id !== selectedThread.id)) {\n                setSelectedThread(newSentenceThread);\n          showCopyToast('새로운 문장이 생성되었습니다');\n        }\n      }\n    } catch (error) {\n      console.error('스레드 새로고침 실패:', error);\n    }\n  };\n\n  // FloatingActionButton 메뉴 액션 처리\n  const handleMenuAction = async (action: 'sendToInput' | 'saveToVault' | 'addMemo' | 'highlight' | 'copy' | 'generateProceed' | 'generateSentence') => {\n    showCopyToast(`${action} 기능이 실행되었습니다`);\n  };\n\n  // 문장선택 모드 토글\n  const handleToggleSentenceMode = () => {\n    setIsSentenceModeActive(prev => !prev);\n  };\n\n  return (\n    <Container>\n      <Toast show={showToast}>\n        {toastMessage}\n      </Toast>\n      \n      <ChatSection>\n        <ChatMessages ref={chatMessagesRef}>\n          {!selectedThread || selectedThread.messages.length === 0 ? (\n            <EmptyChat>\n              <div style={{ fontSize: '24px', marginBottom: '8px' }}>📝</div>\n              <div>문장에 대해 더 자세히 질문해보세요</div>\n              <div style={{ fontSize: '12px', marginTop: '4px' }}>\n                {personaName}와 대화를 나눌 수 있습니다\n              </div>\n            </EmptyChat>\n          ) : (\n            selectedThread.messages.map((message, index) => \n              message.role === 'user' ? (\n                <Message\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: undefined,\n                    persona_name: undefined,\n                  }}\n                  personas={{}}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onEdit={() => handleStartEdit(index)}\n                  isEditing={editingMessageIndex === index}\n                  onEditSave={(newContent) => handleEditMessage(index, newContent)}\n                  onEditCancel={handleCancelEdit}\n                />\n              ) : (\n                <SelectableMessage\n                  key={`sentence_${index}`}\n                  message={{\n                    ...message,\n                    persona_id: 'current_persona',\n                    persona_name: personaName,\n                  }}\n                  personas={{\n                    current_persona: {\n                      name: personaName,\n                      description: '',\n                      color: '#4caf50',\n                      prompt: '',\n                      category: '',\n                      subcategory: ''\n                    }\n                  }}\n                  selectedSentences={isSentenceModeActive ? selectedSentences : new Set()}\n                  highlightedSentences={highlightedSentences}\n                  memos={memos}\n                  onToggleSelect={isSentenceModeActive ? handleToggleSelect : () => {}}\n                  onMemoChange={handleMemoChange}\n                  onDeleteMemo={handleDeleteMemo}\n                  showSentenceSelector={isSentenceModeActive}\n                  showActionButtons={true}\n                  onCopy={() => handleCopyMessage(message.content)}\n                  onSunAction={handleSunAction}\n                  onPersonAction={handlePersonAction}\n                  onDocumentAction={handleDocumentAction}\n                />\n              )\n            )\n          )}\n          \n          {isLoading && (\n            <LoadingMessage \n              personaName={personaName}\n              personaColor=\"#4caf50\"\n              customMessage=\"응답 생성중...\"\n            />\n          )}\n        </ChatMessages>\n\n        <ChatInputSection>\n          <MessageInput\n            ref={messageInputRef}\n            onSendMessage={handleSendMessage}\n            disabled={isLoading}\n            placeholder={`${personaName}에게 문장에 대해 질문해보세요...`}\n            onToggleSentenceMode={handleToggleSentenceMode}\n            isSentenceModeActive={isSentenceModeActive}\n            hasSelectedSentences={selectedSentences.size > 0}\n            currentInterpretation={selectedThread?.content || sentenceContent}\n            personaId={personaId}\n            onGenerateProceed={handlePersonAction}\n            onGenerateSentence={handleDocumentAction}\n            currentChatMessages={selectedThread?.messages}\n            onRefreshThreads={handleRefreshThreads}\n          />\n        </ChatInputSection>\n      </ChatSection>\n      \n      <FloatingActionButton\n        show={isSentenceModeActive && selectedSentences.size > 0}\n        onMenuAction={handleMenuAction}\n        personaId={personaId}\n        currentInterpretation={sentenceContent}\n      />\n    </Container>\n  );\n};\n\nexport default SentenceView; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}